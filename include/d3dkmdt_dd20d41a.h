   #error This header should not be included directly!
#include <d3dukmdt.h>
#pragma warning(push)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
DECLARE_HANDLE(D3DKMDT_HVIDPN);
DECLARE_HANDLE(D3DKMDT_HVIDEOPRESENTSOURCESET);
DECLARE_HANDLE(D3DKMDT_HVIDEOPRESENTTARGETSET);
DECLARE_HANDLE(D3DKMDT_HVIDPNTOPOLOGY);
DECLARE_HANDLE(D3DKMDT_HVIDPNSOURCEMODESET);
DECLARE_HANDLE(D3DKMDT_HVIDPNTARGETMODESET);
DECLARE_HANDLE(D3DKMDT_HMONITORSOURCEMODESET);
DECLARE_HANDLE(D3DKMDT_HMONITORFREQUENCYRANGESET);
DECLARE_HANDLE(D3DKMDT_HMONITORDESCRIPTORSET);
typedef VOID* D3DKMDT_ADAPTER;
typedef enum _D3DKMDT_VIDEO_SIGNAL_STANDARD
{
    D3DKMDT_VSS_UNINITIALIZED = 0,
    D3DKMDT_VSS_VESA_DMT = 1,
    D3DKMDT_VSS_VESA_GTF = 2,
    D3DKMDT_VSS_VESA_CVT = 3,
    D3DKMDT_VSS_IBM = 4,
    D3DKMDT_VSS_APPLE = 5,
    D3DKMDT_VSS_NTSC_M = 6,
    D3DKMDT_VSS_NTSC_J = 7,
    D3DKMDT_VSS_NTSC_443 = 8,
    D3DKMDT_VSS_PAL_B = 9,
    D3DKMDT_VSS_PAL_B1 = 10,
    D3DKMDT_VSS_PAL_G = 11,
    D3DKMDT_VSS_PAL_H = 12,
    D3DKMDT_VSS_PAL_I = 13,
    D3DKMDT_VSS_PAL_D = 14,
    D3DKMDT_VSS_PAL_N = 15,
    D3DKMDT_VSS_PAL_NC = 16,
    D3DKMDT_VSS_SECAM_B = 17,
    D3DKMDT_VSS_SECAM_D = 18,
    D3DKMDT_VSS_SECAM_G = 19,
    D3DKMDT_VSS_SECAM_H = 20,
    D3DKMDT_VSS_SECAM_K = 21,
    D3DKMDT_VSS_SECAM_K1 = 22,
    D3DKMDT_VSS_SECAM_L = 23,
    D3DKMDT_VSS_SECAM_L1 = 24,
    D3DKMDT_VSS_EIA_861 = 25,
    D3DKMDT_VSS_EIA_861A = 26,
    D3DKMDT_VSS_EIA_861B = 27,
    D3DKMDT_VSS_PAL_K = 28,
    D3DKMDT_VSS_PAL_K1 = 29,
    D3DKMDT_VSS_PAL_L = 30,
    D3DKMDT_VSS_PAL_M = 31,
    D3DKMDT_VSS_OTHER = 255
}
D3DKMDT_VIDEO_SIGNAL_STANDARD;
typedef struct _D3DKMDT_VIDEO_PRESENT_SOURCE
{
    D3DDDI_VIDEO_PRESENT_SOURCE_ID Id;
    DWORD dwReserved;
}
D3DKMDT_VIDEO_PRESENT_SOURCE;
typedef enum _D3DKMDT_VIDPN_SOURCE_MODE_TYPE
{
    D3DKMDT_RMT_UNINITIALIZED = 0,
    D3DKMDT_RMT_GRAPHICS = 1,
    D3DKMDT_RMT_TEXT = 2,
    D3DKMDT_RMT_GRAPHICS_STEREO = 3,
    D3DKMDT_RMT_GRAPHICS_STEREO_ADVANCED_SCAN = 4
}
D3DKMDT_VIDPN_SOURCE_MODE_TYPE;
typedef enum _D3DKMDT_PIXEL_VALUE_ACCESS_MODE
{
    D3DKMDT_PVAM_UNINITIALIZED = 0,
    D3DKMDT_PVAM_DIRECT = 1,
    D3DKMDT_PVAM_PRESETPALETTE = 2,
    D3DKMDT_PVAM_SETTABLEPALETTE = 3,
}
D3DKMDT_PIXEL_VALUE_ACCESS_MODE;
typedef enum _D3DKMDT_COLOR_BASIS
{
    D3DKMDT_CB_UNINITIALIZED = 0,
    D3DKMDT_CB_INTENSITY = 1,
    D3DKMDT_CB_SRGB = 2,
    D3DKMDT_CB_SCRGB = 3,
    D3DKMDT_CB_YCBCR = 4,
    D3DKMDT_CB_YPBPR = 5,
}
D3DKMDT_COLOR_BASIS;
typedef struct _D3DKMDT_COLOR_COEFF_DYNAMIC_RANGES
{
    UINT FirstChannel;
    UINT SecondChannel;
    UINT ThirdChannel;
    UINT FourthChannel;
}
D3DKMDT_COLOR_COEFF_DYNAMIC_RANGES;
typedef struct _D3DKMDT_2DREGION
{
    UINT cx;
    UINT cy;
}
D3DKMDT_2DREGION;
typedef D3DKMDT_2DREGION D3DKMDT_2DOFFSET;
typedef struct _D3DKMDT_GRAPHICS_RENDERING_FORMAT
{
    D3DKMDT_2DREGION PrimSurfSize;
    D3DKMDT_2DREGION VisibleRegionSize;
    DWORD Stride;
    D3DDDIFORMAT PixelFormat;
    D3DKMDT_COLOR_BASIS ColorBasis;
    D3DKMDT_PIXEL_VALUE_ACCESS_MODE PixelValueAccessMode;
}
D3DKMDT_GRAPHICS_RENDERING_FORMAT;
typedef enum _D3DKMDT_TEXT_RENDERING_FORMAT
{
    D3DKMDT_TRF_UNINITIALIZED = 0
}
D3DKMDT_TEXT_RENDERING_FORMAT;
typedef UINT D3DKMDT_VIDEO_PRESENT_SOURCE_MODE_ID;
typedef struct _D3DKMDT_VIDPN_SOURCE_MODE
{
    D3DKMDT_VIDEO_PRESENT_SOURCE_MODE_ID Id;
    D3DKMDT_VIDPN_SOURCE_MODE_TYPE Type;
    union
    {
        D3DKMDT_GRAPHICS_RENDERING_FORMAT Graphics;
        D3DKMDT_TEXT_RENDERING_FORMAT Text;
    }
    Format;
}
D3DKMDT_VIDPN_SOURCE_MODE;
typedef enum _DXGK_CHILD_DEVICE_HPD_AWARENESS {
    HpdAwarenessUninitialized = 0,
    HpdAwarenessAlwaysConnected = 1,
    HpdAwarenessNone = 2,
    HpdAwarenessPolled = 3,
    HpdAwarenessInterruptible = 4
} DXGK_CHILD_DEVICE_HPD_AWARENESS, *PDXGK_CHILD_DEVICE_HPD_AWARENESS;
typedef enum _D3DKMDT_MONITOR_ORIENTATION
{
    D3DKMDT_MO_UNINITIALIZED = 0,
    D3DKMDT_MO_0DEG = 1,
    D3DKMDT_MO_90DEG = 2,
    D3DKMDT_MO_180DEG = 3,
    D3DKMDT_MO_270DEG = 4
}
D3DKMDT_MONITOR_ORIENTATION;
typedef enum _D3DKMDT_VIDEO_OUTPUT_TECHNOLOGY
{
    D3DKMDT_VOT_UNINITIALIZED = -2,
    D3DKMDT_VOT_OTHER = -1,
    D3DKMDT_VOT_HD15 = 0,
    D3DKMDT_VOT_SVIDEO = 1,
    D3DKMDT_VOT_COMPOSITE_VIDEO = 2,
    D3DKMDT_VOT_COMPONENT_VIDEO = 3,
    D3DKMDT_VOT_DVI = 4,
    D3DKMDT_VOT_HDMI = 5,
    D3DKMDT_VOT_LVDS = 6,
    D3DKMDT_VOT_D_JPN = 8,
    D3DKMDT_VOT_SDI = 9,
    D3DKMDT_VOT_DISPLAYPORT_EXTERNAL = 10,
    D3DKMDT_VOT_DISPLAYPORT_EMBEDDED = 11,
    D3DKMDT_VOT_UDI_EXTERNAL = 12,
    D3DKMDT_VOT_UDI_EMBEDDED = 13,
    D3DKMDT_VOT_SDTVDONGLE = 14,
    D3DKMDT_VOT_MIRACAST = 15,
    D3DKMDT_VOT_INDIRECT_WIRED = 16,
    D3DKMDT_VOT_INTERNAL = 0x80000000,
    D3DKMDT_VOT_SVIDEO_4PIN = D3DKMDT_VOT_SVIDEO,
    D3DKMDT_VOT_SVIDEO_7PIN = D3DKMDT_VOT_SVIDEO,
    D3DKMDT_VOT_RF = D3DKMDT_VOT_COMPOSITE_VIDEO,
    D3DKMDT_VOT_RCA_3COMPONENT = D3DKMDT_VOT_COMPONENT_VIDEO,
    D3DKMDT_VOT_BNC = D3DKMDT_VOT_COMPONENT_VIDEO,
}
D3DKMDT_VIDEO_OUTPUT_TECHNOLOGY;
typedef enum _DXGKMDT_OPM_CONNECTOR_TYPE
{
    DXGKMDT_OPM_CONNECTOR_TYPE_OTHER = -1,
    DXGKMDT_OPM_CONNECTOR_TYPE_HD15 = 0,
    DXGKMDT_OPM_CONNECTOR_TYPE_SVIDEO = 1,
    DXGKMDT_OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO = 2,
    DXGKMDT_OPM_CONNECTOR_TYPE_COMPONENT_VIDEO = 3,
    DXGKMDT_OPM_CONNECTOR_TYPE_DVI = 4,
    DXGKMDT_OPM_CONNECTOR_TYPE_HDMI = 5,
    DXGKMDT_OPM_CONNECTOR_TYPE_LVDS = 6,
    DXGKMDT_OPM_CONNECTOR_TYPE_D_JPN = 8,
    DXGKMDT_OPM_CONNECTOR_TYPE_SDI = 9,
    DXGKMDT_OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL = 10,
    DXGKMDT_OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED = 11,
    DXGKMDT_OPM_CONNECTOR_TYPE_UDI_EXTERNAL = 12,
    DXGKMDT_OPM_CONNECTOR_TYPE_UDI_EMBEDDED = 13,
    DXGKMDT_OPM_CONNECTOR_TYPE_RESERVED = 14,
    DXGKMDT_OPM_CONNECTOR_TYPE_MIRACAST = 15,
    DXGKMDT_OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = 16,
    DXGKMDT_OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = 17,
    DXGKMDT_OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL = 0x80000000
} DXGKMDT_OPM_CONNECTOR_TYPE;
typedef enum _D3DKMDT_MONITOR_ORIENTATION_AWARENESS
{
    D3DKMDT_MOA_UNINITIALIZED = 0,
    D3DKMDT_MOA_NONE = 1,
    D3DKMDT_MOA_POLLED = 2,
    D3DKMDT_MOA_INTERRUPTIBLE = 3
}
D3DKMDT_MONITOR_ORIENTATION_AWARENESS;
typedef struct _D3DKMDT_VIDEO_PRESENT_TARGET
{
    D3DDDI_VIDEO_PRESENT_TARGET_ID Id;
    D3DKMDT_VIDEO_OUTPUT_TECHNOLOGY VideoOutputTechnology;
    DXGK_CHILD_DEVICE_HPD_AWARENESS VideoOutputHpdAwareness;
    D3DKMDT_MONITOR_ORIENTATION_AWARENESS MonitorOrientationAwareness;
    BOOLEAN SupportsSdtvModes;
}
D3DKMDT_VIDEO_PRESENT_TARGET;
typedef enum _D3DKMDT_GTFCOMPLIANCE
{
    D3DKMDT_GTF_UNINITIALIZED = 0,
    D3DKMDT_GTF_COMPLIANT = 1,
    D3DKMDT_GTF_NOTCOMPLIANT = 2
}
D3DKMDT_GTFCOMPLIANCE;
typedef enum _D3DKMDT_MODE_PREFERENCE
{
    D3DKMDT_MP_UNINITIALIZED = 0,
    D3DKMDT_MP_PREFERRED = 1,
    D3DKMDT_MP_NOTPREFERRED = 2,
}
D3DKMDT_MODE_PREFERENCE;
typedef struct _D3DKMDT_VIDEO_SIGNAL_INFO
{
    D3DKMDT_VIDEO_SIGNAL_STANDARD VideoStandard;
    D3DKMDT_2DREGION TotalSize;
    D3DKMDT_2DREGION ActiveSize;
    D3DDDI_RATIONAL VSyncFreq;
    D3DDDI_RATIONAL HSyncFreq;
    SIZE_T PixelRate;
    union
    {
        struct
        {
            D3DDDI_VIDEO_SIGNAL_SCANLINE_ORDERING ScanLineOrdering : 3;
            UINT VSyncFreqDivider : 6;
            UINT Reserved : 23;
        } AdditionalSignalInfo;
        D3DDDI_VIDEO_SIGNAL_SCANLINE_ORDERING ScanLineOrdering;
    };
}
D3DKMDT_VIDEO_SIGNAL_INFO;
typedef UINT D3DKMDT_VIDEO_PRESENT_TARGET_MODE_ID;
typedef union _D3DKMDT_WIRE_FORMAT_AND_PREFERENCE
{
    struct
    {
        D3DKMDT_MODE_PREFERENCE Preference : 2;
        UINT Rgb : 6;
        UINT YCbCr444 : 6;
        UINT YCbCr422 : 6;
        UINT YCbCr420 : 6;
        UINT Intensity : 6;
    };
    UINT Value;
} D3DKMDT_WIRE_FORMAT_AND_PREFERENCE, *PD3DKMDT_WIRE_FORMAT_AND_PREFERENCE;
typedef struct _D3DKMDT_VIDPN_TARGET_MODE
{
    D3DKMDT_VIDEO_PRESENT_TARGET_MODE_ID Id;
    D3DKMDT_VIDEO_SIGNAL_INFO VideoSignalInfo;
    union
    {
        D3DKMDT_WIRE_FORMAT_AND_PREFERENCE WireFormatAndPreference;
        struct
        {
            D3DKMDT_MODE_PREFERENCE Preference : 2;
            UINT :30;
        };
    };
}
D3DKMDT_VIDPN_TARGET_MODE;
#pragma pack(push, 1)
enum _DISPLAYID_DETAILED_TIMING_TYPE_I_ASPECT_RATIO
{
    DIDDT1_AspectRatio_1x1 = 0,
    DIDDT1_AspectRatio_5x4 = 1,
    DIDDT1_AspectRatio_4x3 = 2,
    DIDDT1_AspectRatio_15x9 = 3,
    DIDDT1_AspectRatio_16x9 = 4,
    DIDDT1_AspectRatio_16x10 = 5,
};
enum _DISPLAYID_DETAILED_TIMING_TYPE_I_SCANNING_MODE
{
    DIDDT1_Progressive = 0,
    DIDDT1_Interlaced = 1,
};
enum _DISPLAYID_DETAILED_TIMING_TYPE_I_STEREO_MODE
{
    DIDDT1_Monoscopic = 0,
    DIDDT1_Stereo = 1,
    DIDDT1_Dependent = 2,
};
enum _DISPLAYID_DETAILED_TIMING_TYPE_I_SYNC_POLARITY
{
    DIDDT1_Sync_Positive = 0,
    DIDDT1_Sync_Negative = 1,
};
typedef struct _DISPLAYID_DETAILED_TIMING_TYPE_I
{
    struct
    {
        ULONG PixelClock : 24;
        ULONG AspectRatio : 3;
        ULONG Reserved : 1;
        ULONG ScanningType : 1;
        ULONG StereoMode : 2;
        ULONG PreferredTiming : 1;
    };
    USHORT HorizontalActivePixels;
    USHORT HorizontalBlankPixels;
    struct
    {
        USHORT HorizontalFrontPorch : 15;
        USHORT HorizontalSyncPolarity : 1;
    };
    USHORT HorizontalSyncWidth;
    USHORT VerticalActiveLines;
    USHORT VerticalBlankLines;
    struct
    {
        USHORT VerticalFrontPorch : 15;
        USHORT VerticalSyncPolarity : 1;
    };
    USHORT VerticalSyncWidth;
}DISPLAYID_DETAILED_TIMING_TYPE_I;
C_ASSERT(sizeof(DISPLAYID_DETAILED_TIMING_TYPE_I) == DISPLAYID_DETAILED_TIMING_TYPE_I_SIZE);
#pragma pack(pop)
typedef struct _DXGK_TARGETMODE_DETAIL_TIMING
{
    D3DKMDT_VIDEO_SIGNAL_STANDARD VideoStandard;
    UINT TimingId;
    DISPLAYID_DETAILED_TIMING_TYPE_I DetailTiming;
}DXGK_TARGETMODE_DETAIL_TIMING;
typedef struct _D3DKMDT_VIDPN_HW_CAPABILITY
{
    UINT DriverRotation : 1;
    UINT DriverScaling : 1;
    UINT DriverCloning : 1;
    UINT DriverColorConvert : 1;
    UINT DriverLinkedAdapaterOutput : 1;
    UINT DriverRemoteDisplay : 1;
    UINT Reserved : 26;
}
D3DKMDT_VIDPN_HW_CAPABILITY;
typedef UINT D3DKMDT_MONITOR_SOURCE_MODE_ID;
typedef enum _D3DKMDT_MONITOR_CAPABILITIES_ORIGIN
{
    D3DKMDT_MCO_UNINITIALIZED = 0,
    D3DKMDT_MCO_DEFAULTMONITORPROFILE = 1,
    D3DKMDT_MCO_MONITORDESCRIPTOR = 2,
    D3DKMDT_MCO_MONITORDESCRIPTOR_REGISTRYOVERRIDE = 3,
    D3DKMDT_MCO_SPECIFICCAP_REGISTRYOVERRIDE = 4,
    D3DKMDT_MCO_DRIVER = 5,
}
D3DKMDT_MONITOR_CAPABILITIES_ORIGIN;
typedef enum _D3DKMDT_MONITOR_TIMING_TYPE
{
    D3DKMDT_MTT_UNINITIALIZED = 0,
    D3DKMDT_MTT_ESTABLISHED = 1,
    D3DKMDT_MTT_STANDARD = 2,
    D3DKMDT_MTT_EXTRASTANDARD = 3,
    D3DKMDT_MTT_DETAILED = 4,
    D3DKMDT_MTT_DEFAULTMONITORPROFILE = 5,
    D3DKMDT_MTT_DRIVER = 6,
}
D3DKMDT_MONITOR_TIMING_TYPE;
typedef struct _D3DKMDT_MONITOR_SOURCE_MODE
{
    D3DKMDT_MONITOR_SOURCE_MODE_ID Id;
    D3DKMDT_VIDEO_SIGNAL_INFO VideoSignalInfo;
    D3DKMDT_COLOR_BASIS ColorBasis;
    D3DKMDT_COLOR_COEFF_DYNAMIC_RANGES ColorCoeffDynamicRanges;
    D3DKMDT_MONITOR_CAPABILITIES_ORIGIN Origin;
    D3DKMDT_MODE_PREFERENCE Preference;
}
D3DKMDT_MONITOR_SOURCE_MODE;
typedef struct _D3DKMDT_FREQUENCY_RANGE
{
    D3DDDI_RATIONAL MinVSyncFreq;
    D3DDDI_RATIONAL MaxVSyncFreq;
    D3DDDI_RATIONAL MinHSyncFreq;
    D3DDDI_RATIONAL MaxHSyncFreq;
}
D3DKMDT_FREQUENCY_RANGE;
typedef enum _D3DKMDT_MONITOR_FREQUENCY_RANGE_CONSTRAINT
{
    D3DKMDT_MFRC_UNINITIALIZED = 0,
    D3DKMDT_MFRC_ACTIVESIZE = 1,
    D3DKMDT_MFRC_MAXPIXELRATE = 2
}
D3DKMDT_MONITOR_FREQUENCY_RANGE_CONSTRAINT;
typedef struct _D3DKMDT_MONITOR_FREQUENCY_RANGE
{
    D3DKMDT_MONITOR_CAPABILITIES_ORIGIN Origin;
    D3DKMDT_FREQUENCY_RANGE RangeLimits;
    D3DKMDT_MONITOR_FREQUENCY_RANGE_CONSTRAINT ConstraintType;
    union
    {
        D3DKMDT_2DREGION ActiveSize;
        SIZE_T MaxPixelRate;
    } Constraint;
}
D3DKMDT_MONITOR_FREQUENCY_RANGE;
typedef SIZE_T D3DKMDT_VIDPN_PRESENT_PATH_INDEX;
typedef enum _D3DKMDT_VIDPN_PRESENT_PATH_SCALING
{
    D3DKMDT_VPPS_UNINITIALIZED = 0,
    D3DKMDT_VPPS_IDENTITY = 1,
    D3DKMDT_VPPS_CENTERED = 2,
    D3DKMDT_VPPS_STRETCHED = 3,
    D3DKMDT_VPPS_ASPECTRATIOCENTEREDMAX = 4,
    D3DKMDT_VPPS_CUSTOM = 5,
    D3DKMDT_VPPS_RESERVED1 = 253,
    D3DKMDT_VPPS_UNPINNED = 254,
    D3DKMDT_VPPS_NOTSPECIFIED = 255
}
D3DKMDT_VIDPN_PRESENT_PATH_SCALING;
typedef enum _D3DKMDT_VIDPN_PRESENT_PATH_ROTATION
{
    D3DKMDT_VPPR_UNINITIALIZED = 0,
    D3DKMDT_VPPR_IDENTITY = 1,
    D3DKMDT_VPPR_ROTATE90 = 2,
    D3DKMDT_VPPR_ROTATE180 = 3,
    D3DKMDT_VPPR_ROTATE270 = 4,
    D3DKMDT_VPPR_IDENTITY_OFFSET90 = 5,
    D3DKMDT_VPPR_ROTATE90_OFFSET90 = 6,
    D3DKMDT_VPPR_ROTATE180_OFFSET90 = 7,
    D3DKMDT_VPPR_ROTATE270_OFFSET90 = 8,
    D3DKMDT_VPPR_IDENTITY_OFFSET180 = 9,
    D3DKMDT_VPPR_ROTATE90_OFFSET180 = 10,
    D3DKMDT_VPPR_ROTATE180_OFFSET180 = 11,
    D3DKMDT_VPPR_ROTATE270_OFFSET180 = 12,
    D3DKMDT_VPPR_IDENTITY_OFFSET270 = 13,
    D3DKMDT_VPPR_ROTATE90_OFFSET270 = 14,
    D3DKMDT_VPPR_ROTATE180_OFFSET270 = 15,
    D3DKMDT_VPPR_ROTATE270_OFFSET270 = 16,
    D3DKMDT_VPPR_UNPINNED = 254,
    D3DKMDT_VPPR_NOTSPECIFIED = 255
}
D3DKMDT_VIDPN_PRESENT_PATH_ROTATION;
__inline
D3DKMDT_VIDPN_PRESENT_PATH_ROTATION D3DKMDT_VPPR_GET_OFFSET_ROTATION(D3DKMDT_VIDPN_PRESENT_PATH_ROTATION Rotation)
{
    if ((Rotation >= D3DKMDT_VPPR_IDENTITY) &&
        (Rotation <= D3DKMDT_VPPR_ROTATE270_OFFSET270))
    {
        Rotation = (D3DKMDT_VIDPN_PRESENT_PATH_ROTATION)(((Rotation - 1) / 4) + 1);
    }
    return Rotation;
}
__inline
D3DKMDT_VIDPN_PRESENT_PATH_ROTATION D3DKMDT_VPPR_GET_CONTENT_ROTATION_PART(D3DKMDT_VIDPN_PRESENT_PATH_ROTATION Rotation)
{
    if ((Rotation >= D3DKMDT_VPPR_IDENTITY_OFFSET90) &&
        (Rotation <= D3DKMDT_VPPR_ROTATE270_OFFSET270))
    {
        Rotation = (D3DKMDT_VIDPN_PRESENT_PATH_ROTATION)(((Rotation - 1) % 4) + 1);
    }
    return Rotation;
}
__inline
D3DKMDT_VIDPN_PRESENT_PATH_ROTATION D3DKMDT_VPPR_GET_CONTENT_ROTATION(D3DKMDT_VIDPN_PRESENT_PATH_ROTATION Rotation)
{
    if ((Rotation >= D3DKMDT_VPPR_IDENTITY_OFFSET90) &&
        (Rotation <= D3DKMDT_VPPR_ROTATE270_OFFSET270))
    {
        D3DKMDT_VIDPN_PRESENT_PATH_ROTATION ContentPart = D3DKMDT_VPPR_GET_CONTENT_ROTATION_PART(Rotation);
        D3DKMDT_VIDPN_PRESENT_PATH_ROTATION OffsetPart = D3DKMDT_VPPR_GET_OFFSET_ROTATION(Rotation);
        Rotation = (D3DKMDT_VIDPN_PRESENT_PATH_ROTATION)((((ContentPart - 1) + (OffsetPart - 1)) % 4) + 1);
    }
    return Rotation;
}
typedef struct _D3DKMDT_VIDPN_PRESENT_PATH_SCALING_SUPPORT
{
    UINT Identity : 1;
    UINT Centered : 1;
    UINT Stretched : 1;
    UINT AspectRatioCenteredMax : 1;
    UINT Custom : 1;
} D3DKMDT_VIDPN_PRESENT_PATH_SCALING_SUPPORT;
typedef struct _D3DKMDT_VIDPN_PRESENT_PATH_ROTATION_SUPPORT
{
    UINT Identity : 1;
    UINT Rotate90 : 1;
    UINT Rotate180 : 1;
    UINT Rotate270 : 1;
    UINT Offset0 : 1;
    UINT Offset90 : 1;
    UINT Offset180 : 1;
    UINT Offset270 : 1;
} D3DKMDT_VIDPN_PRESENT_PATH_ROTATION_SUPPORT;
typedef struct _D3DKMDT_VIDPN_PRESENT_PATH_TRANSFORMATION
{
    D3DKMDT_VIDPN_PRESENT_PATH_SCALING Scaling;
    D3DKMDT_VIDPN_PRESENT_PATH_SCALING_SUPPORT ScalingSupport;
    D3DKMDT_VIDPN_PRESENT_PATH_ROTATION Rotation;
    D3DKMDT_VIDPN_PRESENT_PATH_ROTATION_SUPPORT RotationSupport;
} D3DKMDT_VIDPN_PRESENT_PATH_TRANSFORMATION;
typedef enum _D3DKMDT_VIDPN_PRESENT_PATH_IMPORTANCE
{
    D3DKMDT_VPPI_UNINITIALIZED = 0,
    D3DKMDT_VPPI_PRIMARY = 1,
    D3DKMDT_VPPI_SECONDARY = 2,
    D3DKMDT_VPPI_TERTIARY = 3,
    D3DKMDT_VPPI_QUATERNARY = 4,
    D3DKMDT_VPPI_QUINARY = 5,
    D3DKMDT_VPPI_SENARY = 6,
    D3DKMDT_VPPI_SEPTENARY = 7,
    D3DKMDT_VPPI_OCTONARY = 8,
    D3DKMDT_VPPI_NONARY = 9,
    D3DKMDT_VPPI_DENARY = 10,
}
D3DKMDT_VIDPN_PRESENT_PATH_IMPORTANCE;
typedef enum _D3DKMDT_VIDPN_PRESENT_PATH_CONTENT
{
    D3DKMDT_VPPC_UNINITIALIZED = 0,
    D3DKMDT_VPPC_GRAPHICS = 1,
    D3DKMDT_VPPC_VIDEO = 2,
    D3DKMDT_VPPC_NOTSPECIFIED = 255
}
D3DKMDT_VIDPN_PRESENT_PATH_CONTENT;
typedef enum _D3DKMDT_VIDPN_PRESENT_PATH_COPYPROTECTION_TYPE
{
    D3DKMDT_VPPMT_UNINITIALIZED = 0,
    D3DKMDT_VPPMT_NOPROTECTION = 1,
    D3DKMDT_VPPMT_MACROVISION_APSTRIGGER = 2,
    D3DKMDT_VPPMT_MACROVISION_FULLSUPPORT = 3,
}
D3DKMDT_VIDPN_PRESENT_PATH_COPYPROTECTION_TYPE;
typedef struct _D3DKMDT_VIDPN_PRESENT_PATH_COPYPROTECTION_SUPPORT
{
    UINT NoProtection : 1;
    UINT MacroVisionApsTrigger : 1;
    UINT MacroVisionFull : 1;
    UINT Reserved : 29;
}
D3DKMDT_VIDPN_PRESENT_PATH_COPYPROTECTION_SUPPORT;
typedef struct _D3DKMDT_VIDPN_PRESENT_PATH_COPYPROTECTION
{
    D3DKMDT_VIDPN_PRESENT_PATH_COPYPROTECTION_TYPE CopyProtectionType;
    UINT APSTriggerBits;
    BYTE OEMCopyProtection[D3DKMDT_MACROVISION_OEMCOPYPROTECTION_SIZE];
    D3DKMDT_VIDPN_PRESENT_PATH_COPYPROTECTION_SUPPORT CopyProtectionSupport;
} D3DKMDT_VIDPN_PRESENT_PATH_COPYPROTECTION;
typedef struct _D3DKMDT_GAMMA_RAMP
{
    D3DDDI_GAMMARAMP_TYPE Type;
    SIZE_T DataSize;
    union
    {
        D3DDDI_GAMMA_RAMP_RGB256x3x16* pRgb256x3x16;
        D3DDDI_GAMMA_RAMP_DXGI_1* pDxgi1;
        D3DKMDT_3x4_COLORSPACE_TRANSFORM* p3x4;
        D3DKMDT_COLORSPACE_TRANSFORM_MATRIX_V2* pMatrixV2;
        VOID* pRaw;
    }
    Data;
}
D3DKMDT_GAMMA_RAMP;
typedef struct _D3DKMDT_VIDPN_PRESENT_PATH
{
    D3DDDI_VIDEO_PRESENT_SOURCE_ID VidPnSourceId;
    D3DDDI_VIDEO_PRESENT_TARGET_ID VidPnTargetId;
    D3DKMDT_VIDPN_PRESENT_PATH_IMPORTANCE ImportanceOrdinal;
    D3DKMDT_VIDPN_PRESENT_PATH_TRANSFORMATION ContentTransformation;
    D3DKMDT_2DOFFSET VisibleFromActiveTLOffset;
    D3DKMDT_2DOFFSET VisibleFromActiveBROffset;
    D3DKMDT_COLOR_BASIS VidPnTargetColorBasis;
    D3DKMDT_COLOR_COEFF_DYNAMIC_RANGES VidPnTargetColorCoeffDynamicRanges;
    D3DKMDT_VIDPN_PRESENT_PATH_CONTENT Content;
    D3DKMDT_VIDPN_PRESENT_PATH_COPYPROTECTION CopyProtection;
    D3DKMDT_GAMMA_RAMP GammaRamp;
}
D3DKMDT_VIDPN_PRESENT_PATH;
typedef enum _D3DKMDT_MONITOR_CONNECTIVITY_CHECKS
{
    D3DKMDT_MCC_UNINITIALIZED = 0,
    D3DKMDT_MCC_IGNORE = 1,
    D3DKMDT_MCC_ENFORCE = 2
}
D3DKMDT_MONITOR_CONNECTIVITY_CHECKS;
typedef enum _D3DKMDT_ENUMCOFUNCMODALITY_PIVOT_TYPE
{
    D3DKMDT_EPT_UNINITIALIZED,
    D3DKMDT_EPT_VIDPNSOURCE,
    D3DKMDT_EPT_VIDPNTARGET,
    D3DKMDT_EPT_SCALING,
    D3DKMDT_EPT_ROTATION,
    D3DKMDT_EPT_NOPIVOT
}
D3DKMDT_ENUMCOFUNCMODALITY_PIVOT_TYPE;
typedef UINT D3DKMDT_MONITOR_DESCRIPTOR_ID;
typedef enum _D3DKMDT_MONITOR_DESCRIPTOR_TYPE
{
    D3DKMDT_MDT_UNINITIALIZED = 0,
    D3DKMDT_MDT_VESA_EDID_V1_BASEBLOCK = 1,
    D3DKMDT_MDT_VESA_EDID_V1_BLOCKMAP = 2,
    D3DKMDT_MDT_OTHER = 255
}
D3DKMDT_MONITOR_DESCRIPTOR_TYPE;
typedef struct _D3DKMDT_MONITOR_DESCRIPTOR
{
    D3DKMDT_MONITOR_DESCRIPTOR_ID Id;
    D3DKMDT_MONITOR_DESCRIPTOR_TYPE Type;
    SIZE_T DataSize;
    VOID* pData;
    D3DKMDT_MONITOR_CAPABILITIES_ORIGIN Origin;
}
D3DKMDT_MONITOR_DESCRIPTOR;
typedef enum _D3DKMDT_STANDARDALLOCATION_TYPE
{
    D3DKMDT_STANDARDALLOCATION_SHAREDPRIMARYSURFACE = 1,
    D3DKMDT_STANDARDALLOCATION_SHADOWSURFACE = 2,
    D3DKMDT_STANDARDALLOCATION_STAGINGSURFACE = 3,
    D3DKMDT_STANDARDALLOCATION_GDISURFACE = 4,
    D3DKMDT_STANDARDALLOCATION_VGPU = 5,
} D3DKMDT_STANDARDALLOCATION_TYPE;
typedef enum _D3DKMDT_GRAPHICS_PREEMPTION_GRANULARITY
{
    D3DKMDT_GRAPHICS_PREEMPTION_NONE = 0,
    D3DKMDT_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY = 100,
    D3DKMDT_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY = 200,
    D3DKMDT_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY = 300,
    D3DKMDT_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY = 400,
    D3DKMDT_GRAPHICS_PREEMPTION_SHADER_BOUNDARY = 500,
} D3DKMDT_GRAPHICS_PREEMPTION_GRANULARITY;
typedef enum _D3DKMDT_COMPUTE_PREEMPTION_GRANULARITY
{
    D3DKMDT_COMPUTE_PREEMPTION_NONE = 0,
    D3DKMDT_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY = 100,
    D3DKMDT_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY = 200,
    D3DKMDT_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY = 300,
    D3DKMDT_COMPUTE_PREEMPTION_THREAD_BOUNDARY = 400,
    D3DKMDT_COMPUTE_PREEMPTION_SHADER_BOUNDARY = 500,
} D3DKMDT_COMPUTE_PREEMPTION_GRANULARITY;
typedef struct _D3DKMDT_PREEMPTION_CAPS
{
    D3DKMDT_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity;
    D3DKMDT_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity;
} D3DKMDT_PREEMPTION_CAPS;
typedef struct _D3DKMT_WDDM_1_2_CAPS
{
    D3DKMDT_PREEMPTION_CAPS PreemptionCaps;
    union
    {
        struct
        {
            UINT SupportNonVGA : 1;
            UINT SupportSmoothRotation : 1;
            UINT SupportPerEngineTDR : 1;
            UINT SupportKernelModeCommandBuffer : 1;
            UINT SupportCCD : 1;
            UINT SupportSoftwareDeviceBitmaps : 1;
            UINT SupportGammaRamp : 1;
            UINT SupportHWCursor : 1;
            UINT SupportHWVSync : 1;
            UINT SupportSurpriseRemovalInHibernation : 1;
            UINT Reserved : 22;
        };
        UINT Value;
    };
} D3DKMT_WDDM_1_2_CAPS;
typedef struct _D3DKMDT_SHAREDPRIMARYSURFACEDATA
{
    UINT Width;
    UINT Height;
    D3DDDIFORMAT Format;
    D3DDDI_RATIONAL RefreshRate;
    D3DDDI_VIDEO_PRESENT_SOURCE_ID VidPnSourceId;
} D3DKMDT_SHAREDPRIMARYSURFACEDATA;
typedef struct _D3DKMDT_SHADOWSURFACEDATA
{
    UINT Width;
    UINT Height;
    D3DDDIFORMAT Format;
    UINT Pitch;
} D3DKMDT_SHADOWSURFACEDATA;
typedef struct _D3DKMDT_STAGINGSURFACEDATA
{
    UINT Width;
    UINT Height;
    UINT Pitch;
} D3DKMDT_STAGINGSURFACEDATA;
typedef struct _D3DKMDT_GDISURFACEFLAGS
{
    union
    {
        struct
        {
            UINT Reserved : 32;
        };
        UINT Value;
    };
} D3DKMDT_GDISURFACEFLAGS;
typedef enum _D3DKMDT_GDISURFACETYPE
{
    D3DKMDT_GDISURFACE_INVALID = 0,
    D3DKMDT_GDISURFACE_TEXTURE = 1,
    D3DKMDT_GDISURFACE_STAGING_CPUVISIBLE = 2,
    D3DKMDT_GDISURFACE_STAGING = 3,
    D3DKMDT_GDISURFACE_LOOKUPTABLE = 4,
    D3DKMDT_GDISURFACE_EXISTINGSYSMEM = 5,
    D3DKMDT_GDISURFACE_TEXTURE_CPUVISIBLE = 6,
    D3DKMDT_GDISURFACE_TEXTURE_CROSSADAPTER = 7,
    D3DKMDT_GDISURFACE_TEXTURE_CPUVISIBLE_CROSSADAPTER = 8,
} D3DKMDT_GDISURFACETYPE;
typedef struct _D3DKMDT_GDISURFACEDATA
{
    UINT Width;
    UINT Height;
    D3DDDIFORMAT Format;
    D3DKMDT_GDISURFACETYPE Type;
    D3DKMDT_GDISURFACEFLAGS Flags;
    UINT Pitch;
} D3DKMDT_GDISURFACEDATA;
typedef struct _D3DKMDT_VIRTUALGPUSURFACEDATA
{
    UINT64 Size;
    UINT Alignment;
    UINT DriverSegmentId;
    UINT PrivateDriverData;
} D3DKMDT_VIRTUALGPUSURFACEDATA;
typedef struct _D3DKMDT_PALETTEDATA
{
    BYTE Red;
    BYTE Green;
    BYTE Blue;
    BYTE Unused;
} D3DKMDT_PALETTEDATA;
typedef struct _DXGKARG_SETPALETTE
{
    D3DDDI_VIDEO_PRESENT_SOURCE_ID VidPnSourceId;
    UINT FirstEntry;
    UINT NumEntries;
    D3DKMDT_PALETTEDATA* pLookupTable;
} DXGKARG_SETPALETTE;
typedef struct _D3DKMT_MOVE_RECT
{
    POINT SourcePoint;
    RECT DestRect;
}D3DKMT_MOVE_RECT;
typedef LARGE_INTEGER PHYSICAL_ADDRESS;
typedef struct _DXGK_DISPLAY_INFORMATION
{
    UINT Width;
    UINT Height;
    UINT Pitch;
    D3DDDIFORMAT ColorFormat;
    PHYSICAL_ADDRESS PhysicAddress;
    D3DDDI_VIDEO_PRESENT_TARGET_ID TargetId;
    ULONG AcpiId;
} DXGK_DISPLAY_INFORMATION, *PDXGK_DISPLAY_INFORMATION;
#pragma pack( push, 1 )
DEFINE_GUID(DXGKMDT_OPM_GET_CURRENT_HDCP_SRM_VERSION, 0x99c5ceff, 0x5f1d, 0x4879, 0x81, 0xc1, 0xc5, 0x24, 0x43, 0xc9, 0x48, 0x2b);
DEFINE_GUID(DXGKMDT_OPM_GET_CONNECTED_HDCP_DEVICE_INFORMATION, 0x0db59d74, 0xa992, 0x492e, 0xa0, 0xbd, 0xc2, 0x3f, 0xda, 0x56, 0x4e, 0x00);
DEFINE_GUID(DXGKMDT_OPM_GET_CONNECTOR_TYPE, 0x81d0bfd5, 0x6afe, 0x48c2, 0x99, 0xc0, 0x95, 0xa0, 0x8f, 0x97, 0xc5, 0xda);
DEFINE_GUID(DXGKMDT_OPM_GET_SUPPORTED_PROTECTION_TYPES, 0x38f2a801, 0x9a6c, 0x48bb, 0x91, 0x07, 0xb6, 0x69, 0x6e, 0x6f, 0x17, 0x97);
DEFINE_GUID(DXGKMDT_OPM_GET_VIRTUAL_PROTECTION_LEVEL, 0xb2075857, 0x3eda, 0x4d5d, 0x88, 0xdb, 0x74, 0x8f, 0x8c, 0x1a, 0x05, 0x49);
DEFINE_GUID(DXGKMDT_OPM_GET_ACTUAL_PROTECTION_LEVEL, 0x1957210a, 0x7766, 0x452a, 0xb9, 0x9a, 0xd2, 0x7a, 0xed, 0x54, 0xf0, 0x3a);
DEFINE_GUID(DXGKMDT_OPM_GET_ACTUAL_OUTPUT_FORMAT, 0xd7bf1ba3, 0xad13, 0x4f8e, 0xaf, 0x98, 0x0d, 0xcb, 0x3c, 0xa2, 0x04, 0xcc);
DEFINE_GUID(DXGKMDT_OPM_GET_ADAPTER_BUS_TYPE, 0xc6f4d673, 0x6174, 0x4184, 0x8e, 0x35, 0xf6, 0xdb, 0x52, 0x0, 0xbc, 0xba);
DEFINE_GUID(DXGKMDT_OPM_GET_ACP_AND_CGMSA_SIGNALING, 0x6629a591, 0x3b79, 0x4cf3, 0x92, 0x4a, 0x11, 0xe8, 0xe7, 0x81, 0x16, 0x71);
DEFINE_GUID(DXGKMDT_OPM_GET_OUTPUT_ID, 0x72cb6df3, 0x244f, 0x40ce, 0xb0, 0x9e, 0x20, 0x50, 0x6a, 0xf6, 0x30, 0x2f);
DEFINE_GUID(DXGKMDT_OPM_GET_DVI_CHARACTERISTICS, 0xa470b3bb, 0x5dd7, 0x4172, 0x83, 0x9c, 0x3d, 0x37, 0x76, 0xe0, 0xeb, 0xf5);
DEFINE_GUID(DXGKMDT_OPM_GET_OUTPUT_HARDWARE_PROTECTION_SUPPORT, 0x3b129589, 0x2af8, 0x4ef0, 0x96, 0xa2, 0x70, 0x4a, 0x84, 0x5a, 0x21, 0x8e);
DEFINE_GUID(DXGKMDT_OPM_GET_CODEC_INFO, 0x4f374491, 0x8f5f, 0x4445, 0x9d, 0xba, 0x95, 0x58, 0x8f, 0x6b, 0x58, 0xb4);
DEFINE_GUID(DXGKMDT_OPM_SET_PROTECTION_LEVEL, 0x9bb9327c, 0x4eb5, 0x4727, 0x9f, 0x00, 0xb4, 0x2b, 0x09, 0x19, 0xc0, 0xda);
DEFINE_GUID(DXGKMDT_OPM_SET_ACP_AND_CGMSA_SIGNALING, 0x09a631a5, 0xd684, 0x4c60, 0x8e, 0x4d, 0xd3, 0xbb, 0x0f, 0x0b, 0xe3, 0xee);
DEFINE_GUID(DXGKMDT_OPM_SET_HDCP_SRM, 0x8b5ef5d1, 0xc30d, 0x44ff, 0x84, 0xa5, 0xea, 0x71, 0xdc, 0xe7, 0x8f, 0x13);
DEFINE_GUID(DXGKMDT_OPM_SET_PROTECTION_LEVEL_ACCORDING_TO_CSS_DVD, 0x39ce333e, 0x4cc0, 0x44ae, 0xbf, 0xcc, 0xda, 0x50, 0xb5, 0xf8, 0x2e, 0x72);
typedef enum _DXGKMDT_CERTIFICATE_TYPE
{
    DXGKMDT_OPM_CERTIFICATE = 0,
    DXGKMDT_COPP_CERTIFICATE = 1,
    DXGKMDT_UAB_CERTIFICATE = 2,
    DXGKMDT_INDIRECT_DISPLAY_CERTIFICATE = 3,
    DXGKMDT_FORCE_ULONG = 0xFFFFFFFF
} DXGKMDT_CERTIFICATE_TYPE;
typedef enum _DXGKMDT_OPM_VIDEO_OUTPUT_SEMANTICS
{
    DXGKMDT_OPM_VOS_COPP_SEMANTICS = 0,
    DXGKMDT_OPM_VOS_OPM_SEMANTICS = 1,
    DXGKMDT_OPM_VOS_OPM_INDIRECT_DISPLAY = 2
} DXGKMDT_OPM_VIDEO_OUTPUT_SEMANTICS;
typedef enum _DXGKMDT_DPCP_PROTECTION_LEVEL
{
    DXGKMDT_OPM_DPCP_OFF = 0,
    DXGKMDT_OPM_DPCP_ON = 1,
    DXGKMDT_OPM_DPCP_FORCE_ULONG = 0x7fffffff
} DXGKMDT_OPM_DPCP_PROTECTION_LEVEL;
typedef enum _DXGKMDT_OPM_HDCP_FLAG
{
    DXGKMDT_OPM_HDCP_FLAG_NONE = 0x00,
    DXGKMDT_OPM_HDCP_FLAG_REPEATER = 0x01
} DXGKMDT_OPM_HDCP_FLAG;
typedef enum _DXGKMDT_OPM_STATUS
{
    DXGKMDT_OPM_STATUS_NORMAL = 0x00,
    DXGKMDT_OPM_STATUS_LINK_LOST = 0x01,
    DXGKMDT_OPM_STATUS_RENEGOTIATION_REQUIRED = 0x02,
    DXGKMDT_OPM_STATUS_TAMPERING_DETECTED = 0x04,
    DXGKMDT_OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED = 0x08
} DXGKMDT_OPM_STATUS;
typedef enum _DXGKMDT_OPM_BUS_TYPE_AND_IMPLEMENTATION
{
    DXGKMDT_OPM_BUS_TYPE_OTHER = 0x00000000,
    DXGKMDT_OPM_BUS_TYPE_PCI = 0x00000001,
    DXGKMDT_OPM_BUS_TYPE_PCIX = 0x00000002,
    DXGKMDT_OPM_BUS_TYPE_PCIEXPRESS = 0x00000003,
    DXGKMDT_OPM_BUS_TYPE_AGP = 0x00000004,
    DXGKMDT_OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET = 0x00010000,
    DXGKMDT_OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 0x00020000,
    DXGKMDT_OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 0x00030000,
    DXGKMDT_OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 0x00040000,
    DXGKMDT_OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 0x00050000,
    DXGKMDT_OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD = 0x80000000,
    DXGKMDT_OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED = 0x80000000
} DXGKMDT_OPM_BUS_TYPE_AND_IMPLEMENTATION;
typedef enum _DXGKMDT_OPM_HDCP_PROTECTION_LEVEL
{
    DXGKMDT_OPM_HDCP_OFF = 0,
    DXGKMDT_OPM_HDCP_ON = 1,
    DXGKMDT_OPM_HDCP_FORCE_ULONG = 0x7fffffff
} DXGKMDT_OPM_HDCP_PROTECTION_LEVEL;
typedef enum _DXGKMDT_OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL
{
    DXGKMDT_OPM_TYPE_ENFORCEMENT_HDCP_OFF = DXGKMDT_OPM_HDCP_OFF,
    DXGKMDT_OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION = DXGKMDT_OPM_HDCP_ON,
    DXGKMDT_OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION = DXGKMDT_OPM_HDCP_ON + 1,
    DXGKMDT_OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG = 0x7fffffff
} DXGKMDT_OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL;
typedef enum _DXGKMDT_OPM_CGMSA
{
    DXGKMDT_OPM_CGMSA_OFF = 0,
    DXGKMDT_OPM_CGMSA_COPY_FREELY = 1,
    DXGKMDT_OPM_CGMSA_COPY_NO_MORE = 2,
    DXGKMDT_OPM_CGMSA_COPY_ONE_GENERATION = 3,
    DXGKMDT_OPM_CGMSA_COPY_NEVER = 4,
    DXGKMDT_OPM_REDISTRIBUTION_CONTROL_REQUIRED = 0x08,
} DXGKMDT_OPM_CGMSA;
typedef enum _DXGKMDT_OPM_ACP_PROTECTION_LEVEL
{
    DXGKMDT_OPM_ACP_OFF = 0,
    DXGKMDT_OPM_ACP_LEVEL_ONE = 1,
    DXGKMDT_OPM_ACP_LEVEL_TWO = 2,
    DXGKMDT_OPM_ACP_LEVEL_THREE = 3,
    DXGKMDT_OPM_ACP_FORCE_ULONG = 0x7fffffff
} DXGKMDT_OPM_ACP_PROTECTION_LEVEL;
typedef enum _DXGKMDT_OPM_PROTECTION_TYPE
{
    DXGKMDT_OPM_PROTECTION_TYPE_OTHER = 0x80000000,
    DXGKMDT_OPM_PROTECTION_TYPE_NONE = 0x00000000,
    DXGKMDT_OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP = 0x00000001,
    DXGKMDT_OPM_PROTECTION_TYPE_ACP = 0x00000002,
    DXGKMDT_OPM_PROTECTION_TYPE_CGMSA = 0x00000004,
    DXGKMDT_OPM_PROTECTION_TYPE_HDCP = 0x00000008,
    DXGKMDT_OPM_PROTECTION_TYPE_DPCP = 0x00000010,
    DXGKMDT_OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP = 0x00000020,
    DXGKMDT_OPM_PROTECTION_TYPE_MASK = 0x8000003F
} DXGKMDT_OPM_PROTECTION_TYPE;
typedef enum _DXGKMDT_OPM_PROTECTION_STANDARD
{
    DXGKMDT_OPM_PROTECTION_STANDARD_OTHER = 0x80000000,
    DXGKMDT_OPM_PROTECTION_STANDARD_NONE = 0x00000000,
    DXGKMDT_OPM_PROTECTION_STANDARD_IEC61880_525I = 0x00000001,
    DXGKMDT_OPM_PROTECTION_STANDARD_IEC61880_2_525I = 0x00000002,
    DXGKMDT_OPM_PROTECTION_STANDARD_IEC62375_625P = 0x00000004,
    DXGKMDT_OPM_PROTECTION_STANDARD_EIA608B_525 = 0x00000008,
    DXGKMDT_OPM_PROTECTION_STANDARD_EN300294_625I = 0x00000010,
    DXGKMDT_OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P = 0x00000020,
    DXGKMDT_OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P = 0x00000040,
    DXGKMDT_OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I = 0x00000080,
    DXGKMDT_OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P = 0x00000100,
    DXGKMDT_OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P = 0x00000200,
    DXGKMDT_OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I = 0x00000400,
    DXGKMDT_OPM_PROTECTION_STANDARD_ARIBTRB15_525I = 0x00000800,
    DXGKMDT_OPM_PROTECTION_STANDARD_ARIBTRB15_525P = 0x00001000,
    DXGKMDT_OPM_PROTECTION_STANDARD_ARIBTRB15_750P = 0x00002000,
    DXGKMDT_OPM_PROTECTION_STANDARD_ARIBTRB15_1125I = 0x00004000,
} DXGKMDT_OPM_PROTECTION_STANDARD;
typedef enum _DXGKMDT_OPM_IMAGE_ASPECT_RATIO_EN300294
{
    DXGKMDT_OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3 = 0,
    DXGKMDT_OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER = 1,
    DXGKMDT_OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP = 2,
    DXGKMDT_OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER = 3,
    DXGKMDT_OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP = 4,
    DXGKMDT_OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER = 5,
    DXGKMDT_OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER = 6,
    DXGKMDT_OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC = 7,
    DXGKMDT_OPM_ASPECT_RATIO_FORCE_ULONG = 0x7FFFFFFF
} DXGKMDT_OPM_IMAGE_ASPECT_RATIO_EN300294;
typedef enum _DXGKMDT_OPM_INTERLEAVE_FORMAT
{
    DXGKMDT_OPM_INTERLEAVE_FORMAT_OTHER = 0,
    DXGKMDT_OPM_INTERLEAVE_FORMAT_PROGRESSIVE = 2,
    DXGKMDT_OPM_INTERLEAVE_FORMAT_INTERLEAVED_EVEN_FIRST = 3,
    DXGKMDT_OPM_INTERLEAVE_FORMAT_INTERLEAVED_ODD_FIRST = 4,
    DXGKMDT_OPM_INTERLEAVE_FORMAT_FORCE_ULONG = 0xFFFFFFFF
} DXGKMDT_OPM_INTERLEAVE_FORMAT;
typedef enum _DXGKDT_OPM_DVI_CHARACTERISTICS
{
    DXGKMDT_OPM_DVI_CHARACTERISTIC_1_0 = 1,
    DXGKMDT_OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE = 2,
    DXGKMDT_OPM_DVI_CHARACTERISTICS_FORCE_ULONG = 0xFFFFFFFF
} DXGKDT_OPM_DVI_CHARACTERISTICS;
typedef enum _DXGKMDT_OPM_OUTPUT_HARDWARE_PROTECTION
{
    DXGKMDT_OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED = 0x0,
    DXGKMDT_OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED = 0x1
} DXGKMDT_OPM_OUTPUT_HARDWARE_PROTECTION;
typedef struct _DXGKMDT_OPM_RANDOM_NUMBER
{
    BYTE abRandomNumber[DXGKMDT_OPM_128_BIT_RANDOM_NUMBER_SIZE];
} DXGKMDT_OPM_RANDOM_NUMBER, *PDXGKMDT_OPM_RANDOM_NUMBER;
typedef struct _DXGKMDT_OPM_OMAC
{
    BYTE abOMAC[DXGKMDT_OPM_OMAC_SIZE];
} DXGKMDT_OPM_OMAC, *PDXGKMDT_OPM_OMAC;
typedef struct _DXGKMDT_OPM_ENCRYPTED_PARAMETERS
{
    BYTE abEncryptedParameters[DXGKMDT_OPM_ENCRYPTED_PARAMETERS_SIZE];
} DXGKMDT_OPM_ENCRYPTED_PARAMETERS, *PDXGKMDT_OPM_ENCRYPTED_PARAMETERS;
typedef struct _DXGKMDT_OPM_GET_INFO_PARAMETERS
{
    DXGKMDT_OPM_OMAC omac;
    DXGKMDT_OPM_RANDOM_NUMBER rnRandomNumber;
    GUID guidInformation;
    ULONG ulSequenceNumber;
    ULONG cbParametersSize;
    BYTE abParameters[DXGKMDT_OPM_GET_INFORMATION_PARAMETERS_SIZE];
} DXGKMDT_OPM_GET_INFO_PARAMETERS, *PDXGKMDT_OPM_GET_INFO_PARAMETERS;
typedef struct _DXGKMDT_OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS
{
    DXGKMDT_OPM_RANDOM_NUMBER rnRandomNumber;
    GUID guidInformation;
    ULONG ulSequenceNumber;
    ULONG cbParametersSize;
    BYTE abParameters[DXGKMDT_OPM_GET_INFORMATION_PARAMETERS_SIZE];
} DXGKMDT_OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS, *PDXGKMDT_OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS;
typedef struct _DXGKMDT_OPM_HDCP_KEY_SELECTION_VECTOR
{
    BYTE abKeySelectionVector[DXGKMDT_OPM_HDCP_KEY_SELECTION_VECTOR_SIZE];
} DXGKMDT_OPM_HDCP_KEY_SELECTION_VECTOR;
typedef struct _DXGKMDT_OPM_CONNECTED_HDCP_DEVICE_INFORMATION
{
    DXGKMDT_OPM_RANDOM_NUMBER rnRandomNumber;
    ULONG ulStatusFlags;
    ULONG ulHDCPFlags;
    DXGKMDT_OPM_HDCP_KEY_SELECTION_VECTOR ksvB;
    BYTE Reserved[11];
    BYTE Reserved2[16];
    BYTE Reserved3[16];
} DXGKMDT_OPM_CONNECTED_HDCP_DEVICE_INFORMATION;
typedef struct _DXGKMDT_OPM_REQUESTED_INFORMATION
{
    DXGKMDT_OPM_OMAC omac;
    ULONG cbRequestedInformationSize;
    BYTE abRequestedInformation[DXGKMDT_OPM_REQUESTED_INFORMATION_SIZE];
} DXGKMDT_OPM_REQUESTED_INFORMATION, *PDXGKMDT_OPM_REQUESTED_INFORMATION;
typedef struct _DXGKMDT_OPM_STANDARD_INFORMATION
{
    DXGKMDT_OPM_RANDOM_NUMBER rnRandomNumber;
    ULONG ulStatusFlags;
    ULONG ulInformation;
    ULONG ulReserved;
    ULONG ulReserved2;
} DXGKMDT_OPM_STANDARD_INFORMATION;
typedef struct _DXGKMDT_OPM_ACTUAL_OUTPUT_FORMAT
{
    DXGKMDT_OPM_RANDOM_NUMBER rnRandomNumber;
    ULONG ulStatusFlags;
    ULONG ulDisplayWidth;
    ULONG ulDisplayHeight;
    DXGKMDT_OPM_INTERLEAVE_FORMAT ifInterleaveFormat;
    ULONG d3dFormat;
    ULONG ulFrequencyNumerator;
    ULONG ulFrequencyDenominator;
} DXGKMDT_OPM_ACTUAL_OUTPUT_FORMAT;
typedef struct _DXGKMDT_OPM_ACP_AND_CGMSA_SIGNALING
{
    DXGKMDT_OPM_RANDOM_NUMBER rnRandomNumber;
    ULONG ulStatusFlags;
    ULONG ulAvailableTVProtectionStandards;
    ULONG ulActiveTVProtectionStandard;
    ULONG ulReserved;
    ULONG ulAspectRatioValidMask1;
    ULONG ulAspectRatioData1;
    ULONG ulAspectRatioValidMask2;
    ULONG ulAspectRatioData2;
    ULONG ulAspectRatioValidMask3;
    ULONG ulAspectRatioData3;
    ULONG ulReserved2[4];
    ULONG ulReserved3[4];
} DXGKMDT_OPM_ACP_AND_CGMSA_SIGNALING;
typedef struct _DXGKMDT_OPM_OUTPUT_ID
{
    DXGKMDT_OPM_RANDOM_NUMBER rnRandomNumber;
    ULONG ulStatusFlags;
    UINT64 OutputId;
} DXGKMDT_OPM_OUTPUT_ID;
typedef struct _DXGKMDT_OPM_CONFIGURE_PARAMETERS
{
    DXGKMDT_OPM_OMAC omac;
    GUID guidSetting;
    ULONG ulSequenceNumber;
    ULONG cbParametersSize;
    BYTE abParameters[DXGKMDT_OPM_CONFIGURE_SETTING_DATA_SIZE];
} DXGKMDT_OPM_CONFIGURE_PARAMETERS, *PDXGKMDT_OPM_CONFIGURE_PARAMETERS;
typedef struct _DXGKMDT_OPM_SET_PROTECTION_LEVEL_PARAMETERS
{
    ULONG ulProtectionType;
    ULONG ulProtectionLevel;
    ULONG Reserved;
    ULONG Reserved2;
} DXGKMDT_OPM_SET_PROTECTION_LEVEL_PARAMETERS;
typedef struct _DXGKMDT_OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS
{
    ULONG ulNewTVProtectionStandard;
    ULONG ulAspectRatioChangeMask1;
    ULONG ulAspectRatioData1;
    ULONG ulAspectRatioChangeMask2;
    ULONG ulAspectRatioData2;
    ULONG ulAspectRatioChangeMask3;
    ULONG ulAspectRatioData3;
    ULONG ulReserved[4];
    ULONG ulReserved2[4];
    ULONG ulReserved3;
} DXGKMDT_OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS;
typedef struct _DXGKMDT_OPM_SET_HDCP_SRM_PARAMETERS
{
    ULONG ulSRMVersion;
} DXGKMDT_OPM_SET_HDCP_SRM_PARAMETERS;
typedef struct _DXGKMDT_OPM_CREATE_VIDEO_OUTPUT_FOR_TARGET_PARAMETERS
{
 LUID AdapterLuid;
 D3DDDI_VIDEO_PRESENT_TARGET_ID TargetId;
 DXGKMDT_OPM_VIDEO_OUTPUT_SEMANTICS Vos;
} DXGKMDT_OPM_CREATE_VIDEO_OUTPUT_FOR_TARGET_PARAMETERS;
typedef struct _DXGK_BRIGHTNESS_CAPS
{
    union
    {
        struct
        {
            UINT SmoothBrightness : 1;
            UINT AdaptiveBrightness : 1;
            UINT NitsBrightness : 1;
            UINT Reserved : 29;
        };
        UINT Value;
    };
} DXGK_BRIGHTNESS_CAPS;
typedef struct _DXGK_BRIGHTNESS_STATE
{
    union
    {
        struct
        {
            UINT SmoothBrightness : 1;
            UINT Reserved : 31;
        };
        UINT Value;
    };
} DXGK_BRIGHTNESS_STATE;
typedef enum
{
    DxgkBacklightOptimizationDisable = 0,
    DxgkBacklightOptimizationDesktop = 1,
    DxgkBacklightOptimizationDynamic = 2,
    DxgkBacklightOptimizationDimmed = 3,
    DxgkBacklightOptimizationEDR = 4,
} DXGK_BACKLIGHT_OPTIMIZATION_LEVEL;
typedef struct _DXGK_BACKLIGHT_INFO
{
    OUT USHORT BacklightUsersetting;
    OUT USHORT BacklightEffective;
    OUT D3DDDI_GAMMA_RAMP_RGB256x3x16 GammaRamp;
} DXGK_BACKLIGHT_INFO;
typedef struct _DXGK_BRIGHTNESS_SENSOR_DATA_CHROMATICITY
{
    float ChromaticityX;
    float ChromaticityY;
} DXGK_BRIGHTNESS_SENSOR_DATA_CHROMATICITY;
typedef struct _DXGK_BRIGHTNESS_SENSOR_DATA
{
    UINT32 Size;
    union
    {
        struct
        {
            UINT AlsReadingValid : 1;
            UINT ChromaticityValid : 1;
            UINT ColorTemperatureValid : 1;
            UINT Reserved : 29;
        } Flags;
        UINT ValidSensorValues;
    };
    float AlsReading;
    DXGK_BRIGHTNESS_SENSOR_DATA_CHROMATICITY Chromaticity;
    float ColorTemperature;
} DXGK_BRIGHTNESS_SENSOR_DATA;
typedef struct _DXGK_BRIGHTNESS_SET_IN
{
    UINT32 BrightnessMillinits;
    UINT32 TransitionTimeMs;
    DXGK_BRIGHTNESS_SENSOR_DATA SensorReadings;
} DXGK_BRIGHTNESS_SET_IN, *PDXGK_BRIGHTNESS_SET_IN;
typedef struct _DXGK_BRIGHTNESS_GET_OUT
{
    UINT32 CurrentBrightnessMillinits;
    UINT32 TargetBrightnessMillinits;
} DXGK_BRIGHTNESS_GET_OUT, *PDXGK_BRIGHTNESS_GET_OUT;
typedef struct _DXGK_BRIGHTNESS_NIT_RANGE
{
    UINT32 MinimumLevelMillinit;
    UINT32 MaximumLevelMillinit;
    UINT32 StepSizeMillinit;
} DXGK_BRIGHTNESS_NIT_RANGE;
typedef struct _DXGK_BRIGHTNESS_GET_NIT_RANGES_OUT
{
    UINT32 NormalRangeCount;
    UINT32 RangeCount;
    UINT32 PreferredMaximumBrightness;
    DXGK_BRIGHTNESS_NIT_RANGE SupportedRanges[DXGK_BRIGHTNESS_MAXIMUM_NIT_RANGE_COUNT];
} DXGK_BRIGHTNESS_GET_NIT_RANGES_OUT, *PDXGK_BRIGHTNESS_GET_NIT_RANGES_OUT;
typedef struct _D3DKMT_WDDM_1_3_CAPS
{
    union
    {
        struct
        {
            UINT SupportMiracast : 1;
            UINT IsHybridIntegratedGPU : 1;
            UINT IsHybridDiscreteGPU : 1;
            UINT SupportPowerManagementPStates : 1;
            UINT SupportVirtualModes : 1;
            UINT SupportCrossAdapterResource : 1;
            UINT Reserved : 26;
        };
        UINT Value;
    };
} D3DKMT_WDDM_1_3_CAPS;
typedef enum
{
    DXGK_ENGINE_TYPE_OTHER,
    DXGK_ENGINE_TYPE_3D,
    DXGK_ENGINE_TYPE_VIDEO_DECODE,
    DXGK_ENGINE_TYPE_VIDEO_ENCODE,
    DXGK_ENGINE_TYPE_VIDEO_PROCESSING,
    DXGK_ENGINE_TYPE_SCENE_ASSEMBLY,
    DXGK_ENGINE_TYPE_COPY,
    DXGK_ENGINE_TYPE_OVERLAY,
    DXGK_ENGINE_TYPE_CRYPTO,
    DXGK_ENGINE_TYPE_MAX
} DXGK_ENGINE_TYPE;
typedef struct _DXGK_NODEMETADATA_FLAGS
{
    union
    {
        struct
        {
            UINT ContextSchedulingSupported : 1;
            UINT RingBufferFenceRelease : 1;
            UINT SupportTrackedWorkload : 1;
            UINT Reserved : 13;
            UINT MaxInFlightHwQueueBuffers : 16;
        };
        UINT32 Value;
    };
} DXGK_NODEMETADATA_FLAGS;
typedef struct _DXGK_NODEMETADATA
{
    DXGK_ENGINE_TYPE EngineType;
    WCHAR FriendlyName[DXGK_MAX_METADATA_NAME_LENGTH];
    DXGK_NODEMETADATA_FLAGS Flags;
    BOOLEAN GpuMmuSupported;
    BOOLEAN IoMmuSupported;
} DXGK_NODEMETADATA;
typedef DXGK_NODEMETADATA DXGKARG_GETNODEMETADATA;
typedef struct _DXGK_GPUCLOCKDATA_FLAGS
{
    union
    {
        struct
        {
            UINT ContextManagementProcessor : 1;
            UINT Reserved : 31;
        };
        UINT32 Value;
    };
} DXGK_GPUCLOCKDATA_FLAGS;
typedef struct _DXGK_NODE_PERFDATA
{
    ULONGLONG Frequency;
    ULONGLONG MaxFrequency;
    ULONGLONG MaxFrequencyOC;
    ULONG Voltage;
    ULONG VoltageMax;
    ULONG VoltageMaxOC;
    ULONGLONG MaxTransitionLatency;
} DXGK_NODE_PERFDATA;
typedef struct _DXGK_ADAPTER_PERFDATA
{
    ULONGLONG MemoryFrequency;
    ULONGLONG MaxMemoryFrequency;
    ULONGLONG MaxMemoryFrequencyOC;
    ULONGLONG MemoryBandwidth;
    ULONGLONG PCIEBandwidth;
    ULONG FanRPM;
    ULONG Power;
    ULONG Temperature;
    UCHAR PowerStateOverride;
} DXGK_ADAPTER_PERFDATA;
typedef struct _DXGK_ADAPTER_PERFDATACAPS
{
    ULONGLONG MaxMemoryBandwidth;
    ULONGLONG MaxPCIEBandwidth;
    ULONG MaxFanRPM;
    ULONG TemperatureMax;
    ULONG TemperatureWarning;
} DXGK_ADAPTER_PERFDATACAPS;
typedef struct _DXGK_GPUVERSION
{
    WCHAR BiosVersion[DXGK_MAX_GPUVERSION_NAME_LENGTH];
    WCHAR GpuArchitecture[DXGK_MAX_GPUVERSION_NAME_LENGTH];
} DXGK_GPUVERSION;
typedef struct _DXGK_GPUCLOCKDATA
{
    ULONGLONG GpuFrequency;
    ULONGLONG GpuClockCounter;
    ULONGLONG CpuClockCounter;
    DXGK_GPUCLOCKDATA_FLAGS Flags;
} DXGK_GPUCLOCKDATA;
typedef DXGK_GPUCLOCKDATA DXGKARG_CALIBRATEGPUCLOCK;
typedef struct _D3DKMT_WDDM_2_0_CAPS
{
    union
    {
        struct
        {
            UINT Support64BitAtomics : 1;
            UINT GpuMmuSupported : 1;
            UINT IoMmuSupported : 1;
            UINT FlipOverwriteSupported : 1;
            UINT SupportContextlessPresent : 1;
            UINT SupportSurpriseRemoval : 1;
            UINT Reserved : 26;
        };
        UINT Value;
    };
} D3DKMT_WDDM_2_0_CAPS;
typedef struct _D3DKMT_NODEMETADATA
{
    _In_ UINT NodeOrdinalAndAdapterIndex;
    _Out_ DXGK_NODEMETADATA NodeData;
} D3DKMT_NODEMETADATA;
typedef struct _D3DKMT_QUERYCLOCKCALIBRATION
{
    D3DKMT_HANDLE hAdapter;
    UINT32 NodeOrdinal;
    UINT32 PhysicalAdapterIndex;
    DXGK_GPUCLOCKDATA ClockData;
} D3DKMT_QUERYCLOCKCALIBRATION;
typedef enum _DXGK_RENDER_PIPELINE_STAGE
{
    DXGK_RENDER_PIPELINE_STAGE_UNKNOWN = 0,
    DXGK_RENDER_PIPELINE_STAGE_INPUT_ASSEMBLER = 1,
    DXGK_RENDER_PIPELINE_STAGE_VERTEX_SHADER = 2,
    DXGK_RENDER_PIPELINE_STAGE_GEOMETRY_SHADER = 3,
    DXGK_RENDER_PIPELINE_STAGE_STREAM_OUTPUT = 4,
    DXGK_RENDER_PIPELINE_STAGE_RASTERIZER = 5,
    DXGK_RENDER_PIPELINE_STAGE_PIXEL_SHADER = 6,
    DXGK_RENDER_PIPELINE_STAGE_OUTPUT_MERGER = 7,
} DXGK_RENDER_PIPELINE_STAGE;
typedef enum _DXGK_PAGE_FAULT_FLAGS
{
    DXGK_PAGE_FAULT_WRITE = 0x1,
    DXGK_PAGE_FAULT_FENCE_INVALID = 0x2,
    DXGK_PAGE_FAULT_ADAPTER_RESET_REQUIRED = 0x4,
    DXGK_PAGE_FAULT_ENGINE_RESET_REQUIRED = 0x8,
    DXGK_PAGE_FAULT_FATAL_HARDWARE_ERROR = 0x10,
    DXGK_PAGE_FAULT_IOMMU = 0x20,
    DXGK_PAGE_FAULT_HW_CONTEXT_VALID = 0x40,
    DXGK_PAGE_FAULT_PROCESS_HANDLE_VALID = 0x80,
} DXGK_PAGE_FAULT_FLAGS;
typedef enum _DXGK_GENERAL_ERROR_CODE
{
    DXGK_GENERAL_ERROR_PAGE_FAULT = 0,
    DXGK_GENERAL_ERROR_INVALID_INSTRUCTION = 1,
} DXGK_GENERAL_ERROR_CODE;
typedef struct _DXGK_FAULT_ERROR_CODE
{
    union
    {
        struct
        {
            UINT IsDeviceSpecificCode : 1;
            DXGK_GENERAL_ERROR_CODE GeneralErrorCode : 31;
        };
        struct
        {
            UINT IsDeviceSpecificCodeReservedBit : 1;
            UINT DeviceSpecificCode : 31;
        };
    };
} DXGK_FAULT_ERROR_CODE;
typedef struct _D3DKMT_DRIVERCAPS_EXT
{
    union
    {
        struct
        {
            UINT VirtualModeSupport : 1;
            UINT Reserved : 31;
        };
        UINT Value;
    };
} D3DKMT_DRIVERCAPS_EXT;
typedef union _DXGK_MONITORLINKINFO_USAGEHINTS
{
    struct
    {
        UINT Hidden : 1;
        UINT Reserved :31;
    };
    UINT Value;
} DXGK_MONITORLINKINFO_USAGEHINTS, *PDXGK_MONITORLINKINFO_USAGEHINTS;
typedef union _DXGK_MONITORLINKINFO_CAPABILITIES
{
    struct
    {
        UINT Stereo : 1;
        UINT WideColorSpace : 1;
        UINT HighColorSpace : 1;
        UINT DynamicColorSpace : 1;
        UINT DynamicBitsPerColorChannel : 1;
        UINT DynamicColorEncodingFormat : 1;
        UINT DedicatedTimingGeneration : 1;
        UINT TargetIndependentPrimary : 1;
        UINT SyncLockIdentical : 1;
        UINT Hdr10Plus : 1;
        UINT DolbyVisionLowLatency : 1;
        UINT VariableRefresh : 1;
        UINT Reserved :20;
    };
    UINT Value;
} DXGK_MONITORLINKINFO_CAPABILITIES, *PDXGK_MONITORLINKINFO_CAPABILITIES;
typedef BYTE DXGK_DISPLAY_USAGE;
typedef BYTE DXGK_DISPLAY_TECHNOLOGY;
typedef BYTE DXGK_DISPLAY_DESCRIPTOR_TYPE;
#pragma pack( pop )
#pragma warning(pop)
