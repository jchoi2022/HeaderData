#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
       
extern "C" {
enum {
    PWM_IOCTL_ID_CONTROLLER_GET_INFO = 0,
    PWM_IOCTL_ID_CONTROLLER_GET_ACTUAL_PERIOD,
    PWM_IOCTL_ID_CONTROLLER_SET_DESIRED_PERIOD,
    PWM_IOCTL_ID_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE= 100,
    PWM_IOCTL_ID_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE,
    PWM_IOCTL_ID_PIN_GET_POLARITY,
    PWM_IOCTL_ID_PIN_SET_POLARITY,
    PWM_IOCTL_ID_PIN_START,
    PWM_IOCTL_ID_PIN_STOP,
    PWM_IOCTL_ID_PIN_IS_STARTED
};
DEFINE_GUID(GUID_DEVINTERFACE_PWM_CONTROLLER,
    0x60824b4c, 0xeed1, 0x4c9c, 0xb4, 0x9c, 0x1b, 0x96, 0x14, 0x61, 0xa8, 0x19);
typedef ULONGLONG PWM_PERIOD;
typedef ULONGLONG PWM_PERCENTAGE;
typedef struct _PWM_CONTROLLER_INFO {
    _Field_range_(==, sizeof(PWM_CONTROLLER_INFO))
    SIZE_T Size;
    ULONG PinCount;
    PWM_PERIOD MinimumPeriod;
    PWM_PERIOD MaximumPeriod;
} PWM_CONTROLLER_INFO;
            CTL_CODE( \
                FILE_DEVICE_CONTROLLER, \
                PWM_IOCTL_ID_CONTROLLER_GET_INFO, \
                METHOD_BUFFERED, \
                FILE_ANY_ACCESS)
typedef PWM_CONTROLLER_INFO PWM_CONTROLLER_GET_INFO_OUTPUT;
            CTL_CODE( \
                FILE_DEVICE_CONTROLLER, \
                PWM_IOCTL_ID_CONTROLLER_GET_ACTUAL_PERIOD, \
                METHOD_BUFFERED, \
                FILE_ANY_ACCESS)
typedef struct _PWM_CONTROLLER_GET_ACTUAL_PERIOD_OUTPUT {
    PWM_PERIOD ActualPeriod;
} PWM_CONTROLLER_GET_ACTUAL_PERIOD_OUTPUT;
            CTL_CODE( \
                FILE_DEVICE_CONTROLLER, \
                PWM_IOCTL_ID_CONTROLLER_SET_DESIRED_PERIOD, \
                METHOD_BUFFERED, \
                FILE_WRITE_DATA)
typedef struct _PWM_CONTROLLER_SET_DESIRED_PERIOD_INPUT {
    PWM_PERIOD DesiredPeriod;
} PWM_CONTROLLER_SET_DESIRED_PERIOD_INPUT;
typedef struct _PWM_CONTROLLER_SET_DESIRED_PERIOD_OUTPUT {
    PWM_PERIOD ActualPeriod;
} PWM_CONTROLLER_SET_DESIRED_PERIOD_OUTPUT;
            CTL_CODE( \
                FILE_DEVICE_CONTROLLER, \
                PWM_IOCTL_ID_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE, \
                METHOD_BUFFERED, \
                FILE_ANY_ACCESS)
typedef struct _PWM_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE_OUTPUT {
    PWM_PERCENTAGE Percentage;
} PWM_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE_OUTPUT;
            CTL_CODE( \
                FILE_DEVICE_CONTROLLER, \
                PWM_IOCTL_ID_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE, \
                METHOD_BUFFERED, \
                FILE_WRITE_DATA)
typedef struct _PWM_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE_INPUT {
    PWM_PERCENTAGE Percentage;
} PWM_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE_INPUT;
            CTL_CODE( \
                FILE_DEVICE_CONTROLLER, \
                PWM_IOCTL_ID_PIN_GET_POLARITY, \
                METHOD_BUFFERED, \
                FILE_ANY_ACCESS)
typedef enum _PWM_POLARITY {
    PWM_ACTIVE_HIGH,
    PWM_ACTIVE_LOW,
} PWM_POLARITY;
typedef struct _PWM_PIN_GET_POLARITY_OUTPUT {
    PWM_POLARITY Polarity;
} PWM_PIN_GET_POLARITY_OUTPUT;
            CTL_CODE( \
                FILE_DEVICE_CONTROLLER, \
                PWM_IOCTL_ID_PIN_SET_POLARITY, \
                METHOD_BUFFERED, \
                FILE_WRITE_DATA)
typedef struct _PWM_PIN_SET_POLARITY_INPUT {
    PWM_POLARITY Polarity;
} PWM_PIN_SET_POLARITY_INPUT;
            CTL_CODE( \
                FILE_DEVICE_CONTROLLER, \
                PWM_IOCTL_ID_PIN_START, \
                METHOD_NEITHER, \
                FILE_WRITE_DATA)
            CTL_CODE( \
                FILE_DEVICE_CONTROLLER, \
                PWM_IOCTL_ID_PIN_STOP, \
                METHOD_NEITHER, \
                FILE_WRITE_DATA)
            CTL_CODE( \
                FILE_DEVICE_CONTROLLER, \
                PWM_IOCTL_ID_PIN_IS_STARTED, \
                METHOD_BUFFERED, \
                FILE_ANY_ACCESS)
typedef struct _PWM_PIN_IS_STARTED_OUTPUT {
    BOOLEAN IsStarted;
} PWM_PIN_IS_STARTED_OUTPUT;
}
#endif
