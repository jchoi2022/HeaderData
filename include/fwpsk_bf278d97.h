#include <winapifamily.h>
#pragma region Desktop Family or AppRuntime Package
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_PKG_APPRUNTIME)
#include "fwpstypes.h"
#include "ndis.h"
#include "ws2def.h"
#include <ws2ipdef.h>
#include <netioapi.h>
#include "fwpvi.h"
extern "C" {
typedef enum FWPS_BUILTIN_LAYERS_
{
   FWPS_LAYER_INBOUND_IPPACKET_V4,
   FWPS_LAYER_INBOUND_IPPACKET_V4_DISCARD,
   FWPS_LAYER_INBOUND_IPPACKET_V6,
   FWPS_LAYER_INBOUND_IPPACKET_V6_DISCARD,
   FWPS_LAYER_OUTBOUND_IPPACKET_V4,
   FWPS_LAYER_OUTBOUND_IPPACKET_V4_DISCARD,
   FWPS_LAYER_OUTBOUND_IPPACKET_V6,
   FWPS_LAYER_OUTBOUND_IPPACKET_V6_DISCARD,
   FWPS_LAYER_IPFORWARD_V4,
   FWPS_LAYER_IPFORWARD_V4_DISCARD,
   FWPS_LAYER_IPFORWARD_V6,
   FWPS_LAYER_IPFORWARD_V6_DISCARD,
   FWPS_LAYER_INBOUND_TRANSPORT_V4,
   FWPS_LAYER_INBOUND_TRANSPORT_V4_DISCARD,
   FWPS_LAYER_INBOUND_TRANSPORT_V6,
   FWPS_LAYER_INBOUND_TRANSPORT_V6_DISCARD,
   FWPS_LAYER_OUTBOUND_TRANSPORT_V4,
   FWPS_LAYER_OUTBOUND_TRANSPORT_V4_DISCARD,
   FWPS_LAYER_OUTBOUND_TRANSPORT_V6,
   FWPS_LAYER_OUTBOUND_TRANSPORT_V6_DISCARD,
   FWPS_LAYER_STREAM_V4,
   FWPS_LAYER_STREAM_V4_DISCARD,
   FWPS_LAYER_STREAM_V6,
   FWPS_LAYER_STREAM_V6_DISCARD,
   FWPS_LAYER_DATAGRAM_DATA_V4,
   FWPS_LAYER_DATAGRAM_DATA_V4_DISCARD,
   FWPS_LAYER_DATAGRAM_DATA_V6,
   FWPS_LAYER_DATAGRAM_DATA_V6_DISCARD,
   FWPS_LAYER_INBOUND_ICMP_ERROR_V4,
   FWPS_LAYER_INBOUND_ICMP_ERROR_V4_DISCARD,
   FWPS_LAYER_INBOUND_ICMP_ERROR_V6,
   FWPS_LAYER_INBOUND_ICMP_ERROR_V6_DISCARD,
   FWPS_LAYER_OUTBOUND_ICMP_ERROR_V4,
   FWPS_LAYER_OUTBOUND_ICMP_ERROR_V4_DISCARD,
   FWPS_LAYER_OUTBOUND_ICMP_ERROR_V6,
   FWPS_LAYER_OUTBOUND_ICMP_ERROR_V6_DISCARD,
   FWPS_LAYER_ALE_RESOURCE_ASSIGNMENT_V4,
   FWPS_LAYER_ALE_RESOURCE_ASSIGNMENT_V4_DISCARD,
   FWPS_LAYER_ALE_RESOURCE_ASSIGNMENT_V6,
   FWPS_LAYER_ALE_RESOURCE_ASSIGNMENT_V6_DISCARD,
   FWPS_LAYER_ALE_AUTH_LISTEN_V4,
   FWPS_LAYER_ALE_AUTH_LISTEN_V4_DISCARD,
   FWPS_LAYER_ALE_AUTH_LISTEN_V6,
   FWPS_LAYER_ALE_AUTH_LISTEN_V6_DISCARD,
   FWPS_LAYER_ALE_AUTH_RECV_ACCEPT_V4,
   FWPS_LAYER_ALE_AUTH_RECV_ACCEPT_V4_DISCARD,
   FWPS_LAYER_ALE_AUTH_RECV_ACCEPT_V6,
   FWPS_LAYER_ALE_AUTH_RECV_ACCEPT_V6_DISCARD,
   FWPS_LAYER_ALE_AUTH_CONNECT_V4,
   FWPS_LAYER_ALE_AUTH_CONNECT_V4_DISCARD,
   FWPS_LAYER_ALE_AUTH_CONNECT_V6,
   FWPS_LAYER_ALE_AUTH_CONNECT_V6_DISCARD,
   FWPS_LAYER_ALE_FLOW_ESTABLISHED_V4,
   FWPS_LAYER_ALE_FLOW_ESTABLISHED_V4_DISCARD,
   FWPS_LAYER_ALE_FLOW_ESTABLISHED_V6,
   FWPS_LAYER_ALE_FLOW_ESTABLISHED_V6_DISCARD,
   FWPS_LAYER_INBOUND_MAC_FRAME_ETHERNET,
   FWPS_LAYER_OUTBOUND_MAC_FRAME_ETHERNET,
   FWPS_LAYER_RESERVED1_V4,
   FWPS_LAYER_RESERVED1_V6,
   FWPS_LAYER_NAME_RESOLUTION_CACHE_V4,
   FWPS_LAYER_NAME_RESOLUTION_CACHE_V6,
   FWPS_LAYER_ALE_RESOURCE_RELEASE_V4,
   FWPS_LAYER_ALE_RESOURCE_RELEASE_V6,
   FWPS_LAYER_ALE_ENDPOINT_CLOSURE_V4,
   FWPS_LAYER_ALE_ENDPOINT_CLOSURE_V6,
   FWPS_LAYER_ALE_CONNECT_REDIRECT_V4,
   FWPS_LAYER_ALE_CONNECT_REDIRECT_V6,
   FWPS_LAYER_ALE_BIND_REDIRECT_V4,
   FWPS_LAYER_ALE_BIND_REDIRECT_V6,
   FWPS_LAYER_STREAM_PACKET_V4,
   FWPS_LAYER_STREAM_PACKET_V6,
   FWPS_LAYER_INGRESS_VSWITCH_ETHERNET,
   FWPS_LAYER_EGRESS_VSWITCH_ETHERNET,
   FWPS_LAYER_INGRESS_VSWITCH_TRANSPORT_V4,
   FWPS_LAYER_INGRESS_VSWITCH_TRANSPORT_V6,
   FWPS_LAYER_EGRESS_VSWITCH_TRANSPORT_V4,
   FWPS_LAYER_EGRESS_VSWITCH_TRANSPORT_V6,
   FWPS_LAYER_INBOUND_TRANSPORT_FAST,
   FWPS_LAYER_OUTBOUND_TRANSPORT_FAST,
   FWPS_LAYER_INBOUND_MAC_FRAME_NATIVE_FAST,
   FWPS_LAYER_OUTBOUND_MAC_FRAME_NATIVE_FAST,
   FWPS_LAYER_RESERVED_LAYER_1,
   FWPS_LAYER_RESERVED_LAYER_2,
   FWPS_LAYER_RESERVED_LAYER_3,
   FWPS_LAYER_RESERVED_LAYER_4,
   FWPS_LAYER_RESERVED_LAYER_5,
   FWPS_LAYER_RESERVED_LAYER_6,
   FWPS_LAYER_RESERVED_LAYER_7,
   FWPS_LAYER_RESERVED_LAYER_8,
   FWPS_LAYER_INBOUND_RESERVED2,
   FWPS_LAYER_IPSEC_KM_DEMUX_V4,
   FWPS_LAYER_IPSEC_KM_DEMUX_V6,
   FWPS_LAYER_IPSEC_V4,
   FWPS_LAYER_IPSEC_V6,
   FWPS_LAYER_IKEEXT_V4,
   FWPS_LAYER_IKEEXT_V6,
   FWPS_LAYER_RPC_UM,
   FWPS_LAYER_RPC_EPMAP,
   FWPS_LAYER_RPC_EP_ADD,
   FWPS_LAYER_RPC_PROXY_CONN,
   FWPS_LAYER_RPC_PROXY_IF,
   FWPS_LAYER_KM_AUTHORIZATION,
   FWPS_BUILTIN_LAYER_MAX
} FWPS_BUILTIN_LAYERS;
typedef enum FWPS_FIELDS_INBOUND_IPPACKET_V4_
{
   FWPS_FIELD_INBOUND_IPPACKET_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_INBOUND_IPPACKET_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_INBOUND_IPPACKET_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_INBOUND_IPPACKET_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_INBOUND_IPPACKET_V4_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_IPPACKET_V4_SUB_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_IPPACKET_V4_FLAGS,
   FWPS_FIELD_INBOUND_IPPACKET_V4_INTERFACE_TYPE,
   FWPS_FIELD_INBOUND_IPPACKET_V4_TUNNEL_TYPE,
   FWPS_FIELD_INBOUND_IPPACKET_V4_COMPARTMENT_ID,
   FWPS_FIELD_INBOUND_IPPACKET_V4_MAX
} FWPS_FIELDS_INBOUND_IPPACKET_V4;
typedef enum FWPS_FIELDS_INBOUND_IPPACKET_V6_
{
   FWPS_FIELD_INBOUND_IPPACKET_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_INBOUND_IPPACKET_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_INBOUND_IPPACKET_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_INBOUND_IPPACKET_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_INBOUND_IPPACKET_V6_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_IPPACKET_V6_SUB_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_IPPACKET_V6_FLAGS,
   FWPS_FIELD_INBOUND_IPPACKET_V6_INTERFACE_TYPE,
   FWPS_FIELD_INBOUND_IPPACKET_V6_TUNNEL_TYPE,
   FWPS_FIELD_INBOUND_IPPACKET_V6_COMPARTMENT_ID,
   FWPS_FIELD_INBOUND_IPPACKET_V6_MAX
} FWPS_FIELDS_INBOUND_IPPACKET_V6;
typedef enum FWPS_FIELDS_OUTBOUND_IPPACKET_V4_
{
   FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_OUTBOUND_IPPACKET_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_OUTBOUND_IPPACKET_V4_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_IPPACKET_V4_SUB_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_IPPACKET_V4_FLAGS,
   FWPS_FIELD_OUTBOUND_IPPACKET_V4_INTERFACE_TYPE,
   FWPS_FIELD_OUTBOUND_IPPACKET_V4_TUNNEL_TYPE,
   FWPS_FIELD_OUTBOUND_IPPACKET_V4_COMPARTMENT_ID,
   FWPS_FIELD_OUTBOUND_IPPACKET_V4_MAX
} FWPS_FIELDS_OUTBOUND_IPPACKET_V4;
typedef enum FWPS_FIELDS_OUTBOUND_IPPACKET_V6_
{
   FWPS_FIELD_OUTBOUND_IPPACKET_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_OUTBOUND_IPPACKET_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_OUTBOUND_IPPACKET_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_OUTBOUND_IPPACKET_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_OUTBOUND_IPPACKET_V6_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_IPPACKET_V6_SUB_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_IPPACKET_V6_FLAGS,
   FWPS_FIELD_OUTBOUND_IPPACKET_V6_INTERFACE_TYPE,
   FWPS_FIELD_OUTBOUND_IPPACKET_V6_TUNNEL_TYPE,
   FWPS_FIELD_OUTBOUND_IPPACKET_V6_COMPARTMENT_ID,
   FWPS_FIELD_OUTBOUND_IPPACKET_V6_MAX
} FWPS_FIELDS_OUTBOUND_IPPACKET_V6;
typedef enum FWPS_FIELDS_IPFORWARD_V4_
{
   FWPS_FIELD_IPFORWARD_V4_IP_SOURCE_ADDRESS,
   FWPS_FIELD_IPFORWARD_V4_IP_DESTINATION_ADDRESS,
   FWPS_FIELD_IPFORWARD_V4_IP_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_IPFORWARD_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_IPFORWARD_V4_IP_FORWARD_INTERFACE,
   FWPS_FIELD_IPFORWARD_V4_SOURCE_INTERFACE_INDEX,
   FWPS_FIELD_IPFORWARD_V4_SOURCE_SUB_INTERFACE_INDEX,
   FWPS_FIELD_IPFORWARD_V4_DESTINATION_INTERFACE_INDEX,
   FWPS_FIELD_IPFORWARD_V4_DESTINATION_SUB_INTERFACE_INDEX,
   FWPS_FIELD_IPFORWARD_V4_FLAGS,
   FWPS_FIELD_IPFORWARD_V4_IP_PHYSICAL_ARRIVAL_INTERFACE,
   FWPS_FIELD_IPFORWARD_V4_ARRIVAL_INTERFACE_PROFILE_ID,
   FWPS_FIELD_IPFORWARD_V4_IP_PHYSICAL_NEXTHOP_INTERFACE,
   FWPS_FIELD_IPFORWARD_V4_NEXTHOP_INTERFACE_PROFILE_ID,
   FWPS_FIELD_IPFORWARD_V4_COMPARTMENT_ID,
   FWPS_FIELD_IPFORWARD_V4_MAX
} FWPS_FIELDS_IPFORWARD_V4;
typedef enum FWPS_FIELDS_IPFORWARD_V6_
{
   FWPS_FIELD_IPFORWARD_V6_IP_SOURCE_ADDRESS,
   FWPS_FIELD_IPFORWARD_V6_IP_DESTINATION_ADDRESS,
   FWPS_FIELD_IPFORWARD_V6_IP_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_IPFORWARD_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_IPFORWARD_V6_IP_FORWARD_INTERFACE,
   FWPS_FIELD_IPFORWARD_V6_SOURCE_INTERFACE_INDEX,
   FWPS_FIELD_IPFORWARD_V6_SOURCE_SUB_INTERFACE_INDEX,
   FWPS_FIELD_IPFORWARD_V6_DESTINATION_INTERFACE_INDEX,
   FWPS_FIELD_IPFORWARD_V6_DESTINATION_SUB_INTERFACE_INDEX,
   FWPS_FIELD_IPFORWARD_V6_FLAGS,
   FWPS_FIELD_IPFORWARD_V6_IP_PHYSICAL_ARRIVAL_INTERFACE,
   FWPS_FIELD_IPFORWARD_V6_ARRIVAL_INTERFACE_PROFILE_ID,
   FWPS_FIELD_IPFORWARD_V6_IP_PHYSICAL_NEXTHOP_INTERFACE,
   FWPS_FIELD_IPFORWARD_V6_NEXTHOP_INTERFACE_PROFILE_ID,
   FWPS_FIELD_IPFORWARD_V6_COMPARTMENT_ID,
   FWPS_FIELD_IPFORWARD_V6_MAX
} FWPS_FIELDS_IPFORWARD_V6;
typedef enum FWPS_FIELDS_INBOUND_TRANSPORT_V4_
{
   FWPS_FIELD_INBOUND_TRANSPORT_V4_IP_PROTOCOL,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_IP_LOCAL_PORT,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_IP_REMOTE_PORT,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_SUB_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_FLAGS,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_INTERFACE_TYPE,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_TUNNEL_TYPE,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_PROFILE_ID,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_IPSEC_SECURITY_REALM_ID,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_COMPARTMENT_ID,
   FWPS_FIELD_INBOUND_TRANSPORT_V4_MAX
} FWPS_FIELDS_INBOUND_TRANSPORT_V4;
typedef enum FWPS_FIELDS_INBOUND_TRANSPORT_FAST
{
   FWPS_FIELD_INBOUND_TRANSPORT_FAST_MAX
} FWPS_FIELDS_INBOUND_TRANSPORT_FAST;
typedef enum FWPS_FIELDS_OUTBOUND_TRANSPORT_FAST
{
   FWPS_FIELD_OUTBOUND_TRANSPORT_FAST_MAX
} FWPS_FIELDS_OUTBOUND_TRANSPORT_FAST;
        FWPS_FIELD_INBOUND_TRANSPORT_V4_IP_LOCAL_PORT
        FWPS_FIELD_INBOUND_TRANSPORT_V4_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_INBOUND_TRANSPORT_V6_
{
   FWPS_FIELD_INBOUND_TRANSPORT_V6_IP_PROTOCOL,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_IP_LOCAL_PORT,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_IP_REMOTE_PORT,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_SUB_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_FLAGS,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_INTERFACE_TYPE,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_TUNNEL_TYPE,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_PROFILE_ID,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_IPSEC_SECURITY_REALM_ID,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_COMPARTMENT_ID,
   FWPS_FIELD_INBOUND_TRANSPORT_V6_MAX
} FWPS_FIELDS_INBOUND_TRANSPORT_V6;
        FWPS_FIELD_INBOUND_TRANSPORT_V6_IP_LOCAL_PORT
        FWPS_FIELD_INBOUND_TRANSPORT_V6_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_OUTBOUND_TRANSPORT_V4_
{
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_IP_PROTOCOL,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_IP_LOCAL_PORT,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_IP_REMOTE_PORT,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_SUB_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_IP_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_FLAGS,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_INTERFACE_TYPE,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_TUNNEL_TYPE,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_PROFILE_ID,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_IPSEC_SECURITY_REALM_ID,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_COMPARTMENT_ID,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V4_MAX
} FWPS_FIELDS_OUTBOUND_TRANSPORT_V4;
        FWPS_FIELD_OUTBOUND_TRANSPORT_V4_IP_LOCAL_PORT
        FWPS_FIELD_OUTBOUND_TRANSPORT_V4_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_OUTBOUND_TRANSPORT_V6_
{
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_IP_PROTOCOL,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_IP_LOCAL_PORT,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_IP_REMOTE_PORT,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_SUB_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_IP_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_FLAGS,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_INTERFACE_TYPE,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_TUNNEL_TYPE,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_PROFILE_ID,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_IPSEC_SECURITY_REALM_ID,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_COMPARTMENT_ID,
   FWPS_FIELD_OUTBOUND_TRANSPORT_V6_MAX
} FWPS_FIELDS_OUTBOUND_TRANSPORT_V6;
        FWPS_FIELD_OUTBOUND_TRANSPORT_V6_IP_LOCAL_PORT
        FWPS_FIELD_OUTBOUND_TRANSPORT_V6_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_STREAM_V4_
{
   FWPS_FIELD_STREAM_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_STREAM_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_STREAM_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_STREAM_V4_IP_LOCAL_PORT,
   FWPS_FIELD_STREAM_V4_IP_REMOTE_PORT,
   FWPS_FIELD_STREAM_V4_DIRECTION,
   FWPS_FIELD_STREAM_V4_FLAGS,
   FWPS_FIELD_STREAM_V4_COMPARTMENT_ID,
   FWPS_FIELD_STREAM_V4_MAX
} FWPS_FIELDS_STREAM_V4;
typedef enum FWPS_FIELDS_STREAM_V6_
{
   FWPS_FIELD_STREAM_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_STREAM_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_STREAM_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_STREAM_V6_IP_LOCAL_PORT,
   FWPS_FIELD_STREAM_V6_IP_REMOTE_PORT,
   FWPS_FIELD_STREAM_V6_DIRECTION,
   FWPS_FIELD_STREAM_V6_FLAGS,
   FWPS_FIELD_STREAM_V6_COMPARTMENT_ID,
   FWPS_FIELD_STREAM_V6_MAX
} FWPS_FIELDS_STREAM_V6;
typedef enum FWPS_FIELDS_DATAGRAM_DATA_V4_
{
   FWPS_FIELD_DATAGRAM_DATA_V4_IP_PROTOCOL,
   FWPS_FIELD_DATAGRAM_DATA_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_DATAGRAM_DATA_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_DATAGRAM_DATA_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_DATAGRAM_DATA_V4_IP_LOCAL_PORT,
   FWPS_FIELD_DATAGRAM_DATA_V4_IP_REMOTE_PORT,
   FWPS_FIELD_DATAGRAM_DATA_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_DATAGRAM_DATA_V4_INTERFACE_INDEX,
   FWPS_FIELD_DATAGRAM_DATA_V4_SUB_INTERFACE_INDEX,
   FWPS_FIELD_DATAGRAM_DATA_V4_DIRECTION,
   FWPS_FIELD_DATAGRAM_DATA_V4_FLAGS,
   FWPS_FIELD_DATAGRAM_DATA_V4_INTERFACE_TYPE,
   FWPS_FIELD_DATAGRAM_DATA_V4_TUNNEL_TYPE,
   FWPS_FIELD_DATAGRAM_DATA_V4_COMPARTMENT_ID,
   FWPS_FIELD_DATAGRAM_DATA_V4_MAX
} FWPS_FIELDS_DATAGRAM_DATA_V4;
        FWPS_FIELD_DATAGRAM_DATA_V4_IP_LOCAL_PORT
        FWPS_FIELD_DATAGRAM_DATA_V4_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_DATAGRAM_DATA_V6_
{
   FWPS_FIELD_DATAGRAM_DATA_V6_IP_PROTOCOL,
   FWPS_FIELD_DATAGRAM_DATA_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_DATAGRAM_DATA_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_DATAGRAM_DATA_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_DATAGRAM_DATA_V6_IP_LOCAL_PORT,
   FWPS_FIELD_DATAGRAM_DATA_V6_IP_REMOTE_PORT,
   FWPS_FIELD_DATAGRAM_DATA_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_DATAGRAM_DATA_V6_INTERFACE_INDEX,
   FWPS_FIELD_DATAGRAM_DATA_V6_SUB_INTERFACE_INDEX,
   FWPS_FIELD_DATAGRAM_DATA_V6_DIRECTION,
   FWPS_FIELD_DATAGRAM_DATA_V6_FLAGS,
   FWPS_FIELD_DATAGRAM_DATA_V6_INTERFACE_TYPE,
   FWPS_FIELD_DATAGRAM_DATA_V6_TUNNEL_TYPE,
   FWPS_FIELD_DATAGRAM_DATA_V6_COMPARTMENT_ID,
   FWPS_FIELD_DATAGRAM_DATA_V6_MAX
} FWPS_FIELDS_DATAGRAM_DATA_V6;
        FWPS_FIELD_DATAGRAM_DATA_V6_IP_LOCAL_PORT
        FWPS_FIELD_DATAGRAM_DATA_V6_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_STREAM_PACKET_V4_
{
   FWPS_FIELD_STREAM_PACKET_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_STREAM_PACKET_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_STREAM_PACKET_V4_IP_LOCAL_PORT,
   FWPS_FIELD_STREAM_PACKET_V4_IP_REMOTE_PORT,
   FWPS_FIELD_STREAM_PACKET_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_STREAM_PACKET_V4_INTERFACE_INDEX,
   FWPS_FIELD_STREAM_PACKET_V4_SUB_INTERFACE_INDEX,
   FWPS_FIELD_STREAM_PACKET_V4_DIRECTION,
   FWPS_FIELD_STREAM_PACKET_V4_FLAGS,
   FWPS_FIELD_STREAM_PACKET_V4_INTERFACE_TYPE,
   FWPS_FIELD_STREAM_PACKET_V4_TUNNEL_TYPE,
   FWPS_FIELD_STREAM_PACKET_V4_COMPARTMENT_ID,
   FWPS_FIELD_STREAM_PACKET_V4_MAX
} FWPS_FIELDS_STREAM_PACKET_V4;
typedef enum FWPS_FIELDS_STREAM_PACKET_V6_
{
   FWPS_FIELD_STREAM_PACKET_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_STREAM_PACKET_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_STREAM_PACKET_V6_IP_LOCAL_PORT,
   FWPS_FIELD_STREAM_PACKET_V6_IP_REMOTE_PORT,
   FWPS_FIELD_STREAM_PACKET_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_STREAM_PACKET_V6_INTERFACE_INDEX,
   FWPS_FIELD_STREAM_PACKET_V6_SUB_INTERFACE_INDEX,
   FWPS_FIELD_STREAM_PACKET_V6_DIRECTION,
   FWPS_FIELD_STREAM_PACKET_V6_FLAGS,
   FWPS_FIELD_STREAM_PACKET_V6_INTERFACE_TYPE,
   FWPS_FIELD_STREAM_PACKET_V6_TUNNEL_TYPE,
   FWPS_FIELD_STREAM_PACKET_V6_COMPARTMENT_ID,
   FWPS_FIELD_STREAM_PACKET_V6_MAX
} FWPS_FIELDS_STREAM_PACKET_V6;
typedef enum FWPS_FIELDS_INBOUND_ICMP_ERROR_V4_
{
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_EMBEDDED_PROTOCOL,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_EMBEDDED_REMOTE_ADDRESS,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_EMBEDDED_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_EMBEDDED_LOCAL_PORT,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_EMBEDDED_REMOTE_PORT,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_ICMP_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_ICMP_CODE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_SUB_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_INTERFACE_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_TUNNEL_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_IP_ARRIVAL_INTERFACE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_ARRIVAL_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_ARRIVAL_INTERFACE_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_ARRIVAL_TUNNEL_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_FLAGS,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_ARRIVAL_INTERFACE_PROFILE_ID,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_INTERFACE_QUARANTINE_EPOCH,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_COMPARTMENT_ID,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V4_MAX
} FWPS_FIELDS_INBOUND_ICMP_ERROR_V4;
        FWPS_FIELD_INBOUND_ICMP_ERROR_V4_INTERFACE_INDEX
        FWPS_FIELD_INBOUND_ICMP_ERROR_V4_SUB_INTERFACE_INDEX
        FWPS_FIELD_INBOUND_ICMP_ERROR_V4_INTERFACE_TYPE
        FWPS_FIELD_INBOUND_ICMP_ERROR_V4_TUNNEL_TYPE
typedef enum FWPS_FIELDS_INBOUND_ICMP_ERROR_V6_
{
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_EMBEDDED_PROTOCOL,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_EMBEDDED_REMOTE_ADDRESS,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_EMBEDDED_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_EMBEDDED_LOCAL_PORT,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_EMBEDDED_REMOTE_PORT,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_ICMP_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_ICMP_CODE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_SUB_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_INTERFACE_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_TUNNEL_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_IP_ARRIVAL_INTERFACE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_ARRIVAL_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_ARRIVAL_INTERFACE_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_ARRIVAL_TUNNEL_TYPE,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_FLAGS,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_ARRIVAL_INTERFACE_PROFILE_ID,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_INTERFACE_QUARANTINE_EPOCH,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_COMPARTMENT_ID,
   FWPS_FIELD_INBOUND_ICMP_ERROR_V6_MAX
} FWPS_FIELDS_INBOUND_ICMP_ERROR_V6;
        FWPS_FIELD_INBOUND_ICMP_ERROR_V6_INTERFACE_INDEX
        FWPS_FIELD_INBOUND_ICMP_ERROR_V6_SUB_INTERFACE_INDEX
        FWPS_FIELD_INBOUND_ICMP_ERROR_V6_INTERFACE_TYPE
        FWPS_FIELD_INBOUND_ICMP_ERROR_V6_TUNNEL_TYPE
typedef enum FWPS_FIELDS_OUTBOUND_ICMP_ERROR_V4_
{
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_ICMP_TYPE,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_ICMP_CODE,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_SUB_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_INTERFACE_TYPE,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_TUNNEL_TYPE,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_FLAGS,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_NEXTHOP_INTERFACE_PROFILE_ID,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_INTERFACE_QUARANTINE_EPOCH,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_COMPARTMENT_ID,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V4_MAX
} FWPS_FIELDS_OUTBOUND_ICMP_ERROR_V4;
typedef enum FWPS_FIELDS_OUTBOUND_ICMP_ERROR_V6_
{
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_IP_LOCAL_PORT,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_IP_REMOTE_PORT,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_SUB_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_INTERFACE_TYPE,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_TUNNEL_TYPE,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_FLAGS,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_NEXTHOP_INTERFACE_PROFILE_ID,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_INTERFACE_QUARANTINE_EPOCH,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_COMPARTMENT_ID,
   FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_MAX
} FWPS_FIELDS_OUTBOUND_ICMP_ERROR_V6;
        FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_IP_LOCAL_PORT
        FWPS_FIELD_OUTBOUND_ICMP_ERROR_V6_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_ALE_RESOURCE_ASSIGNMENT_V4_
{
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_ALE_APP_ID,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_ALE_USER_ID,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_IP_PROTOCOL,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_ALE_PROMISCUOUS_MODE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_FLAGS,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_INTERFACE_TYPE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_TUNNEL_TYPE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_LOCAL_INTERFACE_PROFILE_ID,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_SIO_FIREWALL_SOCKET_PROPERTY,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_COMPARTMENT_ID,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_BITMAP_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_BITMAP_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V4_MAX
} FWPS_FIELDS_ALE_RESOURCE_ASSIGNMENT_V4;
typedef enum FWPS_FIELDS_ALE_RESOURCE_ASSIGNMENT_V6_
{
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_ALE_APP_ID,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_ALE_USER_ID,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_IP_PROTOCOL,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_ALE_PROMISCUOUS_MODE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_FLAGS,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_INTERFACE_TYPE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_TUNNEL_TYPE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_LOCAL_INTERFACE_PROFILE_ID,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_SIO_FIREWALL_SOCKET_PROPERTY,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_COMPARTMENT_ID,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_BITMAP_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_BITMAP_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_RESOURCE_ASSIGNMENT_V6_MAX
} FWPS_FIELDS_ALE_RESOURCE_ASSIGNMENT_V6;
typedef enum FWPS_FIELDS_ALE_RESOURCE_RELEASE_V4_
{
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_ALE_APP_ID,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_ALE_USER_ID,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_IP_PROTOCOL,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_FLAGS,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_COMPARTMENT_ID,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V4_MAX
} FWPS_FIELDS_ALE_RESOURCE_RELEASE_V4;
typedef enum FWPS_FIELDS_ALE_RESOURCE_RELEASE_V6_
{
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_ALE_APP_ID,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_ALE_USER_ID,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_IP_PROTOCOL,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_FLAGS,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_COMPARTMENT_ID,
   FWPS_FIELD_ALE_RESOURCE_RELEASE_V6_MAX
} FWPS_FIELDS_ALE_RESOURCE_RELEASE_V6;
typedef enum FWPS_FIELDS_ALE_ENDPOINT_CLOSURE_V4_
{
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_ALE_APP_ID,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_ALE_USER_ID,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_IP_PROTOCOL,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_FLAGS,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_COMPARTMENT_ID,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V4_MAX
} FWPS_FIELDS_ALE_ENDPOINT_CLOSURE_V4;
typedef enum FWPS_FIELDS_ALE_ENDPOINT_CLOSURE_V6_
{
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_ALE_APP_ID,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_ALE_USER_ID,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_IP_PROTOCOL,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_FLAGS,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_COMPARTMENT_ID,
   FWPS_FIELD_ALE_ENDPOINT_CLOSURE_V6_MAX
} FWPS_FIELDS_ALE_ENDPOINT_CLOSURE_V6;
typedef enum FWPS_FIELDS_ALE_AUTH_LISTEN_V4_
{
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_ALE_APP_ID,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_ALE_USER_ID,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_FLAGS,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_LOCAL_INTERFACE_PROFILE_ID,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_SIO_FIREWALL_SOCKET_PROPERTY,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_COMPARTMENT_ID,
   FWPS_FIELD_ALE_AUTH_LISTEN_V4_MAX
} FWPS_FIELDS_ALE_AUTH_LISTEN_V4;
typedef enum FWPS_FIELDS_ALE_AUTH_LISTEN_V6_
{
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_ALE_APP_ID,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_ALE_USER_ID,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_FLAGS,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_LOCAL_INTERFACE_PROFILE_ID,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_SIO_FIREWALL_SOCKET_PROPERTY,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_COMPARTMENT_ID,
   FWPS_FIELD_ALE_AUTH_LISTEN_V6_MAX
} FWPS_FIELDS_ALE_AUTH_LISTEN_V6;
typedef enum FWPS_FIELDS_ALE_AUTH_RECV_ACCEPT_V4_
{
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_ALE_APP_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_ALE_USER_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_IP_PROTOCOL,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_ALE_REMOTE_USER_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_ALE_REMOTE_MACHINE_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_FLAGS,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_SIO_FIREWALL_SYSTEM_PORT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_NAP_CONTEXT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_SUB_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_IP_ARRIVAL_INTERFACE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_ARRIVAL_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_ARRIVAL_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_ARRIVAL_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_NEXTHOP_SUB_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_IP_NEXTHOP_INTERFACE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_NEXTHOP_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_NEXTHOP_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_NEXTHOP_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_ORIGINAL_PROFILE_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_CURRENT_PROFILE_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_REAUTHORIZE_REASON,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_ORIGINAL_ICMP_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_INTERFACE_QUARANTINE_EPOCH,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_COMPARTMENT_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_BITMAP_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_BITMAP_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_BITMAP_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_BITMAP_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_MAX
} FWPS_FIELDS_ALE_AUTH_RECV_ACCEPT_V4;
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_IP_LOCAL_PORT
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_IP_REMOTE_PORT
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_INTERFACE_TYPE
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_TUNNEL_TYPE
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_INTERFACE_INDEX
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_SUB_INTERFACE_INDEX
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V4_SIO_FIREWALL_SYSTEM_PORT
typedef enum FWPS_FIELDS_ALE_AUTH_RECV_ACCEPT_V6_
{
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_ALE_APP_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_ALE_USER_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_IP_PROTOCOL,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_ALE_REMOTE_USER_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_ALE_REMOTE_MACHINE_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_FLAGS,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_SIO_FIREWALL_SYSTEM_PORT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_NAP_CONTEXT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_SUB_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_IP_ARRIVAL_INTERFACE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_ARRIVAL_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_ARRIVAL_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_ARRIVAL_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_NEXTHOP_SUB_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_IP_NEXTHOP_INTERFACE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_NEXTHOP_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_NEXTHOP_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_NEXTHOP_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_ORIGINAL_PROFILE_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_CURRENT_PROFILE_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_REAUTHORIZE_REASON,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_ORIGINAL_ICMP_TYPE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_INTERFACE_QUARANTINE_EPOCH,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_COMPARTMENT_ID,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_BITMAP_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_BITMAP_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_BITMAP_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_BITMAP_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_MAX
} FWPS_FIELDS_ALE_AUTH_RECV_ACCEPT_V6;
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_IP_LOCAL_PORT
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_IP_REMOTE_PORT
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_INTERFACE_TYPE
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_TUNNEL_TYPE
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_INTERFACE_INDEX
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_SUB_INTERFACE_INDEX
        FWPS_FIELD_ALE_AUTH_RECV_ACCEPT_V6_SIO_FIREWALL_SYSTEM_PORT
typedef enum FWPS_FIELDS_ALE_BIND_REDIRECT_V4_
{
   FWPS_FIELD_ALE_BIND_REDIRECT_V4_ALE_APP_ID,
   FWPS_FIELD_ALE_BIND_REDIRECT_V4_ALE_USER_ID,
   FWPS_FIELD_ALE_BIND_REDIRECT_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_BIND_REDIRECT_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_BIND_REDIRECT_V4_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_BIND_REDIRECT_V4_IP_PROTOCOL,
   FWPS_FIELD_ALE_BIND_REDIRECT_V4_FLAGS,
   FWPS_FIELD_ALE_BIND_REDIRECT_V4_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_BIND_REDIRECT_V4_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_BIND_REDIRECT_V4_COMPARTMENT_ID,
   FWPS_FIELD_ALE_BIND_REDIRECT_V4_MAX
} FWPS_FIELDS_ALE_BIND_REDIRECT_V4;
typedef enum FWPS_FIELDS_ALE_BIND_REDIRECT_V6_
{
   FWPS_FIELD_ALE_BIND_REDIRECT_V6_ALE_APP_ID,
   FWPS_FIELD_ALE_BIND_REDIRECT_V6_ALE_USER_ID,
   FWPS_FIELD_ALE_BIND_REDIRECT_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_BIND_REDIRECT_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_BIND_REDIRECT_V6_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_BIND_REDIRECT_V6_IP_PROTOCOL,
   FWPS_FIELD_ALE_BIND_REDIRECT_V6_FLAGS,
   FWPS_FIELD_ALE_BIND_REDIRECT_V6_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_BIND_REDIRECT_V6_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_BIND_REDIRECT_V6_COMPARTMENT_ID,
   FWPS_FIELD_ALE_BIND_REDIRECT_V6_MAX
} FWPS_FIELDS_ALE_BIND_REDIRECT_V6;
typedef enum FWPS_FIELDS_ALE_CONNECT_REDIRECT_V4_
{
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_ALE_APP_ID,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_ALE_USER_ID,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_IP_PROTOCOL,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_IP_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_FLAGS,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_ALE_ORIGINAL_APP_ID,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_COMPARTMENT_ID,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_MAX
} FWPS_FIELDS_ALE_CONNECT_REDIRECT_V4;
        FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_IP_LOCAL_PORT
        FWPS_FIELD_ALE_CONNECT_REDIRECT_V4_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_ALE_CONNECT_REDIRECT_V6_
{
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_ALE_APP_ID,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_ALE_USER_ID,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_IP_PROTOCOL,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_IP_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_FLAGS,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_ALE_ORIGINAL_APP_ID,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_COMPARTMENT_ID,
   FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_MAX
} FWPS_FIELDS_ALE_CONNECT_REDIRECT_V6;
        FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_IP_LOCAL_PORT
        FWPS_FIELD_ALE_CONNECT_REDIRECT_V6_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_ALE_AUTH_CONNECT_V4_
{
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ALE_APP_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ALE_USER_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_PROTOCOL,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ALE_REMOTE_USER_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ALE_REMOTE_MACHINE_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_FLAGS,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_SUB_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_ARRIVAL_INTERFACE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ARRIVAL_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ARRIVAL_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ARRIVAL_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_NEXTHOP_SUB_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_NEXTHOP_INTERFACE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_NEXTHOP_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_NEXTHOP_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_NEXTHOP_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ORIGINAL_PROFILE_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_CURRENT_PROFILE_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_REAUTHORIZE_REASON,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_PEER_NAME,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ORIGINAL_ICMP_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_INTERFACE_QUARANTINE_EPOCH,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ALE_ORIGINAL_APP_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_ALE_EFFECTIVE_NAME,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_COMPARTMENT_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_BITMAP_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_BITMAP_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_BITMAP_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_BITMAP_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_AUTH_CONNECT_V4_MAX
} FWPS_FIELDS_ALE_AUTH_CONNECT_V4;
        FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_LOCAL_PORT
        FWPS_FIELD_ALE_AUTH_CONNECT_V4_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_ALE_AUTH_CONNECT_V6_
{
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ALE_APP_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ALE_USER_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_PROTOCOL,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ALE_REMOTE_USER_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ALE_REMOTE_MACHINE_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_FLAGS,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_SUB_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_ARRIVAL_INTERFACE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ARRIVAL_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ARRIVAL_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ARRIVAL_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_NEXTHOP_SUB_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_NEXTHOP_INTERFACE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_NEXTHOP_INTERFACE_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_NEXTHOP_TUNNEL_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_NEXTHOP_INTERFACE_INDEX,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ORIGINAL_PROFILE_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_CURRENT_PROFILE_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_REAUTHORIZE_REASON,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_PEER_NAME,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ORIGINAL_ICMP_TYPE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_INTERFACE_QUARANTINE_EPOCH,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ALE_ORIGINAL_APP_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_ALE_EFFECTIVE_NAME,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_COMPARTMENT_ID,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_BITMAP_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_BITMAP_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_BITMAP_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_BITMAP_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_AUTH_CONNECT_V6_MAX
} FWPS_FIELDS_ALE_AUTH_CONNECT_V6;
        FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_LOCAL_PORT
        FWPS_FIELD_ALE_AUTH_CONNECT_V6_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_ALE_FLOW_ESTABLISHED_V4_
{
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_ALE_APP_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_ALE_USER_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_IP_PROTOCOL,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_ALE_REMOTE_USER_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_ALE_REMOTE_MACHINE_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_IP_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_DIRECTION,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_INTERFACE_TYPE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_TUNNEL_TYPE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_FLAGS,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_ALE_ORIGINAL_APP_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_COMPARTMENT_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_BITMAP_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_BITMAP_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_BITMAP_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_BITMAP_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_MAX
} FWPS_FIELDS_ALE_FLOW_ESTABLISHED_V4;
        FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_IP_LOCAL_PORT
        FWPS_FIELD_ALE_FLOW_ESTABLISHED_V4_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_ALE_FLOW_ESTABLISHED_V6_
{
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_ALE_APP_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_ALE_USER_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_IP_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_IP_PROTOCOL,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_ALE_REMOTE_USER_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_ALE_REMOTE_MACHINE_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_IP_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_DIRECTION,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_INTERFACE_TYPE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_TUNNEL_TYPE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_FLAGS,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_ALE_ORIGINAL_APP_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_ALE_PACKAGE_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_COMPARTMENT_ID,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_BITMAP_IP_LOCAL_ADDRESS,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_BITMAP_IP_LOCAL_PORT,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_BITMAP_IP_REMOTE_ADDRESS,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_BITMAP_IP_REMOTE_PORT,
   FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_MAX
} FWPS_FIELDS_ALE_FLOW_ESTABLISHED_V6;
        FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_IP_LOCAL_PORT
        FWPS_FIELD_ALE_FLOW_ESTABLISHED_V6_IP_REMOTE_PORT
typedef enum FWPS_FIELDS_NAME_RESOLUTION_CACHE_V4_
{
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V4_ALE_USER_ID,
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V4_ALE_APP_ID,
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V4_PEER_NAME,
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V4_COMPARTMENT_ID,
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V4_MAX
} FWPS_FIELDS_NAME_RESOLUTION_CACHE_V4;
typedef enum FWPS_FIELDS_NAME_RESOLUTION_CACHE_V6_
{
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V6_ALE_USER_ID,
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V6_ALE_APP_ID,
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V6_PEER_NAME,
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V6_COMPARTMENT_ID,
   FWPS_FIELD_NAME_RESOLUTION_CACHE_V6_MAX
} FWPS_FIELDS_NAME_RESOLUTION_CACHE_V6;
typedef enum FWPS_FIELDS_INBOUND_MAC_FRAME_ETHERNET_
{
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_INTERFACE_MAC_ADDRESS,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_MAC_LOCAL_ADDRESS,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_MAC_REMOTE_ADDRESS,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_MAC_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_MAC_REMOTE_ADDRESS_TYPE,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_ETHER_TYPE,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_VLAN_ID,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_INTERFACE,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_NDIS_PORT,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_L2_FLAGS,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_COMPARTMENT_ID,
   FWPS_FIELD_INBOUND_MAC_FRAME_ETHERNET_MAX
} FWPS_FIELDS_INBOUND_MAC_FRAME_ETHERNET;
typedef enum FWPS_FIELDS_OUTBOUND_MAC_FRAME_ETHERNET_
{
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_INTERFACE_MAC_ADDRESS,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_MAC_LOCAL_ADDRESS,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_MAC_REMOTE_ADDRESS,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_MAC_LOCAL_ADDRESS_TYPE,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_MAC_REMOTE_ADDRESS_TYPE,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_ETHER_TYPE,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_VLAN_ID,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_INTERFACE,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_NDIS_PORT,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_L2_FLAGS,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_COMPARTMENT_ID,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_ETHERNET_MAX
} FWPS_FIELDS_OUTBOUND_MAC_FRAME_ETHERNET;
typedef enum FWPS_FIELDS_INBOUND_MAC_FRAME_NATIVE_
{
   FWPS_FIELD_INBOUND_MAC_FRAME_NATIVE_NDIS_MEDIA_TYPE,
   FWPS_FIELD_INBOUND_MAC_FRAME_NATIVE_NDIS_PHYSICAL_MEDIA_TYPE,
   FWPS_FIELD_INBOUND_MAC_FRAME_NATIVE_INTERFACE,
   FWPS_FIELD_INBOUND_MAC_FRAME_NATIVE_INTERFACE_TYPE,
   FWPS_FIELD_INBOUND_MAC_FRAME_NATIVE_INTERFACE_INDEX,
   FWPS_FIELD_INBOUND_MAC_FRAME_NATIVE_NDIS_PORT,
   FWPS_FIELD_INBOUND_MAC_FRAME_NATIVE_L2_FLAGS,
   FWPS_FIELD_INBOUND_MAC_FRAME_NATIVE_COMPARTMENT_ID,
   FWPS_FIELD_INBOUND_MAC_FRAME_NATIVE_MAX
} FWPS_FIELDS_INBOUND_MAC_FRAME_NATIVE;
typedef enum FWPS_FIELDS_INBOUND_MAC_FRAME_NATIVE_FAST_
{
   FWPS_FIELD_INBOUND_MAC_FRAME_NATIVE_FAST_MAX
} FWPS_FIELDS_INBOUND_MAC_FRAME_NATIVE_FAST;
typedef enum FWPS_FIELDS_OUTBOUND_MAC_FRAME_NATIVE_
{
   FWPS_FIELD_OUTBOUND_MAC_FRAME_NATIVE_NDIS_MEDIA_TYPE,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_NATIVE_NDIS_PHYSICAL_MEDIA_TYPE,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_NATIVE_INTERFACE,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_NATIVE_INTERFACE_TYPE,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_NATIVE_INTERFACE_INDEX,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_NATIVE_NDIS_PORT,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_NATIVE_L2_FLAGS,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_NATIVE_COMPARTMENT_ID,
   FWPS_FIELD_OUTBOUND_MAC_FRAME_NATIVE_MAX
} FWPS_FIELDS_OUTBOUND_MAC_FRAME_NATIVE;
typedef enum FWPS_FIELDS_OUTBOUND_MAC_FRAME_NATIVE_FAST
{
   FWPS_FIELD_OUTBOUND_MAC_FRAME_NATIVE_FAST_MAX
} FWPS_FIELDS_OUTBOUND_MAC_FRAME_NATIVE_FAST;
typedef enum FWPS_FIELDS_INGRESS_VSWITCH_ETHERNET_
{
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_MAC_SOURCE_ADDRESS,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_MAC_SOURCE_ADDRESS_TYPE,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_MAC_DESTINATION_ADDRESS,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_MAC_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_ETHER_TYPE,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_VLAN_ID,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_VSWITCH_TENANT_NETWORK_ID,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_VSWITCH_ID,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_VSWITCH_NETWORK_TYPE,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_VSWITCH_SOURCE_INTERFACE_ID,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_VSWITCH_SOURCE_INTERFACE_TYPE,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_VSWITCH_SOURCE_VM_ID,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_L2_FLAGS,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_COMPARTMENT_ID,
   FWPS_FIELD_INGRESS_VSWITCH_ETHERNET_MAX
} FWPS_FIELDS_INGRESS_VSWITCH_ETHERNET;
typedef enum FWPS_FIELDS_EGRESS_VSWITCH_ETHERNET_
{
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_MAC_SOURCE_ADDRESS,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_MAC_SOURCE_ADDRESS_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_MAC_DESTINATION_ADDRESS,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_MAC_DESTINATION_ADDRESS_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_ETHER_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_VLAN_ID,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_VSWITCH_TENANT_NETWORK_ID,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_VSWITCH_ID,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_VSWITCH_NETWORK_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_VSWITCH_SOURCE_INTERFACE_ID,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_VSWITCH_SOURCE_INTERFACE_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_VSWITCH_SOURCE_VM_ID,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_VSWITCH_DESTINATION_INTERFACE_ID,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_VSWITCH_DESTINATION_INTERFACE_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_VSWITCH_DESTINATION_VM_ID,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_L2_FLAGS,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_COMPARTMENT_ID,
   FWPS_FIELD_EGRESS_VSWITCH_ETHERNET_MAX
} FWPS_FIELDS_EGRESS_VSWITCH_ETHERNET;
typedef enum FWPS_FIELDS_INGRESS_VSWITCH_TRANSPORT_V4_
{
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_IP_SOURCE_ADDRESS,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_IP_DESTINATION_ADDRESS,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_IP_PROTOCOL,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_IP_SOURCE_PORT,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_IP_DESTINATION_PORT,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_VLAN_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_TENANT_NETWORK_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_NETWORK_TYPE,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_SOURCE_INTERFACE_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_SOURCE_INTERFACE_TYPE,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_SOURCE_VM_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_L2_FLAGS,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_COMPARTMENT_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_MAX
} FWPS_FIELDS_INGRESS_VSWITCH_TRANSPORT_V4;
        FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_IP_SOURCE_PORT
        FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V4_IP_DESTINATION_PORT
typedef enum FWPS_FIELDS_INGRESS_VSWITCH_TRANSPORT_V6_
{
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_IP_SOURCE_ADDRESS,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_IP_DESTINATION_ADDRESS,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_IP_PROTOCOL,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_IP_SOURCE_PORT,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_IP_DESTINATION_PORT,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_VLAN_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_TENANT_NETWORK_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_NETWORK_TYPE,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_SOURCE_INTERFACE_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_SOURCE_INTERFACE_TYPE,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_SOURCE_VM_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_L2_FLAGS,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_COMPARTMENT_ID,
   FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_MAX
} FWPS_FIELDS_INGRESS_VSWITCH_TRANSPORT_V6;
        FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_IP_SOURCE_PORT
        FWPS_FIELD_INGRESS_VSWITCH_TRANSPORT_V6_IP_DESTINATION_PORT
typedef enum FWPS_FIELDS_EGRESS_VSWITCH_TRANSPORT_V4_
{
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_IP_SOURCE_ADDRESS,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_IP_DESTINATION_ADDRESS,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_IP_PROTOCOL,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_IP_SOURCE_PORT,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_IP_DESTINATION_PORT,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_VLAN_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_TENANT_NETWORK_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_NETWORK_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_SOURCE_INTERFACE_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_SOURCE_INTERFACE_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_SOURCE_VM_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_DESTINATION_INTERFACE_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_DESTINATION_INTERFACE_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_VSWITCH_DESTINATION_VM_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_L2_FLAGS,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_COMPARTMENT_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_MAX
} FWPS_FIELDS_EGRESS_VSWITCH_TRANSPORT_V4;
        FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_IP_SOURCE_PORT
        FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V4_IP_DESTINATION_PORT
typedef enum FWPS_FIELDS_EGRESS_VSWITCH_TRANSPORT_V6_
{
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_IP_SOURCE_ADDRESS,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_IP_DESTINATION_ADDRESS,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_IP_PROTOCOL,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_IP_SOURCE_PORT,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_IP_DESTINATION_PORT,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_VLAN_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_TENANT_NETWORK_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_NETWORK_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_SOURCE_INTERFACE_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_SOURCE_INTERFACE_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_SOURCE_VM_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_DESTINATION_INTERFACE_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_DESTINATION_INTERFACE_TYPE,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_VSWITCH_DESTINATION_VM_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_L2_FLAGS,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_COMPARTMENT_ID,
   FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_MAX
} FWPS_FIELDS_EGRESS_VSWITCH_TRANSPORT_V6;
        FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_IP_SOURCE_PORT
        FWPS_FIELD_EGRESS_VSWITCH_TRANSPORT_V6_IP_DESTINATION_PORT
typedef enum FWPS_FIELDS_IPSEC_KM_DEMUX_V4_
{
   FWPS_FIELD_IPSEC_KM_DEMUX_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_IPSEC_KM_DEMUX_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_IPSEC_KM_DEMUX_V4_QM_MODE,
   FWPS_FIELD_IPSEC_KM_DEMUX_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_IPSEC_KM_DEMUX_V4_CURRENT_PROFILE_ID,
   FWPS_FIELD_KM_DEMUX_V4_IPSEC_SECURITY_REALM_ID,
   FWPS_FIELD_IPSEC_KM_DEMUX_V4_MAX
} FWPS_FIELDS_IPSEC_KM_DEMUX_V4;
typedef enum FWPS_FIELDS_IPSEC_KM_DEMUX_V6_
{
   FWPS_FIELD_IPSEC_KM_DEMUX_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_IPSEC_KM_DEMUX_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_IPSEC_KM_DEMUX_V6_QM_MODE,
   FWPS_FIELD_IPSEC_KM_DEMUX_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_IPSEC_KM_DEMUX_V6_CURRENT_PROFILE_ID,
   FWPS_FIELD_KM_DEMUX_V6_IPSEC_SECURITY_REALM_ID,
   FWPS_FIELD_IPSEC_KM_DEMUX_V6_MAX
} FWPS_FIELDS_IPSEC_KM_DEMUX_V6;
typedef enum FWPS_FIELDS_IPSEC_V4_
{
   FWPS_FIELD_IPSEC_V4_IP_PROTOCOL,
   FWPS_FIELD_IPSEC_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_IPSEC_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_IPSEC_V4_IP_LOCAL_PORT,
   FWPS_FIELD_IPSEC_V4_IP_REMOTE_PORT,
   FWPS_FIELD_IPSEC_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_IPSEC_V4_PROFILE_ID,
   FWPS_FIELD_IPSEC_V4_IPSEC_SECURITY_REALM_ID,
   FWPS_FIELD_IPSEC_V4_MAX
} FWPS_FIELDS_IPSEC_V4;
typedef enum FWPS_FIELDS_IPSEC_V6_
{
   FWPS_FIELD_IPSEC_V6_IP_PROTOCOL,
   FWPS_FIELD_IPSEC_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_IPSEC_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_IPSEC_V6_IP_LOCAL_PORT,
   FWPS_FIELD_IPSEC_V6_IP_REMOTE_PORT,
   FWPS_FIELD_IPSEC_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_IPSEC_V6_PROFILE_ID,
   FWPS_FIELD_IPSEC_V6_IPSEC_SECURITY_REALM_ID,
   FWPS_FIELD_IPSEC_V6_MAX
} FWPS_FIELDS_IPSEC_V6;
typedef enum FWPS_FIELDS_IKEEXT_V4_
{
   FWPS_FIELD_IKEEXT_V4_IP_LOCAL_ADDRESS,
   FWPS_FIELD_IKEEXT_V4_IP_REMOTE_ADDRESS,
   FWPS_FIELD_IKEEXT_V4_IP_LOCAL_INTERFACE,
   FWPS_FIELD_IKEEXT_V4_PROFILE_ID,
   FWPS_FIELD_IKEEXT_V4_IPSEC_SECURITY_REALM_ID,
   FWPS_FIELD_IKEEXT_V4_MAX
} FWPS_FIELDS_IKEEXT_V4;
typedef enum FWPS_FIELDS_IKEEXT_V6_
{
   FWPS_FIELD_IKEEXT_V6_IP_LOCAL_ADDRESS,
   FWPS_FIELD_IKEEXT_V6_IP_REMOTE_ADDRESS,
   FWPS_FIELD_IKEEXT_V6_IP_LOCAL_INTERFACE,
   FWPS_FIELD_IKEEXT_V6_PROFILE_ID,
   FWPS_FIELD_IKEEXT_V6_IPSEC_SECURITY_REALM_ID,
   FWPS_FIELD_IKEEXT_V6_MAX
} FWPS_FIELDS_IKEEXT_V6;
typedef enum FWPS_FIELDS_RPC_UM_
{
   FWPS_FIELD_RPC_UM_REMOTE_USER_TOKEN,
   FWPS_FIELD_RPC_UM_IF_UUID,
   FWPS_FIELD_RPC_UM_IF_VERSION,
   FWPS_FIELD_RPC_UM_IF_FLAG,
   FWPS_FIELD_RPC_UM_DCOM_APP_ID,
   FWPS_FIELD_RPC_UM_IMAGE_NAME,
   FWPS_FIELD_RPC_UM_PROTOCOL,
   FWPS_FIELD_RPC_UM_AUTH_TYPE,
   FWPS_FIELD_RPC_UM_AUTH_LEVEL,
   FWPS_FIELD_RPC_UM_SEC_ENCRYPT_ALGORITHM,
   FWPS_FIELD_RPC_UM_SEC_KEY_SIZE,
   FWPS_FIELD_RPC_UM_LOCAL_ADDR_V4,
   FWPS_FIELD_RPC_UM_LOCAL_ADDR_V6,
   FWPS_FIELD_RPC_UM_LOCAL_PORT,
   FWPS_FIELD_RPC_UM_PIPE,
   FWPS_FIELD_RPC_UM_REMOTE_ADDR_V4,
   FWPS_FIELD_RPC_UM_REMOTE_ADDR_V6,
   FWPS_FIELD_RPC_UM_MAX
} FWPS_FIELDS_RPC_UM;
typedef enum FWPS_FIELDS_RPC_EPMAP_
{
   FWPS_FIELD_RPC_EPMAP_REMOTE_USER_TOKEN,
   FWPS_FIELD_RPC_EPMAP_IF_UUID,
   FWPS_FIELD_RPC_EPMAP_IF_VERSION,
   FWPS_FIELD_RPC_EPMAP_PROTOCOL,
   FWPS_FIELD_RPC_EPMAP_AUTH_TYPE,
   FWPS_FIELD_RPC_EPMAP_AUTH_LEVEL,
   FWPS_FIELD_RPC_EPMAP_SEC_ENCRYPT_ALGORITHM,
   FWPS_FIELD_RPC_EPMAP_SEC_KEY_SIZE,
   FWPS_FIELD_RPC_EPMAP_LOCAL_ADDR_V4,
   FWPS_FIELD_RPC_EPMAP_LOCAL_ADDR_V6,
   FWPS_FIELD_RPC_EPMAP_LOCAL_PORT,
   FWPS_FIELD_RPC_EPMAP_PIPE,
   FWPS_FIELD_RPC_EPMAP_REMOTE_ADDR_V4,
   FWPS_FIELD_RPC_EPMAP_REMOTE_ADDR_V6,
   FWPS_FIELD_RPC_EPMAP_MAX
} FWPS_FIELDS_RPC_EPMAP;
typedef enum FWPS_FIELDS_RPC_EP_ADD_
{
   FWPS_FIELD_RPC_EP_ADD_PROCESS_WITH_RPC_IF_UUID,
   FWPS_FIELD_RPC_EP_ADD_PROTOCOL,
   FWPS_FIELD_RPC_EP_ADD_EP_VALUE,
   FWPS_FIELD_RPC_EP_ADD_EP_FLAGS,
   FWPS_FIELD_RPC_EP_ADD_MAX
} FWPS_FIELDS_RPC_EP_ADD;
typedef enum FWPS_FIELDS_RPC_PROXY_CONN_
{
   FWPS_FIELD_RPC_PROXY_CONN_CLIENT_TOKEN,
   FWPS_FIELD_RPC_PROXY_CONN_SERVER_NAME,
   FWPS_FIELD_RPC_PROXY_CONN_SERVER_PORT,
   FWPS_FIELD_RPC_PROXY_CONN_PROXY_AUTH_TYPE,
   FWPS_FIELD_RPC_PROXY_CONN_CLIENT_CERT_KEY_LENGTH,
   FWPS_FIELD_RPC_PROXY_CONN_CLIENT_CERT_OID,
   FWPS_FIELD_RPC_PROXY_CONN_MAX
} FWPS_FIELDS_RPC_PROXY_CONN;
typedef enum FWPS_FIELDS_RPC_PROXY_IF_
{
   FWPS_FIELD_RPC_PROXY_IF_CLIENT_TOKEN,
   FWPS_FIELD_RPC_PROXY_IF_IF_UUID,
   FWPS_FIELD_RPC_PROXY_IF_IF_VERSION,
   FWPS_FIELD_RPC_PROXY_IF_SERVER_NAME,
   FWPS_FIELD_RPC_PROXY_IF_SERVER_PORT,
   FWPS_FIELD_RPC_PROXY_IF_PROXY_AUTH_TYPE,
   FWPS_FIELD_RPC_PROXY_IF_CLIENT_CERT_KEY_LENGTH,
   FWPS_FIELD_RPC_PROXY_IF_CLIENT_CERT_OID,
   FWPS_FIELD_RPC_PROXY_IF_MAX
} FWPS_FIELDS_RPC_PROXY_IF_IF;
typedef enum FWPS_FIELDS_KM_AUTHORIZATION_
{
   FWPS_FIELD_KM_AUTHORIZATION_REMOTE_ID,
   FWPS_FIELD_KM_AUTHORIZATION_AUTHENTICATION_TYPE,
   FWPS_FIELD_KM_AUTHORIZATION_KM_TYPE,
   FWPS_FIELD_KM_AUTHORIZATION_DIRECTION,
   FWPS_FIELD_KM_AUTHORIZATION_KM_MODE,
   FWPS_FIELD_KM_AUTHORIZATION_IPSEC_POLICY_KEY,
   FWPS_FIELD_KM_AUTHORIZATION_NAP_CONTEXT,
   FWPS_FIELD_KM_AUTHORIZATION_MAX,
} FWPS_FIELDS_KM_AUTHORIZATION;
typedef enum FWPS_FIELDS_INBOUND_RESERVED2_
{
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED0,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED1,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED2,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED3,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED4,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED5,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED6,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED7,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED8,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED9,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED10,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED11,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED12,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED13,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED14,
   FWPS_FIELD_INBOUND_RESERVED2_RESERVED15,
   FWPS_FIELD_INBOUND_RESERVED2_MAX,
} FWPS_FIELDS_INBOUND_RESERVED2;
typedef enum {
    InetDiscardSourceUnspecified = 0,
    InetDiscardDestinationMulticast = 1,
    InetDiscardHeaderInvalid = 2,
    InetDiscardChecksumInvalid = 3,
    InetDiscardEndpointNotFound = 4,
    InetDiscardConnectedPath = 5,
    InetDiscardSessionState = 6,
    InetDiscardReceiveInspection = 7,
    InetDiscardAckInvalid = 8,
    InetDiscardExpectedSyn = 9,
    InetDiscardRst = 10,
    InetDiscardSynRcvdSyn = 11,
    InetDiscardSimultaneousConnect = 12,
    InetDiscardPawsFailed = 13,
    InetDiscardLandAttack = 14,
    InetDiscardMissedReset = 15,
    InetDiscardOutsideWindow = 16,
    InetDiscardDuplicateSegment = 17,
    InetDiscardClosedWindow = 18,
    InetDiscardTcbRemoved = 19,
    InetDiscardFinWait2 = 20,
    InetDiscardReassemblyConflict = 21,
    InetDiscardFinReceived = 22,
    InetDiscardListenerInvalidFlags = 23,
    InetDiscardUrgentDeliveryAllocationFailure = 24,
    InetDiscardTcbNotInTcbTable = 25,
    InetDiscardTimeWaitTcbReceivedRstOutsideWindow = 26,
    InetDiscardTimeWaitTcbSynAndOtherFlags = 27,
    InetDiscardTimeWaitTcb = 28,
    InetDiscardSynAckWithFastopenCookieRequest = 29,
    InetDiscardReasonPauseAccept = 30,
    InetDiscardReasonSynAttack = 31,
    InetDiscardReasonMaxEnumValue
} INET_DISCARD_REASON, *PINET_DISCARD_REASON;
typedef enum {
    IpDiscardBadSourceAddress = 1,
    IpDiscardNotLocallyDestined,
    IpDiscardProtocolUnreachable,
    IpDiscardPortUnreachable,
    IpDiscardBadLength,
    IpDiscardMalformedHeader,
    IpDiscardNoRoute,
    IpDiscardBeyondScope,
    IpDiscardInspectionDrop,
    IpDiscardTooManyDecapsulations,
    IpDiscardAdministrativelyProhibited,
    IpDiscardBadChecksum,
    IpDiscardReceivePathMax = 127,
    IpDiscardHopLimitExceeded,
    IpDiscardAddressUnreachable,
    IpDiscardRscPacket,
    IpDiscardForwardPathMax = 255,
    IpDiscardArbitrationUnhandled,
    IpDiscardInspectionAbsorb,
    IpDiscardDontFragmentMtuExceeded,
    IpDiscardBufferLengthExceeded,
    IpDiscardAddressResolutionTimeout,
    IpDiscardAddressResolutionFailure,
    IpDiscardIpsecFailure,
    IpDiscardExtensionHeadersFailure,
    IpDiscardAllocationFailure,
    IpDiscardIPSNPIDrop,
    IpDiscardUnsupportedOffload,
    IpDiscardRoutingFailure,
    IpDiscardAncillaryDataFailure,
    IpDiscardRawDataFailure,
    IpDiscardSessionStateFailure,
    IpDiscardMax
} IP_DISCARD_REASON, *PIP_DISCARD_REASON;
typedef struct FWPS_INCOMING_METADATA_VALUES0_
{
   UINT32 currentMetadataValues;
   UINT32 flags;
   UINT64 reserved;
   FWPS_DISCARD_METADATA0 discardMetadata;
   UINT64 flowHandle;
   UINT32 ipHeaderSize;
   UINT32 transportHeaderSize;
   FWP_BYTE_BLOB* processPath;
   UINT64 token;
   UINT64 processId;
   UINT32 sourceInterfaceIndex;
   UINT32 destinationInterfaceIndex;
   ULONG compartmentId;
   FWPS_INBOUND_FRAGMENT_METADATA0 fragmentMetadata;
   ULONG pathMtu;
   HANDLE completionHandle;
   UINT64 transportEndpointHandle;
   SCOPE_ID remoteScopeId;
   WSACMSGHDR* controlData;
   ULONG controlDataLength;
   FWP_DIRECTION packetDirection;
   PVOID headerIncludeHeader;
   ULONG headerIncludeHeaderLength;
   IP_ADDRESS_PREFIX destinationPrefix;
   UINT16 frameLength;
   UINT64 parentEndpointHandle;
   UINT32 icmpIdAndSequence;
   DWORD localRedirectTargetPID;
   SOCKADDR* originalDestination;
   HANDLE redirectRecords;
   UINT32 currentL2MetadataValues;
   UINT32 l2Flags;
   UINT32 ethernetMacHeaderSize;
   UINT32 wiFiOperationMode;
  UINT32 padding0;
  USHORT padding1;
  UINT32 padding2;
   HANDLE vSwitchPacketContext;
   PVOID subProcessTag;
   UINT64 reserved1;
} FWPS_INCOMING_METADATA_VALUES0;
   (((metadataValues)->currentMetadataValues & (metadataField)) == (metadataField))
   (((metadataValues)->currentL2MetadataValues & (l2MetadataField)) == (l2MetadataField))
typedef void (NTAPI *FWPS_CALLOUT_CLASSIFY_FN0)(
                        _In_ const FWPS_INCOMING_VALUES0* inFixedValues,
                        _In_ const FWPS_INCOMING_METADATA_VALUES0* inMetaValues,
                        _Inout_opt_ void* layerData,
                        _In_ const FWPS_FILTER0* filter,
                        _In_ UINT64 flowContext,
                        _Inout_ FWPS_CLASSIFY_OUT0* classifyOut
                        );
typedef void (NTAPI *FWPS_CALLOUT_CLASSIFY_FN1)(
                        _In_ const FWPS_INCOMING_VALUES0* inFixedValues,
                        _In_ const FWPS_INCOMING_METADATA_VALUES0* inMetaValues,
                        _Inout_opt_ void* layerData,
                        _In_opt_ const void* classifyContext,
                        _In_ const FWPS_FILTER1* filter,
                        _In_ UINT64 flowContext,
                        _Inout_ FWPS_CLASSIFY_OUT0* classifyOut
                        );
typedef void (NTAPI *FWPS_CALLOUT_CLASSIFY_FN2)(
                        _In_ const FWPS_INCOMING_VALUES0* inFixedValues,
                        _In_ const FWPS_INCOMING_METADATA_VALUES0* inMetaValues,
                        _Inout_opt_ void* layerData,
                        _In_opt_ const void* classifyContext,
                        _In_ const FWPS_FILTER2* filter,
                        _In_ UINT64 flowContext,
                        _Inout_ FWPS_CLASSIFY_OUT0* classifyOut
                        );
typedef void (NTAPI *FWPS_CALLOUT_CLASSIFY_FN3)(
                        _In_ const FWPS_INCOMING_VALUES0* inFixedValues,
                        _In_ const FWPS_INCOMING_METADATA_VALUES0* inMetaValues,
                        _Inout_opt_ void* layerData,
                        _In_opt_ const void* classifyContext,
                        _In_ const FWPS_FILTER3* filter,
                        _In_ UINT64 flowContext,
                        _Inout_ FWPS_CLASSIFY_OUT0* classifyOut
                        );
typedef NTSTATUS (NTAPI *FWPS_CALLOUT_NOTIFY_FN0)(
                            _In_ FWPS_CALLOUT_NOTIFY_TYPE notifyType,
                            _In_ const GUID* filterKey,
                            _Inout_ FWPS_FILTER0* filter
                            );
typedef NTSTATUS (NTAPI *FWPS_CALLOUT_NOTIFY_FN1)(
                            _In_ FWPS_CALLOUT_NOTIFY_TYPE notifyType,
                            _In_ const GUID* filterKey,
                            _Inout_ FWPS_FILTER1* filter
                            );
typedef NTSTATUS (NTAPI *FWPS_CALLOUT_NOTIFY_FN2)(
                            _In_ FWPS_CALLOUT_NOTIFY_TYPE notifyType,
                            _In_ const GUID* filterKey,
                            _Inout_ FWPS_FILTER2* filter
                            );
typedef NTSTATUS (NTAPI *FWPS_CALLOUT_NOTIFY_FN3)(
                            _In_ FWPS_CALLOUT_NOTIFY_TYPE notifyType,
                            _In_ const GUID* filterKey,
                            _Inout_ FWPS_FILTER3* filter
                            );
typedef void (NTAPI *FWPS_CALLOUT_FLOW_DELETE_NOTIFY_FN0)(
                        _In_ UINT16 layerId,
                        _In_ UINT32 calloutId,
                        _In_ UINT64 flowContext
                        );
typedef void (NTAPI *FWPS_CALLOUT_BOOTTIME_CALLOUT_DELETE_NOTIFY_FN0)(
                        _In_ UINT32 calloutId
                        );
typedef struct FWPS_CALLOUT0_
{
   GUID calloutKey;
   UINT32 flags;
   FWPS_CALLOUT_CLASSIFY_FN0 classifyFn;
   FWPS_CALLOUT_NOTIFY_FN0 notifyFn;
   FWPS_CALLOUT_FLOW_DELETE_NOTIFY_FN0 flowDeleteFn;
} FWPS_CALLOUT0;
typedef struct FWPS_CALLOUT1_
{
   GUID calloutKey;
   UINT32 flags;
   FWPS_CALLOUT_CLASSIFY_FN1 classifyFn;
   FWPS_CALLOUT_NOTIFY_FN1 notifyFn;
   FWPS_CALLOUT_FLOW_DELETE_NOTIFY_FN0 flowDeleteFn;
} FWPS_CALLOUT1;
typedef struct FWPS_CALLOUT2_
{
   GUID calloutKey;
   UINT32 flags;
   FWPS_CALLOUT_CLASSIFY_FN2 classifyFn;
   FWPS_CALLOUT_NOTIFY_FN2 notifyFn;
   FWPS_CALLOUT_FLOW_DELETE_NOTIFY_FN0 flowDeleteFn;
} FWPS_CALLOUT2;
typedef struct FWPS_CALLOUT3_
{
   GUID calloutKey;
   UINT32 flags;
   FWPS_CALLOUT_CLASSIFY_FN3 classifyFn;
   FWPS_CALLOUT_NOTIFY_FN3 notifyFn;
   FWPS_CALLOUT_FLOW_DELETE_NOTIFY_FN0 flowDeleteFn;
} FWPS_CALLOUT3;
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsCalloutRegister0(
   _Inout_ void* deviceObject,
   _In_ const FWPS_CALLOUT0* callout,
   _Out_opt_ UINT32* calloutId
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsCalloutRegister1(
   _Inout_ void* deviceObject,
   _In_ const FWPS_CALLOUT1* callout,
   _Out_opt_ UINT32* calloutId
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsCalloutRegister2(
   _Inout_ void* deviceObject,
   _In_ const FWPS_CALLOUT2* callout,
   _Out_opt_ UINT32* calloutId
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsCalloutRegister3(
   _Inout_ void* deviceObject,
   _In_ const FWPS_CALLOUT3* callout,
   _Out_opt_ UINT32* calloutId
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsCalloutUnregisterById0(_In_ const UINT32 calloutId);
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsCalloutUnregisterByKey0(_In_ const GUID* calloutKey);
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsFlowAssociateContext0(
   _In_ UINT64 flowId,
   _In_ UINT16 layerId,
   _In_ UINT32 calloutId,
   _In_ UINT64 flowContext
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsFlowRemoveContext0(
   _In_ UINT64 flowId,
   _In_ UINT16 layerId,
   _In_ UINT32 calloutId
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsFlowAbort0(
          _In_ UINT64 flowId
          );
typedef struct FWPS_PACKET_LIST_INBOUND_IPSEC_INFORMATION0_
{
   unsigned isSecure:1;
   unsigned isTransportMode:1;
   unsigned isTunnelMode:1;
   unsigned isTransportModeVerified:1;
   unsigned isTunnelModeVerified:1;
   unsigned isDeTunneled:1;
} FWPS_PACKET_LIST_INBOUND_IPSEC_INFORMATION0;
typedef struct FWPS_PACKET_LIST_OUTBOUND_IPSEC_INFORMATION0_
{
   unsigned isIPsecPolicyMatch:1;
   unsigned isTransportPolicyMatch:1;
   unsigned isTunnelPolicyMatch:1;
   unsigned isTunnelIPinIP:1;
} FWPS_PACKET_LIST_OUTBOUND_IPSEC_INFORMATION0;
#pragma warning(push)
#pragma warning(disable:4201)
typedef struct FWPS_PACKET_LIST_IPSEC_INFORMATION0_
{
   union
   {
      FWPS_PACKET_LIST_INBOUND_IPSEC_INFORMATION0 inbound;
      FWPS_PACKET_LIST_OUTBOUND_IPSEC_INFORMATION0 outbound;
      UINT32 flags;
   };
} FWPS_PACKET_LIST_IPSEC_INFORMATION0;
#pragma warning(pop)
typedef struct FWPS_PACKET_LIST_FWP_INFORMATION0_
{
   unsigned isReinjected:1;
} FWPS_PACKET_LIST_FWP_INFORMATION0;
typedef struct FWPS_PACKET_LIST_INFORMATION0_
{
   FWPS_PACKET_LIST_IPSEC_INFORMATION0 ipsecInformation;
   FWPS_PACKET_LIST_FWP_INFORMATION0 fwpInformation;
} FWPS_PACKET_LIST_INFORMATION0;
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsGetPacketListSecurityInformation0(
   _In_ NET_BUFFER_LIST* packetList,
   _In_ UINT32 queryFlags,
   _Inout_ FWPS_PACKET_LIST_INFORMATION0* packetInformation
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsPendOperation0(
   _In_ HANDLE completionHandle,
   _Out_ HANDLE* completionContext
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
void
NTAPI
FwpsCompleteOperation0(
   _In_ HANDLE completionContext,
   _In_opt_ PNET_BUFFER_LIST netBufferList
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsAcquireClassifyHandle0(
   _In_ void* classifyContext,
   _In_ UINT32 flags,
   _Out_ UINT64* classifyHandle
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
void
NTAPI
FwpsReleaseClassifyHandle0(
   _In_ UINT64 classifyHandle
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsPendClassify0(
   _In_ UINT64 classifyHandle,
   _In_ UINT64 filterId,
   _In_ UINT32 flags,
   _Inout_ FWPS_CLASSIFY_OUT0* classifyOut
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
void
NTAPI
FwpsCompleteClassify0(
   _In_ UINT64 classifyHandle,
   _In_ UINT32 flags,
   _In_opt_ const FWPS_CLASSIFY_OUT0* classifyOut
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsAcquireWritableLayerDataPointer0(
   _In_ UINT64 classifyHandle,
   _In_ UINT64 filterId,
   _In_ UINT32 flags,
   _Out_ PVOID* writableLayerData,
   _Inout_opt_ FWPS_CLASSIFY_OUT0* classifyOut
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
void
NTAPI
FwpsApplyModifiedLayerData0(
   _In_ UINT64 classifyHandle,
   _In_ PVOID modifiedLayerData,
   _In_ UINT32 flags
   );
typedef struct _FWPS_CONNECT_REQUEST0
{
                SOCKADDR_STORAGE localAddressAndPort;
                SOCKADDR_STORAGE remoteAddressAndPort;
             UINT64 portReservationToken;
             DWORD localRedirectTargetPID;
   struct _FWPS_CONNECT_REQUEST0* previousVersion;
   UINT64 modifierFilterId;
             HANDLE localRedirectHandle;
             void* localRedirectContext;
             SIZE_T localRedirectContextSize;
} FWPS_CONNECT_REQUEST0;
typedef struct _FWPS_BIND_REQUEST0
{
                SOCKADDR_STORAGE localAddressAndPort;
             UINT64 portReservationToken;
   struct _FWPS_BIND_REQUEST0* previousVersion;
   UINT64 modifierFilterId;
} FWPS_BIND_REQUEST0;
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsClassifyOptionSet0(
   _In_ const FWPS_INCOMING_METADATA_VALUES0* inMetadataValues,
   _In_ const FWP_CLASSIFY_OPTION_TYPE option,
   _In_ const FWP_VALUE0* newValue
   );
typedef struct FWPS_TRANSPORT_SEND_PARAMS0_
{
   UCHAR* remoteAddress;
   SCOPE_ID remoteScopeId;
   WSACMSGHDR* controlData OPTIONAL;
   ULONG controlDataLength OPTIONAL;
} FWPS_TRANSPORT_SEND_PARAMS0;
typedef struct FWPS_TRANSPORT_SEND_PARAMS1_
{
   UCHAR* remoteAddress;
   SCOPE_ID remoteScopeId;
   WSACMSGHDR* controlData OPTIONAL;
   ULONG controlDataLength OPTIONAL;
   UCHAR* headerIncludeHeader OPTIONAL;
   ULONG headerIncludeHeaderLength OPTIONAL;
} FWPS_TRANSPORT_SEND_PARAMS1;
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsInjectionHandleCreate0(
   _In_opt_ ADDRESS_FAMILY addressFamily,
   _In_ UINT32 flags,
   _Out_ HANDLE* injectionHandle
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsInjectionHandleDestroy0(_In_ HANDLE injectionHandle);
typedef void (NTAPI *FWPS_INJECT_COMPLETE0)(
                        _In_ void* context,
                        _Inout_ NET_BUFFER_LIST* netBufferList,
                        _In_ BOOLEAN dispatchLevel
                        );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsAllocateNetBufferAndNetBufferList0(
   _In_ NDIS_HANDLE poolHandle,
   _In_ USHORT contextSize,
   _In_ USHORT contextBackFill,
   _In_opt_ MDL* mdlChain,
   _In_ ULONG dataOffset,
   _In_ SIZE_T dataLength,
   _Outptr_ NET_BUFFER_LIST** netBufferList
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
void
NTAPI
FwpsFreeNetBufferList0(
   _In_ NET_BUFFER_LIST* netBufferList
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsAllocateCloneNetBufferList0(
   _Inout_ NET_BUFFER_LIST* originalNetBufferList,
   _In_opt_ NDIS_HANDLE netBufferListPoolHandle,
   _In_opt_ NDIS_HANDLE netBufferPoolHandle,
   _In_ ULONG allocateCloneFlags,
   _Outptr_ NET_BUFFER_LIST** netBufferList
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
void
NTAPI
FwpsFreeCloneNetBufferList0(
   _In_ NET_BUFFER_LIST* netBufferList,
   _In_ ULONG freeCloneFlags
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsReassembleForwardFragmentGroup0(
   _In_ ADDRESS_FAMILY addressFamily,
   _Inout_ NET_BUFFER_LIST* fragmentGroupNblChain,
   _In_opt_ NDIS_HANDLE netBufferAndNetBufferListPoolHandle,
   _In_ ULONG dataBackFill,
   _In_ ULONG flags,
   _Outptr_ NET_BUFFER_LIST** reassembledNbl
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsInjectNetworkSendAsync0(
   _In_ HANDLE injectionHandle,
   _In_opt_ HANDLE injectionContext,
   _In_ UINT32 flags,
   _In_ COMPARTMENT_ID compartmentId,
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ FWPS_INJECT_COMPLETE0 completionFn,
   _In_opt_ HANDLE completionContext
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsInjectForwardAsync0(
   _In_ HANDLE injectionHandle,
   _In_opt_ HANDLE injectionContext,
   _In_ UINT32 flags,
   _In_ ADDRESS_FAMILY addressFamily,
   _In_ COMPARTMENT_ID compartmentId,
   _In_ IF_INDEX interfaceIndex,
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ FWPS_INJECT_COMPLETE0 completionFn,
   _In_opt_ HANDLE completionContext
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsConstructIpHeaderForTransportPacket0(
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ ULONG headerIncludeHeaderLength,
   _In_ ADDRESS_FAMILY addressFamily,
   _In_ const UCHAR* sourceAddress,
   _In_ const UCHAR* remoteAddress,
   _In_ IPPROTO nextProtocol,
   _In_opt_ UINT64 endpointHandle,
   _In_opt_ const WSACMSGHDR* controlData,
   _In_ ULONG controlDataLength,
   _In_ UINT32 flags,
   _Reserved_ PVOID reserved,
   _In_opt_ IF_INDEX interfaceIndex,
   _In_opt_ IF_INDEX subInterfaceIndex
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsInjectTransportSendAsync0(
   _In_ HANDLE injectionHandle,
   _In_opt_ HANDLE injectionContext,
   _In_ UINT64 endpointHandle,
   _In_ UINT32 flags,
   _In_opt_ FWPS_TRANSPORT_SEND_PARAMS0* sendArgs,
   _In_ ADDRESS_FAMILY addressFamily,
   _In_ COMPARTMENT_ID compartmentId,
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ FWPS_INJECT_COMPLETE0 completionFn,
   _In_opt_ HANDLE completionContext
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsInjectTransportSendAsync1(
   _In_ HANDLE injectionHandle,
   _In_opt_ HANDLE injectionContext,
   _In_ UINT64 endpointHandle,
   _In_ UINT32 flags,
   _In_opt_ FWPS_TRANSPORT_SEND_PARAMS1* sendArgs,
   _In_ ADDRESS_FAMILY addressFamily,
   _In_ COMPARTMENT_ID compartmentId,
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ FWPS_INJECT_COMPLETE0 completionFn,
   _In_opt_ HANDLE completionContext
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsInjectTransportReceiveAsync0(
   _In_ HANDLE injectionHandle,
   _In_opt_ HANDLE injectionContext,
   _Reserved_ PVOID reserved,
   _In_ UINT32 flags,
   _In_ ADDRESS_FAMILY addressFamily,
   _In_ COMPARTMENT_ID compartmentId,
   _In_ IF_INDEX interfaceIndex,
   _In_ IF_INDEX subInterfaceIndex,
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ FWPS_INJECT_COMPLETE0 completionFn,
   _In_opt_ HANDLE completionContext
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsInjectNetworkReceiveAsync0(
   _In_ HANDLE injectionHandle,
   _In_opt_ HANDLE injectionContext,
   _In_ UINT32 flags,
   _In_ COMPARTMENT_ID compartmentId,
   _In_ IF_INDEX interfaceIndex,
   _In_ IF_INDEX subInterfaceIndex,
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ FWPS_INJECT_COMPLETE0 completionFn,
   _In_opt_ HANDLE completionContext
   );
_IRQL_requires_min_(PASSIVE_LEVEL)
_IRQL_requires_max_(DISPATCH_LEVEL)
_Must_inspect_result_
NTSTATUS
NTAPI
FwpsInjectMacReceiveAsync0(
   _In_ HANDLE injectionHandle,
   _In_opt_ HANDLE injectionContext,
   _In_ UINT32 flags,
   _In_ UINT16 layerId,
   _In_ IF_INDEX interfaceIndex,
   _In_ NDIS_PORT_NUMBER NdisPortNumber,
   _Inout_ NET_BUFFER_LIST* netBufferLists,
   _In_ FWPS_INJECT_COMPLETE completionFn,
   _In_opt_ HANDLE completionContext
   );
_IRQL_requires_min_(PASSIVE_LEVEL)
_IRQL_requires_max_(DISPATCH_LEVEL)
_Must_inspect_result_
NTSTATUS
NTAPI
FwpsInjectMacSendAsync0(
   _In_ HANDLE injectionHandle,
   _In_opt_ HANDLE injectionContext,
   _In_ UINT32 flags,
   _In_ UINT16 layerId,
   _In_ IF_INDEX interfaceIndex,
   _In_ NDIS_PORT_NUMBER NdisPortNumber,
   _Inout_ NET_BUFFER_LIST* netBufferLists,
   _In_ FWPS_INJECT_COMPLETE completionFn,
   _In_opt_ HANDLE completionContext
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
void
NTAPI
FwpsReferenceNetBufferList0(
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ BOOLEAN intendToModify
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
void
NTAPI
FwpsDereferenceNetBufferList0(
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ BOOLEAN dispatchLevel
   );
typedef enum FWPS_PACKET_INJECTION_STATE_
{
   FWPS_PACKET_NOT_INJECTED,
   FWPS_PACKET_INJECTED_BY_SELF,
   FWPS_PACKET_INJECTED_BY_OTHER,
   FWPS_PACKET_PREVIOUSLY_INJECTED_BY_SELF,
   FWPS_PACKET_INJECTION_STATE_MAX
} FWPS_PACKET_INJECTION_STATE;
_IRQL_requires_max_(DISPATCH_LEVEL)
FWPS_PACKET_INJECTION_STATE
NTAPI
FwpsQueryPacketInjectionState0(
   _In_ HANDLE injectionHandle,
   _In_ const NET_BUFFER_LIST* netBufferList,
   _Out_opt_ HANDLE* injectionContext
   );
typedef enum FWPS_CONNECTION_REDIRECT_STATE_
{
   FWPS_CONNECTION_NOT_REDIRECTED,
   FWPS_CONNECTION_REDIRECTED_BY_SELF,
   FWPS_CONNECTION_REDIRECTED_BY_OTHER,
   FWPS_CONNECTION_PREVIOUSLY_REDIRECTED_BY_SELF,
   FWPS_CONNECTION_REDIRECT_STATE_MAX
} FWPS_CONNECTION_REDIRECT_STATE;
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsRedirectHandleCreate0(
   _In_ const GUID* providerGuid,
   _Reserved_ UINT32 flags,
   _Out_ HANDLE* redirectHandle
   );
_IRQL_requires_(PASSIVE_LEVEL)
void
NTAPI
FwpsRedirectHandleDestroy0(_In_ HANDLE redirectHandle);
_IRQL_requires_min_(PASSIVE_LEVEL)
_IRQL_requires_max_(DISPATCH_LEVEL)
FWPS_CONNECTION_REDIRECT_STATE
NTAPI
FwpsQueryConnectionRedirectState0(
   _In_ HANDLE redirectRecords,
   _In_ HANDLE redirectHandle,
   _Outptr_opt_result_maybenull_ void** redirectContext
   );
_IRQL_requires_min_(PASSIVE_LEVEL)
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsQueryConnectionSioFormatRedirectRecords0(
   _In_ HANDLE RedirectRecords,
   _Out_opt_ PVOID OutputBuffer,
   _In_ SIZE_T OutputBufferLength,
   _Out_opt_ PSIZE_T BytesTransferred
   );
typedef enum FWPS_NET_BUFFER_LIST_EVENT_TYPE0_
{
   FWPS_NET_BUFFER_LIST_ENTERED_NETIO,
   FWPS_NET_BUFFER_LIST_CLONED_BY_NETIO,
   FWPS_NET_BUFFER_LIST_CLONED_VIA_WFP_API,
   FWPS_NET_BUFFER_LIST_DUPLICATED_BY_NETIO,
   FWPS_NET_BUFFER_LIST_EXIT_NETIO,
   FWPS_NET_BUFFER_LIST_CONTEXT_REMOVED,
   FWPS_NET_BUFFER_LIST_NDIS_SEND_COMPLETE,
   FWPS_NET_BUFFER_LIST_NDIS_RECV_COMPLETE
   ,
   FWPS_NET_BUFFER_LIST_NDIS_ETHERNET_SEND_COMPLETE = FWPS_NET_BUFFER_LIST_NDIS_SEND_COMPLETE,
   FWPS_NET_BUFFER_LIST_NDIS_ETHERNET_RECV_COMPLETE = FWPS_NET_BUFFER_LIST_NDIS_RECV_COMPLETE,
   FWPS_NET_BUFFER_LIST_NDIS_NATIVE_SEND_COMPLETE,
   FWPS_NET_BUFFER_LIST_NDIS_NATIVE_RECV_COMPLETE,
   FWPS_NET_BUFFER_LIST_NDIS_VSWITCH_INGRESS_COMPLETE,
   FWPS_NET_BUFFER_LIST_NDIS_VSWITCH_EGRESS_COMPLETE,
   FWPS_NET_BUFFER_LIST_CLONED_BY_NDIS
   ,
   FWPS_NET_BUFFER_LIST_REASSEMBLED_FRAGMENT,
   FWPS_NET_BUFFER_LIST_REASSEMBLY_COMPLETE
} FWPS_NET_BUFFER_LIST_EVENT_TYPE0;
typedef void (NTAPI *FWPS_NET_BUFFER_LIST_NOTIFY_FN0)(
                        _In_ FWPS_NET_BUFFER_LIST_EVENT_TYPE0 eventType,
                        _Inout_opt_ NET_BUFFER_LIST* netBufferList,
                        _Inout_opt_ NET_BUFFER_LIST* newNetBufferList,
                        _In_ UINT16 layerId,
                        _In_ UINT64 context,
                        _In_ UINT64 contextTag
                        );
_IRQL_requires_max_(DISPATCH_LEVEL)
UINT64
NTAPI
FwpsNetBufferListGetTagForContext0();
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsNetBufferListAssociateContext0(
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ UINT16 layerId,
   _In_ UINT64 context,
   _In_ UINT64 contextTag,
   _In_ GUID* providerGuid,
   _Inout_ void* deviceObject,
   _In_ FWPS_NET_BUFFER_LIST_NOTIFY_FN0 notifyFn,
   _In_ UINT32 flags
   );
typedef NTSTATUS (NTAPI *FWPS_NET_BUFFER_LIST_NOTIFY_FN1)(
                           _In_ FWPS_NET_BUFFER_LIST_EVENT_TYPE0 eventType,
                           _Inout_ _When_(eventType == FWPS_NET_BUFFER_LIST_CONTEXT_REMOVED, _Maybenull_)
                           NET_BUFFER_LIST* netBufferList,
                           _Inout_opt_ NET_BUFFER_LIST* newNetBufferList,
                           _In_ UINT16 layerId,
                           _In_ UINT64 context,
                           _In_ UINT64 contextTag
                           );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsNetBufferListAssociateContext1(
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ UINT16 layerId,
   _In_ UINT64 context,
   _In_ UINT64 contextTag,
   _In_ GUID* providerGuid,
   _Inout_ void* deviceObject,
   _In_ FWPS_NET_BUFFER_LIST_NOTIFY_FN1 notifyFn,
   _In_ UINT32 flags
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsNetBufferListRetrieveContext0(
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ UINT64 contextTag,
   _In_ BOOLEAN removeContext,
   _In_ UINT32 flags,
   _Out_ UINT64* context
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsNetBufferListRemoveContext0(
   _Inout_opt_ NET_BUFFER_LIST* netBufferList,
   _In_ UINT64 contextTag,
   _In_ UINT32 flags
   );
typedef struct FWPS_STREAM_DATA_OFFSET0_
{
   NET_BUFFER_LIST* netBufferList;
   NET_BUFFER* netBuffer;
   MDL* mdl;
   UINT32 mdlOffset;
   UINT32 netBufferOffset;
   SIZE_T streamDataOffset;
} FWPS_STREAM_DATA_OFFSET0;
typedef struct FWPS_STREAM_DATA0_
{
   UINT32 flags;
   FWPS_STREAM_DATA_OFFSET0 dataOffset;
   SIZE_T dataLength;
   NET_BUFFER_LIST* netBufferListChain;
} FWPS_STREAM_DATA0;
typedef enum FWPS_STREAM_ACTION_TYPE_
{
   FWPS_STREAM_ACTION_NONE,
   FWPS_STREAM_ACTION_NEED_MORE_DATA,
   FWPS_STREAM_ACTION_DROP_CONNECTION,
   FWPS_STREAM_ACTION_DEFER,
   FWPS_STREAM_ACTION_ALLOW_CONNECTION,
   FWPS_STREAM_ACTION_TYPE_MAX
} FWPS_STREAM_ACTION_TYPE;
typedef struct FWPS_STREAM_CALLOUT_IO_PACKET0_
{
            FWPS_STREAM_DATA0* streamData;
            SIZE_T missedBytes;
             UINT32 countBytesRequired;
             SIZE_T countBytesEnforced;
             FWPS_STREAM_ACTION_TYPE streamAction;
} FWPS_STREAM_CALLOUT_IO_PACKET0;
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsStreamInjectAsync0(
   _In_ HANDLE injectionHandle,
   _In_opt_ HANDLE injectionContext,
   _In_ UINT32 flags,
   _In_ UINT64 flowId,
   _In_ UINT32 calloutId,
   _In_ UINT16 layerId,
   _In_ UINT32 streamFlags,
   _Inout_opt_ NET_BUFFER_LIST* netBufferList,
   _In_ SIZE_T dataLength,
   _In_ FWPS_INJECT_COMPLETE0 completionFn,
   _In_opt_ HANDLE completionContext
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsStreamContinue0(
    _In_ UINT64 flowId,
    _In_ UINT32 calloutId,
    _In_ UINT16 layerId,
    _In_ UINT32 streamFlags
    );
_IRQL_requires_max_(DISPATCH_LEVEL)
void
NTAPI
FwpsCopyStreamDataToBuffer0(
         _In_ const FWPS_STREAM_DATA0* calloutStreamData,
         _Inout_updates_bytes_to_(bytesToCopy, *bytesCopied) PVOID buffer,
         _In_ SIZE_T bytesToCopy,
         _Out_ _Deref_out_range_(<=, bytesToCopy) SIZE_T* bytesCopied
         );
_IRQL_requires_max_(DISPATCH_LEVEL)
NTSTATUS
NTAPI
FwpsCloneStreamData0(
   _Inout_ FWPS_STREAM_DATA0* calloutStreamData,
   _In_opt_ NDIS_HANDLE netBufferListPoolHandle,
   _In_opt_ NDIS_HANDLE netBufferPoolHandle,
   _In_ ULONG allocateCloneFlags,
   _Outptr_ NET_BUFFER_LIST** netBufferListChain
   );
_IRQL_requires_max_(DISPATCH_LEVEL)
void
NTAPI
FwpsDiscardClonedStreamData0(
   _Inout_ NET_BUFFER_LIST* netBufferListChain,
   _In_ UINT32 allocateCloneFlags,
   _In_ BOOLEAN dispatchLevel
   );
NTSTATUS
NTAPI
FwpsVirtualIfTunnelInfoGet0(
   _In_ const FWPS_INCOMING_METADATA_VALUES0* metadata,
   _Out_ IPSEC_VIRTUAL_IF_TUNNEL_INFO0* virtualIfTunnelInfo
   );
NTSTATUS
NTAPI
FwpsVirtualIfTunnelInfoSet0(
   _Inout_ NET_BUFFER_LIST* netBufferList,
   _In_ const IPSEC_VIRTUAL_IF_TUNNEL_INFO0* virtualIfTunnelInfo
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsOpenToken0(
   IN HANDLE engineHandle,
   IN LUID modifiedId,
   IN DWORD desiredAccess,
   OUT HANDLE* accessToken
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsAleEndpointGetById0(
   _In_ HANDLE engineHandle,
   _In_ UINT64 endpointId,
   _Out_ FWPS_ALE_ENDPOINT_PROPERTIES0** properties
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsAleEndpointCreateEnumHandle0(
   _In_ HANDLE engineHandle,
   _In_opt_ const FWPS_ALE_ENDPOINT_ENUM_TEMPLATE0* enumTemplate,
   _Out_ HANDLE* enumHandle
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsAleEndpointEnum0(
   _In_ HANDLE engineHandle,
   _In_ HANDLE enumHandle,
   _In_ UINT32 numEntriesRequested,
   _Outptr_result_buffer_(*numEntriesReturned) FWPS_ALE_ENDPOINT_PROPERTIES0*** entries,
   _Out_ UINT32* numEntriesReturned
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsAleEndpointDestroyEnumHandle0(
   _In_ HANDLE engineHandle,
   _Inout_ HANDLE enumHandle
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsAleEndpointGetSecurityInfo0(
   _In_ HANDLE engineHandle,
   _In_ SECURITY_INFORMATION securityInfo,
   _Outptr_result_maybenull_ PSID* sidOwner,
   _Outptr_result_maybenull_ PSID* sidGroup,
   _Outptr_result_maybenull_ PACL* dacl,
   _Outptr_result_maybenull_ PACL* sacl,
   _Outptr_ PSECURITY_DESCRIPTOR* securityDescriptor
   );
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
FwpsAleEndpointSetSecurityInfo0(
   _In_ HANDLE engineHandle,
   _In_ SECURITY_INFORMATION securityInfo,
   _In_opt_ const SID* sidOwner,
   _In_opt_ const SID* sidGroup,
   _In_opt_ const ACL* dacl,
   _In_opt_ const ACL* sacl
   );
}
#endif
#pragma endregion
