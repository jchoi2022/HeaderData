#include <winapifamily.h>
#pragma region Desktop Family
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
typedef long HRESULT;
typedef LPVOID REFIID;
    #define GUID_DEFINED
    typedef struct _GUID {
        ULONG Data1;
        unsigned short Data2;
        unsigned short Data3;
        unsigned char Data4[8];
    } GUID;
typedef GUID FAR *LPGUID;
    ((HRESULT) (((unsigned long)(sev)<<31) | ((unsigned long)(fac)<<16) | ((unsigned long)(code))) )
    #include "ddraw.h"
    #include "dvp.h"
    #include "ddkernel.h"
#include "dmemmgr.h"
DEFINE_GUID( GUID_MiscellaneousCallbacks, 0xefd60cc0, 0x49e7, 0x11d0, 0x88, 0x9d, 0x00, 0xaa, 0x00, 0xbb, 0xb7, 0x6a);
DEFINE_GUID( GUID_VideoPortCallbacks, 0xefd60cc1, 0x49e7, 0x11d0, 0x88, 0x9d, 0x00, 0xaa, 0x00, 0xbb, 0xb7, 0x6a);
DEFINE_GUID( GUID_ColorControlCallbacks, 0xefd60cc2, 0x49e7, 0x11d0, 0x88, 0x9d, 0x00, 0xaa, 0x00, 0xbb, 0xb7, 0x6a);
DEFINE_GUID( GUID_VideoPortCaps, 0xefd60cc3, 0x49e7, 0x11d0, 0x88, 0x9d, 0x00, 0xaa, 0x00, 0xbb, 0xb7, 0x6a);
DEFINE_GUID( GUID_D3DCallbacks2, 0x0ba584e1, 0x70b6, 0x11d0, 0x88, 0x9d, 0x00, 0xaa, 0x00, 0xbb, 0xb7, 0x6a);
DEFINE_GUID( GUID_D3DCallbacks3, 0xddf41230, 0xec0a, 0x11d0, 0xa9, 0xb6, 0x00, 0xaa, 0x00, 0xc0, 0x99, 0x3e);
DEFINE_GUID( GUID_NonLocalVidMemCaps, 0x86c4fa80, 0x8d84, 0x11d0, 0x94, 0xe8, 0x00, 0xc0, 0x4f, 0xc3, 0x41, 0x37);
DEFINE_GUID( GUID_KernelCallbacks, 0x80863800, 0x6B06, 0x11D0, 0x9B, 0x06, 0x0, 0xA0, 0xC9, 0x03, 0xA3, 0xB8);
DEFINE_GUID( GUID_KernelCaps, 0xFFAA7540, 0x7AA8, 0x11D0, 0x9B, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8);
DEFINE_GUID( GUID_D3DExtendedCaps, 0x7de41f80, 0x9d93, 0x11d0, 0x89, 0xab, 0x0, 0xa0, 0xc9, 0x5, 0x41, 0x29);
DEFINE_GUID( GUID_ZPixelFormats, 0x93869880, 0x36cf, 0x11d1, 0x9b, 0x1b, 0x0, 0xaa, 0x0, 0xbb, 0xb8, 0xae);
DEFINE_GUID( GUID_DDMoreSurfaceCaps, 0x3b8a0466, 0xf269, 0x11d1, 0x88, 0x0b, 0x0, 0xc0, 0x4f, 0xd9, 0x30, 0xc5);
DEFINE_GUID( GUID_DDStereoMode, 0xf828169c, 0xa8e8, 0x11d2, 0xa1, 0xf2, 0x0, 0xa0, 0xc9, 0x83, 0xea, 0xf6);
DEFINE_GUID( GUID_OptSurfaceKmodeInfo, 0xe05c8472, 0x51d4, 0x11d1, 0x8c, 0xce, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);
DEFINE_GUID( GUID_OptSurfaceUmodeInfo, 0x9d792804, 0x5fa8, 0x11d1, 0x8c, 0xd0, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);
DEFINE_GUID( GUID_UserModeDriverInfo, 0xf0b0e8e2, 0x5f97, 0x11d1, 0x8c, 0xd0, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);
DEFINE_GUID( GUID_UserModeDriverPassword, 0x97f861b6, 0x60a1, 0x11d1, 0x8c, 0xd0, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);
DEFINE_GUID(GUID_D3DParseUnknownCommandCallback, 0x2e04ffa0, 0x98e4, 0x11d1, 0x8c, 0xe1, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);
DEFINE_GUID( GUID_MotionCompCallbacks, 0xb1122b40, 0x5dA5, 0x11d1, 0x8f, 0xcF, 0x00, 0xc0, 0x4f, 0xc2, 0x9b, 0x4e);
DEFINE_GUID( GUID_Miscellaneous2Callbacks, 0x406B2F00, 0x3E5A, 0x11D1, 0xB6, 0x40, 0x00, 0xAA, 0x00, 0xA1, 0xF9, 0x6A);
extern "C"
HRESULT CALLBACK D3DParseUnknownCommand (LPVOID lpvCommands,
                                         LPVOID *lplpvReturnedCommand);
typedef struct _PROCESS_LIST
{
    struct _PROCESS_LIST FAR *lpLink;
    DWORD dwProcessId;
    DWORD dwRefCnt;
    DWORD dwAlphaDepth;
    DWORD dwZDepth;
} PROCESS_LIST;
typedef PROCESS_LIST FAR *LPPROCESS_LIST;
typedef struct _DDMONITORINFO
{
    WORD Manufacturer;
    WORD Product;
    DWORD SerialNumber;
    GUID DeviceIdentifier;
    int Mode640x480;
    int Mode800x600;
    int Mode1024x768;
    int Mode1280x1024;
    int Mode1600x1200;
    int ModeReserved1;
    int ModeReserved2;
    int ModeReserved3;
} DDMONITORINFO, FAR *LPDDMONITORINFO;
        (DDBLT_ALPHASRCSURFACEOVERRIDE | \
        DDBLT_ALPHASRCCONSTOVERRIDE | \
        DDBLT_ALPHASRC | \
        DDBLT_ALPHADESTSURFACEOVERRIDE | \
        DDBLT_ALPHADESTCONSTOVERRIDE | \
        DDBLT_ALPHADEST)
        (DDOVER_ALPHASRCSURFACEOVERRIDE | \
        DDOVER_ALPHASRCCONSTOVERRIDE | \
        DDOVER_ALPHASRC | \
        DDOVER_ALPHADESTSURFACEOVERRIDE | \
        DDOVER_ALPHADESTCONSTOVERRIDE | \
        DDOVER_ALPHADEST)
typedef struct IDirectDrawClipperVtbl DIRECTDRAWCLIPPERCALLBACKS;
typedef struct IDirectDrawPaletteVtbl DIRECTDRAWPALETTECALLBACKS;
typedef struct IDirectDrawSurfaceVtbl DIRECTDRAWSURFACECALLBACKS;
typedef struct IDirectDrawSurface2Vtbl DIRECTDRAWSURFACE2CALLBACKS;
typedef struct IDirectDrawSurface3Vtbl DIRECTDRAWSURFACE3CALLBACKS;
typedef struct IDirectDrawSurface4Vtbl DIRECTDRAWSURFACE4CALLBACKS;
typedef struct IDirectDrawSurface7Vtbl DIRECTDRAWSURFACE7CALLBACKS;
typedef struct IDirectDrawColorControlVtbl DIRECTDRAWCOLORCONTROLCALLBACKS;
typedef struct IDirectDrawVtbl DIRECTDRAWCALLBACKS;
typedef struct IDirectDraw2Vtbl DIRECTDRAW2CALLBACKS;
typedef struct IDirectDraw4Vtbl DIRECTDRAW4CALLBACKS;
typedef struct IDirectDraw7Vtbl DIRECTDRAW7CALLBACKS;
typedef struct IDirectDrawKernelVtbl DIRECTDRAWKERNELCALLBACKS;
typedef struct IDirectDrawSurfaceKernelVtbl DIRECTDRAWSURFACEKERNELCALLBACKS;
typedef struct IDirectDrawGammaControlVtbl DIRECTDRAWGAMMACONTROLCALLBACKS;
typedef DIRECTDRAWCLIPPERCALLBACKS FAR *LPDIRECTDRAWCLIPPERCALLBACKS;
typedef DIRECTDRAWPALETTECALLBACKS FAR *LPDIRECTDRAWPALETTECALLBACKS;
typedef DIRECTDRAWSURFACECALLBACKS FAR *LPDIRECTDRAWSURFACECALLBACKS;
typedef DIRECTDRAWCALLBACKS FAR *LPDIRECTDRAWCALLBACKS;
extern "C" {
    #define DDAPI __loadds WINAPI
    #define EXTERN_DDAPI __export WINAPI
#include "dciddi.h"
typedef struct
{
    char szName[260];
    char szEntryPoint[64];
    DWORD dwContext;
} DD32BITDRIVERDATA, FAR *LPDD32BITDRIVERDATA;
typedef struct
{
    DWORD dwHALVersion;
    ULONG_PTR dwReserved1;
    ULONG_PTR dwReserved2;
} DDVERSIONDATA, FAR *LPDDVERSIONDATA;
typedef DWORD (FAR PASCAL *LPDD32BITDRIVERINIT)(DWORD dwContext);
typedef ULONG_PTR FLATPTR;
typedef LPVOID CSECT_HANDLE;
typedef xxx CSECT;
typedef struct _DDHAL_CREATEPALETTEDATA FAR *LPDDHAL_CREATEPALETTEDATA;
typedef struct _DDHAL_CREATESURFACEDATA FAR *LPDDHAL_CREATESURFACEDATA;
typedef struct _DDHAL_CANCREATESURFACEDATA FAR *LPDDHAL_CANCREATESURFACEDATA;
typedef struct _DDHAL_WAITFORVERTICALBLANKDATA FAR *LPDDHAL_WAITFORVERTICALBLANKDATA;
typedef struct _DDHAL_DESTROYDRIVERDATA FAR *LPDDHAL_DESTROYDRIVERDATA;
typedef struct _DDHAL_SETMODEDATA FAR *LPDDHAL_SETMODEDATA;
typedef struct _DDHAL_DRVSETCOLORKEYDATA FAR *LPDDHAL_DRVSETCOLORKEYDATA;
typedef struct _DDHAL_GETSCANLINEDATA FAR *LPDDHAL_GETSCANLINEDATA;
typedef struct _DDHAL_DESTROYPALETTEDATA FAR *LPDDHAL_DESTROYPALETTEDATA;
typedef struct _DDHAL_SETENTRIESDATA FAR *LPDDHAL_SETENTRIESDATA;
typedef struct _DDHAL_BLTDATA FAR *LPDDHAL_BLTDATA;
typedef struct _DDHAL_LOCKDATA FAR *LPDDHAL_LOCKDATA;
typedef struct _DDHAL_UNLOCKDATA FAR *LPDDHAL_UNLOCKDATA;
typedef struct _DDHAL_UPDATEOVERLAYDATA FAR *LPDDHAL_UPDATEOVERLAYDATA;
typedef struct _DDHAL_SETOVERLAYPOSITIONDATA FAR *LPDDHAL_SETOVERLAYPOSITIONDATA;
typedef struct _DDHAL_SETPALETTEDATA FAR *LPDDHAL_SETPALETTEDATA;
typedef struct _DDHAL_FLIPDATA FAR *LPDDHAL_FLIPDATA;
typedef struct _DDHAL_DESTROYSURFACEDATA FAR *LPDDHAL_DESTROYSURFACEDATA;
typedef struct _DDHAL_SETCLIPLISTDATA FAR *LPDDHAL_SETCLIPLISTDATA;
typedef struct _DDHAL_ADDATTACHEDSURFACEDATA FAR *LPDDHAL_ADDATTACHEDSURFACEDATA;
typedef struct _DDHAL_SETCOLORKEYDATA FAR *LPDDHAL_SETCOLORKEYDATA;
typedef struct _DDHAL_GETBLTSTATUSDATA FAR *LPDDHAL_GETBLTSTATUSDATA;
typedef struct _DDHAL_GETFLIPSTATUSDATA FAR *LPDDHAL_GETFLIPSTATUSDATA;
typedef struct _DDHAL_SETEXCLUSIVEMODEDATA FAR *LPDDHAL_SETEXCLUSIVEMODEDATA;
typedef struct _DDHAL_FLIPTOGDISURFACEDATA FAR *LPDDHAL_FLIPTOGDISURFACEDATA;
typedef struct _DDHAL_CANCREATEVPORTDATA FAR *LPDDHAL_CANCREATEVPORTDATA;
typedef struct _DDHAL_CREATEVPORTDATA FAR *LPDDHAL_CREATEVPORTDATA;
typedef struct _DDHAL_FLIPVPORTDATA FAR *LPDDHAL_FLIPVPORTDATA;
typedef struct _DDHAL_GETVPORTCONNECTDATA FAR *LPDDHAL_GETVPORTCONNECTDATA;
typedef struct _DDHAL_GETVPORTBANDWIDTHDATA FAR *LPDDHAL_GETVPORTBANDWIDTHDATA;
typedef struct _DDHAL_GETVPORTINPUTFORMATDATA FAR *LPDDHAL_GETVPORTINPUTFORMATDATA;
typedef struct _DDHAL_GETVPORTOUTPUTFORMATDATA FAR *LPDDHAL_GETVPORTOUTPUTFORMATDATA;
typedef struct _DDHAL_GETVPORTFIELDDATA FAR *LPDDHAL_GETVPORTFIELDDATA;
typedef struct _DDHAL_GETVPORTLINEDATA FAR *LPDDHAL_GETVPORTLINEDATA;
typedef struct _DDHAL_DESTROYVPORTDATA FAR *LPDDHAL_DESTROYVPORTDATA;
typedef struct _DDHAL_GETVPORTFLIPSTATUSDATA FAR *LPDDHAL_GETVPORTFLIPSTATUSDATA;
typedef struct _DDHAL_UPDATEVPORTDATA FAR *LPDDHAL_UPDATEVPORTDATA;
typedef struct _DDHAL_WAITFORVPORTSYNCDATA FAR *LPDDHAL_WAITFORVPORTSYNCDATA;
typedef struct _DDHAL_GETVPORTSIGNALDATA FAR *LPDDHAL_GETVPORTSIGNALDATA;
typedef struct _DDHAL_VPORTCOLORDATA FAR *LPDDHAL_VPORTCOLORDATA;
typedef struct _DDHAL_COLORCONTROLDATA FAR *LPDDHAL_COLORCONTROLDATA;
typedef struct _DDHAL_GETAVAILDRIVERMEMORYDATA FAR *LPDDHAL_GETAVAILDRIVERMEMORYDATA;
typedef struct _DDHAL_UPDATENONLOCALHEAPDATA FAR *LPDDHAL_UPDATENONLOCALHEAPDATA;
typedef struct _DDHAL_GETHEAPALIGNMENTDATA FAR *LPDDHAL_GETHEAPALIGNMENTDATA;
typedef struct _DDHAL_GETDRIVERINFODATA FAR *LPDDHAL_GETDRIVERINFODATA;
typedef struct _DDHAL_SYNCSURFACEDATA FAR *LPDDHAL_SYNCSURFACEDATA;
typedef struct _DDHAL_SYNCVIDEOPORTDATA FAR *LPDDHAL_SYNCVIDEOPORTDATA;
typedef struct _DDHAL_GETMOCOMPGUIDSDATA FAR *LPDDHAL_GETMOCOMPGUIDSDATA;
typedef struct _DDHAL_GETMOCOMPFORMATSDATA FAR *LPDDHAL_GETMOCOMPFORMATSDATA;
typedef struct _DDHAL_CREATEMOCOMPDATA FAR *LPDDHAL_CREATEMOCOMPDATA;
typedef struct _DDHAL_GETMOCOMPCOMPBUFFDATA FAR *LPDDHAL_GETMOCOMPCOMPBUFFDATA;
typedef struct _DDHAL_GETINTERNALMOCOMPDATA FAR *LPDDHAL_GETINTERNALMOCOMPDATA;
typedef struct _DDHAL_BEGINMOCOMPFRAMEDATA FAR *LPDDHAL_BEGINMOCOMPFRAMEDATA;
typedef struct _DDHAL_ENDMOCOMPFRAMEDATA FAR *LPDDHAL_ENDMOCOMPFRAMEDATA;
typedef struct _DDHAL_RENDERMOCOMPDATA FAR *LPDDHAL_RENDERMOCOMPDATA;
typedef struct _DDHAL_QUERYMOCOMPSTATUSDATA FAR *LPDDHAL_QUERYMOCOMPSTATUSDATA;
typedef struct _DDHAL_DESTROYMOCOMPDATA FAR *LPDDHAL_DESTROYMOCOMPDATA;
typedef struct _DDHAL_CREATESURFACEEXDATA FAR *LPDDHAL_CREATESURFACEEXDATA;
typedef struct _DDHAL_GETDRIVERSTATEDATA FAR *LPDDHAL_GETDRIVERSTATEDATA;
typedef struct _DDHAL_DESTROYDDLOCALDATA FAR *LPDDHAL_DESTROYDDLOCALDATA;
extern HRESULT DDAPI LateAllocateSurfaceMem(
    LPDIRECTDRAWSURFACE lpSurface,
    DWORD dwPleaseAllocType,
    DWORD dwWidthInBytesOrSize,
    DWORD dwHeight);
LPDIRECTDRAWSURFACE GetNextMipMap(
    LPDIRECTDRAWSURFACE lpLevel);
typedef struct _VIDMEM
{
    DWORD dwFlags;
    FLATPTR fpStart;
    union
    {
    FLATPTR fpEnd;
    DWORD dwWidth;
    };
    DDSCAPS ddsCaps;
    DDSCAPS ddsCapsAlt;
    union
    {
    LPVMEMHEAP lpHeap;
    DWORD dwHeight;
    };
} VIDMEM;
typedef VIDMEM FAR *LPVIDMEM;
typedef struct _VIDMEMINFO
{
       FLATPTR fpPrimary;
       DWORD dwFlags;
       DWORD dwDisplayWidth;
       DWORD dwDisplayHeight;
       LONG lDisplayPitch;
       DDPIXELFORMAT ddpfDisplay;
       DWORD dwOffscreenAlign;
       DWORD dwOverlayAlign;
       DWORD dwTextureAlign;
       DWORD dwZBufferAlign;
       DWORD dwAlphaAlign;
       DWORD dwNumHeaps;
       LPVIDMEM pvmList;
} VIDMEMINFO;
typedef VIDMEMINFO FAR *LPVIDMEMINFO;
typedef struct _HEAPALIAS
{
    FLATPTR fpVidMem;
    LPVOID lpAlias;
    DWORD dwAliasSize;
} HEAPALIAS;
typedef HEAPALIAS FAR *LPHEAPALIAS;
typedef struct _HEAPALIASINFO
{
    DWORD dwRefCnt;
    DWORD dwFlags;
    DWORD dwNumHeaps;
    LPHEAPALIAS lpAliases;
} HEAPALIASINFO;
typedef HEAPALIASINFO FAR *LPHEAPALIASINFO;
typedef struct _DDRAWI_DIRECTDRAW_INT FAR *LPDDRAWI_DIRECTDRAW_INT;
typedef struct _DDRAWI_DIRECTDRAW_LCL FAR *LPDDRAWI_DIRECTDRAW_LCL;
typedef struct _DDRAWI_DIRECTDRAW_GBL FAR *LPDDRAWI_DIRECTDRAW_GBL;
typedef struct _DDRAWI_DDRAWSURFACE_GBL FAR *LPDDRAWI_DDRAWSURFACE_GBL;
typedef struct _DDRAWI_DDRAWSURFACE_GBL_MORE FAR *LPDDRAWI_DDRAWSURFACE_GBL_MORE;
typedef struct _DDRAWI_DDRAWPALETTE_GBL FAR *LPDDRAWI_DDRAWPALETTE_GBL;
typedef struct _DDRAWI_DDRAWPALETTE_INT FAR *LPDDRAWI_DDRAWPALETTE_INT;
typedef struct _DDRAWI_DDRAWCLIPPER_INT FAR *LPDDRAWI_DDRAWCLIPPER_INT;
typedef struct _DDRAWI_DDRAWCLIPPER_GBL FAR *LPDDRAWI_DDRAWCLIPPER_GBL;
typedef struct _DDRAWI_DDRAWSURFACE_MORE FAR *LPDDRAWI_DDRAWSURFACE_MORE;
typedef struct _DDRAWI_DDRAWSURFACE_LCL FAR *LPDDRAWI_DDRAWSURFACE_LCL;
typedef struct _DDRAWI_DDRAWSURFACE_INT FAR *LPDDRAWI_DDRAWSURFACE_INT;
typedef struct _DDRAWI_DDVIDEOPORT_INT FAR *LPDDRAWI_DDVIDEOPORT_INT;
typedef struct _DDRAWI_DDVIDEOPORT_LCL FAR *LPDDRAWI_DDVIDEOPORT_LCL;
typedef struct _DDRAWI_DDRAWPALETTE_LCL FAR *LPDDRAWI_DDRAWPALETTE_LCL;
typedef struct _DDRAWI_DDRAWCLIPPER_LCL FAR *LPDDRAWI_DDRAWCLIPPER_LCL;
typedef struct _DDRAWI_DDMOTIONCOMP_INT FAR *LPDDRAWI_DDMOTIONCOMP_INT;
typedef struct _DDRAWI_DDMOTIONCOMP_LCL FAR *LPDDRAWI_DDMOTIONCOMP_LCL;
typedef struct _IUNKNOWN_LIST
{
    struct _IUNKNOWN_LIST FAR *lpLink;
    GUID FAR *lpGuid;
    IUnknown FAR *lpIUnknown;
} IUNKNOWN_LIST;
typedef IUNKNOWN_LIST FAR *LPIUNKNOWN_LIST;
typedef BOOL (FAR PASCAL *LPDDHEL_INIT)(LPDDRAWI_DIRECTDRAW_GBL,BOOL);
typedef DWORD (FAR PASCAL *LPDDHAL_SETCOLORKEY)(LPDDHAL_DRVSETCOLORKEYDATA );
typedef DWORD (FAR PASCAL *LPDDHAL_CANCREATESURFACE)(LPDDHAL_CANCREATESURFACEDATA );
typedef DWORD (FAR PASCAL *LPDDHAL_WAITFORVERTICALBLANK)(LPDDHAL_WAITFORVERTICALBLANKDATA );
typedef DWORD (FAR PASCAL *LPDDHAL_CREATESURFACE)(LPDDHAL_CREATESURFACEDATA);
typedef DWORD (FAR PASCAL *LPDDHAL_DESTROYDRIVER)(LPDDHAL_DESTROYDRIVERDATA);
typedef DWORD (FAR PASCAL *LPDDHAL_SETMODE)(LPDDHAL_SETMODEDATA);
typedef DWORD (FAR PASCAL *LPDDHAL_CREATEPALETTE)(LPDDHAL_CREATEPALETTEDATA);
typedef DWORD (FAR PASCAL *LPDDHAL_GETSCANLINE)(LPDDHAL_GETSCANLINEDATA);
typedef DWORD (FAR PASCAL *LPDDHAL_SETEXCLUSIVEMODE)(LPDDHAL_SETEXCLUSIVEMODEDATA);
typedef DWORD (FAR PASCAL *LPDDHAL_FLIPTOGDISURFACE)(LPDDHAL_FLIPTOGDISURFACEDATA);
typedef DWORD (FAR PASCAL *LPDDHAL_GETDRIVERINFO)(LPDDHAL_GETDRIVERINFODATA);
typedef struct _DDHAL_DDCALLBACKS
{
    DWORD dwSize;
    DWORD dwFlags;
    LPDDHAL_DESTROYDRIVER DestroyDriver;
    LPDDHAL_CREATESURFACE CreateSurface;
    LPDDHAL_SETCOLORKEY SetColorKey;
    LPDDHAL_SETMODE SetMode;
    LPDDHAL_WAITFORVERTICALBLANK WaitForVerticalBlank;
    LPDDHAL_CANCREATESURFACE CanCreateSurface;
    LPDDHAL_CREATEPALETTE CreatePalette;
    LPDDHAL_GETSCANLINE GetScanLine;
    LPDDHAL_SETEXCLUSIVEMODE SetExclusiveMode;
    LPDDHAL_FLIPTOGDISURFACE FlipToGDISurface;
} DDHAL_DDCALLBACKS;
typedef DDHAL_DDCALLBACKS FAR *LPDDHAL_DDCALLBACKS;
typedef DWORD (FAR PASCAL *LPDDHALPALCB_DESTROYPALETTE)(LPDDHAL_DESTROYPALETTEDATA );
typedef DWORD (FAR PASCAL *LPDDHALPALCB_SETENTRIES)(LPDDHAL_SETENTRIESDATA );
typedef struct _DDHAL_DDPALETTECALLBACKS
{
    DWORD dwSize;
    DWORD dwFlags;
    LPDDHALPALCB_DESTROYPALETTE DestroyPalette;
    LPDDHALPALCB_SETENTRIES SetEntries;
} DDHAL_DDPALETTECALLBACKS;
typedef DDHAL_DDPALETTECALLBACKS FAR *LPDDHAL_DDPALETTECALLBACKS;
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_LOCK)(LPDDHAL_LOCKDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_UNLOCK)(LPDDHAL_UNLOCKDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_BLT)(LPDDHAL_BLTDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_UPDATEOVERLAY)(LPDDHAL_UPDATEOVERLAYDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_SETOVERLAYPOSITION)(LPDDHAL_SETOVERLAYPOSITIONDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_SETPALETTE)(LPDDHAL_SETPALETTEDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_FLIP)(LPDDHAL_FLIPDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_DESTROYSURFACE)(LPDDHAL_DESTROYSURFACEDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_SETCLIPLIST)(LPDDHAL_SETCLIPLISTDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_ADDATTACHEDSURFACE)(LPDDHAL_ADDATTACHEDSURFACEDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_SETCOLORKEY)(LPDDHAL_SETCOLORKEYDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_GETBLTSTATUS)(LPDDHAL_GETBLTSTATUSDATA);
typedef DWORD (FAR PASCAL *LPDDHALSURFCB_GETFLIPSTATUS)(LPDDHAL_GETFLIPSTATUSDATA);
typedef struct _DDHAL_DDSURFACECALLBACKS
{
    DWORD dwSize;
    DWORD dwFlags;
    LPDDHALSURFCB_DESTROYSURFACE DestroySurface;
    LPDDHALSURFCB_FLIP Flip;
    LPDDHALSURFCB_SETCLIPLIST SetClipList;
    LPDDHALSURFCB_LOCK Lock;
    LPDDHALSURFCB_UNLOCK Unlock;
    LPDDHALSURFCB_BLT Blt;
    LPDDHALSURFCB_SETCOLORKEY SetColorKey;
    LPDDHALSURFCB_ADDATTACHEDSURFACE AddAttachedSurface;
    LPDDHALSURFCB_GETBLTSTATUS GetBltStatus;
    LPDDHALSURFCB_GETFLIPSTATUS GetFlipStatus;
    LPDDHALSURFCB_UPDATEOVERLAY UpdateOverlay;
    LPDDHALSURFCB_SETOVERLAYPOSITION SetOverlayPosition;
    LPVOID reserved4;
    LPDDHALSURFCB_SETPALETTE SetPalette;
} DDHAL_DDSURFACECALLBACKS;
typedef DDHAL_DDSURFACECALLBACKS FAR *LPDDHAL_DDSURFACECALLBACKS;
typedef DWORD (FAR PASCAL *LPDDHAL_GETAVAILDRIVERMEMORY)(LPDDHAL_GETAVAILDRIVERMEMORYDATA);
typedef DWORD (FAR PASCAL *LPDDHAL_UPDATENONLOCALHEAP)(LPDDHAL_UPDATENONLOCALHEAPDATA);
typedef DWORD (FAR PASCAL *LPDDHAL_GETHEAPALIGNMENT)(LPDDHAL_GETHEAPALIGNMENTDATA);
typedef struct _DDHAL_DDMISCELLANEOUSCALLBACKS {
    DWORD dwSize;
    DWORD dwFlags;
    LPDDHAL_GETAVAILDRIVERMEMORY GetAvailDriverMemory;
    LPDDHAL_UPDATENONLOCALHEAP UpdateNonLocalHeap;
    LPDDHAL_GETHEAPALIGNMENT GetHeapAlignment;
    LPDDHALSURFCB_GETBLTSTATUS GetSysmemBltStatus;
} DDHAL_DDMISCELLANEOUSCALLBACKS, *LPDDHAL_DDMISCELLANEOUSCALLBACKS;
typedef DWORD (FAR PASCAL *LPDDHAL_CREATESURFACEEX)(LPDDHAL_CREATESURFACEEXDATA);
typedef DWORD (FAR PASCAL *LPDDHAL_GETDRIVERSTATE)(LPDDHAL_GETDRIVERSTATEDATA);
typedef DWORD (FAR PASCAL *LPDDHAL_DESTROYDDLOCAL)(LPDDHAL_DESTROYDDLOCALDATA);
typedef struct _DDHAL_DDMISCELLANEOUS2CALLBACKS {
    DWORD dwSize;
    DWORD dwFlags;
    LPVOID Reserved;
    LPDDHAL_CREATESURFACEEX CreateSurfaceEx;
    LPDDHAL_GETDRIVERSTATE GetDriverState;
    LPDDHAL_DESTROYDDLOCAL DestroyDDLocal;
} DDHAL_DDMISCELLANEOUS2CALLBACKS, *LPDDHAL_DDMISCELLANEOUS2CALLBACKS;
typedef DWORD (FAR PASCAL *LPDDHALEXEBUFCB_CANCREATEEXEBUF)(LPDDHAL_CANCREATESURFACEDATA );
typedef DWORD (FAR PASCAL *LPDDHALEXEBUFCB_CREATEEXEBUF)(LPDDHAL_CREATESURFACEDATA);
typedef DWORD (FAR PASCAL *LPDDHALEXEBUFCB_DESTROYEXEBUF)(LPDDHAL_DESTROYSURFACEDATA);
typedef DWORD (FAR PASCAL *LPDDHALEXEBUFCB_LOCKEXEBUF)(LPDDHAL_LOCKDATA);
typedef DWORD (FAR PASCAL *LPDDHALEXEBUFCB_UNLOCKEXEBUF)(LPDDHAL_UNLOCKDATA);
typedef struct _DDHAL_DDEXEBUFCALLBACKS
{
    DWORD dwSize;
    DWORD dwFlags;
    LPDDHALEXEBUFCB_CANCREATEEXEBUF CanCreateExecuteBuffer;
    LPDDHALEXEBUFCB_CREATEEXEBUF CreateExecuteBuffer;
    LPDDHALEXEBUFCB_DESTROYEXEBUF DestroyExecuteBuffer;
    LPDDHALEXEBUFCB_LOCKEXEBUF LockExecuteBuffer;
    LPDDHALEXEBUFCB_UNLOCKEXEBUF UnlockExecuteBuffer;
} DDHAL_DDEXEBUFCALLBACKS;
typedef DDHAL_DDEXEBUFCALLBACKS FAR *LPDDHAL_DDEXEBUFCALLBACKS;
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_CANCREATEVIDEOPORT)(LPDDHAL_CANCREATEVPORTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_CREATEVIDEOPORT)(LPDDHAL_CREATEVPORTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_FLIP)(LPDDHAL_FLIPVPORTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETBANDWIDTH)(LPDDHAL_GETVPORTBANDWIDTHDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETINPUTFORMATS)(LPDDHAL_GETVPORTINPUTFORMATDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETOUTPUTFORMATS)(LPDDHAL_GETVPORTOUTPUTFORMATDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETFIELD)(LPDDHAL_GETVPORTFIELDDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETLINE)(LPDDHAL_GETVPORTLINEDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETVPORTCONNECT)(LPDDHAL_GETVPORTCONNECTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_DESTROYVPORT)(LPDDHAL_DESTROYVPORTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETFLIPSTATUS)(LPDDHAL_GETVPORTFLIPSTATUSDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_UPDATE)(LPDDHAL_UPDATEVPORTDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_WAITFORSYNC)(LPDDHAL_WAITFORVPORTSYNCDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_GETSIGNALSTATUS)(LPDDHAL_GETVPORTSIGNALDATA);
typedef DWORD (FAR PASCAL *LPDDHALVPORTCB_COLORCONTROL)(LPDDHAL_VPORTCOLORDATA);
typedef struct _DDHAL_DDVIDEOPORTCALLBACKS
{
    DWORD dwSize;
    DWORD dwFlags;
    LPDDHALVPORTCB_CANCREATEVIDEOPORT CanCreateVideoPort;
    LPDDHALVPORTCB_CREATEVIDEOPORT CreateVideoPort;
    LPDDHALVPORTCB_FLIP FlipVideoPort;
    LPDDHALVPORTCB_GETBANDWIDTH GetVideoPortBandwidth;
    LPDDHALVPORTCB_GETINPUTFORMATS GetVideoPortInputFormats;
    LPDDHALVPORTCB_GETOUTPUTFORMATS GetVideoPortOutputFormats;
    LPVOID lpReserved1;
    LPDDHALVPORTCB_GETFIELD GetVideoPortField;
    LPDDHALVPORTCB_GETLINE GetVideoPortLine;
    LPDDHALVPORTCB_GETVPORTCONNECT GetVideoPortConnectInfo;
    LPDDHALVPORTCB_DESTROYVPORT DestroyVideoPort;
    LPDDHALVPORTCB_GETFLIPSTATUS GetVideoPortFlipStatus;
    LPDDHALVPORTCB_UPDATE UpdateVideoPort;
    LPDDHALVPORTCB_WAITFORSYNC WaitForVideoPortSync;
    LPDDHALVPORTCB_GETSIGNALSTATUS GetVideoSignalStatus;
    LPDDHALVPORTCB_COLORCONTROL ColorControl;
} DDHAL_DDVIDEOPORTCALLBACKS;
typedef DDHAL_DDVIDEOPORTCALLBACKS FAR *LPDDHAL_DDVIDEOPORTCALLBACKS;
typedef DWORD (FAR PASCAL *LPDDHALCOLORCB_COLORCONTROL)(LPDDHAL_COLORCONTROLDATA);
typedef struct _DDHAL_DDCOLORCONTROLCALLBACKS
{
    DWORD dwSize;
    DWORD dwFlags;
    LPDDHALCOLORCB_COLORCONTROL ColorControl;
} DDHAL_DDCOLORCONTROLCALLBACKS;
typedef DDHAL_DDCOLORCONTROLCALLBACKS FAR *LPDDHAL_DDCOLORCONTROLCALLBACKS;
typedef DWORD (FAR PASCAL *LPDDHALKERNELCB_SYNCSURFACE)(LPDDHAL_SYNCSURFACEDATA);
typedef DWORD (FAR PASCAL *LPDDHALKERNELCB_SYNCVIDEOPORT)(LPDDHAL_SYNCVIDEOPORTDATA);
typedef struct _DDHAL_DDKERNELCALLBACKS
{
    DWORD dwSize;
    DWORD dwFlags;
    LPDDHALKERNELCB_SYNCSURFACE SyncSurfaceData;
    LPDDHALKERNELCB_SYNCVIDEOPORT SyncVideoPortData;
} DDHAL_DDKERNELCALLBACKS, *LPDDHAL_DDKERNELCALLBACKS;
typedef HRESULT (WINAPI *LPDDGAMMACALIBRATORPROC)( LPDDGAMMARAMP, LPBYTE);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_GETGUIDS)( LPDDHAL_GETMOCOMPGUIDSDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_GETFORMATS)( LPDDHAL_GETMOCOMPFORMATSDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_CREATE)( LPDDHAL_CREATEMOCOMPDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_GETCOMPBUFFINFO)( LPDDHAL_GETMOCOMPCOMPBUFFDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_GETINTERNALINFO)( LPDDHAL_GETINTERNALMOCOMPDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_BEGINFRAME)( LPDDHAL_BEGINMOCOMPFRAMEDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_ENDFRAME)( LPDDHAL_ENDMOCOMPFRAMEDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_RENDER)( LPDDHAL_RENDERMOCOMPDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_QUERYSTATUS)( LPDDHAL_QUERYMOCOMPSTATUSDATA);
typedef DWORD (FAR PASCAL *LPDDHALMOCOMPCB_DESTROY)( LPDDHAL_DESTROYMOCOMPDATA);
typedef struct _DDHAL_DDMOTIONCOMPCALLBACKS
{
    DWORD dwSize;
    DWORD dwFlags;
    LPDDHALMOCOMPCB_GETGUIDS GetMoCompGuids;
    LPDDHALMOCOMPCB_GETFORMATS GetMoCompFormats;
    LPDDHALMOCOMPCB_CREATE CreateMoComp;
    LPDDHALMOCOMPCB_GETCOMPBUFFINFO GetMoCompBuffInfo;
    LPDDHALMOCOMPCB_GETINTERNALINFO GetInternalMoCompInfo;
    LPDDHALMOCOMPCB_BEGINFRAME BeginMoCompFrame;
    LPDDHALMOCOMPCB_ENDFRAME EndMoCompFrame;
    LPDDHALMOCOMPCB_RENDER RenderMoComp;
    LPDDHALMOCOMPCB_QUERYSTATUS QueryMoCompStatus;
    LPDDHALMOCOMPCB_DESTROY DestroyMoComp;
} DDHAL_DDMOTIONCOMPCALLBACKS;
typedef DDHAL_DDMOTIONCOMPCALLBACKS FAR *LPDDHAL_DDMOTIONCOMPCALLBACKS;
typedef struct _DDNONLOCALVIDMEMCAPS
{
    DWORD dwSize;
    DWORD dwNLVBCaps;
    DWORD dwNLVBCaps2;
    DWORD dwNLVBCKeyCaps;
    DWORD dwNLVBFXCaps;
    DWORD dwNLVBRops[DD_ROP_SPACE];
} DDNONLOCALVIDMEMCAPS;
typedef struct _DDNONLOCALVIDMEMCAPS FAR *LPDDNONLOCALVIDMEMCAPS;
typedef struct _DDMORESURFACECAPS
{
    DWORD dwSize;
    DDSCAPSEX ddsCapsMore;
    struct tagExtendedHeapRestrictions
    {
        DDSCAPSEX ddsCapsEx;
        DDSCAPSEX ddsCapsExAlt;
    } ddsExtendedHeapRestrictions[1];
} DDMORESURFACECAPS, FAR * LPDDMORESURFACECAPS;
typedef struct _DDSTEREOMODE
{
    DWORD dwSize;
    DWORD dwHeight;
    DWORD dwWidth;
    DWORD dwBpp;
    DWORD dwRefreshRate;
    BOOL bSupported;
} DDSTEREOMODE, FAR * LPDDSTEREOMODE;
typedef struct _DDRAWI_DDRAWPALETTE_INT
{
    LPVOID lpVtbl;
    LPDDRAWI_DDRAWPALETTE_LCL lpLcl;
    LPDDRAWI_DDRAWPALETTE_INT lpLink;
    DWORD dwIntRefCnt;
} DDRAWI_DDRAWPALETTE_INT;
typedef struct _DDRAWI_DDRAWPALETTE_GBL
{
    DWORD dwRefCnt;
    DWORD dwFlags;
    LPDDRAWI_DIRECTDRAW_LCL lpDD_lcl;
    DWORD dwProcessId;
    LPPALETTEENTRY lpColorTable;
    union
    {
        ULONG_PTR dwReserved1;
        HPALETTE hHELGDIPalette;
    };
    DWORD dwDriverReserved;
    DWORD dwContentsStamp;
    DWORD dwSaveStamp;
    DWORD dwHandle;
} DDRAWI_DDRAWPALETTE_GBL;
typedef struct _DDRAWI_DDRAWPALETTE_LCL
{
    DWORD lpPalMore;
    LPDDRAWI_DDRAWPALETTE_GBL lpGbl;
    ULONG_PTR dwUnused0;
    DWORD dwLocalRefCnt;
    IUnknown FAR *pUnkOuter;
    LPDDRAWI_DIRECTDRAW_LCL lpDD_lcl;
    ULONG_PTR dwReserved1;
    ULONG_PTR dwDDRAWReserved1;
    ULONG_PTR dwDDRAWReserved2;
    ULONG_PTR dwDDRAWReserved3;
} DDRAWI_DDRAWPALETTE_LCL;
typedef struct _DDRAWI_DDRAWCLIPPER_INT
{
    LPVOID lpVtbl;
    LPDDRAWI_DDRAWCLIPPER_LCL lpLcl;
    LPDDRAWI_DDRAWCLIPPER_INT lpLink;
    DWORD dwIntRefCnt;
} DDRAWI_DDRAWCLIPPER_INT;
typedef struct _DDRAWI_DDRAWCLIPPER_GBL
{
    DWORD dwRefCnt;
    DWORD dwFlags;
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    DWORD dwProcessId;
    ULONG_PTR dwReserved1;
    ULONG_PTR hWnd;
    LPRGNDATA lpStaticClipList;
} DDRAWI_DDRAWCLIPPER_GBL;
typedef struct _DDRAWI_DDRAWCLIPPER_LCL
{
    DWORD lpClipMore;
    LPDDRAWI_DDRAWCLIPPER_GBL lpGbl;
    LPDDRAWI_DIRECTDRAW_LCL lpDD_lcl;
    DWORD dwLocalRefCnt;
    IUnknown FAR *pUnkOuter;
    LPDDRAWI_DIRECTDRAW_INT lpDD_int;
    ULONG_PTR dwReserved1;
    IUnknown * pAddrefedThisOwner;
} DDRAWI_DDRAWCLIPPER_LCL;
typedef struct _ATTACHLIST
{
    DWORD dwFlags;
    struct _ATTACHLIST FAR *lpLink;
    struct _DDRAWI_DDRAWSURFACE_LCL FAR *lpAttached;
    struct _DDRAWI_DDRAWSURFACE_INT FAR *lpIAttached;
} ATTACHLIST;
typedef ATTACHLIST FAR *LPATTACHLIST;
typedef struct _DBLNODE
{
    struct _DBLNODE FAR *next;
    struct _DBLNODE FAR *prev;
    LPDDRAWI_DDRAWSURFACE_LCL object;
    LPDDRAWI_DDRAWSURFACE_INT object_int;
} DBLNODE;
typedef DBLNODE FAR *LPDBLNODE;
typedef struct _ACCESSRECTLIST
{
    struct _ACCESSRECTLIST FAR *lpLink;
    RECT rDest;
    LPDDRAWI_DIRECTDRAW_LCL lpOwner;
    LPVOID lpSurfaceData;
    DWORD dwFlags;
    LPHEAPALIASINFO lpHeapAliasInfo;
} ACCESSRECTLIST;
typedef ACCESSRECTLIST FAR *LPACCESSRECTLIST;
typedef struct _DDRAWI_DDRAWSURFACE_INT
{
    LPVOID lpVtbl;
    LPDDRAWI_DDRAWSURFACE_LCL lpLcl;
    LPDDRAWI_DDRAWSURFACE_INT lpLink;
    DWORD dwIntRefCnt;
} DDRAWI_DDRAWSURFACE_INT;
typedef struct _DDRAWI_DDRAWSURFACE_GBL
{
    DWORD dwRefCnt;
    DWORD dwGlobalFlags;
    union
    {
        LPACCESSRECTLIST lpRectList;
        DWORD dwBlockSizeY;
        LONG lSlicePitch;
    };
    union
    {
        LPVMEMHEAP lpVidMemHeap;
        DWORD dwBlockSizeX;
    };
    union
    {
        LPDDRAWI_DIRECTDRAW_GBL lpDD;
        LPVOID lpDDHandle;
    };
    FLATPTR fpVidMem;
    union
    {
        LONG lPitch;
        DWORD dwLinearSize;
    };
    WORD wHeight;
    WORD wWidth;
    DWORD dwUsageCount;
    ULONG_PTR dwReserved1;
    DDPIXELFORMAT ddpfSurface;
} DDRAWI_DDRAWSURFACE_GBL;
    (*(LPDDRAWI_DDRAWSURFACE_GBL_MORE *) \
    ((BYTE *)psurf_gbl - sizeof(DWORD_PTR)))
    ( GET_LPDDRAWSURFACE_GBL_MORE( psurf_gbl )->fpPhysicalVidMem )
typedef struct _DDRAWI_DDRAWSURFACE_GBL_MORE
{
    DWORD dwSize;
    union
    {
        DWORD dwPhysicalPageTable;
        FLATPTR fpPhysicalVidMem;
    };
    LPDWORD pPageTable;
    DWORD cPages;
    ULONG_PTR dwSavedDCContext;
    FLATPTR fpAliasedVidMem;
    ULONG_PTR dwDriverReserved;
    ULONG_PTR dwHELReserved;
    DWORD cPageUnlocks;
    ULONG_PTR hKernelSurface;
    DWORD dwKernelRefCnt;
    LPDDCOLORCONTROL lpColorInfo;
    FLATPTR fpNTAlias;
    DWORD dwContentsStamp;
    LPVOID lpvUnswappedDriverReserved;
    LPVOID lpDDRAWReserved2;
    DWORD dwDDRAWReserved1;
    DWORD dwDDRAWReserved2;
    FLATPTR fpAliasOfVidMem;
} DDRAWI_DDRAWSURFACE_GBL_MORE;
typedef struct _DDRAWI_DDRAWSURFACE_MORE
{
    DWORD dwSize;
    IUNKNOWN_LIST FAR *lpIUnknowns;
    LPDDRAWI_DIRECTDRAW_LCL lpDD_lcl;
    DWORD dwPageLockCount;
    DWORD dwBytesAllocated;
    LPDDRAWI_DIRECTDRAW_INT lpDD_int;
    DWORD dwMipMapCount;
    LPDDRAWI_DDRAWCLIPPER_INT lpDDIClipper;
    LPHEAPALIASINFO lpHeapAliasInfo;
    DWORD dwOverlayFlags;
    VOID *rgjunc;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    LPDDOVERLAYFX lpddOverlayFX;
    DDSCAPSEX ddsCapsEx;
    DWORD dwTextureStage;
    LPVOID lpDDRAWReserved;
    LPVOID lpDDRAWReserved2;
    LPVOID lpDDrawReserved3;
    DWORD dwDDrawReserved4;
    LPVOID lpDDrawReserved5;
   LPDWORD lpGammaRamp;
   LPDWORD lpOriginalGammaRamp;
   LPVOID lpDDrawReserved6;
   DWORD dwSurfaceHandle;
   DWORD qwDDrawReserved8[2];
   LPVOID lpDDrawReserved9;
    DWORD cSurfaces;
    LPDDSURFACEDESC2 pCreatedDDSurfaceDesc2;
    LPDDRAWI_DDRAWSURFACE_LCL *slist;
    DWORD dwFVF;
   LPVOID lpVB;
} DDRAWI_DDRAWSURFACE_MORE;
struct _DDRAWI_DDRAWSURFACE_LCL
{
    LPDDRAWI_DDRAWSURFACE_MORE lpSurfMore;
    LPDDRAWI_DDRAWSURFACE_GBL lpGbl;
    ULONG_PTR hDDSurface;
    LPATTACHLIST lpAttachList;
    LPATTACHLIST lpAttachListFrom;
    DWORD dwLocalRefCnt;
    DWORD dwProcessId;
    DWORD dwFlags;
    DDSCAPS ddsCaps;
    union
    {
        LPDDRAWI_DDRAWPALETTE_INT lpDDPalette;
        LPDDRAWI_DDRAWPALETTE_INT lp16DDPalette;
    };
    union
    {
        LPDDRAWI_DDRAWCLIPPER_LCL lpDDClipper;
        LPDDRAWI_DDRAWCLIPPER_INT lp16DDClipper;
    };
    DWORD dwModeCreatedIn;
    DWORD dwBackBufferCount;
    DDCOLORKEY ddckCKDestBlt;
    DDCOLORKEY ddckCKSrcBlt;
    ULONG_PTR hDC;
    ULONG_PTR dwReserved1;
    DDCOLORKEY ddckCKSrcOverlay;
    DDCOLORKEY ddckCKDestOverlay;
    LPDDRAWI_DDRAWSURFACE_INT lpSurfaceOverlaying;
    DBLNODE dbnOverlayNode;
    RECT rcOverlaySrc;
    RECT rcOverlayDest;
    DWORD dwClrXparent;
    DWORD dwAlpha;
    LONG lOverlayX;
    LONG lOverlayY;
};
typedef struct _DDRAWI_DDRAWSURFACE_LCL DDRAWI_DDRAWSURFACE_LCL;
typedef struct _DDHALMODEINFO
{
    DWORD dwWidth;
    DWORD dwHeight;
    LONG lPitch;
    DWORD dwBPP;
    WORD wFlags;
    WORD wRefreshRate;
    DWORD dwRBitMask;
    DWORD dwGBitMask;
    DWORD dwBBitMask;
    DWORD dwAlphaBitMask;
} DDHALMODEINFO;
typedef DDHALMODEINFO FAR *LPDDHALMODEINFO;
typedef struct _DDRAWI_DIRECTDRAW_INT
{
    LPVOID lpVtbl;
    LPDDRAWI_DIRECTDRAW_LCL lpLcl;
    LPDDRAWI_DIRECTDRAW_INT lpLink;
    DWORD dwIntRefCnt;
} DDRAWI_DIRECTDRAW_INT;
typedef struct _DDHAL_CALLBACKS
{
    DDHAL_DDCALLBACKS cbDDCallbacks;
    DDHAL_DDSURFACECALLBACKS cbDDSurfaceCallbacks;
    DDHAL_DDPALETTECALLBACKS cbDDPaletteCallbacks;
    DDHAL_DDCALLBACKS HALDD;
    DDHAL_DDSURFACECALLBACKS HALDDSurface;
    DDHAL_DDPALETTECALLBACKS HALDDPalette;
    DDHAL_DDCALLBACKS HELDD;
    DDHAL_DDSURFACECALLBACKS HELDDSurface;
    DDHAL_DDPALETTECALLBACKS HELDDPalette;
    DDHAL_DDEXEBUFCALLBACKS cbDDExeBufCallbacks;
    DDHAL_DDEXEBUFCALLBACKS HALDDExeBuf;
    DDHAL_DDEXEBUFCALLBACKS HELDDExeBuf;
    DDHAL_DDVIDEOPORTCALLBACKS cbDDVideoPortCallbacks;
    DDHAL_DDVIDEOPORTCALLBACKS HALDDVideoPort;
    DDHAL_DDCOLORCONTROLCALLBACKS cbDDColorControlCallbacks;
    DDHAL_DDCOLORCONTROLCALLBACKS HALDDColorControl;
    DDHAL_DDMISCELLANEOUSCALLBACKS cbDDMiscellaneousCallbacks;
    DDHAL_DDMISCELLANEOUSCALLBACKS HALDDMiscellaneous;
    DDHAL_DDKERNELCALLBACKS cbDDKernelCallbacks;
    DDHAL_DDKERNELCALLBACKS HALDDKernel;
    DDHAL_DDMOTIONCOMPCALLBACKS cbDDMotionCompCallbacks;
    DDHAL_DDMOTIONCOMPCALLBACKS HALDDMotionComp;
 } DDHAL_CALLBACKS, far *LPDDHAL_CALLBACKS;
typedef struct _DDCORECAPS
{
    DWORD dwSize;
    DWORD dwCaps;
    DWORD dwCaps2;
    DWORD dwCKeyCaps;
    DWORD dwFXCaps;
    DWORD dwFXAlphaCaps;
    DWORD dwPalCaps;
    DWORD dwSVCaps;
    DWORD dwAlphaBltConstBitDepths;
    DWORD dwAlphaBltPixelBitDepths;
    DWORD dwAlphaBltSurfaceBitDepths;
    DWORD dwAlphaOverlayConstBitDepths;
    DWORD dwAlphaOverlayPixelBitDepths;
    DWORD dwAlphaOverlaySurfaceBitDepths;
    DWORD dwZBufferBitDepths;
    DWORD dwVidMemTotal;
    DWORD dwVidMemFree;
    DWORD dwMaxVisibleOverlays;
    DWORD dwCurrVisibleOverlays;
    DWORD dwNumFourCCCodes;
    DWORD dwAlignBoundarySrc;
    DWORD dwAlignSizeSrc;
    DWORD dwAlignBoundaryDest;
    DWORD dwAlignSizeDest;
    DWORD dwAlignStrideAlign;
    DWORD dwRops[DD_ROP_SPACE];
    DDSCAPS ddsCaps;
    DWORD dwMinOverlayStretch;
    DWORD dwMaxOverlayStretch;
    DWORD dwMinLiveVideoStretch;
    DWORD dwMaxLiveVideoStretch;
    DWORD dwMinHwCodecStretch;
    DWORD dwMaxHwCodecStretch;
    DWORD dwReserved1;
    DWORD dwReserved2;
    DWORD dwReserved3;
    DWORD dwSVBCaps;
    DWORD dwSVBCKeyCaps;
    DWORD dwSVBFXCaps;
    DWORD dwSVBRops[DD_ROP_SPACE];
    DWORD dwVSBCaps;
    DWORD dwVSBCKeyCaps;
    DWORD dwVSBFXCaps;
    DWORD dwVSBRops[DD_ROP_SPACE];
    DWORD dwSSBCaps;
    DWORD dwSSBCKeyCaps;
    DWORD dwSSBFXCaps;
    DWORD dwSSBRops[DD_ROP_SPACE];
    DWORD dwMaxVideoPorts;
    DWORD dwCurrVideoPorts;
    DWORD dwSVBCaps2;
} DDCORECAPS;
typedef DDCORECAPS FAR* LPDDCORECAPS;
typedef struct _DDRAWI_DIRECTDRAW_GBL
{
        DWORD dwRefCnt;
        DWORD dwFlags;
        FLATPTR fpPrimaryOrig;
        DDCORECAPS ddCaps;
        DWORD dwInternal1;
        DWORD dwUnused1[9];
        LPDDHAL_CALLBACKS lpDDCBtmp;
        LPDDRAWI_DDRAWSURFACE_INT dsList;
        LPDDRAWI_DDRAWPALETTE_INT palList;
        LPDDRAWI_DDRAWCLIPPER_INT clipperList;
        LPDDRAWI_DIRECTDRAW_GBL lp16DD;
        DWORD dwMaxOverlays;
        DWORD dwCurrOverlays;
        DWORD dwMonitorFrequency;
        DDCORECAPS ddHELCaps;
        DWORD dwUnused2[50];
        DDCOLORKEY ddckCKDestOverlay;
        DDCOLORKEY ddckCKSrcOverlay;
        VIDMEMINFO vmiData;
        LPVOID lpDriverHandle;
        LPDDRAWI_DIRECTDRAW_LCL lpExclusiveOwner;
        DWORD dwModeIndex;
        DWORD dwModeIndexOrig;
        DWORD dwNumFourCC;
        DWORD FAR *lpdwFourCC;
        DWORD dwNumModes;
        LPDDHALMODEINFO lpModeInfo;
        PROCESS_LIST plProcessList;
        DWORD dwSurfaceLockCount;
        DWORD dwAliasedLockCnt;
        ULONG_PTR dwReserved3;
        ULONG_PTR hDD;
        char cObsolete[12];
        DWORD dwReserved1;
        DWORD dwReserved2;
        DBLNODE dbnOverlayRoot;
        volatile LPWORD lpwPDeviceFlags;
        DWORD dwPDevice;
        DWORD dwWin16LockCnt;
        DWORD dwUnused3;
        DWORD hInstance;
        DWORD dwEvent16;
        DWORD dwSaveNumModes;
        ULONG_PTR lpD3DGlobalDriverData;
        ULONG_PTR lpD3DHALCallbacks;
        DDCORECAPS ddBothCaps;
        LPDDVIDEOPORTCAPS lpDDVideoPortCaps;
        LPDDRAWI_DDVIDEOPORT_INT dvpList;
        ULONG_PTR lpD3DHALCallbacks2;
        RECT rectDevice;
        DWORD cMonitors;
        LPVOID gpbmiSrc;
        LPVOID gpbmiDest;
        LPHEAPALIASINFO phaiHeapAliases;
        ULONG_PTR hKernelHandle;
        ULONG_PTR pfnNotifyProc;
        LPDDKERNELCAPS lpDDKernelCaps;
        LPDDNONLOCALVIDMEMCAPS lpddNLVCaps;
        LPDDNONLOCALVIDMEMCAPS lpddNLVHELCaps;
        LPDDNONLOCALVIDMEMCAPS lpddNLVBothCaps;
        ULONG_PTR lpD3DExtendedCaps;
        DWORD dwDOSBoxEvent;
        RECT rectDesktop;
        char cDriverName[MAX_DRIVER_NAME];
        ULONG_PTR lpD3DHALCallbacks3;
        DWORD dwNumZPixelFormats;
        LPDDPIXELFORMAT lpZPixelFormats;
        LPDDRAWI_DDMOTIONCOMP_INT mcList;
        DWORD hDDVxd;
        DDSCAPSEX ddsCapsMore;
} DDRAWI_DIRECTDRAW_GBL;
typedef struct _DDRAWI_DIRECTDRAW_LCL
{
    DWORD lpDDMore;
    LPDDRAWI_DIRECTDRAW_GBL lpGbl;
    DWORD dwUnused0;
    DWORD dwLocalFlags;
    DWORD dwLocalRefCnt;
    DWORD dwProcessId;
    IUnknown FAR *pUnkOuter;
    DWORD dwObsolete1;
    ULONG_PTR hWnd;
    ULONG_PTR hDC;
    DWORD dwErrorMode;
    LPDDRAWI_DDRAWSURFACE_INT lpPrimary;
    LPDDRAWI_DDRAWSURFACE_INT lpCB;
    DWORD dwPreferredMode;
    HINSTANCE hD3DInstance;
    IUnknown FAR *pD3DIUnknown;
    LPDDHAL_CALLBACKS lpDDCB;
    ULONG_PTR hDDVxd;
    DWORD dwAppHackFlags;
    ULONG_PTR hFocusWnd;
    DWORD dwHotTracking;
    DWORD dwIMEState;
    ULONG_PTR hWndPopup;
    ULONG_PTR hDD;
    ULONG_PTR hGammaCalibrator;
    LPDDGAMMACALIBRATORPROC lpGammaCalibrator;
} DDRAWI_DIRECTDRAW_LCL;
typedef struct _DDRAWI_DDVIDEOPORT_INT
{
    LPVOID lpVtbl;
    LPDDRAWI_DDVIDEOPORT_LCL lpLcl;
    LPDDRAWI_DDVIDEOPORT_INT lpLink;
    DWORD dwIntRefCnt;
    DWORD dwFlags;
} DDRAWI_DDVIDEOPORT_INT;
typedef struct _DDRAWI_DDVIDEOPORT_LCL
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    DDVIDEOPORTDESC ddvpDesc;
    DDVIDEOPORTINFO ddvpInfo;
    LPDDRAWI_DDRAWSURFACE_INT lpSurface;
    LPDDRAWI_DDRAWSURFACE_INT lpVBISurface;
    LPDDRAWI_DDRAWSURFACE_INT *lpFlipInts;
    DWORD dwNumAutoflip;
    DWORD dwProcessID;
    DWORD dwStateFlags;
    DWORD dwFlags;
    DWORD dwRefCnt;
    FLATPTR fpLastFlip;
    ULONG_PTR dwReserved1;
    ULONG_PTR dwReserved2;
    HANDLE hDDVideoPort;
    DWORD dwNumVBIAutoflip;
    LPDDVIDEOPORTDESC lpVBIDesc;
    LPDDVIDEOPORTDESC lpVideoDesc;
    LPDDVIDEOPORTINFO lpVBIInfo;
    LPDDVIDEOPORTINFO lpVideoInfo;
    DWORD dwVBIProcessID;
    LPDDRAWI_DDVIDEOPORT_INT lpVPNotify;
} DDRAWI_DDVIDEOPORT_LCL;
typedef struct _DDRAWI_DDMOTIONCOMP_INT
{
    LPVOID lpVtbl;
    LPDDRAWI_DDMOTIONCOMP_LCL lpLcl;
    LPDDRAWI_DDMOTIONCOMP_INT lpLink;
    DWORD dwIntRefCnt;
} DDRAWI_DDMOTIONCOMP_INT;
typedef struct _DDRAWI_DDMOTIONCOMP_LCL
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    GUID guid;
    DWORD dwUncompWidth;
    DWORD dwUncompHeight;
    DDPIXELFORMAT ddUncompPixelFormat;
    DWORD dwInternalFlags;
    DWORD dwRefCnt;
    DWORD dwProcessId;
    HANDLE hMoComp;
    DWORD dwDriverReserved1;
    DWORD dwDriverReserved2;
    DWORD dwDriverReserved3;
    LPVOID lpDriverReserved1;
    LPVOID lpDriverReserved2;
    LPVOID lpDriverReserved3;
} DDRAWI_DDMOTIONCOMP_LCL;
typedef struct _DDHALINFO
{
    DWORD dwSize;
    LPDDHAL_DDCALLBACKS lpDDCallbacks;
    LPDDHAL_DDSURFACECALLBACKS lpDDSurfaceCallbacks;
    LPDDHAL_DDPALETTECALLBACKS lpDDPaletteCallbacks;
    VIDMEMINFO vmiData;
    DDCORECAPS ddCaps;
    DWORD dwMonitorFrequency;
    LPDDHAL_GETDRIVERINFO GetDriverInfo;
    DWORD dwModeIndex;
    LPDWORD lpdwFourCC;
    DWORD dwNumModes;
    LPDDHALMODEINFO lpModeInfo;
    DWORD dwFlags;
    LPVOID lpPDevice;
    DWORD hInstance;
    ULONG_PTR lpD3DGlobalDriverData;
    ULONG_PTR lpD3DHALCallbacks;
    LPDDHAL_DDEXEBUFCALLBACKS lpDDExeBufCallbacks;
} DDHALINFO;
typedef DDHALINFO FAR *LPDDHALINFO;
typedef BOOL (DDAPI *LPDDHAL_SETINFO)( LPDDHALINFO lpDDHalInfo, BOOL reset );
typedef FLATPTR (DDAPI *LPDDHAL_VIDMEMALLOC)( LPDDRAWI_DIRECTDRAW_GBL lpDD, int heap, DWORD dwWidth, DWORD dwHeight );
typedef void (DDAPI *LPDDHAL_VIDMEMFREE)( LPDDRAWI_DIRECTDRAW_GBL lpDD, int heap, FLATPTR fpMem );
extern BOOL DDAPI DDHAL_SetInfo( LPDDHALINFO lpDDHALInfo, BOOL reset );
extern FLATPTR DDAPI DDHAL_VidMemAlloc( LPDDRAWI_DIRECTDRAW_GBL lpDD, int heap, DWORD dwWidth, DWORD dwHeight );
extern void DDAPI DDHAL_VidMemFree( LPDDRAWI_DIRECTDRAW_GBL lpDD, int heap, FLATPTR fpMem );
typedef struct
{
    DWORD dwSize;
    LPDDHAL_SETINFO lpSetInfo;
    LPDDHAL_VIDMEMALLOC lpVidMemAlloc;
    LPDDHAL_VIDMEMFREE lpVidMemFree;
} DDHALDDRAWFNS;
typedef DDHALDDRAWFNS FAR *LPDDHALDDRAWFNS;
typedef struct _DDHAL_BLTDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDDestSurface;
    RECTL rDest;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSrcSurface;
    RECTL rSrc;
    DWORD dwFlags;
    DWORD dwROPFlags;
    DDBLTFX bltFX;
    HRESULT ddRVal;
    LPDDHALSURFCB_BLT Blt;
    BOOL IsClipped;
    RECTL rOrigDest;
    RECTL rOrigSrc;
    DWORD dwRectCnt;
    LPRECT prDestRects;
} DDHAL_BLTDATA;
typedef struct _DDHAL_LOCKDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    DWORD bHasRect;
    RECTL rArea;
    LPVOID lpSurfData;
    HRESULT ddRVal;
    LPDDHALSURFCB_LOCK Lock;
    DWORD dwFlags;
} DDHAL_LOCKDATA;
typedef struct _DDHAL_UNLOCKDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    HRESULT ddRVal;
    LPDDHALSURFCB_UNLOCK Unlock;
} DDHAL_UNLOCKDATA;
typedef struct _DDHAL_UPDATEOVERLAYDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDDestSurface;
    RECTL rDest;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSrcSurface;
    RECTL rSrc;
    DWORD dwFlags;
    DDOVERLAYFX overlayFX;
    HRESULT ddRVal;
    LPDDHALSURFCB_UPDATEOVERLAY UpdateOverlay;
} DDHAL_UPDATEOVERLAYDATA;
typedef struct _DDHAL_SETOVERLAYPOSITIONDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSrcSurface;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDDestSurface;
    LONG lXPos;
    LONG lYPos;
    HRESULT ddRVal;
    LPDDHALSURFCB_SETOVERLAYPOSITION SetOverlayPosition;
} DDHAL_SETOVERLAYPOSITIONDATA;
typedef struct _DDHAL_SETPALETTEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    LPDDRAWI_DDRAWPALETTE_GBL lpDDPalette;
    HRESULT ddRVal;
    LPDDHALSURFCB_SETPALETTE SetPalette;
    BOOL Attach;
} DDHAL_SETPALETTEDATA;
typedef struct _DDHAL_FLIPDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpSurfCurr;
    LPDDRAWI_DDRAWSURFACE_LCL lpSurfTarg;
    DWORD dwFlags;
    HRESULT ddRVal;
    LPDDHALSURFCB_FLIP Flip;
    LPDDRAWI_DDRAWSURFACE_LCL lpSurfCurrLeft;
    LPDDRAWI_DDRAWSURFACE_LCL lpSurfTargLeft;
} DDHAL_FLIPDATA;
typedef struct _DDHAL_DESTROYSURFACEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    HRESULT ddRVal;
    LPDDHALSURFCB_DESTROYSURFACE DestroySurface;
} DDHAL_DESTROYSURFACEDATA;
typedef struct _DDHAL_SETCLIPLISTDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    HRESULT ddRVal;
    LPDDHALSURFCB_SETCLIPLIST SetClipList;
} DDHAL_SETCLIPLISTDATA;
typedef struct _DDHAL_ADDATTACHEDSURFACEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    LPDDRAWI_DDRAWSURFACE_LCL lpSurfAttached;
    HRESULT ddRVal;
    LPDDHALSURFCB_ADDATTACHEDSURFACE AddAttachedSurface;
} DDHAL_ADDATTACHEDSURFACEDATA;
typedef struct _DDHAL_SETCOLORKEYDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    DWORD dwFlags;
    DDCOLORKEY ckNew;
    HRESULT ddRVal;
    LPDDHALSURFCB_SETCOLORKEY SetColorKey;
} DDHAL_SETCOLORKEYDATA;
typedef struct _DDHAL_GETBLTSTATUSDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    DWORD dwFlags;
    HRESULT ddRVal;
    LPDDHALSURFCB_GETBLTSTATUS GetBltStatus;
} DDHAL_GETBLTSTATUSDATA;
typedef struct _DDHAL_GETFLIPSTATUSDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    DWORD dwFlags;
    HRESULT ddRVal;
    LPDDHALSURFCB_GETFLIPSTATUS GetFlipStatus;
} DDHAL_GETFLIPSTATUSDATA;
typedef struct _DDHAL_DESTROYPALETTEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWPALETTE_GBL lpDDPalette;
    HRESULT ddRVal;
    LPDDHALPALCB_DESTROYPALETTE DestroyPalette;
} DDHAL_DESTROYPALETTEDATA;
typedef struct _DDHAL_SETENTRIESDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWPALETTE_GBL lpDDPalette;
    DWORD dwBase;
    DWORD dwNumEntries;
    LPPALETTEENTRY lpEntries;
    HRESULT ddRVal;
    LPDDHALPALCB_SETENTRIES SetEntries;
} DDHAL_SETENTRIESDATA;
typedef struct _DDHAL_CREATESURFACEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDSURFACEDESC lpDDSurfaceDesc;
    LPDDRAWI_DDRAWSURFACE_LCL FAR *lplpSList;
    DWORD dwSCnt;
    HRESULT ddRVal;
    LPDDHAL_CREATESURFACE CreateSurface;
} DDHAL_CREATESURFACEDATA;
typedef struct _DDHAL_CANCREATESURFACEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDSURFACEDESC lpDDSurfaceDesc;
    DWORD bIsDifferentPixelFormat;
    HRESULT ddRVal;
    LPDDHAL_CANCREATESURFACE CanCreateSurface;
} DDHAL_CANCREATESURFACEDATA;
typedef struct _DDHAL_CREATEPALETTEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWPALETTE_GBL lpDDPalette;
    LPPALETTEENTRY lpColorTable;
    HRESULT ddRVal;
    LPDDHAL_CREATEPALETTE CreatePalette;
    BOOL is_excl;
} DDHAL_CREATEPALETTEDATA;
typedef struct _DDHAL_WAITFORVERTICALBLANKDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    DWORD dwFlags;
    DWORD bIsInVB;
    ULONG_PTR hEvent;
    HRESULT ddRVal;
    LPDDHAL_WAITFORVERTICALBLANK WaitForVerticalBlank;
} DDHAL_WAITFORVERTICALBLANKDATA;
typedef struct _DDHAL_DESTROYDRIVERDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    HRESULT ddRVal;
    LPDDHAL_DESTROYDRIVER DestroyDriver;
} DDHAL_DESTROYDRIVERDATA;
typedef struct _DDHAL_SETMODEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    DWORD dwModeIndex;
    HRESULT ddRVal;
    LPDDHAL_SETMODE SetMode;
    BOOL inexcl;
    BOOL useRefreshRate;
} DDHAL_SETMODEDATA;
typedef struct _DDHAL_DRVSETCOLORKEYDATA
{
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    DWORD dwFlags;
    DDCOLORKEY ckNew;
    HRESULT ddRVal;
    LPDDHAL_SETCOLORKEY SetColorKey;
} DDHAL_DRVSETCOLORKEYDATA;
typedef struct _DDHAL_GETSCANLINEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    DWORD dwScanLine;
    HRESULT ddRVal;
    LPDDHAL_GETSCANLINE GetScanLine;
} DDHAL_GETSCANLINEDATA;
typedef struct _DDHAL_SETEXCLUSIVEMODEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    DWORD dwEnterExcl;
    DWORD dwReserved;
    HRESULT ddRVal;
    LPDDHAL_SETEXCLUSIVEMODE SetExclusiveMode;
} DDHAL_SETEXCLUSIVEMODEDATA;
typedef struct _DDHAL_FLIPTOGDISURFACEDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    DWORD dwToGDI;
    DWORD dwReserved;
    HRESULT ddRVal;
    LPDDHAL_FLIPTOGDISURFACE FlipToGDISurface;
} DDHAL_FLIPTOGDISURFACEDATA;
typedef struct _DDHAL_CANCREATEVPORTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDVIDEOPORTDESC lpDDVideoPortDesc;
    HRESULT ddRVal;
    LPDDHALVPORTCB_CANCREATEVIDEOPORT CanCreateVideoPort;
} DDHAL_CANCREATEVPORTDATA;
typedef struct _DDHAL_CREATEVPORTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDVIDEOPORTDESC lpDDVideoPortDesc;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    HRESULT ddRVal;
    LPDDHALVPORTCB_CREATEVIDEOPORT CreateVideoPort;
} DDHAL_CREATEVPORTDATA;
typedef struct _DDHAL_FLIPVPORTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    LPDDRAWI_DDRAWSURFACE_LCL lpSurfCurr;
    LPDDRAWI_DDRAWSURFACE_LCL lpSurfTarg;
    HRESULT ddRVal;
    LPDDHALVPORTCB_FLIP FlipVideoPort;
} DDHAL_FLIPVPORTDATA;
typedef struct _DDHAL_GETVPORTBANDWIDTHDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    LPDDPIXELFORMAT lpddpfFormat;
    DWORD dwWidth;
    DWORD dwHeight;
    DWORD dwFlags;
    LPDDVIDEOPORTBANDWIDTH lpBandwidth;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETBANDWIDTH GetVideoPortBandwidth;
} DDHAL_GETVPORTBANDWIDTHDATA;
typedef struct _DDHAL_GETVPORTINPUTFORMATDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    DWORD dwFlags;
    LPDDPIXELFORMAT lpddpfFormat;
    DWORD dwNumFormats;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETINPUTFORMATS GetVideoPortInputFormats;
} DDHAL_GETVPORTINPUTFORMATDATA;
typedef struct _DDHAL_GETVPORTOUTPUTFORMATDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    DWORD dwFlags;
    LPDDPIXELFORMAT lpddpfInputFormat;
    LPDDPIXELFORMAT lpddpfOutputFormats;
    DWORD dwNumFormats;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETOUTPUTFORMATS GetVideoPortOutputFormats;
} DDHAL_GETVPORTOUTPUTFORMATDATA;
typedef struct _DDHAL_GETVPORTFIELDDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    BOOL bField;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETFIELD GetVideoPortField;
} DDHAL_GETVPORTFIELDDATA;
typedef struct _DDHAL_GETVPORTLINEDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    DWORD dwLine;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETLINE GetVideoPortLine;
} DDHAL_GETVPORTLINEDATA;
typedef struct _DDHAL_GETVPORTCONNECTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    DWORD dwPortId;
    LPDDVIDEOPORTCONNECT lpConnect;
    DWORD dwNumEntries;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETVPORTCONNECT GetVideoPortConnectInfo;
} DDHAL_GETVPORTCONNECTDATA;
typedef struct _DDHAL_DESTROYVPORTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    HRESULT ddRVal;
    LPDDHALVPORTCB_DESTROYVPORT DestroyVideoPort;
} DDHAL_DESTROYVPORTDATA;
typedef struct _DDHAL_GETVPORTFLIPSTATUSDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    FLATPTR fpSurface;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETFLIPSTATUS GetVideoPortFlipStatus;
} DDHAL_GETVPORTFLIPSTATUSDATA;
typedef struct _DDHAL_UPDATEVPORTDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    LPDDRAWI_DDRAWSURFACE_INT *lplpDDSurface;
    LPDDRAWI_DDRAWSURFACE_INT *lplpDDVBISurface;
    LPDDVIDEOPORTINFO lpVideoInfo;
    DWORD dwFlags;
    DWORD dwNumAutoflip;
    DWORD dwNumVBIAutoflip;
    HRESULT ddRVal;
    LPDDHALVPORTCB_UPDATE UpdateVideoPort;
} DDHAL_UPDATEVPORTDATA;
typedef struct _DDHAL_WAITFORVPORTSYNCDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    DWORD dwFlags;
    DWORD dwLine;
    DWORD dwTimeOut;
    HRESULT ddRVal;
    LPDDHALVPORTCB_WAITFORSYNC WaitForVideoPortSync;
} DDHAL_WAITFORVPORTSYNCDATA;
typedef struct _DDHAL_GETVPORTSIGNALDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    DWORD dwStatus;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETSIGNALSTATUS GetVideoSignalStatus;
} DDHAL_GETVPORTSIGNALDATA;
typedef struct _DDHAL_VPORTCOLORDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    DWORD dwFlags;
    LPDDCOLORCONTROL lpColorData;
    HRESULT ddRVal;
    LPDDHALVPORTCB_COLORCONTROL ColorControl;
} DDHAL_VPORTCOLORDATA;
typedef struct _DDHAL_COLORCONTROLDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    LPDDCOLORCONTROL lpColorData;
    DWORD dwFlags;
    HRESULT ddRVal;
    LPDDHALCOLORCB_COLORCONTROL ColorControl;
} DDHAL_COLORCONTROLDATA;
typedef struct _DDHAL_GETDRIVERINFODATA {
    DWORD dwSize;
    DWORD dwFlags;
    GUID guidInfo;
    DWORD dwExpectedSize;
    LPVOID lpvData;
    DWORD dwActualSize;
    HRESULT ddRVal;
    ULONG_PTR dwContext;
} DDHAL_GETDRIVERINFODATA;
typedef struct _DDHAL_GETAVAILDRIVERMEMORYDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    DDSCAPS DDSCaps;
    DWORD dwTotal;
    DWORD dwFree;
    HRESULT ddRVal;
    LPDDHAL_GETAVAILDRIVERMEMORY GetAvailDriverMemory;
    DDSCAPSEX ddsCapsEx;
} DDHAL_GETAVAILDRIVERMEMORYDATA;
typedef struct _DDHAL_UPDATENONLOCALHEAPDATA
{
    LPDDRAWI_DIRECTDRAW_GBL lpDD;
    DWORD dwHeap;
    FLATPTR fpGARTLin;
    FLATPTR fpGARTDev;
    ULONG_PTR ulPolicyMaxBytes;
    HRESULT ddRVal;
    LPDDHAL_UPDATENONLOCALHEAP UpdateNonLocalHeap;
} DDHAL_UPDATENONLOCALHEAPDATA;
typedef struct _DDHAL_GETHEAPALIGNMENTDATA
{
    ULONG_PTR dwInstance;
    DWORD dwHeap;
    HRESULT ddRVal;
    LPDDHAL_GETHEAPALIGNMENT GetHeapAlignment;
    HEAPALIGNMENT Alignment;
} DDHAL_GETHEAPALIGNMENTDATA;
                                DDSCAPS_EXECUTEBUFFER | \
                                DDSCAPS_OVERLAY | \
                                DDSCAPS_TEXTURE | \
                                DDSCAPS_ZBUFFER | \
                                DDSCAPS_ALPHA | \
                                DDSCAPS_FLIP )
typedef struct _DDHAL_CREATESURFACEEXDATA {
    DWORD dwFlags;
    LPDDRAWI_DIRECTDRAW_LCL lpDDLcl;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSLcl;
    HRESULT ddRVal;
} DDHAL_CREATESURFACEEXDATA;
typedef struct _DDHAL_GETDRIVERSTATEDATA {
    DWORD dwFlags;
    union
    {
        ULONG_PTR dwhContext;
    };
    LPDWORD lpdwStates;
    DWORD dwLength;
    HRESULT ddRVal;
} DDHAL_GETDRIVERSTATEDATA;
typedef struct _DDHAL_DESTROYDDLOCALDATA
{
    DWORD dwFlags;
    LPDDRAWI_DIRECTDRAW_LCL pDDLcl;
    HRESULT ddRVal;
} DDHAL_DESTROYDDLOCALDATA;
typedef struct _DDHAL_SYNCSURFACEDATA
{
    DWORD dwSize;
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;
    DWORD dwSurfaceOffset;
    ULONG_PTR fpLockPtr;
    LONG lPitch;
    DWORD dwOverlayOffset;
    DWORD dwOverlaySrcWidth;
    DWORD dwOverlaySrcHeight;
    DWORD dwOverlayDestWidth;
    DWORD dwOverlayDestHeight;
    ULONG_PTR dwDriverReserved1;
    ULONG_PTR dwDriverReserved2;
    ULONG_PTR dwDriverReserved3;
    HRESULT ddRVal;
} DDHAL_SYNCSURFACEDATA;
typedef struct _DDHAL_SYNCVIDEOPORTDATA
{
    DWORD dwSize;
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;
    DWORD dwOriginOffset;
    DWORD dwHeight;
    DWORD dwVBIHeight;
    ULONG_PTR dwDriverReserved1;
    ULONG_PTR dwDriverReserved2;
    ULONG_PTR dwDriverReserved3;
    HRESULT ddRVal;
} DDHAL_SYNCVIDEOPORTDATA;
typedef struct _DDHAL_GETMOCOMPGUIDSDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    DWORD dwNumGuids;
    LPGUID lpGuids;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_GETGUIDS GetMoCompGuids;
} DDHAL_GETMOCOMPGUIDSDATA;
typedef struct _DDHAL_GETMOCOMPFORMATSDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPGUID lpGuid;
    DWORD dwNumFormats;
    LPDDPIXELFORMAT lpFormats;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_GETFORMATS GetMoCompFormats;
} DDHAL_GETMOCOMPFORMATSDATA;
typedef struct _DDHAL_CREATEMOCOMPDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;
    LPGUID lpGuid;
    DWORD dwUncompWidth;
    DWORD dwUncompHeight;
    DDPIXELFORMAT ddUncompPixelFormat;
    LPVOID lpData;
    DWORD dwDataSize;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_CREATE CreateMoComp;
} DDHAL_CREATEMOCOMPDATA;
typedef struct _DDMCCOMPBUFFERINFO
{
    DWORD dwSize;
    DWORD dwNumCompBuffers;
    DWORD dwWidthToCreate;
    DWORD dwHeightToCreate;
    DWORD dwBytesToAllocate;
    DDSCAPS2 ddCompCaps;
    DDPIXELFORMAT ddPixelFormat;
} DDMCCOMPBUFFERINFO, *LPDDMCCOMPBUFFERINFO;
typedef struct _DDHAL_GETMOCOMPCOMPBUFFDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPGUID lpGuid;
    DWORD dwWidth;
    DWORD dwHeight;
    DDPIXELFORMAT ddPixelFormat;
    DWORD dwNumTypesCompBuffs;
    LPDDMCCOMPBUFFERINFO lpCompBuffInfo;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_GETCOMPBUFFINFO GetMoCompBuffInfo;
} DDHAL_GETMOCOMPCOMPBUFFDATA;
typedef struct _DDHAL_GETINTERNALMOCOMPDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPGUID lpGuid;
    DWORD dwWidth;
    DWORD dwHeight;
    DDPIXELFORMAT ddPixelFormat;
    DWORD dwScratchMemAlloc;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_GETINTERNALINFO GetInternalMoCompInfo;
} DDHAL_GETINTERNALMOCOMPDATA;
typedef struct _DDHAL_BEGINMOCOMPFRAMEDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;
    LPDDRAWI_DDRAWSURFACE_LCL lpDestSurface;
    DWORD dwInputDataSize;
    LPVOID lpInputData;
    DWORD dwOutputDataSize;
    LPVOID lpOutputData;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_BEGINFRAME BeginMoCompFrame;
} DDHAL_BEGINMOCOMPFRAMEDATA;
typedef struct _DDHAL_ENDMOCOMPFRAMEDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;
    LPVOID lpInputData;
    DWORD dwInputDataSize;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_ENDFRAME EndMoCompFrame;
} DDHAL_ENDMOCOMPFRAMEDATA;
typedef struct _DDMCBUFFERINFO
{
    DWORD dwSize;
    LPDDRAWI_DDRAWSURFACE_LCL lpCompSurface;
    DWORD dwDataOffset;
    DWORD dwDataSize;
    LPVOID lpPrivate;
} DDMCBUFFERINFO, *LPDDMCBUFFERINFO;
typedef struct _DDHAL_RENDERMOCOMPDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;
    DWORD dwNumBuffers;
    LPDDMCBUFFERINFO lpBufferInfo;
    DWORD dwFunction;
    LPVOID lpInputData;
    DWORD dwInputDataSize;
    LPVOID lpOutputData;
    DWORD dwOutputDataSize;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_RENDER RenderMoComp;
} DDHAL_RENDERMOCOMPDATA;
typedef struct _DDHAL_QUERYMOCOMPSTATUSDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;
    LPDDRAWI_DDRAWSURFACE_LCL lpSurface;
    DWORD dwFlags;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_QUERYSTATUS QueryMoCompStatus;
} DDHAL_QUERYMOCOMPSTATUSDATA;
typedef struct _DDHAL_DESTROYMOCOMPDATA
{
    LPDDRAWI_DIRECTDRAW_LCL lpDD;
    LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_DESTROY DestroyMoComp;
} DDHAL_DESTROYMOCOMPDATA;
};
#endif
#pragma endregion
