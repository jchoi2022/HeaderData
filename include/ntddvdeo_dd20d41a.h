#include <winapifamily.h>
#pragma region Desktop Family
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
DEFINE_GUID(GUID_DEVINTERFACE_DISPLAY_ADAPTER, 0x5b45201d, 0xf2f2, 0x4f3b, 0x85, 0xbb, 0x30, 0xff, 0x1f, 0x95, 0x35, 0x99);
DEFINE_GUID(GUID_DEVINTERFACE_MONITOR, 0xe6f07b5f, 0xee97, 0x4a90, 0xb0, 0x76, 0x33, 0xf5, 0x7b, 0xf4, 0xea, 0xa7);
DEFINE_GUID(GUID_DISPLAY_DEVICE_ARRIVAL, 0x1CA05180, 0xA699, 0x450A, 0x9A, 0x0C, 0xDE, 0x4F, 0xBE, 0x3D, 0xDD, 0x89);
DEFINE_GUID(GUID_DEVINTERFACE_VIDEO_OUTPUT_ARRIVAL, 0x1AD9E4F0, 0xF88D, 0x4360, 0xBA, 0xB9, 0x4C, 0x2D, 0x55, 0xE5, 0x64, 0xCD);
DEFINE_DEVPROPKEY(DEVPKEY_IndirectDisplay, 0xc50a3f10, 0xaa5c, 0x4247, 0xb8, 0x30, 0xd6, 0xa6, 0xf8, 0xea, 0xa3, 0x10, 0x01);
DEFINE_DEVPROPKEY(DEVPKEY_Device_TerminalLuid, 0xc50a3f10, 0xaa5c, 0x4247, 0xb8, 0x30, 0xd6, 0xa6, 0xf8, 0xea, 0xa3, 0x10, 0x02);
DEFINE_DEVPROPKEY(DEVPKEY_Device_AdapterLuid, 0xc50a3f10, 0xaa5c, 0x4247, 0xb8, 0x30, 0xd6, 0xa6, 0xf8, 0xea, 0xa3, 0x10, 0x03);
DEFINE_DEVPROPKEY(DEVPKEY_Device_ActivityId, 0xc50a3f10, 0xaa5c, 0x4247, 0xb8, 0x30, 0xd6, 0xa6, 0xf8, 0xea, 0xa3, 0x10, 0x04);
struct INDIRECT_DISPLAY_INFO
{
    LUID DisplayAdapterLuid;
 ULONG Flags;
 ULONG NumMonitors;
 ULONG DisplayAdapterTargetBase;
};
extern "C" {
#include <tvout.h>
    CTL_CODE(FILE_DEVICE_VIDEO, 0x01, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x02, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x03, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x04, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x05, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x06, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x07, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x09, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x0a, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x0b, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x00, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x80, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x81, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x08, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x100, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x101, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x102, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x103, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x104, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x105, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x106, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x107, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x108, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x109, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x10a, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x10b, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x10c, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x10d, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x10e, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x10f, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x110, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x111, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x112, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x113, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x114, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x115, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x116, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x117, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x118, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x119, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x11a, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x11b, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x11c, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x11d, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x11e, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x11f, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x120, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x121, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x122, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x123, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x124, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x125, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x126, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x127, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_FULLSCREEN_VIDEO, 0x200, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_FULLSCREEN_VIDEO, 0x201, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_FULLSCREEN_VIDEO, 0x202, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_FULLSCREEN_VIDEO, 0x203, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_FULLSCREEN_VIDEO, 0x204, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_FULLSCREEN_VIDEO, 0x205, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x300, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x301, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x302, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x303, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x304, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x305, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x306, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x400, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x401, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x402, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x500, METHOD_BUFFERED, FILE_ANY_ACCESS)
    CTL_CODE(FILE_DEVICE_VIDEO, 0x501, METHOD_BUFFERED, FILE_ANY_ACCESS)
typedef struct _VIDEO_VDM {
    HANDLE ProcessHandle;
} VIDEO_VDM, *PVIDEO_VDM;
typedef struct _VIDEO_REGISTER_VDM {
    ULONG MinimumStateSize;
} VIDEO_REGISTER_VDM, *PVIDEO_REGISTER_VDM;
typedef struct tagVIDEO_MONITOR_DESCRIPTOR {
    ULONG DescriptorSize;
    UCHAR Descriptor[1];
} VIDEO_MONITOR_DESCRIPTOR, *PVIDEO_MONITOR_DESCRIPTOR;
typedef enum _VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE {
    VideoPowerNotifyCallout = 1,
    VideoEnumChildPdoNotifyCallout = 3,
    VideoFindAdapterCallout = 4,
    VideoPnpNotifyCallout = 7,
    VideoDxgkDisplaySwitchCallout = 8,
    VideoDxgkFindAdapterTdrCallout = 10,
    VideoDxgkHardwareProtectionTeardown = 11,
    VideoRepaintDesktop = 12,
    VideoUpdateCursor = 13,
    VideoDisableMultiPlaneOverlay = 14,
    VideoDesktopDuplicationChange = 15,
} VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE;
typedef struct _DXGK_WIN32K_PARAM_DATA
{
    PVOID PathsArray;
    PVOID ModesArray;
    ULONG NumPathArrayElements;
    ULONG NumModeArrayElements;
    ULONG SDCFlags;
} DXGK_WIN32K_PARAM_DATA, *PDXGK_WIN32K_PARAM_DATA;
typedef struct _VIDEO_WIN32K_CALLBACKS_PARAMS {
    VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE CalloutType;
    PVOID PhysDisp;
    ULONG_PTR Param;
    LONG Status;
    BOOLEAN LockUserSession;
    BOOLEAN IsPostDevice;
    BOOLEAN SurpriseRemoval;
    BOOLEAN WaitForQueueReady;
} VIDEO_WIN32K_CALLBACKS_PARAMS, *PVIDEO_WIN32K_CALLBACKS_PARAMS;
typedef
VOID
(*PVIDEO_WIN32K_CALLOUT) (
    IN PVOID Params
    );
typedef struct _VIDEO_WIN32K_CALLBACKS {
    IN PVOID PhysDisp;
    IN PVIDEO_WIN32K_CALLOUT Callout;
    OUT ULONG bACPI;
    OUT HANDLE pPhysDeviceObject;
    OUT ULONG DualviewFlags;
} VIDEO_WIN32K_CALLBACKS, *PVIDEO_WIN32K_CALLBACKS;
typedef struct _VIDEO_DEVICE_SESSION_STATUS {
    ULONG bEnable;
    ULONG bSuccess;
} VIDEO_DEVICE_SESSION_STATUS, *PVIDEO_DEVICE_SESSION_STATUS;
typedef struct _VIDEO_HARDWARE_STATE_HEADER {
    ULONG Length;
    UCHAR PortValue[0x30];
    ULONG AttribIndexDataState;
    ULONG BasicSequencerOffset;
    ULONG BasicCrtContOffset;
    ULONG BasicGraphContOffset;
    ULONG BasicAttribContOffset;
    ULONG BasicDacOffset;
    ULONG BasicLatchesOffset;
    ULONG ExtendedSequencerOffset;
    ULONG ExtendedCrtContOffset;
    ULONG ExtendedGraphContOffset;
    ULONG ExtendedAttribContOffset;
    ULONG ExtendedDacOffset;
    ULONG ExtendedValidatorStateOffset;
    ULONG ExtendedMiscDataOffset;
    ULONG PlaneLength;
    ULONG Plane1Offset;
    ULONG Plane2Offset;
    ULONG Plane3Offset;
    ULONG Plane4Offset;
    ULONG VGAStateFlags;
    ULONG DIBOffset;
    ULONG DIBBitsPerPixel;
    ULONG DIBXResolution;
    ULONG DIBYResolution;
    ULONG DIBXlatOffset;
    ULONG DIBXlatLength;
    ULONG VesaInfoOffset;
    PVOID FrameBufferData;
} VIDEO_HARDWARE_STATE_HEADER, *PVIDEO_HARDWARE_STATE_HEADER;
typedef struct _VIDEO_HARDWARE_STATE {
    PVIDEO_HARDWARE_STATE_HEADER StateHeader;
    ULONG StateLength;
} VIDEO_HARDWARE_STATE, *PVIDEO_HARDWARE_STATE;
typedef struct _VIDEO_NUM_MODES {
    ULONG NumModes;
    ULONG ModeInformationLength;
} VIDEO_NUM_MODES, *PVIDEO_NUM_MODES;
typedef struct _VIDEO_MODE {
    ULONG RequestedMode;
} VIDEO_MODE, *PVIDEO_MODE;
typedef struct _VIDEO_MODE_INFORMATION {
    ULONG Length;
    ULONG ModeIndex;
    ULONG VisScreenWidth;
    ULONG VisScreenHeight;
    ULONG ScreenStride;
    ULONG NumberOfPlanes;
    ULONG BitsPerPlane;
    ULONG Frequency;
    ULONG XMillimeter;
    ULONG YMillimeter;
    ULONG NumberRedBits;
    ULONG NumberGreenBits;
    ULONG NumberBlueBits;
    ULONG RedMask;
    ULONG GreenMask;
    ULONG BlueMask;
    ULONG AttributeFlags;
    ULONG VideoMemoryBitmapWidth;
    ULONG VideoMemoryBitmapHeight;
    ULONG DriverSpecificAttributeFlags;
} VIDEO_MODE_INFORMATION, *PVIDEO_MODE_INFORMATION;
typedef struct _VIDEO_LOAD_FONT_INFORMATION {
    USHORT WidthInPixels;
    USHORT HeightInPixels;
    ULONG FontSize;
    UCHAR Font[1];
} VIDEO_LOAD_FONT_INFORMATION, *PVIDEO_LOAD_FONT_INFORMATION;
typedef struct _VIDEO_PALETTE_DATA {
    USHORT NumEntries;
    USHORT FirstEntry;
    USHORT Colors[1];
} VIDEO_PALETTE_DATA, *PVIDEO_PALETTE_DATA;
typedef struct _VIDEO_CLUTDATA {
    UCHAR Red;
    UCHAR Green;
    UCHAR Blue;
    UCHAR Unused;
} VIDEO_CLUTDATA, *PVIDEO_CLUTDATA;
typedef struct {
    USHORT NumEntries;
    USHORT FirstEntry;
    union {
        VIDEO_CLUTDATA RgbArray;
        ULONG RgbLong;
    } LookupTable[1];
} VIDEO_CLUT, *PVIDEO_CLUT;
typedef struct _VIDEO_CURSOR_POSITION {
    SHORT Column;
    SHORT Row;
} VIDEO_CURSOR_POSITION, *PVIDEO_CURSOR_POSITION;
typedef struct _VIDEO_CURSOR_ATTRIBUTES {
    USHORT Width;
    USHORT Height;
    SHORT Column;
    SHORT Row;
    UCHAR Rate;
    UCHAR Enable;
} VIDEO_CURSOR_ATTRIBUTES, *PVIDEO_CURSOR_ATTRIBUTES;
typedef struct _VIDEO_POINTER_POSITION {
    SHORT Column;
    SHORT Row;
} VIDEO_POINTER_POSITION, *PVIDEO_POINTER_POSITION;
typedef struct _VIDEO_POINTER_ATTRIBUTES {
    ULONG Flags;
    ULONG Width;
    ULONG Height;
    ULONG WidthInBytes;
    ULONG Enable;
    SHORT Column;
    SHORT Row;
    UCHAR Pixels[1];
} VIDEO_POINTER_ATTRIBUTES, *PVIDEO_POINTER_ATTRIBUTES;
typedef struct _VIDEO_POINTER_CAPABILITIES {
    ULONG Flags;
    ULONG MaxWidth;
    ULONG MaxHeight;
    ULONG HWPtrBitmapStart;
    ULONG HWPtrBitmapEnd;
} VIDEO_POINTER_CAPABILITIES, *PVIDEO_POINTER_CAPABILITIES;
typedef struct _VIDEO_BANK_SELECT {
    ULONG Length;
    ULONG Size;
    ULONG BankingFlags;
    ULONG BankingType;
    ULONG PlanarHCBankingType;
    ULONG BitmapWidthInBytes;
    ULONG BitmapSize;
    ULONG Granularity;
    ULONG PlanarHCGranularity;
    ULONG CodeOffset;
    ULONG PlanarHCBankCodeOffset;
    ULONG PlanarHCEnableCodeOffset;
    ULONG PlanarHCDisableCodeOffset;
} VIDEO_BANK_SELECT, *PVIDEO_BANK_SELECT;
typedef enum _VIDEO_BANK_TYPE {
    VideoNotBanked = 0,
    VideoBanked1RW,
    VideoBanked1R1W,
    VideoBanked2RW,
    NumVideoBankTypes
} VIDEO_BANK_TYPE, *PVIDEO_BANK_TYPE;
typedef struct _VIDEO_MEMORY {
    PVOID RequestedVirtualAddress;
} VIDEO_MEMORY, *PVIDEO_MEMORY;
typedef struct _VIDEO_SHARE_MEMORY {
    HANDLE ProcessHandle;
    ULONG ViewOffset;
    ULONG ViewSize;
    PVOID RequestedVirtualAddress;
} VIDEO_SHARE_MEMORY, *PVIDEO_SHARE_MEMORY;
typedef struct _VIDEO_SHARE_MEMORY_INFORMATION {
    ULONG SharedViewOffset;
    ULONG SharedViewSize;
    PVOID VirtualAddress;
} VIDEO_SHARE_MEMORY_INFORMATION, *PVIDEO_SHARE_MEMORY_INFORMATION;
typedef struct _VIDEO_MEMORY_INFORMATION {
    PVOID VideoRamBase;
    ULONG VideoRamLength;
    PVOID FrameBufferBase;
    ULONG FrameBufferLength;
} VIDEO_MEMORY_INFORMATION, *PVIDEO_MEMORY_INFORMATION;
typedef struct _VIDEO_PUBLIC_ACCESS_RANGES {
    ULONG InIoSpace;
    ULONG MappedInIoSpace;
    PVOID VirtualAddress;
} VIDEO_PUBLIC_ACCESS_RANGES, *PVIDEO_PUBLIC_ACCESS_RANGES;
typedef struct _VIDEO_COLOR_CAPABILITIES {
    ULONG Length;
    ULONG AttributeFlags;
    LONG RedPhosphoreDecay;
    LONG GreenPhosphoreDecay;
    LONG BluePhosphoreDecay;
    LONG WhiteChromaticity_x;
    LONG WhiteChromaticity_y;
    LONG WhiteChromaticity_Y;
    LONG RedChromaticity_x;
    LONG RedChromaticity_y;
    LONG GreenChromaticity_x;
    LONG GreenChromaticity_y;
    LONG BlueChromaticity_x;
    LONG BlueChromaticity_y;
    LONG WhiteGamma;
    LONG RedGamma;
    LONG GreenGamma;
    LONG BlueGamma;
} VIDEO_COLOR_CAPABILITIES, *PVIDEO_COLOR_CAPABILITIES;
typedef enum _VIDEO_POWER_STATE {
    VideoPowerUnspecified = 0,
    VideoPowerOn = 1,
    VideoPowerStandBy,
    VideoPowerSuspend,
    VideoPowerOff,
    VideoPowerHibernate,
    VideoPowerShutdown,
    VideoPowerMaximum
} VIDEO_POWER_STATE, *PVIDEO_POWER_STATE;
typedef struct _VIDEO_POWER_MANAGEMENT {
    ULONG Length;
    ULONG DPMSVersion;
    ULONG PowerState;
} VIDEO_POWER_MANAGEMENT, *PVIDEO_POWER_MANAGEMENT;
typedef struct _VIDEO_COLOR_LUT_DATA {
    ULONG Length;
    ULONG LutDataFormat;
    UCHAR LutData[1];
} VIDEO_COLOR_LUT_DATA, *PVIDEO_COLOR_LUT_DATA;
typedef struct _VIDEO_LUT_RGB256WORDS {
    USHORT Red[256];
    USHORT Green[256];
    USHORT Blue[256];
} VIDEO_LUT_RGB256WORDS, *PVIDEO_LUT_RGB256WORDS;
typedef struct _BANK_POSITION
{
    ULONG ReadBankPosition;
    ULONG WriteBankPosition;
} BANK_POSITION, *PBANK_POSITION;
typedef struct _DISPLAY_BRIGHTNESS {
    UCHAR ucDisplayPolicy;
    UCHAR ucACBrightness;
    UCHAR ucDCBrightness;
} DISPLAY_BRIGHTNESS, *PDISPLAY_BRIGHTNESS;
typedef struct {
    BOOLEAN DefaultToBiosPolicy;
    UCHAR LevelCount;
    struct {
        UCHAR BatteryLevel;
        UCHAR Brightness;
    } Level[1];
} VIDEO_BRIGHTNESS_POLICY, *PVIDEO_BRIGHTNESS_POLICY;
typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;
typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } Char;
    USHORT Attributes;
} CHAR_INFO, *PCHAR_INFO;
typedef struct _FSCNTL_SCREEN_INFO {
    COORD Position;
    COORD ScreenSize;
    ULONG nNumberOfChars;
} FSCNTL_SCREEN_INFO, *PFSCNTL_SCREEN_INFO;
typedef struct _FONT_IMAGE_INFO {
    COORD FontSize;
    PUCHAR ImageBits;
} FONT_IMAGE_INFO, *PFONT_IMAGE_INFO;
typedef struct _CHAR_IMAGE_INFO {
    CHAR_INFO CharInfo;
    FONT_IMAGE_INFO FontImageInfo;
} CHAR_IMAGE_INFO, *PCHAR_IMAGE_INFO;
typedef struct _VGA_CHAR {
    CHAR Char;
    CHAR Attributes;
} VGA_CHAR, *PVGA_CHAR;
typedef struct _FSVIDEO_COPY_FRAME_BUFFER {
    FSCNTL_SCREEN_INFO SrcScreen;
    FSCNTL_SCREEN_INFO DestScreen;
} FSVIDEO_COPY_FRAME_BUFFER, *PFSVIDEO_COPY_FRAME_BUFFER;
typedef struct _FSVIDEO_WRITE_TO_FRAME_BUFFER {
    PCHAR_IMAGE_INFO SrcBuffer;
    FSCNTL_SCREEN_INFO DestScreen;
} FSVIDEO_WRITE_TO_FRAME_BUFFER, *PFSVIDEO_WRITE_TO_FRAME_BUFFER;
typedef struct _FSVIDEO_REVERSE_MOUSE_POINTER {
    FSCNTL_SCREEN_INFO Screen;
    ULONG dwType;
} FSVIDEO_REVERSE_MOUSE_POINTER, *PFSVIDEO_REVERSE_MOUSE_POINTER;
typedef struct _FSVIDEO_MODE_INFORMATION {
    VIDEO_MODE_INFORMATION VideoMode;
    VIDEO_MEMORY_INFORMATION VideoMemory;
} FSVIDEO_MODE_INFORMATION, *PFSVIDEO_MODE_INFORMATION;
typedef struct _FSVIDEO_SCREEN_INFORMATION {
    COORD ScreenSize;
    COORD FontSize;
} FSVIDEO_SCREEN_INFORMATION, *PFSVIDEO_SCREEN_INFORMATION;
typedef struct _FSVIDEO_CURSOR_POSITION {
    VIDEO_CURSOR_POSITION Coord;
    ULONG dwType;
} FSVIDEO_CURSOR_POSITION, *PFSVIDEO_CURSOR_POSITION;
typedef struct _ENG_EVENT *PEVENT;
typedef struct _ENG_EVENT {
    PVOID pKEvent;
    ULONG fFlags;
    } ENG_EVENT, *PENG_EVENT;
typedef struct _VIDEO_PERFORMANCE_COUNTER
{
   UINT64 NbOfAllocationEvicted[VIDEO_MAX_REASON+1];
   UINT64 NbOfAllocationMarked[VIDEO_MAX_REASON+1];
   UINT64 NbOfAllocationRestored[VIDEO_MAX_REASON+1];
   UINT64 KBytesEvicted[VIDEO_MAX_REASON+1];
   UINT64 KBytesMarked[VIDEO_MAX_REASON+1];
   UINT64 KBytesRestored[VIDEO_MAX_REASON+1];
   UINT64 NbProcessCommited;
   UINT64 NbAllocationCommited;
   UINT64 NbAllocationMarked;
   UINT64 KBytesAllocated;
   UINT64 KBytesAvailable;
   UINT64 KBytesCurMarked;
   UINT64 Reference;
   UINT64 Unreference;
   UINT64 TrueReference;
   UINT64 NbOfPageIn;
   UINT64 KBytesPageIn;
   UINT64 NbOfPageOut;
   UINT64 KBytesPageOut;
   UINT64 NbOfRotateOut;
   UINT64 KBytesRotateOut;
} VIDEO_PERFORMANCE_COUNTER, *PVIDEO_PERFORMANCE_COUNTER;
typedef struct _VIDEO_QUERY_PERFORMANCE_COUNTER
{
   ULONG BufferSize;
   PVIDEO_PERFORMANCE_COUNTER Buffer;
} VIDEO_QUERY_PERFORMANCE_COUNTER, *PVIDEO_QUERY_PERFORMANCE_COUNTER;
typedef enum _BRIGHTNESS_INTERFACE_VERSION
{
    BRIGHTNESS_INTERFACE_VERSION_1 = 1,
    BRIGHTNESS_INTERFACE_VERSION_2 = 2,
    BRIGHTNESS_INTERFACE_VERSION_3 = 3,
} BRIGHTNESS_INTERFACE_VERSION;
typedef struct _PANEL_QUERY_BRIGHTNESS_CAPS{
    BRIGHTNESS_INTERFACE_VERSION Version;
    union
    {
        struct
        {
            ULONG Smooth : 1;
            ULONG Adaptive : 1;
            ULONG NitsCalibrated: 1;
            ULONG Reserved : 29;
        };
        ULONG Value;
    };
} PANEL_QUERY_BRIGHTNESS_CAPS, *PPANEL_QUERY_BRIGHTNESS_CAPS;
typedef struct _BRIGHTNESS_LEVEL
{
    UCHAR Count;
    UCHAR Level[BRIGHTNESS_MAX_LEVEL_COUNT];
} BRIGHTNESS_LEVEL, *PBRIGHTNESS_LEVEL;
typedef struct _BRIGHTNESS_NIT_RANGE
{
    ULONG MinLevelInMillinit;
    ULONG MaxLevelInMillinit;
    ULONG StepSizeInMillinit;
} BRIGHTNESS_NIT_RANGE, *PBRIGHTNESS_NIT_RANGE;
typedef struct BRIGHTNESS_NIT_RANGES
{
    ULONG NormalRangeCount;
    ULONG RangeCount;
    ULONG PreferredMaximumBrightness;
    BRIGHTNESS_NIT_RANGE SupportedRanges[BRIGHTNESS_MAX_NIT_RANGE_COUNT];
} BRIGHTNESS_NIT_RANGES, *PBRIGHTNESS_NIT_RANGES;
typedef struct _PANEL_QUERY_BRIGHTNESS_RANGES{
    BRIGHTNESS_INTERFACE_VERSION Version;
    union
    {
        BRIGHTNESS_LEVEL BrightnessLevel;
        BRIGHTNESS_NIT_RANGES NitRanges;
    };
} PANEL_QUERY_BRIGHTNESS_RANGES, *PPANEL_QUERY_BRIGHTNESS_RANGES;
typedef struct _PANEL_GET_BRIGHTNESS{
    BRIGHTNESS_INTERFACE_VERSION Version;
    union
    {
        UCHAR Level;
        struct
        {
            ULONG CurrentInMillinits;
            ULONG TargetInMillinits;
        };
    };
} PANEL_GET_BRIGHTNESS, *PPANEL_GET_BRIGHTNESS;
typedef struct _CHROMATICITY_COORDINATE
{
    float x;
    float y;
} CHROMATICITY_COORDINATE;
typedef struct _PANEL_BRIGHTNESS_SENSOR_DATA
{
    union
    {
        struct
        {
            ULONG AlsReadingValid : 1;
            ULONG ChromaticityCoordinateValid : 1;
            ULONG ColorTemperatureValid : 1;
            ULONG Reserved : 29;
        };
        ULONG Value;
    };
    float AlsReading;
    CHROMATICITY_COORDINATE ChromaticityCoordinate;
    float ColorTemperature;
} PANEL_BRIGHTNESS_SENSOR_DATA;
typedef struct _PANEL_SET_BRIGHTNESS{
    BRIGHTNESS_INTERFACE_VERSION Version;
    union
    {
        UCHAR Level;
        struct
        {
            ULONG Millinits;
            ULONG TransitionTimeInMs;
            PANEL_BRIGHTNESS_SENSOR_DATA SensorData;
        };
    };
} PANEL_SET_BRIGHTNESS, *PPANEL_SET_BRIGHTNESS;
typedef struct _PANEL_SET_BRIGHTNESS_STATE{
    union
    {
        struct
        {
            ULONG Smooth : 1;
            ULONG Reserved : 31;
        };
        ULONG Value;
    };
} PANEL_SET_BRIGHTNESS_STATE, *PPANEL_SET_BRIGHTNESS_STATE;
typedef enum _BACKLIGHT_OPTIMIZATION_LEVEL
{
    BacklightOptimizationDisable = 0,
    BacklightOptimizationDesktop = 1,
    BacklightOptimizationDynamic = 2,
    BacklightOptimizationDimmed = 3,
    BacklightOptimizationEDR = 4,
} BACKLIGHT_OPTIMIZATION_LEVEL;
typedef struct _PANEL_SET_BACKLIGHT_OPTIMIZATION{
    BACKLIGHT_OPTIMIZATION_LEVEL Level;
} PANEL_SET_BACKLIGHT_OPTIMIZATION, *PPANEL_SET_BACKLIGHT_OPTIMIZATION;
typedef struct _BACKLIGHT_REDUCTION_GAMMA_RAMP
{
    USHORT R[256];
    USHORT G[256];
    USHORT B[256];
} BACKLIGHT_REDUCTION_GAMMA_RAMP;
typedef struct _PANEL_GET_BACKLIGHT_REDUCTION{
    USHORT BacklightUsersetting;
    USHORT BacklightEffective;
    BACKLIGHT_REDUCTION_GAMMA_RAMP GammaRamp;
} PANEL_GET_BACKLIGHT_REDUCTION, *PPANEL_GET_BACKLIGHT_REDUCTION;
typedef enum _COLORSPACE_TRANSFORM_DATA_TYPE
{
    COLORSPACE_TRANSFORM_DATA_TYPE_FIXED_POINT = 0,
    COLORSPACE_TRANSFORM_DATA_TYPE_FLOAT,
}COLORSPACE_TRANSFORM_DATA_TYPE;
typedef struct _COLORSPACE_TRANSFORM_DATA_CAP
{
    COLORSPACE_TRANSFORM_DATA_TYPE DataType;
    union
    {
        struct
        {
            ULONG BitCountOfInteger : 6;
            ULONG BitCountOfFraction: 6;
        };
        struct
        {
            ULONG BitCountOfExponent: 6;
            ULONG BitCountOfMantissa: 6;
        };
        ULONG Value;
    };
    float NumericRangeMin;
    float NumericRangeMax;
}COLORSPACE_TRANSFORM_DATA_CAP;
typedef struct _COLORSPACE_TRANSFORM_1DLUT_CAP
{
    ULONG NumberOfLUTEntries;
    COLORSPACE_TRANSFORM_DATA_CAP DataCap;
}COLORSPACE_TRANSFORM_1DLUT_CAP, *PCOLORSPACE_TRANSFORM_1DLUT_CAP;
typedef struct _COLORSPACE_TRANSFORM_MATRIX_CAP
{
    union
    {
        struct
        {
            ULONG MatrixSizeX : 10;
            ULONG MatrixSizeY : 10;
        };
        ULONG Value;
    };
    COLORSPACE_TRANSFORM_DATA_CAP DataCap;
}COLORSPACE_TRANSFORM_MATRIX_CAP, *PCOLORSPACE_TRANSFORM_MATRIX_CAP;
typedef enum _COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION
{
    COLORSPACE_TRANSFORM_VERSION_DEFAULT = 0,
    COLORSPACE_TRANSFORM_VERSION_1 = 1,
    COLORSPACE_TRANSFORM_VERSION_NOT_SUPPORTED = COLORSPACE_TRANSFORM_VERSION_DEFAULT,
}COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION;
typedef struct _COLORSPACE_TRANSFORM_TARGET_CAPS
{
    COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION Version;
    COLORSPACE_TRANSFORM_1DLUT_CAP LookupTable1DDegammaCap;
    COLORSPACE_TRANSFORM_MATRIX_CAP ColorMatrix3x3Cap;
    COLORSPACE_TRANSFORM_1DLUT_CAP LookupTable1DRegammaCap;
}COLORSPACE_TRANSFORM_TARGET_CAPS, *PCOLORSPACE_TRANSFORM_TARGET_CAPS;
typedef enum _COLORSPACE_TRANSFORM_TYPE
{
    COLORSPACE_TRANSFORM_TYPE_UNINITIALIZED = 0,
    COLORSPACE_TRANSFORM_TYPE_DEFAULT = 1,
    COLORSPACE_TRANSFORM_TYPE_RGB256x3x16 = 2,
    COLORSPACE_TRANSFORM_TYPE_DXGI_1 = 3,
    COLORSPACE_TRANSFORM_TYPE_MATRIX_3x4 = 4,
    COLORSPACE_TRANSFORM_TYPE_MATRIX_V2 = 5,
} COLORSPACE_TRANSFORM_TYPE;
typedef struct _GAMMA_RAMP_RGB256x3x16
{
    USHORT Red[256];
    USHORT Green[256];
    USHORT Blue[256];
} GAMMA_RAMP_RGB256x3x16;
typedef struct _GAMMA_RAMP_RGB
{
    float Red;
    float Green;
    float Blue;
} GAMMA_RAMP_RGB;
typedef struct _GAMMA_RAMP_DXGI_1
{
    GAMMA_RAMP_RGB Scale;
    GAMMA_RAMP_RGB Offset;
    GAMMA_RAMP_RGB GammaCurve[1025];
} GAMMA_RAMP_DXGI_1;
typedef struct _COLORSPACE_TRANSFORM_3x4
{
    float ColorMatrix3x4[3][4];
    float ScalarMultiplier;
    GAMMA_RAMP_RGB LookupTable1D[4096];
} COLORSPACE_TRANSFORM_3x4, *PCOLORSPACE_TRANSFORM_3x4;
typedef enum _OUTPUT_WIRE_COLOR_SPACE_TYPE
{
    OUTPUT_WIRE_COLOR_SPACE_G22_P709 = 0,
    OUTPUT_WIRE_COLOR_SPACE_RESERVED = 4,
    OUTPUT_WIRE_COLOR_SPACE_G2084_P2020 = 12,
    OUTPUT_WIRE_COLOR_SPACE_G22_P709_WCG = 30,
    OUTPUT_WIRE_COLOR_SPACE_G22_P2020 = 31,
    OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_HDR10PLUS = 32,
    OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_DVLL = 33,
} OUTPUT_WIRE_COLOR_SPACE_TYPE;
typedef enum _OUTPUT_COLOR_ENCODING
{
    OUTPUT_COLOR_ENCODING_RGB = 0,
    OUTPUT_COLOR_ENCODING_YCBCR444 = 1,
    OUTPUT_COLOR_ENCODING_YCBCR422 = 2,
    OUTPUT_COLOR_ENCODING_YCBCR420 = 3,
    OUTPUT_COLOR_ENCODING_INTENSITY = 4,
    OUTPUT_COLOR_ENCODING_FORCE_UINT32 = 0xFFFFFFFF
} OUTPUT_COLOR_ENCODING;
typedef struct _OUTPUT_WIRE_FORMAT
{
    OUTPUT_COLOR_ENCODING ColorEncoding;
    UINT32 BitsPerPixel;
} OUTPUT_WIRE_FORMAT;
typedef enum _COLORSPACE_TRANSFORM_STAGE_CONTROL
{
    ColorSpaceTransformStageControl_No_Change = 0,
    ColorSpaceTransformStageControl_Enable = 1,
    ColorSpaceTransformStageControl_Bypass = 2,
}COLORSPACE_TRANSFORM_STAGE_CONTROL, *PCOLORSPACE_TRANSFORM_STAGE_CONTROL;
typedef struct _COLORSPACE_TRANSFORM_MATRIX_V2
{
    COLORSPACE_TRANSFORM_STAGE_CONTROL StageControlLookupTable1DDegamma;
    GAMMA_RAMP_RGB LookupTable1DDegamma[4096];
    COLORSPACE_TRANSFORM_STAGE_CONTROL StageControlColorMatrix3x3;
    float ColorMatrix3x3[3][3];
    COLORSPACE_TRANSFORM_STAGE_CONTROL StageControlLookupTable1DRegamma;
    GAMMA_RAMP_RGB LookupTable1DRegamma[4096];
} COLORSPACE_TRANSFORM_MATRIX_V2, *PCOLORSPACE_TRANSFORM_MATRIX_V2;
typedef struct _COLORSPACE_TRANSFORM
{
    COLORSPACE_TRANSFORM_TYPE Type;
    union
    {
        GAMMA_RAMP_RGB256x3x16 Rgb256x3x16;
        GAMMA_RAMP_DXGI_1 Dxgi1;
        COLORSPACE_TRANSFORM_3x4 T3x4;
        COLORSPACE_TRANSFORM_MATRIX_V2 MatrixV2;
    } Data;
} COLORSPACE_TRANSFORM, *PCOLORSPACE_TRANSFORM;
typedef struct _COLORSPACE_TRANSFORM_SET_INPUT
{
    OUTPUT_WIRE_COLOR_SPACE_TYPE OutputWireColorSpaceExpected;
    OUTPUT_WIRE_FORMAT OutputWireFormatExpected;
    COLORSPACE_TRANSFORM ColorSpaceTransform;
}COLORSPACE_TRANSFORM_SET_INPUT, *PCOLORSPACE_TRANSFORM_SET_INPUT;
typedef struct _SET_ACTIVE_COLOR_PROFILE_NAME
{
    WCHAR ColorProfileName[1];
}SET_ACTIVE_COLOR_PROFILE_NAME, *PSET_ACTIVE_COLOR_PROFILE_NAME;
typedef struct _MIPI_DSI2_CAPS
{
    UCHAR DSI2VersionMajor;
    UCHAR DSI2VersionMinor;
    USHORT TargetMaximumReturnPacketSize;
    UCHAR ResultCodeFlags;
    UCHAR ResultCodeStatus;
    UCHAR Revision;
    UCHAR Level;
    UCHAR DeviceClassHi;
    UCHAR DeviceClassLo;
    UCHAR ManufacturerHi;
    UCHAR ManufacturerLo;
    UCHAR ProductHi;
    UCHAR ProductLo;
    UCHAR LengthHi;
    UCHAR LengthLo;
} MIPI_DSI2_CAPS, *PMIPI_DSI2_CAPS;
typedef enum _DSI2_CONTROL_TRANSMISSION_MODE
{
    DCT_DEFAULT = 0,
    DCT_FORCE_LOW_POWER,
    DCT_FORCE_HIGH_PERFORMANCE,
} DSI2_CONTROL_TRANSMISSION_MODE;
typedef struct _MIPI_DSI2_PACKET
{
    union
    {
        ULONG DataId : 8;
        struct
        {
            ULONG DataType : 6;
            ULONG VirtualChannel : 2;
        };
    };
    union
    {
        struct
        {
            ULONG Data0 : 8;
            ULONG Data1 : 8;
        };
        ULONG LongWriteWordCount : 16;
    };
    ULONG EccFiller : 8;
    UCHAR Payload[DSI2_PACKET_EMBEDDED_PAYLOAD_SIZE];
} MIPI_DSI2_PACKET;
typedef struct _MIPI_DSI2_TRANSMISSION
{
    ULONG TotalBufferSize;
    struct
    {
        ULONG PacketCount : 8;
        ULONG FailedPacket : 8;
        ULONG TransmissionMode : 2;
        ULONG ReportMipiErrors : 1;
        ULONG ClearMipiErrors : 1;
        ULONG SecondaryPort : 1;
        ULONG Reserved : 11;
    };
    USHORT ReadWordCount;
    USHORT FinalCommandExtraPayload;
    USHORT MipiErrors;
    USHORT HostErrors;
    MIPI_DSI2_PACKET Packets[1];
} MIPI_DSI2_TRANSMISSION;
typedef MIPI_DSI2_TRANSMISSION MIPI_DSI2_TRANSMISSION_INPUT, *PMIPI_DSI2_TRANSMISSION_INPUT;
typedef MIPI_DSI2_TRANSMISSION MIPI_DSI2_TRANSMISSION_OUTPUT, *PMIPI_DSI2_TRANSMISSION_OUTPUT;
DEFINE_GUID(GUID_MONITOR_OVERRIDE_PSEUDO_SPECIALIZED, 0xf196c02f, 0xf86f, 0x4f9a, 0xaa, 0x15, 0xe9, 0xce, 0xbd, 0xfe, 0x3b, 0x96);
}
#endif
#pragma endregion
