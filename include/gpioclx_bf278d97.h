extern "C" {
typedef USHORT PIN_NUMBER, *PPIN_NUMBER;
typedef USHORT BANK_ID, *PBANK_ID;
#pragma warning(push)
#pragma warning(disable:4214)
#pragma warning(disable:4201)
typedef union _CONTROLLER_ATTRIBUTE_FLAGS {
    struct {
        ULONG MemoryMappedController : 1;
        ULONG ActiveInterruptsAutoClearOnRead : 1;
        ULONG FormatIoRequestsAsMasks : 1;
        ULONG DeviceIdlePowerMgmtSupported : 1;
        ULONG BankIdlePowerMgmtSupported : 1;
        ULONG EmulateDebouncing : 1;
        ULONG EmulateActiveBoth : 1;
        ULONG IndependentIoHwSupported : 1;
        ULONG Reserved : 24;
    };
    ULONG AsULONG;
} CONTROLLER_ATTRIBUTE_FLAGS, *PCONTROLLER_ATTRIBUTE_FLAGS;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_PREPARE_CONTROLLER) (
    _In_ WDFDEVICE Device,
    _In_ PVOID Context,
    _In_ WDFCMRESLIST ResourcesRaw,
    _In_ WDFCMRESLIST ResourcesTranslated
    );
typedef GPIO_CLIENT_PREPARE_CONTROLLER *PGPIO_CLIENT_PREPARE_CONTROLLER;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_RELEASE_CONTROLLER) (
    _In_ WDFDEVICE Device,
    _In_ PVOID Context
    );
typedef GPIO_CLIENT_RELEASE_CONTROLLER *PGPIO_CLIENT_RELEASE_CONTROLLER;
typedef struct _CLIENT_CONTROLLER_BASIC_INFORMATION {
    USHORT Version;
    USHORT Size;
    USHORT TotalPins;
    UCHAR NumberOfPinsPerBank;
    ULONG DeviceIdleTimeout;
    CONTROLLER_ATTRIBUTE_FLAGS Flags;
} CLIENT_CONTROLLER_BASIC_INFORMATION, *PCLIENT_CONTROLLER_BASIC_INFORMATION;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_QUERY_CONTROLLER_BASIC_INFORMATION) (
    _In_ PVOID Context,
    _Out_ PCLIENT_CONTROLLER_BASIC_INFORMATION Information
);
typedef GPIO_CLIENT_QUERY_CONTROLLER_BASIC_INFORMATION
    *PGPIO_CLIENT_QUERY_CONTROLLER_BASIC_INFORMATION;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_START_CONTROLLER) (
    _In_ PVOID Context,
    _In_ BOOLEAN RestoreContext,
    _In_ WDF_POWER_DEVICE_STATE PreviousPowerState
    );
typedef GPIO_CLIENT_START_CONTROLLER *PGPIO_CLIENT_START_CONTROLLER;
typedef
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_STOP_CONTROLLER) (
    _In_ PVOID Context,
    _In_ BOOLEAN SaveContext,
    _In_ WDF_POWER_DEVICE_STATE TargetState
    );
typedef GPIO_CLIENT_STOP_CONTROLLER *PGPIO_CLIENT_STOP_CONTROLLER;
typedef enum _CLIENT_CONTROLLER_QUERY_SET_REQUEST_TYPE {
    QueryBankPowerInformation,
    QueryBankInterruptBindingInformation,
    QueryControllerFunctionBankMappingInformation,
    QuerySetRequestMaximumType
} CLIENT_CONTROLLER_QUERY_SET_REQUEST_TYPE,
    *PCLIENT_CONTROLLER_QUERY_SET_REQUEST_TYPE;
typedef struct _CLIENT_CONTROLLER_QUERY_SET_INFORMATION_INPUT {
    CLIENT_CONTROLLER_QUERY_SET_REQUEST_TYPE RequestType;
    USHORT Size;
    ULONG Flags;
    union {
        struct {
            BANK_ID BankId;
        } BankPowerInformation;
        struct {
            WDFCMRESLIST ResourcesTranslated;
            WDFCMRESLIST ResourcesRaw;
            USHORT TotalBanks;
        } BankInterruptBinding;
        struct {
            PVOID InputBuffer;
            SIZE_T InputBufferSize;
            SIZE_T OutputBufferSize;
            USHORT TotalBanks;
        } ControllerFunctionBankMapping;
    };
} CLIENT_CONTROLLER_QUERY_SET_INFORMATION_INPUT,
    *PCLIENT_CONTROLLER_QUERY_SET_INFORMATION_INPUT;
typedef struct _CLIENT_QUERY_BANK_POWER_INFORMATION_OUTPUT {
    struct {
        USHORT F1StateSupported: 1;
        USHORT Reserved: 15;
    };
    PO_FX_COMPONENT_IDLE_STATE F1IdleStateParameters;
} CLIENT_QUERY_BANK_POWER_INFORMATION_OUTPUT,
    *PCLIENT_QUERY_BANK_POWER_INFORMATION_OUTPUT;
typedef struct _CLIENT_CONTROLLER_QUERY_SET_INFORMATION_OUTPUT {
    USHORT Version;
    USHORT Size;
    union {
        CLIENT_QUERY_BANK_POWER_INFORMATION_OUTPUT BankPowerInformation;
        struct {
            ULONG ResourceMapping[ANYSIZE_ARRAY];
        } BankInterruptBinding;
        struct {
            BOOLEAN Mapping[ANYSIZE_ARRAY];
        } ControllerFunctionBankMapping;
    };
} CLIENT_CONTROLLER_QUERY_SET_INFORMATION_OUTPUT,
    *PCLIENT_CONTROLLER_QUERY_SET_INFORMATION_OUTPUT;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_QUERY_SET_CONTROLLER_INFORMATION) (
    _In_ PVOID Context,
    _In_ PCLIENT_CONTROLLER_QUERY_SET_INFORMATION_INPUT InputBuffer,
    _Out_opt_ PCLIENT_CONTROLLER_QUERY_SET_INFORMATION_OUTPUT OutputBuffer
    );
typedef GPIO_CLIENT_QUERY_SET_CONTROLLER_INFORMATION
    *PGPIO_CLIENT_QUERY_SET_CONTROLLER_INFORMATION;
typedef union _GPIO_ENABLE_INTERRUPT_FLAGS {
    ULONG AsULONG;
} GPIO_ENABLE_INTERRUPT_FLAGS, *PGPIO_ENABLE_INTERRUPT_FLAGS;
typedef struct _GPIO_ENABLE_INTERRUPT_PARAMETERS {
    BANK_ID BankId;
    PIN_NUMBER PinNumber;
    GPIO_ENABLE_INTERRUPT_FLAGS Flags;
    KINTERRUPT_MODE InterruptMode;
    KINTERRUPT_POLARITY Polarity;
    UCHAR PullConfiguration;
    USHORT DebounceTimeout;
    PVOID VendorData;
    ULONG VendorDataLength;
} GPIO_ENABLE_INTERRUPT_PARAMETERS, *PGPIO_ENABLE_INTERRUPT_PARAMETERS;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_ENABLE_INTERRUPT) (
    _In_ PVOID Context,
    _In_ PGPIO_ENABLE_INTERRUPT_PARAMETERS EnableParameters
    );
typedef GPIO_CLIENT_ENABLE_INTERRUPT *PGPIO_CLIENT_ENABLE_INTERRUPT;
typedef union _GPIO_DISABLE_INTERRUPT_FLAGS {
    struct {
        ULONG RetryDisableOnFailure: 1;
        ULONG Reserved: 31;
    };
    ULONG AsULONG;
} GPIO_DISABLE_INTERRUPT_FLAGS, *PGPIO_DISABLE_INTERRUPT_FLAGS;
typedef struct _GPIO_DISABLE_INTERRUPT_PARAMETERS {
    BANK_ID BankId;
    PIN_NUMBER PinNumber;
    GPIO_DISABLE_INTERRUPT_FLAGS Flags;
} GPIO_DISABLE_INTERRUPT_PARAMETERS, *PGPIO_DISABLE_INTERRUPT_PARAMETERS;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_DISABLE_INTERRUPT) (
    _In_ PVOID Context,
    _In_ PGPIO_DISABLE_INTERRUPT_PARAMETERS DisableParameters
    );
typedef GPIO_CLIENT_DISABLE_INTERRUPT *PGPIO_CLIENT_DISABLE_INTERRUPT;
typedef struct _GPIO_QUERY_ENABLED_INTERRUPTS_PARAMETERS {
    BANK_ID BankId;
    ULONG64 EnabledMask;
} GPIO_QUERY_ENABLED_INTERRUPTS_PARAMETERS,
    *PGPIO_QUERY_ENABLED_INTERRUPTS_PARAMETERS;
typedef
_Must_inspect_result_
_IRQL_requires_same_
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_QUERY_ENABLED_INTERRUPTS) (
    _In_ PVOID Context,
    _In_ PGPIO_QUERY_ENABLED_INTERRUPTS_PARAMETERS QueryEnabledParameters
    );
typedef GPIO_CLIENT_QUERY_ENABLED_INTERRUPTS
    *PGPIO_CLIENT_QUERY_ENABLED_INTERRUPTS;
typedef struct _GPIO_MASK_INTERRUPT_PARAMETERS {
    BANK_ID BankId;
    ULONG64 PinMask;
    ULONG64 FailedMask;
} GPIO_MASK_INTERRUPT_PARAMETERS, *PGPIO_MASK_INTERRUPT_PARAMETERS;
typedef
_Must_inspect_result_
_IRQL_requires_same_
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_MASK_INTERRUPTS) (
    _In_ PVOID Context,
    _In_ PGPIO_MASK_INTERRUPT_PARAMETERS MaskParameters
    );
typedef GPIO_CLIENT_MASK_INTERRUPTS *PGPIO_CLIENT_MASK_INTERRUPTS;
typedef
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_UNMASK_INTERRUPT) (
    _In_ PVOID Context,
    _In_ PGPIO_ENABLE_INTERRUPT_PARAMETERS InterruptParameters
    );
typedef GPIO_CLIENT_UNMASK_INTERRUPT *PGPIO_CLIENT_UNMASK_INTERRUPT;
typedef struct _GPIO_QUERY_ACTIVE_INTERRUPTS_PARAMETERS {
    BANK_ID BankId;
    ULONG64 EnabledMask;
    ULONG64 ActiveMask;
} GPIO_QUERY_ACTIVE_INTERRUPTS_PARAMETERS,
    *PGPIO_QUERY_ACTIVE_INTERRUPTS_PARAMETERS;
typedef
_Must_inspect_result_
_IRQL_requires_same_
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_QUERY_ACTIVE_INTERRUPTS) (
    _In_ PVOID Context,
    _In_ PGPIO_QUERY_ACTIVE_INTERRUPTS_PARAMETERS QueryActiveParameters
    );
typedef GPIO_CLIENT_QUERY_ACTIVE_INTERRUPTS
    *PGPIO_CLIENT_QUERY_ACTIVE_INTERRUPTS;
typedef struct _GPIO_CLEAR_ACTIVE_INTERRUPTS_PARAMETERS {
    BANK_ID BankId;
    ULONG64 ClearActiveMask;
    ULONG64 FailedClearMask;
} GPIO_CLEAR_ACTIVE_INTERRUPTS_PARAMETERS,
    *PGPIO_CLEAR_ACTIVE_INTERRUPTS_PARAMETERS;
typedef
_Must_inspect_result_
_IRQL_requires_same_
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_CLEAR_ACTIVE_INTERRUPTS) (
    _In_ PVOID Context,
    _In_ PGPIO_CLEAR_ACTIVE_INTERRUPTS_PARAMETERS ClearParameters
    );
typedef GPIO_CLIENT_CLEAR_ACTIVE_INTERRUPTS
    *PGPIO_CLIENT_CLEAR_ACTIVE_INTERRUPTS;
typedef
_Must_inspect_result_
_IRQL_requires_same_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_PRE_PROCESS_CONTROLLER_INTERRUPT) (
    _In_ PVOID Context,
    _In_ BANK_ID BankId,
    _In_ ULONG64 EnabledMask
);
typedef GPIO_CLIENT_PRE_PROCESS_CONTROLLER_INTERRUPT
    *PGPIO_CLIENT_PRE_PROCESS_CONTROLLER_INTERRUPT;
typedef union _GPIO_RECONFIGURE_INTERRUPT_FLAGS {
    ULONG AsULONG;
} GPIO_RECONFIGURE_INTERRUPT_FLAGS, *PGPIO_RECONFIGURE_INTERRUPT_FLAGS;
typedef struct _GPIO_RECONFIGURE_INTERRUPTS_PARAMETERS {
    BANK_ID BankId;
    PIN_NUMBER PinNumber;
    KINTERRUPT_MODE InterruptMode;
    KINTERRUPT_POLARITY Polarity;
    GPIO_RECONFIGURE_INTERRUPT_FLAGS Flags;
} GPIO_RECONFIGURE_INTERRUPTS_PARAMETERS,
    *PGPIO_RECONFIGURE_INTERRUPTS_PARAMETERS;
typedef
_Must_inspect_result_
_IRQL_requires_same_
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_RECONFIGURE_INTERRUPT) (
    _In_ PVOID Context,
    _In_ PGPIO_RECONFIGURE_INTERRUPTS_PARAMETERS ReconfigureParameters
    );
typedef GPIO_CLIENT_RECONFIGURE_INTERRUPT *PGPIO_CLIENT_RECONFIGURE_INTERRUPT;
typedef union _GPIO_CONNECT_FUNCTION_CONFIG_PINS_FLAGS {
    ULONG AsULONG;
} GPIO_CONNECT_FUNCTION_CONFIG_PINS_FLAGS,
    *PGPIO_CONNECT_FUNCTION_CONFIG_PINS_FLAGS;
typedef struct _GPIO_CONNECT_FUNCTION_CONFIG_PINS_PARAMETERS {
    BANK_ID BankId;
    _Field_size_(PinCount) PPIN_NUMBER PinNumberTable;
    USHORT PinCount;
    ULONG FunctionNumber;
    UCHAR PullConfiguration;
    PVOID VendorData;
    ULONG VendorDataLength;
    GPIO_CONNECT_FUNCTION_CONFIG_PINS_FLAGS ConnectFlags;
} GPIO_CONNECT_FUNCTION_CONFIG_PINS_PARAMETERS,
    *PGPIO_CONNECT_FUNCTION_CONFIG_PINS_PARAMETERS;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_CONNECT_FUNCTION_CONFIG_PINS) (
    _In_ PVOID Context,
    _In_ PGPIO_CONNECT_FUNCTION_CONFIG_PINS_PARAMETERS ConnectParameters
    );
typedef GPIO_CLIENT_CONNECT_FUNCTION_CONFIG_PINS
    *PGPIO_CLIENT_CONNECT_FUNCTION_CONFIG_PINS;
typedef union _GPIO_DISCONNECT_FUNCTION_CONFIG_PINS_FLAGS {
    ULONG AsULONG;
} GPIO_DISCONNECT_FUNCTION_CONFIG_PINS_FLAGS,
    *PGPIO_DISCONNECT_FUNCTION_CONFIG_PINS_FLAGS;
typedef struct _GPIO_DISCONNECT_FUNCTION_CONFIG_PINS_PARAMETERS {
    BANK_ID BankId;
    _Field_size_(PinCount) PPIN_NUMBER PinNumberTable;
    ULONG PinCount;
    GPIO_DISCONNECT_FUNCTION_CONFIG_PINS_FLAGS DisconnectFlags;
} GPIO_DISCONNECT_FUNCTION_CONFIG_PINS_PARAMETERS,
    *PGPIO_DISCONNECT_FUNCTION_CONFIG_PINS_PARAMETERS;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_DISCONNECT_FUNCTION_CONFIG_PINS) (
    _In_ PVOID Context,
    _In_ PGPIO_DISCONNECT_FUNCTION_CONFIG_PINS_PARAMETERS DisconnectParameters
);
typedef GPIO_CLIENT_DISCONNECT_FUNCTION_CONFIG_PINS
    *PGPIO_CLIENT_DISCONNECT_FUNCTION_CONFIG_PINS;
typedef enum _GPIO_CONNECT_IO_PINS_MODE {
    ConnectModeInvalid,
    ConnectModeInput,
    ConnectModeOutput,
    ConnectModeMaximum = ConnectModeOutput
} GPIO_CONNECT_IO_PINS_MODE, *PGPIO_CONNECT_IO_PINS_MODE;
typedef union _GPIO_CONNECT_IO_PINS_FLAGS {
    ULONG AsULONG;
} GPIO_CONNECT_IO_PINS_FLAGS, *PGPIO_CONNECT_IO_PINS_FLAGS;
typedef struct _GPIO_CONNECT_IO_PINS_PARAMETERS {
    BANK_ID BankId;
    _Field_size_(PinCount) PPIN_NUMBER PinNumberTable;
    USHORT PinCount;
    GPIO_CONNECT_IO_PINS_MODE ConnectMode;
    UCHAR PullConfiguration;
    USHORT DebounceTimeout;
    USHORT DriveStrength;
    PVOID VendorData;
    ULONG VendorDataLength;
    GPIO_CONNECT_IO_PINS_FLAGS ConnectFlags;
} GPIO_CONNECT_IO_PINS_PARAMETERS, *PGPIO_CONNECT_IO_PINS_PARAMETERS;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_CONNECT_IO_PINS) (
    _In_ PVOID Context,
    _In_ PGPIO_CONNECT_IO_PINS_PARAMETERS ConnectParameters
    );
typedef GPIO_CLIENT_CONNECT_IO_PINS *PGPIO_CLIENT_CONNECT_IO_PINS;
typedef union _GPIO_DISCONNECT_IO_PINS_FLAGS {
    struct {
        ULONG PreserveConfiguration: 1;
        ULONG Reserved: 31;
    };
    ULONG AsULONG;
} GPIO_DISCONNECT_IO_PINS_FLAGS, *PGPIO_DISCONNECT_IO_PINS_FLAGS;
typedef struct _GPIO_DISCONNECT_IO_PINS_PARAMETERS {
    BANK_ID BankId;
    _Field_size_(PinCount) PPIN_NUMBER PinNumberTable;
    ULONG PinCount;
    GPIO_CONNECT_IO_PINS_MODE DisconnectMode;
    GPIO_DISCONNECT_IO_PINS_FLAGS DisconnectFlags;
} GPIO_DISCONNECT_IO_PINS_PARAMETERS, *PGPIO_DISCONNECT_IO_PINS_PARAMETERS;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_DISCONNECT_IO_PINS) (
    _In_ PVOID Context,
    _In_ PGPIO_DISCONNECT_IO_PINS_PARAMETERS DisconnectParameters
);
typedef GPIO_CLIENT_DISCONNECT_IO_PINS *PGPIO_CLIENT_DISCONNECT_IO_PINS;
typedef union _GPIO_READ_PINS_FLAGS {
    struct {
        ULONG WriteConfiguredPins: 1;
        ULONG Reserved0: 31;
    };
    ULONG AsULONG;
} GPIO_READ_PINS_FLAGS, *PGPIO_READ_PINS_FLAGS;
typedef struct _GPIO_READ_PINS_PARAMETERS {
    BANK_ID BankId;
    _Field_size_(PinCount) PPIN_NUMBER PinNumberTable;
    ULONG PinCount;
    PVOID Buffer;
    GPIO_READ_PINS_FLAGS Flags;
    PVOID Reserved;
} GPIO_READ_PINS_PARAMETERS, *PGPIO_READ_PINS_PARAMETERS;
typedef
_Must_inspect_result_
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_READ_PINS) (
    _In_ PVOID Context,
    _In_ PGPIO_READ_PINS_PARAMETERS ReadParameters
    );
typedef GPIO_CLIENT_READ_PINS *PGPIO_CLIENT_READ_PINS;
typedef struct _GPIO_READ_PINS_MASK_PARAMETERS {
    BANK_ID BankId;
    PULONG64 PinValues;
    GPIO_READ_PINS_FLAGS Flags;
    PVOID Reserved;
} GPIO_READ_PINS_MASK_PARAMETERS, *PGPIO_READ_PINS_MASK_PARAMETERS;
typedef
_Must_inspect_result_
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_READ_PINS_MASK) (
    _In_ PVOID Context,
    _In_ PGPIO_READ_PINS_MASK_PARAMETERS ReadParameters
    );
typedef GPIO_CLIENT_READ_PINS_MASK *PGPIO_CLIENT_READ_PINS_MASK;
typedef union _GPIO_WRITE_PINS_FLAGS {
    ULONG AsULONG;
} GPIO_WRITE_PINS_FLAGS, *PGPIO_WRITE_PINS_FLAGS;
typedef struct _GPIO_WRITE_PINS_PARAMETERS {
    BANK_ID BankId;
    _Field_size_(PinCount) PPIN_NUMBER PinNumberTable;
    ULONG PinCount;
    PVOID Buffer;
    GPIO_WRITE_PINS_FLAGS Flags;
    PVOID Reserved;
} GPIO_WRITE_PINS_PARAMETERS, *PGPIO_WRITE_PINS_PARAMETERS;
typedef
_Must_inspect_result_
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_WRITE_PINS) (
    _In_ PVOID Context,
    _In_ PGPIO_WRITE_PINS_PARAMETERS WriteParameters
    );
typedef GPIO_CLIENT_WRITE_PINS *PGPIO_CLIENT_WRITE_PINS;
typedef struct _GPIO_WRITE_PINS_MASK_PARAMETERS {
    BANK_ID BankId;
    ULONG64 SetMask;
    ULONG64 ClearMask;
    GPIO_WRITE_PINS_FLAGS Flags;
    PVOID Reserved;
} GPIO_WRITE_PINS_MASK_PARAMETERS, *PGPIO_WRITE_PINS_MASK_PARAMETERS;
typedef
_Must_inspect_result_
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_WRITE_PINS_MASK) (
    _In_ PVOID Context,
    _In_ PGPIO_WRITE_PINS_MASK_PARAMETERS WriteParameters
    );
typedef GPIO_CLIENT_WRITE_PINS_MASK *PGPIO_CLIENT_WRITE_PINS_MASK;
typedef union _GPIO_SAVE_RESTORE_BANK_HARDWARE_CONTEXT_FLAGS {
    struct {
        ULONG CriticalTransition: 1;
        ULONG Reserved0: 31;
    };
    ULONG AsULONG;
} GPIO_SAVE_RESTORE_BANK_HARDWARE_CONTEXT_FLAGS,
    *PGPIO_SAVE_RESTORE_BANK_HARDWARE_CONTEXT_FLAGS;
typedef struct _GPIO_SAVE_RESTORE_BANK_HARDWARE_CONTEXT_PARAMETERS {
    BANK_ID BankId;
    ULONG State;
    GPIO_SAVE_RESTORE_BANK_HARDWARE_CONTEXT_FLAGS Flags;
} GPIO_SAVE_RESTORE_BANK_HARDWARE_CONTEXT_PARAMETERS,
    *PGPIO_SAVE_RESTORE_BANK_HARDWARE_CONTEXT_PARAMETERS;
typedef
VOID
(GPIO_EXPORT GPIO_CLIENT_SAVE_BANK_HARDWARE_CONTEXT) (
    _In_ PVOID Context,
    _In_ PGPIO_SAVE_RESTORE_BANK_HARDWARE_CONTEXT_PARAMETERS Parameters
    );
typedef GPIO_CLIENT_SAVE_BANK_HARDWARE_CONTEXT
    *PGPIO_CLIENT_SAVE_BANK_HARDWARE_CONTEXT;
typedef
VOID
(GPIO_EXPORT GPIO_CLIENT_RESTORE_BANK_HARDWARE_CONTEXT) (
    _In_ PVOID Context,
    _In_ PGPIO_SAVE_RESTORE_BANK_HARDWARE_CONTEXT_PARAMETERS Parameters
    );
typedef GPIO_CLIENT_RESTORE_BANK_HARDWARE_CONTEXT
    *PGPIO_CLIENT_RESTORE_BANK_HARDWARE_CONTEXT;
typedef struct _GPIO_CLIENT_CONTROLLER_SPECIFIC_FUNCTION_PARAMETERS {
    PVOID InputBuffer;
    SIZE_T InputBufferLength;
    PVOID OutputBuffer;
    SIZE_T OutputBufferLength;
    ULONG BytesWritten;
} GPIO_CLIENT_CONTROLLER_SPECIFIC_FUNCTION_PARAMETERS,
    *PGPIO_CLIENT_CONTROLLER_SPECIFIC_FUNCTION_PARAMETERS;
typedef
_Must_inspect_result_
NTSTATUS
(GPIO_EXPORT GPIO_CLIENT_CONTROLLER_SPECIFIC_FUNCTION) (
    _In_ PVOID Context,
    _Inout_ PGPIO_CLIENT_CONTROLLER_SPECIFIC_FUNCTION_PARAMETERS Parameters
    );
typedef GPIO_CLIENT_CONTROLLER_SPECIFIC_FUNCTION
    *PGPIO_CLIENT_CONTROLLER_SPECIFIC_FUNCTION;
typedef struct _GPIO_CLIENT_REGISTRATION_PACKET {
    USHORT Version;
    USHORT Size;
    ULONG Flags;
    ULONG ControllerContextSize;
    ULONG64 Reserved;
    PGPIO_CLIENT_PREPARE_CONTROLLER CLIENT_PrepareController;
    PGPIO_CLIENT_RELEASE_CONTROLLER CLIENT_ReleaseController;
    PGPIO_CLIENT_START_CONTROLLER CLIENT_StartController;
    PGPIO_CLIENT_STOP_CONTROLLER CLIENT_StopController;
    PGPIO_CLIENT_QUERY_CONTROLLER_BASIC_INFORMATION CLIENT_QueryControllerBasicInformation;
    PGPIO_CLIENT_QUERY_SET_CONTROLLER_INFORMATION CLIENT_QuerySetControllerInformation;
    PGPIO_CLIENT_ENABLE_INTERRUPT CLIENT_EnableInterrupt;
    PGPIO_CLIENT_DISABLE_INTERRUPT CLIENT_DisableInterrupt;
    PGPIO_CLIENT_UNMASK_INTERRUPT CLIENT_UnmaskInterrupt;
    PGPIO_CLIENT_MASK_INTERRUPTS CLIENT_MaskInterrupts;
    PGPIO_CLIENT_QUERY_ACTIVE_INTERRUPTS CLIENT_QueryActiveInterrupts;
    PGPIO_CLIENT_CLEAR_ACTIVE_INTERRUPTS CLIENT_ClearActiveInterrupts;
    PGPIO_CLIENT_CONNECT_IO_PINS CLIENT_ConnectIoPins;
    PGPIO_CLIENT_DISCONNECT_IO_PINS CLIENT_DisconnectIoPins;
    union {
        PGPIO_CLIENT_READ_PINS CLIENT_ReadGpioPins;
        PGPIO_CLIENT_READ_PINS_MASK CLIENT_ReadGpioPinsUsingMask;
    };
    union {
        PGPIO_CLIENT_WRITE_PINS CLIENT_WriteGpioPins;
        PGPIO_CLIENT_WRITE_PINS_MASK CLIENT_WriteGpioPinsUsingMask;
    };
    PGPIO_CLIENT_SAVE_BANK_HARDWARE_CONTEXT CLIENT_SaveBankHardwareContext;
    PGPIO_CLIENT_RESTORE_BANK_HARDWARE_CONTEXT CLIENT_RestoreBankHardwareContext;
    PGPIO_CLIENT_PRE_PROCESS_CONTROLLER_INTERRUPT CLIENT_PreProcessControllerInterrupt;
    PGPIO_CLIENT_CONTROLLER_SPECIFIC_FUNCTION CLIENT_ControllerSpecificFunction;
    PGPIO_CLIENT_RECONFIGURE_INTERRUPT CLIENT_ReconfigureInterrupt;
    PGPIO_CLIENT_QUERY_ENABLED_INTERRUPTS CLIENT_QueryEnabledInterrupts;
    PGPIO_CLIENT_CONNECT_FUNCTION_CONFIG_PINS CLIENT_ConnectFunctionConfigPins;
    PGPIO_CLIENT_DISCONNECT_FUNCTION_CONFIG_PINS CLIENT_DisconnectFunctionConfigPins;
} GPIO_CLIENT_REGISTRATION_PACKET, *PGPIO_CLIENT_REGISTRATION_PACKET;
#pragma warning(pop)
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLX_REGISTER_CLIENT) (
    _In_ WDFDRIVER Driver,
    _Inout_ PGPIO_CLIENT_REGISTRATION_PACKET RegistrationPacket,
    _In_ PUNICODE_STRING RegistryPath
    );
typedef GPIO_CLX_REGISTER_CLIENT *PGPIO_CLX_REGISTER_CLIENT;
typedef
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLX_UNREGISTER_CLIENT) (
    _In_ WDFDRIVER Driver
    );
typedef GPIO_CLX_UNREGISTER_CLIENT *PGPIO_CLX_UNREGISTER_CLIENT;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLX_PROCESS_ADD_DEVICE_PRE_DEVICE_CREATE) (
    _In_ WDFDRIVER Driver,
    _Inout_ PWDFDEVICE_INIT DeviceInit,
    _Out_ PWDF_OBJECT_ATTRIBUTES FdoAttributes
    );
typedef GPIO_CLX_PROCESS_ADD_DEVICE_PRE_DEVICE_CREATE
    *PGPIO_CLX_PROCESS_ADD_DEVICE_PRE_DEVICE_CREATE;
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
(GPIO_EXPORT GPIO_CLX_PROCESS_ADD_DEVICE_POST_DEVICE_CREATE) (
    _In_ WDFDRIVER Driver,
    _In_ WDFDEVICE Device
    );
typedef GPIO_CLX_PROCESS_ADD_DEVICE_POST_DEVICE_CREATE
    *PGPIO_CLX_PROCESS_ADD_DEVICE_POST_DEVICE_CREATE;
typedef
VOID
(GPIO_EXPORT GPIO_CLX_ACQUIRE_INTERRUPT_LOCK) (
    _In_ PVOID Context,
    _In_ BANK_ID BankId
    );
typedef GPIO_CLX_ACQUIRE_INTERRUPT_LOCK *PGPIO_CLX_ACQUIRE_INTERRUPT_LOCK;
typedef
_IRQL_requires_min_(DISPATCH_LEVEL + 1)
VOID
(GPIO_EXPORT GPIO_CLX_RELEASE_INTERRUPT_LOCK) (
    _In_ PVOID Context,
    _In_ BANK_ID BankId
    );
typedef GPIO_CLX_RELEASE_INTERRUPT_LOCK *PGPIO_CLX_RELEASE_INTERRUPT_LOCK;
typedef enum _GPIO_CLX_EXPORT_INDEX {
    RegisterClientIndex = 0x0,
    UnregisterClientIndex,
    AddDevicePreDeviceCreateIndex,
    AddDevicePostDeviceCreateIndex,
    AcquireInterruptLockIndex,
    ReleaseInterruptLockIndex,
    GpioExportLastExportIndex
} GPIO_CLX_EXPORT_INDEX, *PGPIO_CLX_EXPORT_INDEX;
typedef VOID (*PGPIO_CLX_EXPORTED_INTERFACES)(VOID);
extern PGPIO_CLX_EXPORTED_INTERFACES
    GpioClxExportedInterfaces[GPIO_CLX_TOTAL_EXPORTS];
NTSTATUS
FORCEINLINE
GPIO_CLX_RegisterClient (
    _In_ WDFDRIVER Driver,
    _Inout_ PGPIO_CLIENT_REGISTRATION_PACKET RegistrationPacket,
    _In_ PUNICODE_STRING RegistryPath
    )
{
    PGPIO_CLX_REGISTER_CLIENT RegisterClient;
    RegisterClient = (PGPIO_CLX_REGISTER_CLIENT)
                       GpioClxExportedInterfaces[RegisterClientIndex];
    return RegisterClient(Driver, RegistrationPacket, RegistryPath);
}
NTSTATUS
FORCEINLINE
GPIO_CLX_UnregisterClient (
    _In_ WDFDRIVER Driver
    )
{
    PGPIO_CLX_UNREGISTER_CLIENT UnregisterClient;
    UnregisterClient = (PGPIO_CLX_UNREGISTER_CLIENT)
                         GpioClxExportedInterfaces[UnregisterClientIndex];
    return UnregisterClient(Driver);
}
NTSTATUS
FORCEINLINE
GPIO_CLX_ProcessAddDevicePreDeviceCreate (
    _In_ WDFDRIVER Driver,
    _Inout_ PWDFDEVICE_INIT DeviceInit,
    _Out_ PWDF_OBJECT_ATTRIBUTES FdoAttributes
    )
{
    PGPIO_CLX_PROCESS_ADD_DEVICE_PRE_DEVICE_CREATE PreDeviceCreate;
    PreDeviceCreate = (PGPIO_CLX_PROCESS_ADD_DEVICE_PRE_DEVICE_CREATE)
                      GpioClxExportedInterfaces[AddDevicePreDeviceCreateIndex];
    return PreDeviceCreate(Driver, DeviceInit, FdoAttributes);
}
NTSTATUS
FORCEINLINE
GPIO_CLX_ProcessAddDevicePostDeviceCreate (
    _In_ WDFDRIVER Driver,
    _In_ WDFDEVICE Device
    )
{
    PGPIO_CLX_PROCESS_ADD_DEVICE_POST_DEVICE_CREATE PostDeviceCreate;
    PostDeviceCreate = (PGPIO_CLX_PROCESS_ADD_DEVICE_POST_DEVICE_CREATE)
                       GpioClxExportedInterfaces[AddDevicePostDeviceCreateIndex];
    return PostDeviceCreate(Driver, Device);
}
VOID
FORCEINLINE
GPIO_CLX_AcquireInterruptLock (
    _In_ PVOID Context,
    _In_ BANK_ID BankId
    )
{
    PGPIO_CLX_ACQUIRE_INTERRUPT_LOCK AcquireInterruptLock;
    AcquireInterruptLock = (PGPIO_CLX_ACQUIRE_INTERRUPT_LOCK)
                           GpioClxExportedInterfaces[AcquireInterruptLockIndex];
    AcquireInterruptLock(Context, BankId);
    return;
}
VOID
FORCEINLINE
GPIO_CLX_ReleaseInterruptLock (
    _In_ PVOID Context,
    _In_ BANK_ID BankId
    )
{
    PGPIO_CLX_RELEASE_INTERRUPT_LOCK ReleaseInterruptLock;
    ReleaseInterruptLock = (PGPIO_CLX_RELEASE_INTERRUPT_LOCK)
                           GpioClxExportedInterfaces[ReleaseInterruptLockIndex];
    ReleaseInterruptLock(Context, BankId);
    return;
}
}
