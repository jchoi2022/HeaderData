#include "rpc.h"
#include "rpcndr.h"
#error this stub requires an updated version of <rpcndr.h>
#include "windows.h"
#include "ole2.h"
typedef interface IHTMLFiltersCollection IHTMLFiltersCollection;
typedef interface IIE70DispatchEx IIE70DispatchEx;
typedef interface IIE80DispatchEx IIE80DispatchEx;
typedef interface IHTMLEventObj IHTMLEventObj;
typedef interface IElementBehaviorSite IElementBehaviorSite;
typedef interface IElementBehavior IElementBehavior;
typedef interface IElementBehaviorFactory IElementBehaviorFactory;
typedef interface IElementBehaviorSiteOM IElementBehaviorSiteOM;
typedef interface IElementBehaviorRender IElementBehaviorRender;
typedef interface IElementBehaviorSiteRender IElementBehaviorSiteRender;
typedef interface IDOMEvent IDOMEvent;
typedef interface IHTMLDOMConstructor IHTMLDOMConstructor;
typedef interface IHTMLStyleSheetRule IHTMLStyleSheetRule;
typedef interface IHTMLCSSStyleDeclaration IHTMLCSSStyleDeclaration;
typedef interface IHTMLCSSStyleDeclaration2 IHTMLCSSStyleDeclaration2;
typedef interface IHTMLCSSStyleDeclaration3 IHTMLCSSStyleDeclaration3;
typedef interface IHTMLCSSStyleDeclaration4 IHTMLCSSStyleDeclaration4;
typedef interface IHTMLStyleEnabled IHTMLStyleEnabled;
typedef interface DispHTMLCSSStyleDeclaration DispHTMLCSSStyleDeclaration;
typedef class HTMLCSSStyleDeclaration HTMLCSSStyleDeclaration;
typedef interface IHTMLStyle IHTMLStyle;
typedef interface IHTMLStyle2 IHTMLStyle2;
typedef interface IHTMLStyle3 IHTMLStyle3;
typedef interface IHTMLStyle4 IHTMLStyle4;
typedef interface IHTMLStyle5 IHTMLStyle5;
typedef interface IHTMLStyle6 IHTMLStyle6;
typedef interface IHTMLRuleStyle IHTMLRuleStyle;
typedef interface IHTMLRuleStyle2 IHTMLRuleStyle2;
typedef interface IHTMLRuleStyle3 IHTMLRuleStyle3;
typedef interface IHTMLRuleStyle4 IHTMLRuleStyle4;
typedef interface IHTMLRuleStyle5 IHTMLRuleStyle5;
typedef interface IHTMLRuleStyle6 IHTMLRuleStyle6;
typedef interface DispHTMLStyle DispHTMLStyle;
typedef class HTMLStyle HTMLStyle;
typedef interface DispHTMLRuleStyle DispHTMLRuleStyle;
typedef class HTMLRuleStyle HTMLRuleStyle;
typedef interface IHTMLStyleSheetRulesCollection IHTMLStyleSheetRulesCollection;
typedef interface IHTMLStyleSheet IHTMLStyleSheet;
typedef interface IHTMLCSSRule IHTMLCSSRule;
typedef interface IHTMLCSSImportRule IHTMLCSSImportRule;
typedef interface IHTMLCSSMediaRule IHTMLCSSMediaRule;
typedef interface IHTMLCSSMediaList IHTMLCSSMediaList;
typedef interface IHTMLCSSNamespaceRule IHTMLCSSNamespaceRule;
typedef interface IHTMLMSCSSKeyframeRule IHTMLMSCSSKeyframeRule;
typedef interface IHTMLMSCSSKeyframesRule IHTMLMSCSSKeyframesRule;
typedef interface DispHTMLCSSRule DispHTMLCSSRule;
typedef class HTMLCSSRule HTMLCSSRule;
typedef interface DispHTMLCSSImportRule DispHTMLCSSImportRule;
typedef class HTMLCSSImportRule HTMLCSSImportRule;
typedef interface DispHTMLCSSMediaRule DispHTMLCSSMediaRule;
typedef class HTMLCSSMediaRule HTMLCSSMediaRule;
typedef interface DispHTMLCSSMediaList DispHTMLCSSMediaList;
typedef class HTMLCSSMediaList HTMLCSSMediaList;
typedef interface DispHTMLCSSNamespaceRule DispHTMLCSSNamespaceRule;
typedef class HTMLCSSNamespaceRule HTMLCSSNamespaceRule;
typedef interface DispHTMLMSCSSKeyframeRule DispHTMLMSCSSKeyframeRule;
typedef class HTMLMSCSSKeyframeRule HTMLMSCSSKeyframeRule;
typedef interface DispHTMLMSCSSKeyframesRule DispHTMLMSCSSKeyframesRule;
typedef class HTMLMSCSSKeyframesRule HTMLMSCSSKeyframesRule;
typedef interface IHTMLRenderStyle IHTMLRenderStyle;
typedef interface DispHTMLRenderStyle DispHTMLRenderStyle;
typedef class HTMLRenderStyle HTMLRenderStyle;
typedef interface IHTMLCurrentStyle IHTMLCurrentStyle;
typedef interface IHTMLCurrentStyle2 IHTMLCurrentStyle2;
typedef interface IHTMLCurrentStyle3 IHTMLCurrentStyle3;
typedef interface IHTMLCurrentStyle4 IHTMLCurrentStyle4;
typedef interface IHTMLCurrentStyle5 IHTMLCurrentStyle5;
typedef interface DispHTMLCurrentStyle DispHTMLCurrentStyle;
typedef class HTMLCurrentStyle HTMLCurrentStyle;
typedef interface IHTMLElement IHTMLElement;
typedef interface IHTMLRect IHTMLRect;
typedef interface IHTMLRect2 IHTMLRect2;
typedef interface IHTMLRectCollection IHTMLRectCollection;
typedef interface IHTMLElementCollection IHTMLElementCollection;
typedef interface IHTMLElement2 IHTMLElement2;
typedef interface IHTMLAttributeCollection3 IHTMLAttributeCollection3;
typedef interface IDOMDocumentType IDOMDocumentType;
typedef interface IHTMLDocument7 IHTMLDocument7;
typedef interface IHTMLDOMNode IHTMLDOMNode;
typedef interface IHTMLDOMNode2 IHTMLDOMNode2;
typedef interface IHTMLDOMNode3 IHTMLDOMNode3;
typedef interface IHTMLDOMAttribute IHTMLDOMAttribute;
typedef interface IHTMLDOMAttribute2 IHTMLDOMAttribute2;
typedef interface IHTMLDOMAttribute3 IHTMLDOMAttribute3;
typedef interface IHTMLDOMAttribute4 IHTMLDOMAttribute4;
typedef interface IHTMLDOMTextNode IHTMLDOMTextNode;
typedef interface IHTMLDOMTextNode2 IHTMLDOMTextNode2;
typedef interface IHTMLDOMTextNode3 IHTMLDOMTextNode3;
typedef interface IHTMLDOMImplementation IHTMLDOMImplementation;
typedef interface IHTMLDOMImplementation2 IHTMLDOMImplementation2;
typedef interface DispHTMLDOMAttribute DispHTMLDOMAttribute;
typedef class HTMLDOMAttribute HTMLDOMAttribute;
typedef interface DispHTMLDOMTextNode DispHTMLDOMTextNode;
typedef class HTMLDOMTextNode HTMLDOMTextNode;
typedef interface DispHTMLDOMImplementation DispHTMLDOMImplementation;
typedef class HTMLDOMImplementation HTMLDOMImplementation;
typedef interface IHTMLAttributeCollection IHTMLAttributeCollection;
typedef interface IHTMLAttributeCollection2 IHTMLAttributeCollection2;
typedef interface IHTMLAttributeCollection4 IHTMLAttributeCollection4;
typedef interface IHTMLDOMChildrenCollection IHTMLDOMChildrenCollection;
typedef interface IHTMLDOMChildrenCollection2 IHTMLDOMChildrenCollection2;
typedef interface DispHTMLAttributeCollection DispHTMLAttributeCollection;
typedef class HTMLAttributeCollection HTMLAttributeCollection;
typedef interface DispStaticNodeList DispStaticNodeList;
typedef class StaticNodeList StaticNodeList;
typedef interface DispDOMChildrenCollection DispDOMChildrenCollection;
typedef class DOMChildrenCollection DOMChildrenCollection;
typedef interface HTMLElementEvents4 HTMLElementEvents4;
typedef interface HTMLElementEvents3 HTMLElementEvents3;
typedef interface HTMLElementEvents2 HTMLElementEvents2;
typedef interface HTMLElementEvents HTMLElementEvents;
typedef interface IRulesAppliedCollection IRulesAppliedCollection;
typedef interface IHTMLElement3 IHTMLElement3;
typedef interface IHTMLElement4 IHTMLElement4;
typedef interface IElementSelector IElementSelector;
typedef interface IHTMLElementRender IHTMLElementRender;
typedef interface IHTMLUniqueName IHTMLUniqueName;
typedef interface IHTMLElement5 IHTMLElement5;
typedef interface IHTMLElement6 IHTMLElement6;
typedef interface IHTMLElement7 IHTMLElement7;
typedef interface IHTMLElementAppliedStyles IHTMLElementAppliedStyles;
typedef interface IElementTraversal IElementTraversal;
typedef interface IHTMLDatabinding IHTMLDatabinding;
typedef interface IHTMLDocument IHTMLDocument;
typedef interface IHTMLElementDefaults IHTMLElementDefaults;
typedef interface DispHTMLDefaults DispHTMLDefaults;
typedef class HTMLDefaults HTMLDefaults;
typedef interface IHTCDefaultDispatch IHTCDefaultDispatch;
typedef interface IHTCPropertyBehavior IHTCPropertyBehavior;
typedef interface IHTCMethodBehavior IHTCMethodBehavior;
typedef interface IHTCEventBehavior IHTCEventBehavior;
typedef interface IHTCAttachBehavior IHTCAttachBehavior;
typedef interface IHTCAttachBehavior2 IHTCAttachBehavior2;
typedef interface IHTCDescBehavior IHTCDescBehavior;
typedef interface DispHTCDefaultDispatch DispHTCDefaultDispatch;
typedef class HTCDefaultDispatch HTCDefaultDispatch;
typedef interface DispHTCPropertyBehavior DispHTCPropertyBehavior;
typedef class HTCPropertyBehavior HTCPropertyBehavior;
typedef interface DispHTCMethodBehavior DispHTCMethodBehavior;
typedef class HTCMethodBehavior HTCMethodBehavior;
typedef interface DispHTCEventBehavior DispHTCEventBehavior;
typedef class HTCEventBehavior HTCEventBehavior;
typedef interface DispHTCAttachBehavior DispHTCAttachBehavior;
typedef class HTCAttachBehavior HTCAttachBehavior;
typedef interface DispHTCDescBehavior DispHTCDescBehavior;
typedef class HTCDescBehavior HTCDescBehavior;
typedef interface IHTMLUrnCollection IHTMLUrnCollection;
typedef interface DispHTMLUrnCollection DispHTMLUrnCollection;
typedef class HTMLUrnCollection HTMLUrnCollection;
typedef interface IHTMLGenericElement IHTMLGenericElement;
typedef interface DispHTMLGenericElement DispHTMLGenericElement;
typedef class HTMLGenericElement HTMLGenericElement;
typedef interface IHTMLStyleSheetRuleApplied IHTMLStyleSheetRuleApplied;
typedef interface IHTMLStyleSheetRule2 IHTMLStyleSheetRule2;
typedef interface IHTMLStyleSheetRulesCollection2 IHTMLStyleSheetRulesCollection2;
typedef interface DispHTMLStyleSheetRule DispHTMLStyleSheetRule;
typedef class HTMLStyleSheetRule HTMLStyleSheetRule;
typedef interface DispHTMLStyleSheetRulesCollection DispHTMLStyleSheetRulesCollection;
typedef class HTMLStyleSheetRulesCollection HTMLStyleSheetRulesCollection;
typedef interface IHTMLStyleSheetPage IHTMLStyleSheetPage;
typedef interface IHTMLStyleSheetPage2 IHTMLStyleSheetPage2;
typedef interface IHTMLStyleSheetPagesCollection IHTMLStyleSheetPagesCollection;
typedef interface DispHTMLStyleSheetPage DispHTMLStyleSheetPage;
typedef class HTMLStyleSheetPage HTMLStyleSheetPage;
typedef interface DispHTMLStyleSheetPagesCollection DispHTMLStyleSheetPagesCollection;
typedef class HTMLStyleSheetPagesCollection HTMLStyleSheetPagesCollection;
typedef interface IHTMLStyleSheetsCollection IHTMLStyleSheetsCollection;
typedef interface IHTMLStyleSheet2 IHTMLStyleSheet2;
typedef interface IHTMLStyleSheet3 IHTMLStyleSheet3;
typedef interface IHTMLStyleSheet4 IHTMLStyleSheet4;
typedef interface DispHTMLStyleSheet DispHTMLStyleSheet;
typedef class HTMLStyleSheet HTMLStyleSheet;
typedef interface IHTMLStyleSheetsCollection2 IHTMLStyleSheetsCollection2;
typedef interface DispHTMLStyleSheetsCollection DispHTMLStyleSheetsCollection;
typedef class HTMLStyleSheetsCollection HTMLStyleSheetsCollection;
typedef interface HTMLLinkElementEvents2 HTMLLinkElementEvents2;
typedef interface HTMLLinkElementEvents HTMLLinkElementEvents;
typedef interface IHTMLLinkElement IHTMLLinkElement;
typedef interface IHTMLLinkElement2 IHTMLLinkElement2;
typedef interface IHTMLLinkElement3 IHTMLLinkElement3;
typedef interface IHTMLLinkElement4 IHTMLLinkElement4;
typedef interface IHTMLLinkElement5 IHTMLLinkElement5;
typedef interface DispHTMLLinkElement DispHTMLLinkElement;
typedef class HTMLLinkElement HTMLLinkElement;
typedef interface IHTMLTxtRange IHTMLTxtRange;
typedef interface IHTMLTextRangeMetrics IHTMLTextRangeMetrics;
typedef interface IHTMLTextRangeMetrics2 IHTMLTextRangeMetrics2;
typedef interface IHTMLTxtRangeCollection IHTMLTxtRangeCollection;
typedef interface IHTMLDOMRange IHTMLDOMRange;
typedef interface DispHTMLDOMRange DispHTMLDOMRange;
typedef class HTMLDOMRange HTMLDOMRange;
typedef interface HTMLFormElementEvents2 HTMLFormElementEvents2;
typedef interface HTMLFormElementEvents HTMLFormElementEvents;
typedef interface IHTMLFormElement IHTMLFormElement;
typedef interface IHTMLFormElement2 IHTMLFormElement2;
typedef interface IHTMLFormElement3 IHTMLFormElement3;
typedef interface IHTMLSubmitData IHTMLSubmitData;
typedef interface IHTMLFormElement4 IHTMLFormElement4;
typedef interface DispHTMLFormElement DispHTMLFormElement;
typedef class HTMLFormElement HTMLFormElement;
typedef interface HTMLControlElementEvents2 HTMLControlElementEvents2;
typedef interface HTMLControlElementEvents HTMLControlElementEvents;
typedef interface IHTMLControlElement IHTMLControlElement;
typedef interface IHTMLTextElement IHTMLTextElement;
typedef interface DispHTMLTextElement DispHTMLTextElement;
typedef class HTMLTextElement HTMLTextElement;
typedef interface HTMLTextContainerEvents2 HTMLTextContainerEvents2;
typedef interface HTMLTextContainerEvents HTMLTextContainerEvents;
typedef interface IHTMLTextContainer IHTMLTextContainer;
typedef interface IHTMLControlRange IHTMLControlRange;
typedef interface IHTMLControlRange2 IHTMLControlRange2;
typedef interface HTMLImgEvents2 HTMLImgEvents2;
typedef interface HTMLImgEvents HTMLImgEvents;
typedef interface IHTMLImgElement IHTMLImgElement;
typedef interface IHTMLImgElement2 IHTMLImgElement2;
typedef interface IHTMLImgElement3 IHTMLImgElement3;
typedef interface IHTMLImgElement4 IHTMLImgElement4;
typedef interface IHTMLMSImgElement IHTMLMSImgElement;
typedef interface IHTMLImageElementFactory IHTMLImageElementFactory;
typedef interface DispHTMLImg DispHTMLImg;
typedef class HTMLImg HTMLImg;
typedef class HTMLImageElementFactory HTMLImageElementFactory;
typedef interface IHTMLBodyElement IHTMLBodyElement;
typedef interface IHTMLBodyElement2 IHTMLBodyElement2;
typedef interface IHTMLBodyElement3 IHTMLBodyElement3;
typedef interface IHTMLBodyElement4 IHTMLBodyElement4;
typedef interface IHTMLBodyElement5 IHTMLBodyElement5;
typedef interface DispHTMLBody DispHTMLBody;
typedef class HTMLBody HTMLBody;
typedef interface IHTMLFontElement IHTMLFontElement;
typedef interface DispHTMLFontElement DispHTMLFontElement;
typedef class HTMLFontElement HTMLFontElement;
typedef interface HTMLAnchorEvents2 HTMLAnchorEvents2;
typedef interface HTMLAnchorEvents HTMLAnchorEvents;
typedef interface IHTMLAnchorElement IHTMLAnchorElement;
typedef interface IHTMLAnchorElement2 IHTMLAnchorElement2;
typedef interface IHTMLAnchorElement3 IHTMLAnchorElement3;
typedef interface DispHTMLAnchorElement DispHTMLAnchorElement;
typedef class HTMLAnchorElement HTMLAnchorElement;
typedef interface HTMLLabelEvents2 HTMLLabelEvents2;
typedef interface HTMLLabelEvents HTMLLabelEvents;
typedef interface IHTMLLabelElement IHTMLLabelElement;
typedef interface IHTMLLabelElement2 IHTMLLabelElement2;
typedef interface DispHTMLLabelElement DispHTMLLabelElement;
typedef class HTMLLabelElement HTMLLabelElement;
typedef interface IHTMLListElement IHTMLListElement;
typedef interface IHTMLListElement2 IHTMLListElement2;
typedef interface DispHTMLListElement DispHTMLListElement;
typedef class HTMLListElement HTMLListElement;
typedef interface IHTMLUListElement IHTMLUListElement;
typedef interface DispHTMLUListElement DispHTMLUListElement;
typedef class HTMLUListElement HTMLUListElement;
typedef interface IHTMLOListElement IHTMLOListElement;
typedef interface DispHTMLOListElement DispHTMLOListElement;
typedef class HTMLOListElement HTMLOListElement;
typedef interface IHTMLLIElement IHTMLLIElement;
typedef interface DispHTMLLIElement DispHTMLLIElement;
typedef class HTMLLIElement HTMLLIElement;
typedef interface IHTMLBlockElement IHTMLBlockElement;
typedef interface IHTMLBlockElement2 IHTMLBlockElement2;
typedef interface IHTMLBlockElement3 IHTMLBlockElement3;
typedef interface DispHTMLBlockElement DispHTMLBlockElement;
typedef class HTMLBlockElement HTMLBlockElement;
typedef interface IHTMLDivElement IHTMLDivElement;
typedef interface DispHTMLDivElement DispHTMLDivElement;
typedef class HTMLDivElement HTMLDivElement;
typedef interface IHTMLDDElement IHTMLDDElement;
typedef interface DispHTMLDDElement DispHTMLDDElement;
typedef class HTMLDDElement HTMLDDElement;
typedef interface IHTMLDTElement IHTMLDTElement;
typedef interface DispHTMLDTElement DispHTMLDTElement;
typedef class HTMLDTElement HTMLDTElement;
typedef interface IHTMLBRElement IHTMLBRElement;
typedef interface DispHTMLBRElement DispHTMLBRElement;
typedef class HTMLBRElement HTMLBRElement;
typedef interface IHTMLDListElement IHTMLDListElement;
typedef interface DispHTMLDListElement DispHTMLDListElement;
typedef class HTMLDListElement HTMLDListElement;
typedef interface IHTMLHRElement IHTMLHRElement;
typedef interface DispHTMLHRElement DispHTMLHRElement;
typedef class HTMLHRElement HTMLHRElement;
typedef interface IHTMLParaElement IHTMLParaElement;
typedef interface DispHTMLParaElement DispHTMLParaElement;
typedef class HTMLParaElement HTMLParaElement;
typedef interface IHTMLElementCollection2 IHTMLElementCollection2;
typedef interface IHTMLElementCollection3 IHTMLElementCollection3;
typedef interface IHTMLElementCollection4 IHTMLElementCollection4;
typedef interface DispHTMLElementCollection DispHTMLElementCollection;
typedef class HTMLElementCollection HTMLElementCollection;
typedef interface IHTMLHeaderElement IHTMLHeaderElement;
typedef interface DispHTMLHeaderElement DispHTMLHeaderElement;
typedef class HTMLHeaderElement HTMLHeaderElement;
typedef interface HTMLSelectElementEvents2 HTMLSelectElementEvents2;
typedef interface HTMLSelectElementEvents HTMLSelectElementEvents;
typedef interface IHTMLOptionElement IHTMLOptionElement;
typedef interface IHTMLSelectElementEx IHTMLSelectElementEx;
typedef interface IHTMLSelectElement IHTMLSelectElement;
typedef interface IHTMLSelectElement2 IHTMLSelectElement2;
typedef interface IHTMLSelectElement4 IHTMLSelectElement4;
typedef interface IHTMLSelectElement5 IHTMLSelectElement5;
typedef interface IHTMLSelectElement6 IHTMLSelectElement6;
typedef interface DispHTMLSelectElement DispHTMLSelectElement;
typedef class HTMLSelectElement HTMLSelectElement;
typedef interface DispHTMLWndSelectElement DispHTMLWndSelectElement;
typedef class HTMLWndSelectElement HTMLWndSelectElement;
typedef interface IHTMLSelectionObject IHTMLSelectionObject;
typedef interface IHTMLSelectionObject2 IHTMLSelectionObject2;
typedef interface IHTMLSelection IHTMLSelection;
typedef interface IHTMLOptionElement3 IHTMLOptionElement3;
typedef interface IHTMLOptionElement4 IHTMLOptionElement4;
typedef interface IHTMLOptionElementFactory IHTMLOptionElementFactory;
typedef interface DispHTMLOptionElement DispHTMLOptionElement;
typedef class HTMLOptionElement HTMLOptionElement;
typedef class HTMLOptionElementFactory HTMLOptionElementFactory;
typedef interface DispHTMLWndOptionElement DispHTMLWndOptionElement;
typedef class HTMLWndOptionElement HTMLWndOptionElement;
typedef interface HTMLButtonElementEvents2 HTMLButtonElementEvents2;
typedef interface HTMLButtonElementEvents HTMLButtonElementEvents;
typedef interface HTMLInputTextElementEvents2 HTMLInputTextElementEvents2;
typedef interface HTMLOptionButtonElementEvents2 HTMLOptionButtonElementEvents2;
typedef interface HTMLInputFileElementEvents2 HTMLInputFileElementEvents2;
typedef interface HTMLInputImageEvents2 HTMLInputImageEvents2;
typedef interface HTMLInputTextElementEvents HTMLInputTextElementEvents;
typedef interface HTMLOptionButtonElementEvents HTMLOptionButtonElementEvents;
typedef interface HTMLInputFileElementEvents HTMLInputFileElementEvents;
typedef interface HTMLInputImageEvents HTMLInputImageEvents;
typedef interface IHTMLInputElement IHTMLInputElement;
typedef interface IHTMLInputElement2 IHTMLInputElement2;
typedef interface IHTMLInputElement3 IHTMLInputElement3;
typedef interface IHTMLInputButtonElement IHTMLInputButtonElement;
typedef interface IHTMLInputHiddenElement IHTMLInputHiddenElement;
typedef interface IHTMLInputTextElement IHTMLInputTextElement;
typedef interface IHTMLInputTextElement2 IHTMLInputTextElement2;
typedef interface IHTMLInputFileElement IHTMLInputFileElement;
typedef interface IHTMLOptionButtonElement IHTMLOptionButtonElement;
typedef interface IHTMLInputImage IHTMLInputImage;
typedef interface IHTMLInputRangeElement IHTMLInputRangeElement;
typedef interface DispHTMLInputElement DispHTMLInputElement;
typedef class HTMLInputElement HTMLInputElement;
typedef interface IHTMLTextAreaElement IHTMLTextAreaElement;
typedef interface IHTMLTextAreaElement2 IHTMLTextAreaElement2;
typedef interface DispHTMLTextAreaElement DispHTMLTextAreaElement;
typedef class HTMLTextAreaElement HTMLTextAreaElement;
typedef interface DispHTMLRichtextElement DispHTMLRichtextElement;
typedef class HTMLRichtextElement HTMLRichtextElement;
typedef interface IHTMLButtonElement IHTMLButtonElement;
typedef interface IHTMLButtonElement2 IHTMLButtonElement2;
typedef interface DispHTMLButtonElement DispHTMLButtonElement;
typedef class HTMLButtonElement HTMLButtonElement;
typedef interface HTMLMarqueeElementEvents2 HTMLMarqueeElementEvents2;
typedef interface HTMLMarqueeElementEvents HTMLMarqueeElementEvents;
typedef interface IHTMLMarqueeElement IHTMLMarqueeElement;
typedef interface DispHTMLMarqueeElement DispHTMLMarqueeElement;
typedef class HTMLMarqueeElement HTMLMarqueeElement;
typedef interface IHTMLHtmlElement IHTMLHtmlElement;
typedef interface IHTMLHeadElement IHTMLHeadElement;
typedef interface IHTMLHeadElement2 IHTMLHeadElement2;
typedef interface IHTMLTitleElement IHTMLTitleElement;
typedef interface IHTMLMetaElement IHTMLMetaElement;
typedef interface IHTMLMetaElement2 IHTMLMetaElement2;
typedef interface IHTMLMetaElement3 IHTMLMetaElement3;
typedef interface IHTMLBaseElement IHTMLBaseElement;
typedef interface IHTMLBaseElement2 IHTMLBaseElement2;
typedef interface DispHTMLHtmlElement DispHTMLHtmlElement;
typedef class HTMLHtmlElement HTMLHtmlElement;
typedef interface DispHTMLHeadElement DispHTMLHeadElement;
typedef class HTMLHeadElement HTMLHeadElement;
typedef interface DispHTMLTitleElement DispHTMLTitleElement;
typedef class HTMLTitleElement HTMLTitleElement;
typedef interface DispHTMLMetaElement DispHTMLMetaElement;
typedef class HTMLMetaElement HTMLMetaElement;
typedef interface DispHTMLBaseElement DispHTMLBaseElement;
typedef class HTMLBaseElement HTMLBaseElement;
typedef interface IHTMLIsIndexElement IHTMLIsIndexElement;
typedef interface IHTMLIsIndexElement2 IHTMLIsIndexElement2;
typedef interface IHTMLNextIdElement IHTMLNextIdElement;
typedef interface DispHTMLIsIndexElement DispHTMLIsIndexElement;
typedef class HTMLIsIndexElement HTMLIsIndexElement;
typedef interface DispHTMLNextIdElement DispHTMLNextIdElement;
typedef class HTMLNextIdElement HTMLNextIdElement;
typedef interface IHTMLBaseFontElement IHTMLBaseFontElement;
typedef interface DispHTMLBaseFontElement DispHTMLBaseFontElement;
typedef class HTMLBaseFontElement HTMLBaseFontElement;
typedef interface IHTMLUnknownElement IHTMLUnknownElement;
typedef interface DispHTMLUnknownElement DispHTMLUnknownElement;
typedef class HTMLUnknownElement HTMLUnknownElement;
typedef interface IWebGeolocation IWebGeolocation;
typedef interface IHTMLMimeTypesCollection IHTMLMimeTypesCollection;
typedef interface IHTMLPluginsCollection IHTMLPluginsCollection;
typedef interface IOmHistory IOmHistory;
typedef interface IHTMLOpsProfile IHTMLOpsProfile;
typedef interface IOmNavigator IOmNavigator;
typedef interface INavigatorGeolocation INavigatorGeolocation;
typedef interface INavigatorDoNotTrack INavigatorDoNotTrack;
typedef interface IHTMLLocation IHTMLLocation;
typedef interface DispHTMLHistory DispHTMLHistory;
typedef class HTMLHistory HTMLHistory;
typedef class COpsProfile COpsProfile;
typedef interface DispHTMLNavigator DispHTMLNavigator;
typedef class HTMLNavigator HTMLNavigator;
typedef interface DispHTMLLocation DispHTMLLocation;
typedef class HTMLLocation HTMLLocation;
typedef class CMimeTypes CMimeTypes;
typedef interface DispCPlugins DispCPlugins;
typedef class CPlugins CPlugins;
typedef interface IHTMLBookmarkCollection IHTMLBookmarkCollection;
typedef interface IHTMLDataTransfer IHTMLDataTransfer;
typedef interface IHTMLEventObj2 IHTMLEventObj2;
typedef interface IHTMLEventObj3 IHTMLEventObj3;
typedef interface IHTMLEventObj4 IHTMLEventObj4;
typedef interface IHTMLEventObj5 IHTMLEventObj5;
typedef interface IHTMLEventObj6 IHTMLEventObj6;
typedef interface DispCEventObj DispCEventObj;
typedef class CEventObj CEventObj;
typedef interface IHTMLStyleMedia IHTMLStyleMedia;
typedef interface DispHTMLStyleMedia DispHTMLStyleMedia;
typedef class HTMLStyleMedia HTMLStyleMedia;
typedef interface IHTMLFramesCollection2 IHTMLFramesCollection2;
typedef class FramesCollection FramesCollection;
typedef interface HTMLWindowEvents3 HTMLWindowEvents3;
typedef interface HTMLWindowEvents2 HTMLWindowEvents2;
typedef interface HTMLWindowEvents HTMLWindowEvents;
typedef interface IHTMLDocument2 IHTMLDocument2;
typedef interface IHTMLWindow2 IHTMLWindow2;
typedef interface IHTMLWindow3 IHTMLWindow3;
typedef interface IHTMLFrameBase IHTMLFrameBase;
typedef interface IHTMLStorage IHTMLStorage;
typedef interface IHTMLPerformance IHTMLPerformance;
typedef interface IHTMLApplicationCache IHTMLApplicationCache;
typedef interface IHTMLScreen IHTMLScreen;
typedef interface IHTMLScreen2 IHTMLScreen2;
typedef interface IHTMLScreen3 IHTMLScreen3;
typedef interface IHTMLScreen4 IHTMLScreen4;
typedef interface IHTMLWindow4 IHTMLWindow4;
typedef interface IHTMLWindow5 IHTMLWindow5;
typedef interface IHTMLWindow6 IHTMLWindow6;
typedef interface IHTMLWindow7 IHTMLWindow7;
typedef interface IHTMLWindow8 IHTMLWindow8;
typedef interface DispHTMLScreen DispHTMLScreen;
typedef class HTMLScreen HTMLScreen;
typedef interface DispHTMLWindow2 DispHTMLWindow2;
typedef class HTMLWindow2 HTMLWindow2;
typedef interface DispHTMLWindowProxy DispHTMLWindowProxy;
typedef class HTMLWindowProxy HTMLWindowProxy;
typedef interface IHTMLDocumentCompatibleInfo IHTMLDocumentCompatibleInfo;
typedef interface IHTMLDocumentCompatibleInfoCollection IHTMLDocumentCompatibleInfoCollection;
typedef interface DispHTMLDocumentCompatibleInfo DispHTMLDocumentCompatibleInfo;
typedef class HTMLDocumentCompatibleInfo HTMLDocumentCompatibleInfo;
typedef interface DispHTMLDocumentCompatibleInfoCollection DispHTMLDocumentCompatibleInfoCollection;
typedef class HTMLDocumentCompatibleInfoCollection HTMLDocumentCompatibleInfoCollection;
typedef interface HTMLDocumentEvents4 HTMLDocumentEvents4;
typedef interface HTMLDocumentEvents3 HTMLDocumentEvents3;
typedef interface HTMLDocumentEvents2 HTMLDocumentEvents2;
typedef interface HTMLDocumentEvents HTMLDocumentEvents;
typedef interface ISVGSVGElement ISVGSVGElement;
typedef interface IDOMNodeIterator IDOMNodeIterator;
typedef interface IDOMTreeWalker IDOMTreeWalker;
typedef interface IDOMProcessingInstruction IDOMProcessingInstruction;
typedef interface IHTMLDocument3 IHTMLDocument3;
typedef interface IHTMLDocument4 IHTMLDocument4;
typedef interface IHTMLDocument5 IHTMLDocument5;
typedef interface IHTMLDocument6 IHTMLDocument6;
typedef interface IHTMLDocument8 IHTMLDocument8;
typedef interface IDocumentEvent IDocumentEvent;
typedef interface IDocumentRange IDocumentRange;
typedef interface IDocumentSelector IDocumentSelector;
typedef interface IDocumentTraversal IDocumentTraversal;
typedef interface DispHTMLDocument DispHTMLDocument;
typedef class HTMLDocument HTMLDocument;
typedef interface DWebBridgeEvents DWebBridgeEvents;
typedef interface IWebBridge IWebBridge;
typedef interface IWBScriptControl IWBScriptControl;
typedef class Scriptlet Scriptlet;
typedef interface IHTMLEmbedElement IHTMLEmbedElement;
typedef interface IHTMLEmbedElement2 IHTMLEmbedElement2;
typedef interface DispHTMLEmbed DispHTMLEmbed;
typedef class HTMLEmbed HTMLEmbed;
typedef interface HTMLMapEvents2 HTMLMapEvents2;
typedef interface HTMLMapEvents HTMLMapEvents;
typedef interface IHTMLAreasCollection IHTMLAreasCollection;
typedef interface IHTMLAreasCollection2 IHTMLAreasCollection2;
typedef interface IHTMLAreasCollection3 IHTMLAreasCollection3;
typedef interface IHTMLAreasCollection4 IHTMLAreasCollection4;
typedef interface IHTMLMapElement IHTMLMapElement;
typedef interface DispHTMLAreasCollection DispHTMLAreasCollection;
typedef class HTMLAreasCollection HTMLAreasCollection;
typedef interface DispHTMLMapElement DispHTMLMapElement;
typedef class HTMLMapElement HTMLMapElement;
typedef interface HTMLAreaEvents2 HTMLAreaEvents2;
typedef interface HTMLAreaEvents HTMLAreaEvents;
typedef interface IHTMLAreaElement IHTMLAreaElement;
typedef interface IHTMLAreaElement2 IHTMLAreaElement2;
typedef interface DispHTMLAreaElement DispHTMLAreaElement;
typedef class HTMLAreaElement HTMLAreaElement;
typedef interface IHTMLTableCaption IHTMLTableCaption;
typedef interface DispHTMLTableCaption DispHTMLTableCaption;
typedef class HTMLTableCaption HTMLTableCaption;
typedef interface IHTMLCommentElement IHTMLCommentElement;
typedef interface IHTMLCommentElement2 IHTMLCommentElement2;
typedef interface IHTMLCommentElement3 IHTMLCommentElement3;
typedef interface DispHTMLCommentElement DispHTMLCommentElement;
typedef class HTMLCommentElement HTMLCommentElement;
typedef interface IHTMLPhraseElement IHTMLPhraseElement;
typedef interface IHTMLPhraseElement2 IHTMLPhraseElement2;
typedef interface IHTMLPhraseElement3 IHTMLPhraseElement3;
typedef interface IHTMLSpanElement IHTMLSpanElement;
typedef interface DispHTMLPhraseElement DispHTMLPhraseElement;
typedef class HTMLPhraseElement HTMLPhraseElement;
typedef interface DispHTMLSpanElement DispHTMLSpanElement;
typedef class HTMLSpanElement HTMLSpanElement;
typedef interface HTMLTableEvents2 HTMLTableEvents2;
typedef interface HTMLTableEvents HTMLTableEvents;
typedef interface IHTMLTableSection IHTMLTableSection;
typedef interface IHTMLTable IHTMLTable;
typedef interface IHTMLTable2 IHTMLTable2;
typedef interface IHTMLTable3 IHTMLTable3;
typedef interface IHTMLTable4 IHTMLTable4;
typedef interface IHTMLTableCol IHTMLTableCol;
typedef interface IHTMLTableCol2 IHTMLTableCol2;
typedef interface IHTMLTableCol3 IHTMLTableCol3;
typedef interface IHTMLTableSection2 IHTMLTableSection2;
typedef interface IHTMLTableSection3 IHTMLTableSection3;
typedef interface IHTMLTableSection4 IHTMLTableSection4;
typedef interface IHTMLTableRow IHTMLTableRow;
typedef interface IHTMLTableRow2 IHTMLTableRow2;
typedef interface IHTMLTableRow3 IHTMLTableRow3;
typedef interface IHTMLTableRow4 IHTMLTableRow4;
typedef interface IHTMLTableRowMetrics IHTMLTableRowMetrics;
typedef interface IHTMLTableCell IHTMLTableCell;
typedef interface IHTMLTableCell2 IHTMLTableCell2;
typedef interface IHTMLTableCell3 IHTMLTableCell3;
typedef interface DispHTMLTable DispHTMLTable;
typedef class HTMLTable HTMLTable;
typedef interface DispHTMLTableCol DispHTMLTableCol;
typedef class HTMLTableCol HTMLTableCol;
typedef interface DispHTMLTableSection DispHTMLTableSection;
typedef class HTMLTableSection HTMLTableSection;
typedef interface DispHTMLTableRow DispHTMLTableRow;
typedef class HTMLTableRow HTMLTableRow;
typedef interface DispHTMLTableCell DispHTMLTableCell;
typedef class HTMLTableCell HTMLTableCell;
typedef interface HTMLScriptEvents2 HTMLScriptEvents2;
typedef interface HTMLScriptEvents HTMLScriptEvents;
typedef interface IHTMLScriptElement IHTMLScriptElement;
typedef interface IHTMLScriptElement2 IHTMLScriptElement2;
typedef interface IHTMLScriptElement3 IHTMLScriptElement3;
typedef interface IHTMLScriptElement4 IHTMLScriptElement4;
typedef interface DispHTMLScriptElement DispHTMLScriptElement;
typedef class HTMLScriptElement HTMLScriptElement;
typedef interface IHTMLNoShowElement IHTMLNoShowElement;
typedef interface DispHTMLNoShowElement DispHTMLNoShowElement;
typedef class HTMLNoShowElement HTMLNoShowElement;
typedef interface HTMLObjectElementEvents2 HTMLObjectElementEvents2;
typedef interface HTMLObjectElementEvents HTMLObjectElementEvents;
typedef interface IHTMLObjectElement IHTMLObjectElement;
typedef interface IHTMLObjectElement2 IHTMLObjectElement2;
typedef interface IHTMLObjectElement3 IHTMLObjectElement3;
typedef interface IHTMLObjectElement4 IHTMLObjectElement4;
typedef interface IHTMLObjectElement5 IHTMLObjectElement5;
typedef interface IHTMLParamElement IHTMLParamElement;
typedef interface IHTMLParamElement2 IHTMLParamElement2;
typedef interface DispHTMLObjectElement DispHTMLObjectElement;
typedef class HTMLObjectElement HTMLObjectElement;
typedef interface DispHTMLParamElement DispHTMLParamElement;
typedef class HTMLParamElement HTMLParamElement;
typedef interface HTMLFrameSiteEvents2 HTMLFrameSiteEvents2;
typedef interface HTMLFrameSiteEvents HTMLFrameSiteEvents;
typedef interface IHTMLFrameBase2 IHTMLFrameBase2;
typedef interface IHTMLFrameBase3 IHTMLFrameBase3;
typedef interface DispHTMLFrameBase DispHTMLFrameBase;
typedef class HTMLFrameBase HTMLFrameBase;
typedef interface IHTMLFrameElement IHTMLFrameElement;
typedef interface IHTMLFrameElement2 IHTMLFrameElement2;
typedef interface IHTMLFrameElement3 IHTMLFrameElement3;
typedef interface DispHTMLFrameElement DispHTMLFrameElement;
typedef class HTMLFrameElement HTMLFrameElement;
typedef interface IHTMLIFrameElement IHTMLIFrameElement;
typedef interface IHTMLIFrameElement2 IHTMLIFrameElement2;
typedef interface IHTMLIFrameElement3 IHTMLIFrameElement3;
typedef interface DispHTMLIFrame DispHTMLIFrame;
typedef class HTMLIFrame HTMLIFrame;
typedef interface IHTMLDivPosition IHTMLDivPosition;
typedef interface IHTMLFieldSetElement IHTMLFieldSetElement;
typedef interface IHTMLFieldSetElement2 IHTMLFieldSetElement2;
typedef interface IHTMLLegendElement IHTMLLegendElement;
typedef interface IHTMLLegendElement2 IHTMLLegendElement2;
typedef interface DispHTMLDivPosition DispHTMLDivPosition;
typedef class HTMLDivPosition HTMLDivPosition;
typedef interface DispHTMLFieldSetElement DispHTMLFieldSetElement;
typedef class HTMLFieldSetElement HTMLFieldSetElement;
typedef interface DispHTMLLegendElement DispHTMLLegendElement;
typedef class HTMLLegendElement HTMLLegendElement;
typedef interface IHTMLSpanFlow IHTMLSpanFlow;
typedef interface DispHTMLSpanFlow DispHTMLSpanFlow;
typedef class HTMLSpanFlow HTMLSpanFlow;
typedef interface IHTMLFrameSetElement IHTMLFrameSetElement;
typedef interface IHTMLFrameSetElement2 IHTMLFrameSetElement2;
typedef interface IHTMLFrameSetElement3 IHTMLFrameSetElement3;
typedef interface DispHTMLFrameSetSite DispHTMLFrameSetSite;
typedef class HTMLFrameSetSite HTMLFrameSetSite;
typedef interface IHTMLBGsound IHTMLBGsound;
typedef interface DispHTMLBGsound DispHTMLBGsound;
typedef class HTMLBGsound HTMLBGsound;
typedef interface IHTMLFontNamesCollection IHTMLFontNamesCollection;
typedef interface IHTMLFontSizesCollection IHTMLFontSizesCollection;
typedef interface IHTMLOptionsHolder IHTMLOptionsHolder;
typedef interface HTMLStyleElementEvents2 HTMLStyleElementEvents2;
typedef interface HTMLStyleElementEvents HTMLStyleElementEvents;
typedef interface IHTMLStyleElement IHTMLStyleElement;
typedef interface IHTMLStyleElement2 IHTMLStyleElement2;
typedef interface DispHTMLStyleElement DispHTMLStyleElement;
typedef class HTMLStyleElement HTMLStyleElement;
typedef interface IHTMLStyleFontFace IHTMLStyleFontFace;
typedef interface IHTMLStyleFontFace2 IHTMLStyleFontFace2;
typedef interface DispHTMLStyleFontFace DispHTMLStyleFontFace;
typedef class HTMLStyleFontFace HTMLStyleFontFace;
typedef interface IHTMLXDomainRequest IHTMLXDomainRequest;
typedef interface IHTMLXDomainRequestFactory IHTMLXDomainRequestFactory;
typedef interface DispXDomainRequest DispXDomainRequest;
typedef class XDomainRequest XDomainRequest;
typedef class XDomainRequestFactory XDomainRequestFactory;
typedef interface IHTMLStorage2 IHTMLStorage2;
typedef interface DispHTMLStorage DispHTMLStorage;
typedef class HTMLStorage HTMLStorage;
typedef interface IEventTarget IEventTarget;
typedef interface DispDOMEvent DispDOMEvent;
typedef class DOMEvent DOMEvent;
typedef interface IDOMUIEvent IDOMUIEvent;
typedef interface DispDOMUIEvent DispDOMUIEvent;
typedef class DOMUIEvent DOMUIEvent;
typedef interface IDOMMouseEvent IDOMMouseEvent;
typedef interface DispDOMMouseEvent DispDOMMouseEvent;
typedef class DOMMouseEvent DOMMouseEvent;
typedef interface IDOMDragEvent IDOMDragEvent;
typedef interface DispDOMDragEvent DispDOMDragEvent;
typedef class DOMDragEvent DOMDragEvent;
typedef interface IDOMMouseWheelEvent IDOMMouseWheelEvent;
typedef interface DispDOMMouseWheelEvent DispDOMMouseWheelEvent;
typedef class DOMMouseWheelEvent DOMMouseWheelEvent;
typedef interface IDOMWheelEvent IDOMWheelEvent;
typedef interface DispDOMWheelEvent DispDOMWheelEvent;
typedef class DOMWheelEvent DOMWheelEvent;
typedef interface IDOMTextEvent IDOMTextEvent;
typedef interface DispDOMTextEvent DispDOMTextEvent;
typedef class DOMTextEvent DOMTextEvent;
typedef interface IDOMKeyboardEvent IDOMKeyboardEvent;
typedef interface DispDOMKeyboardEvent DispDOMKeyboardEvent;
typedef class DOMKeyboardEvent DOMKeyboardEvent;
typedef interface IDOMCompositionEvent IDOMCompositionEvent;
typedef interface DispDOMCompositionEvent DispDOMCompositionEvent;
typedef class DOMCompositionEvent DOMCompositionEvent;
typedef interface IDOMMutationEvent IDOMMutationEvent;
typedef interface DispDOMMutationEvent DispDOMMutationEvent;
typedef class DOMMutationEvent DOMMutationEvent;
typedef interface IDOMBeforeUnloadEvent IDOMBeforeUnloadEvent;
typedef interface DispDOMBeforeUnloadEvent DispDOMBeforeUnloadEvent;
typedef class DOMBeforeUnloadEvent DOMBeforeUnloadEvent;
typedef interface IDOMFocusEvent IDOMFocusEvent;
typedef interface DispDOMFocusEvent DispDOMFocusEvent;
typedef class DOMFocusEvent DOMFocusEvent;
typedef interface IDOMCustomEvent IDOMCustomEvent;
typedef interface DispDOMCustomEvent DispDOMCustomEvent;
typedef class DOMCustomEvent DOMCustomEvent;
typedef interface ICanvasGradient ICanvasGradient;
typedef interface ICanvasPattern ICanvasPattern;
typedef interface ICanvasTextMetrics ICanvasTextMetrics;
typedef interface ICanvasImageData ICanvasImageData;
typedef interface ICanvasPixelArray ICanvasPixelArray;
typedef interface IHTMLCanvasElement IHTMLCanvasElement;
typedef interface ICanvasRenderingContext2D ICanvasRenderingContext2D;
typedef interface DispCanvasGradient DispCanvasGradient;
typedef class CanvasGradient CanvasGradient;
typedef interface DispCanvasPattern DispCanvasPattern;
typedef class CanvasPattern CanvasPattern;
typedef interface DispCanvasTextMetrics DispCanvasTextMetrics;
typedef class CanvasTextMetrics CanvasTextMetrics;
typedef interface DispCanvasImageData DispCanvasImageData;
typedef class CanvasImageData CanvasImageData;
typedef interface DispCanvasRenderingContext2D DispCanvasRenderingContext2D;
typedef class CanvasRenderingContext2D CanvasRenderingContext2D;
typedef interface DispHTMLCanvasElement DispHTMLCanvasElement;
typedef class HTMLCanvasElement HTMLCanvasElement;
typedef interface IDOMProgressEvent IDOMProgressEvent;
typedef interface DispDOMProgressEvent DispDOMProgressEvent;
typedef class DOMProgressEvent DOMProgressEvent;
typedef interface IDOMMessageEvent IDOMMessageEvent;
typedef interface DispDOMMessageEvent DispDOMMessageEvent;
typedef class DOMMessageEvent DOMMessageEvent;
typedef interface IDOMSiteModeEvent IDOMSiteModeEvent;
typedef interface DispDOMSiteModeEvent DispDOMSiteModeEvent;
typedef class DOMSiteModeEvent DOMSiteModeEvent;
typedef interface IDOMStorageEvent IDOMStorageEvent;
typedef interface DispDOMStorageEvent DispDOMStorageEvent;
typedef class DOMStorageEvent DOMStorageEvent;
typedef interface IXMLHttpRequestEventTarget IXMLHttpRequestEventTarget;
typedef interface DispXMLHttpRequestEventTarget DispXMLHttpRequestEventTarget;
typedef class XMLHttpRequestEventTarget XMLHttpRequestEventTarget;
typedef interface HTMLXMLHttpRequestEvents HTMLXMLHttpRequestEvents;
typedef interface IHTMLXMLHttpRequest IHTMLXMLHttpRequest;
typedef interface IHTMLXMLHttpRequest2 IHTMLXMLHttpRequest2;
typedef interface IHTMLXMLHttpRequestFactory IHTMLXMLHttpRequestFactory;
typedef interface DispHTMLXMLHttpRequest DispHTMLXMLHttpRequest;
typedef class HTMLXMLHttpRequest HTMLXMLHttpRequest;
typedef class HTMLXMLHttpRequestFactory HTMLXMLHttpRequestFactory;
typedef interface ISVGAngle ISVGAngle;
typedef class SVGAngle SVGAngle;
typedef interface ISVGElement ISVGElement;
typedef interface ISVGRect ISVGRect;
typedef interface ISVGMatrix ISVGMatrix;
typedef interface ISVGStringList ISVGStringList;
typedef interface ISVGAnimatedRect ISVGAnimatedRect;
typedef interface ISVGAnimatedString ISVGAnimatedString;
typedef interface ISVGAnimatedBoolean ISVGAnimatedBoolean;
typedef interface ISVGAnimatedTransformList ISVGAnimatedTransformList;
typedef interface ISVGAnimatedPreserveAspectRatio ISVGAnimatedPreserveAspectRatio;
typedef interface ISVGStylable ISVGStylable;
typedef interface ISVGLocatable ISVGLocatable;
typedef interface ISVGTransformable ISVGTransformable;
typedef interface ISVGTests ISVGTests;
typedef interface ISVGLangSpace ISVGLangSpace;
typedef interface ISVGExternalResourcesRequired ISVGExternalResourcesRequired;
typedef interface ISVGFitToViewBox ISVGFitToViewBox;
typedef interface ISVGZoomAndPan ISVGZoomAndPan;
typedef interface ISVGURIReference ISVGURIReference;
typedef interface ISVGAnimatedAngle ISVGAnimatedAngle;
typedef class SVGAnimatedAngle SVGAnimatedAngle;
typedef interface ISVGTransformList ISVGTransformList;
typedef class SVGAnimatedTransformList SVGAnimatedTransformList;
typedef class SVGAnimatedBoolean SVGAnimatedBoolean;
typedef interface ISVGAnimatedEnumeration ISVGAnimatedEnumeration;
typedef class SVGAnimatedEnumeration SVGAnimatedEnumeration;
typedef interface ISVGAnimatedInteger ISVGAnimatedInteger;
typedef class SVGAnimatedInteger SVGAnimatedInteger;
typedef interface ISVGLength ISVGLength;
typedef interface ISVGAnimatedLength ISVGAnimatedLength;
typedef class SVGAnimatedLength SVGAnimatedLength;
typedef interface ISVGLengthList ISVGLengthList;
typedef interface ISVGAnimatedLengthList ISVGAnimatedLengthList;
typedef class SVGAnimatedLengthList SVGAnimatedLengthList;
typedef interface ISVGNumber ISVGNumber;
typedef interface ISVGAnimatedNumber ISVGAnimatedNumber;
typedef class SVGAnimatedNumber SVGAnimatedNumber;
typedef interface ISVGNumberList ISVGNumberList;
typedef interface ISVGAnimatedNumberList ISVGAnimatedNumberList;
typedef class SVGAnimatedNumberList SVGAnimatedNumberList;
typedef class SVGAnimatedRect SVGAnimatedRect;
typedef class SVGAnimatedString SVGAnimatedString;
typedef interface ISVGClipPathElement ISVGClipPathElement;
typedef interface DispSVGClipPathElement DispSVGClipPathElement;
typedef class SVGClipPathElement SVGClipPathElement;
typedef interface ISVGDocument ISVGDocument;
typedef interface IGetSVGDocument IGetSVGDocument;
typedef interface DispSVGElement DispSVGElement;
typedef class SVGElement SVGElement;
typedef interface IICCSVGColor IICCSVGColor;
typedef class SVGLength SVGLength;
typedef class SVGLengthList SVGLengthList;
typedef class SVGMatrix SVGMatrix;
typedef class SVGNumber SVGNumber;
typedef class SVGNumberList SVGNumberList;
typedef interface ISVGPaint ISVGPaint;
typedef interface ISVGPatternElement ISVGPatternElement;
typedef interface DispSVGPatternElement DispSVGPatternElement;
typedef class SVGPatternElement SVGPatternElement;
typedef interface ISVGPathSeg ISVGPathSeg;
typedef interface ISVGPathSegArcAbs ISVGPathSegArcAbs;
typedef interface ISVGPathSegArcRel ISVGPathSegArcRel;
typedef interface ISVGPathSegClosePath ISVGPathSegClosePath;
typedef interface ISVGPathSegMovetoAbs ISVGPathSegMovetoAbs;
typedef interface ISVGPathSegMovetoRel ISVGPathSegMovetoRel;
typedef interface ISVGPathSegLinetoAbs ISVGPathSegLinetoAbs;
typedef interface ISVGPathSegLinetoRel ISVGPathSegLinetoRel;
typedef interface ISVGPathSegCurvetoCubicAbs ISVGPathSegCurvetoCubicAbs;
typedef interface ISVGPathSegCurvetoCubicRel ISVGPathSegCurvetoCubicRel;
typedef interface ISVGPathSegCurvetoCubicSmoothAbs ISVGPathSegCurvetoCubicSmoothAbs;
typedef interface ISVGPathSegCurvetoCubicSmoothRel ISVGPathSegCurvetoCubicSmoothRel;
typedef interface ISVGPathSegCurvetoQuadraticAbs ISVGPathSegCurvetoQuadraticAbs;
typedef interface ISVGPathSegCurvetoQuadraticRel ISVGPathSegCurvetoQuadraticRel;
typedef interface ISVGPathSegCurvetoQuadraticSmoothAbs ISVGPathSegCurvetoQuadraticSmoothAbs;
typedef interface ISVGPathSegCurvetoQuadraticSmoothRel ISVGPathSegCurvetoQuadraticSmoothRel;
typedef interface ISVGPathSegLinetoHorizontalAbs ISVGPathSegLinetoHorizontalAbs;
typedef interface ISVGPathSegLinetoHorizontalRel ISVGPathSegLinetoHorizontalRel;
typedef interface ISVGPathSegLinetoVerticalAbs ISVGPathSegLinetoVerticalAbs;
typedef interface ISVGPathSegLinetoVerticalRel ISVGPathSegLinetoVerticalRel;
typedef class SVGPathSeg SVGPathSeg;
typedef interface DispSVGPathSegArcAbs DispSVGPathSegArcAbs;
typedef class SVGPathSegArcAbs SVGPathSegArcAbs;
typedef interface DispSVGPathSegArcRel DispSVGPathSegArcRel;
typedef class SVGPathSegArcRel SVGPathSegArcRel;
typedef interface DispSVGPathSegClosePath DispSVGPathSegClosePath;
typedef class SVGPathSegClosePath SVGPathSegClosePath;
typedef interface DispSVGPathSegMovetoAbs DispSVGPathSegMovetoAbs;
typedef class SVGPathSegMovetoAbs SVGPathSegMovetoAbs;
typedef interface DispSVGPathSegMovetoRel DispSVGPathSegMovetoRel;
typedef class SVGPathSegMovetoRel SVGPathSegMovetoRel;
typedef interface DispSVGPathSegLinetoAbs DispSVGPathSegLinetoAbs;
typedef class SVGPathSegLinetoAbs SVGPathSegLinetoAbs;
typedef interface DispSVGPathSegLinetoRel DispSVGPathSegLinetoRel;
typedef class SVGPathSegLinetoRel SVGPathSegLinetoRel;
typedef interface DispSVGPathSegCurvetoCubicAbs DispSVGPathSegCurvetoCubicAbs;
typedef class SVGPathSegCurvetoCubicAbs SVGPathSegCurvetoCubicAbs;
typedef interface DispSVGPathSegCurvetoCubicRel DispSVGPathSegCurvetoCubicRel;
typedef class SVGPathSegCurvetoCubicRel SVGPathSegCurvetoCubicRel;
typedef interface DispSVGPathSegCurvetoCubicSmoothAbs DispSVGPathSegCurvetoCubicSmoothAbs;
typedef class SVGPathSegCurvetoCubicSmoothAbs SVGPathSegCurvetoCubicSmoothAbs;
typedef interface DispSVGPathSegCurvetoCubicSmoothRel DispSVGPathSegCurvetoCubicSmoothRel;
typedef class SVGPathSegCurvetoCubicSmoothRel SVGPathSegCurvetoCubicSmoothRel;
typedef interface DispSVGPathSegCurvetoQuadraticAbs DispSVGPathSegCurvetoQuadraticAbs;
typedef class SVGPathSegCurvetoQuadraticAbs SVGPathSegCurvetoQuadraticAbs;
typedef interface DispSVGPathSegCurvetoQuadraticRel DispSVGPathSegCurvetoQuadraticRel;
typedef class SVGPathSegCurvetoQuadraticRel SVGPathSegCurvetoQuadraticRel;
typedef interface DispSVGPathSegCurvetoQuadraticSmoothAbs DispSVGPathSegCurvetoQuadraticSmoothAbs;
typedef class SVGPathSegCurvetoQuadraticSmoothAbs SVGPathSegCurvetoQuadraticSmoothAbs;
typedef interface DispSVGPathSegCurvetoQuadraticSmoothRel DispSVGPathSegCurvetoQuadraticSmoothRel;
typedef class SVGPathSegCurvetoQuadraticSmoothRel SVGPathSegCurvetoQuadraticSmoothRel;
typedef interface DispSVGPathSegLinetoHorizontalAbs DispSVGPathSegLinetoHorizontalAbs;
typedef class SVGPathSegLinetoHorizontalAbs SVGPathSegLinetoHorizontalAbs;
typedef interface DispSVGPathSegLinetoHorizontalRel DispSVGPathSegLinetoHorizontalRel;
typedef class SVGPathSegLinetoHorizontalRel SVGPathSegLinetoHorizontalRel;
typedef interface DispSVGPathSegLinetoVerticalAbs DispSVGPathSegLinetoVerticalAbs;
typedef class SVGPathSegLinetoVerticalAbs SVGPathSegLinetoVerticalAbs;
typedef interface DispSVGPathSegLinetoVerticalRel DispSVGPathSegLinetoVerticalRel;
typedef class SVGPathSegLinetoVerticalRel SVGPathSegLinetoVerticalRel;
typedef interface ISVGPathSegList ISVGPathSegList;
typedef class SVGPathSegList SVGPathSegList;
typedef interface ISVGPoint ISVGPoint;
typedef class SVGPoint SVGPoint;
typedef interface ISVGPointList ISVGPointList;
typedef class SVGPointList SVGPointList;
typedef class SVGRect SVGRect;
typedef class SVGStringList SVGStringList;
typedef interface ISVGViewSpec ISVGViewSpec;
typedef interface ISVGTransform ISVGTransform;
typedef class SVGTransform SVGTransform;
typedef interface DispSVGSVGElement DispSVGSVGElement;
typedef class SVGSVGElement SVGSVGElement;
typedef interface ISVGElementInstance ISVGElementInstance;
typedef interface ISVGUseElement ISVGUseElement;
typedef interface DispSVGUseElement DispSVGUseElement;
typedef class SVGUseElement SVGUseElement;
typedef interface IHTMLStyleSheetRulesAppliedCollection IHTMLStyleSheetRulesAppliedCollection;
typedef interface IRulesApplied IRulesApplied;
typedef interface DispHTMLStyleSheetRulesAppliedCollection DispHTMLStyleSheetRulesAppliedCollection;
typedef class HTMLStyleSheetRulesAppliedCollection HTMLStyleSheetRulesAppliedCollection;
typedef interface DispRulesApplied DispRulesApplied;
typedef class RulesApplied RulesApplied;
typedef interface DispRulesAppliedCollection DispRulesAppliedCollection;
typedef class RulesAppliedCollection RulesAppliedCollection;
typedef interface DispHTMLW3CComputedStyle DispHTMLW3CComputedStyle;
typedef class HTMLW3CComputedStyle HTMLW3CComputedStyle;
typedef class SVGTransformList SVGTransformList;
typedef interface ISVGAnimatedPoints ISVGAnimatedPoints;
typedef interface ISVGCircleElement ISVGCircleElement;
typedef interface ISVGEllipseElement ISVGEllipseElement;
typedef interface ISVGLineElement ISVGLineElement;
typedef interface ISVGRectElement ISVGRectElement;
typedef interface ISVGPolygonElement ISVGPolygonElement;
typedef interface ISVGPolylineElement ISVGPolylineElement;
typedef interface DispSVGCircleElement DispSVGCircleElement;
typedef class SVGCircleElement SVGCircleElement;
typedef interface DispSVGEllipseElement DispSVGEllipseElement;
typedef class SVGEllipseElement SVGEllipseElement;
typedef interface DispSVGLineElement DispSVGLineElement;
typedef class SVGLineElement SVGLineElement;
typedef interface DispSVGRectElement DispSVGRectElement;
typedef class SVGRectElement SVGRectElement;
typedef interface DispSVGPolygonElement DispSVGPolygonElement;
typedef class SVGPolygonElement SVGPolygonElement;
typedef interface DispSVGPolylineElement DispSVGPolylineElement;
typedef class SVGPolylineElement SVGPolylineElement;
typedef interface ISVGGElement ISVGGElement;
typedef interface DispSVGGElement DispSVGGElement;
typedef class SVGGElement SVGGElement;
typedef interface ISVGSymbolElement ISVGSymbolElement;
typedef interface DispSVGSymbolElement DispSVGSymbolElement;
typedef class SVGSymbolElement SVGSymbolElement;
typedef interface ISVGDefsElement ISVGDefsElement;
typedef interface DispSVGDefsElement DispSVGDefsElement;
typedef class SVGDefsElement SVGDefsElement;
typedef interface ISVGAnimatedPathData ISVGAnimatedPathData;
typedef interface ISVGPathElement ISVGPathElement;
typedef interface DispSVGPathElement DispSVGPathElement;
typedef class SVGPathElement SVGPathElement;
typedef interface ISVGPreserveAspectRatio ISVGPreserveAspectRatio;
typedef class SVGPreserveAspectRatio SVGPreserveAspectRatio;
typedef interface ISVGTextElement ISVGTextElement;
typedef interface DispSVGTextElement DispSVGTextElement;
typedef class SVGTextElement SVGTextElement;
typedef class SVGAnimatedPreserveAspectRatio SVGAnimatedPreserveAspectRatio;
typedef interface ISVGImageElement ISVGImageElement;
typedef interface DispSVGImageElement DispSVGImageElement;
typedef class SVGImageElement SVGImageElement;
typedef interface ISVGStopElement ISVGStopElement;
typedef interface DispSVGStopElement DispSVGStopElement;
typedef class SVGStopElement SVGStopElement;
typedef interface ISVGGradientElement ISVGGradientElement;
typedef interface DispSVGGradientElement DispSVGGradientElement;
typedef class SVGGradientElement SVGGradientElement;
typedef interface ISVGLinearGradientElement ISVGLinearGradientElement;
typedef interface DispSVGLinearGradientElement DispSVGLinearGradientElement;
typedef class SVGLinearGradientElement SVGLinearGradientElement;
typedef interface ISVGRadialGradientElement ISVGRadialGradientElement;
typedef interface DispSVGRadialGradientElement DispSVGRadialGradientElement;
typedef class SVGRadialGradientElement SVGRadialGradientElement;
typedef interface ISVGMaskElement ISVGMaskElement;
typedef interface DispSVGMaskElement DispSVGMaskElement;
typedef class SVGMaskElement SVGMaskElement;
typedef interface ISVGMarkerElement ISVGMarkerElement;
typedef interface DispSVGMarkerElement DispSVGMarkerElement;
typedef class SVGMarkerElement SVGMarkerElement;
typedef interface ISVGZoomEvent ISVGZoomEvent;
typedef interface DispSVGZoomEvent DispSVGZoomEvent;
typedef class SVGZoomEvent SVGZoomEvent;
typedef interface ISVGAElement ISVGAElement;
typedef interface DispSVGAElement DispSVGAElement;
typedef class SVGAElement SVGAElement;
typedef interface ISVGViewElement ISVGViewElement;
typedef interface DispSVGViewElement DispSVGViewElement;
typedef class SVGViewElement SVGViewElement;
typedef interface IHTMLMediaError IHTMLMediaError;
typedef interface IHTMLTimeRanges IHTMLTimeRanges;
typedef interface IHTMLTimeRanges2 IHTMLTimeRanges2;
typedef interface IHTMLMediaElement IHTMLMediaElement;
typedef interface IHTMLMediaElement2 IHTMLMediaElement2;
typedef interface IHTMLMSMediaElement IHTMLMSMediaElement;
typedef interface IHTMLSourceElement IHTMLSourceElement;
typedef interface IHTMLAudioElement IHTMLAudioElement;
typedef interface IHTMLVideoElement IHTMLVideoElement;
typedef interface IHTMLAudioElementFactory IHTMLAudioElementFactory;
typedef interface DispHTMLMediaError DispHTMLMediaError;
typedef class HTMLMediaError HTMLMediaError;
typedef interface DispHTMLTimeRanges DispHTMLTimeRanges;
typedef class HTMLTimeRanges HTMLTimeRanges;
typedef interface DispHTMLMediaElement DispHTMLMediaElement;
typedef class HTMLMediaElement HTMLMediaElement;
typedef interface DispHTMLSourceElement DispHTMLSourceElement;
typedef class HTMLSourceElement HTMLSourceElement;
typedef interface DispHTMLAudioElement DispHTMLAudioElement;
typedef class HTMLAudioElement HTMLAudioElement;
typedef class HTMLAudioElementFactory HTMLAudioElementFactory;
typedef interface DispHTMLVideoElement DispHTMLVideoElement;
typedef class HTMLVideoElement HTMLVideoElement;
typedef interface ISVGSwitchElement ISVGSwitchElement;
typedef interface DispSVGSwitchElement DispSVGSwitchElement;
typedef class SVGSwitchElement SVGSwitchElement;
typedef interface ISVGDescElement ISVGDescElement;
typedef interface DispSVGDescElement DispSVGDescElement;
typedef class SVGDescElement SVGDescElement;
typedef interface ISVGTitleElement ISVGTitleElement;
typedef interface DispSVGTitleElement DispSVGTitleElement;
typedef class SVGTitleElement SVGTitleElement;
typedef interface ISVGMetadataElement ISVGMetadataElement;
typedef interface DispSVGMetadataElement DispSVGMetadataElement;
typedef class SVGMetadataElement SVGMetadataElement;
typedef interface ISVGElementInstanceList ISVGElementInstanceList;
typedef interface DispSVGElementInstance DispSVGElementInstance;
typedef class SVGElementInstance SVGElementInstance;
typedef interface DispSVGElementInstanceList DispSVGElementInstanceList;
typedef class SVGElementInstanceList SVGElementInstanceList;
typedef interface IDOMException IDOMException;
typedef interface DispDOMException DispDOMException;
typedef class DOMException DOMException;
typedef interface IRangeException IRangeException;
typedef interface DispRangeException DispRangeException;
typedef class RangeException RangeException;
typedef interface ISVGException ISVGException;
typedef interface DispSVGException DispSVGException;
typedef class SVGException SVGException;
typedef interface IEventException IEventException;
typedef interface DispEventException DispEventException;
typedef class EventException EventException;
typedef interface ISVGScriptElement ISVGScriptElement;
typedef interface DispSVGScriptElement DispSVGScriptElement;
typedef class SVGScriptElement SVGScriptElement;
typedef interface ISVGStyleElement ISVGStyleElement;
typedef interface DispSVGStyleElement DispSVGStyleElement;
typedef class SVGStyleElement SVGStyleElement;
typedef interface ISVGTextContentElement ISVGTextContentElement;
typedef interface DispSVGTextContentElement DispSVGTextContentElement;
typedef class SVGTextContentElement SVGTextContentElement;
typedef interface ISVGTextPositioningElement ISVGTextPositioningElement;
typedef interface DispSVGTextPositioningElement DispSVGTextPositioningElement;
typedef class SVGTextPositioningElement SVGTextPositioningElement;
typedef interface DispDOMDocumentType DispDOMDocumentType;
typedef class DOMDocumentType DOMDocumentType;
typedef interface DispNodeIterator DispNodeIterator;
typedef class NodeIterator NodeIterator;
typedef interface DispTreeWalker DispTreeWalker;
typedef class TreeWalker TreeWalker;
typedef interface DispDOMProcessingInstruction DispDOMProcessingInstruction;
typedef class DOMProcessingInstruction DOMProcessingInstruction;
typedef interface IHTMLPerformanceNavigation IHTMLPerformanceNavigation;
typedef interface IHTMLPerformanceTiming IHTMLPerformanceTiming;
typedef interface DispHTMLPerformance DispHTMLPerformance;
typedef class HTMLPerformance HTMLPerformance;
typedef interface DispHTMLPerformanceNavigation DispHTMLPerformanceNavigation;
typedef class HTMLPerformanceNavigation HTMLPerformanceNavigation;
typedef interface DispHTMLPerformanceTiming DispHTMLPerformanceTiming;
typedef class HTMLPerformanceTiming HTMLPerformanceTiming;
typedef interface ISVGTSpanElement ISVGTSpanElement;
typedef interface DispSVGTSpanElement DispSVGTSpanElement;
typedef class SVGTSpanElement SVGTSpanElement;
typedef interface ITemplatePrinter ITemplatePrinter;
typedef interface ITemplatePrinter2 ITemplatePrinter2;
typedef interface ITemplatePrinter3 ITemplatePrinter3;
typedef interface IPrintManagerTemplatePrinter IPrintManagerTemplatePrinter;
typedef interface IPrintManagerTemplatePrinter2 IPrintManagerTemplatePrinter2;
typedef class CTemplatePrinter CTemplatePrinter;
typedef interface DispCPrintManagerTemplatePrinter DispCPrintManagerTemplatePrinter;
typedef class CPrintManagerTemplatePrinter CPrintManagerTemplatePrinter;
typedef interface ISVGTextPathElement ISVGTextPathElement;
typedef interface DispSVGTextPathElement DispSVGTextPathElement;
typedef class SVGTextPathElement SVGTextPathElement;
typedef interface IDOMXmlSerializer IDOMXmlSerializer;
typedef interface IDOMParser IDOMParser;
typedef interface DispXMLSerializer DispXMLSerializer;
typedef class XMLSerializer XMLSerializer;
typedef interface DispDOMParser DispDOMParser;
typedef class DOMParser DOMParser;
typedef interface IDOMXmlSerializerFactory IDOMXmlSerializerFactory;
typedef interface IDOMParserFactory IDOMParserFactory;
typedef class HTMLDOMXmlSerializerFactory HTMLDOMXmlSerializerFactory;
typedef class DOMParserFactory DOMParserFactory;
typedef interface DispHTMLSemanticElement DispHTMLSemanticElement;
typedef class HTMLSemanticElement HTMLSemanticElement;
typedef interface IHTMLProgressElement IHTMLProgressElement;
typedef interface DispHTMLProgressElement DispHTMLProgressElement;
typedef class HTMLProgressElement HTMLProgressElement;
typedef interface IDOMMSTransitionEvent IDOMMSTransitionEvent;
typedef interface DispDOMMSTransitionEvent DispDOMMSTransitionEvent;
typedef class DOMMSTransitionEvent DOMMSTransitionEvent;
typedef interface IDOMMSAnimationEvent IDOMMSAnimationEvent;
typedef interface DispDOMMSAnimationEvent DispDOMMSAnimationEvent;
typedef class DOMMSAnimationEvent DOMMSAnimationEvent;
typedef interface IWebGeocoordinates IWebGeocoordinates;
typedef interface IWebGeopositionError IWebGeopositionError;
typedef interface IWebGeoposition IWebGeoposition;
typedef interface DispWebGeolocation DispWebGeolocation;
typedef class WebGeolocation WebGeolocation;
typedef interface DispWebGeocoordinates DispWebGeocoordinates;
typedef class WebGeocoordinates WebGeocoordinates;
typedef interface DispWebGeopositionError DispWebGeopositionError;
typedef class WebGeopositionError WebGeopositionError;
typedef interface DispWebGeoposition DispWebGeoposition;
typedef class WebGeoposition WebGeoposition;
typedef interface IClientCaps IClientCaps;
typedef class CClientCaps CClientCaps;
typedef interface IDOMMSManipulationEvent IDOMMSManipulationEvent;
typedef interface DispDOMMSManipulationEvent DispDOMMSManipulationEvent;
typedef class DOMMSManipulationEvent DOMMSManipulationEvent;
typedef interface IDOMCloseEvent IDOMCloseEvent;
typedef interface DispDOMCloseEvent DispDOMCloseEvent;
typedef class DOMCloseEvent DOMCloseEvent;
typedef interface DispApplicationCache DispApplicationCache;
typedef class ApplicationCache ApplicationCache;
typedef interface ICSSFilterSite ICSSFilterSite;
typedef interface IMarkupPointer IMarkupPointer;
typedef interface IMarkupContainer IMarkupContainer;
typedef interface IMarkupContainer2 IMarkupContainer2;
typedef interface IHTMLChangeLog IHTMLChangeLog;
typedef interface IHTMLChangeSink IHTMLChangeSink;
typedef interface IActiveIMMApp IActiveIMMApp;
typedef interface ISegmentList ISegmentList;
typedef interface ISegmentListIterator ISegmentListIterator;
typedef interface IHTMLCaret IHTMLCaret;
typedef interface ISegment ISegment;
typedef interface IElementSegment IElementSegment;
typedef interface IHighlightSegment IHighlightSegment;
typedef interface IHighlightRenderingServices IHighlightRenderingServices;
typedef interface ILineInfo ILineInfo;
typedef interface IDisplayPointer IDisplayPointer;
typedef interface IDisplayServices IDisplayServices;
typedef interface IHtmlDlgSafeHelper IHtmlDlgSafeHelper;
typedef interface IBlockFormats IBlockFormats;
typedef interface IFontNames IFontNames;
typedef interface ICSSFilter ICSSFilter;
typedef interface ISecureUrlHost ISecureUrlHost;
typedef interface IMarkupServices IMarkupServices;
typedef interface IMarkupServices2 IMarkupServices2;
typedef interface IHTMLChangePlayback IHTMLChangePlayback;
typedef interface IMarkupPointer2 IMarkupPointer2;
typedef interface IMarkupTextFrags IMarkupTextFrags;
typedef interface IXMLGenericParse IXMLGenericParse;
typedef interface IHTMLEditHost IHTMLEditHost;
typedef interface IHTMLEditHost2 IHTMLEditHost2;
typedef interface ISequenceNumber ISequenceNumber;
typedef interface IIMEServices IIMEServices;
typedef interface ISelectionServicesListener ISelectionServicesListener;
typedef interface ISelectionServices ISelectionServices;
typedef interface IHTMLEditDesigner IHTMLEditDesigner;
typedef interface IHTMLEditServices IHTMLEditServices;
typedef interface IHTMLEditServices2 IHTMLEditServices2;
typedef interface IHTMLComputedStyle IHTMLComputedStyle;
typedef class HtmlDlgSafeHelper HtmlDlgSafeHelper;
typedef class BlockFormats BlockFormats;
typedef class FontNames FontNames;
typedef interface IDeveloperConsoleMessageReceiver IDeveloperConsoleMessageReceiver;
typedef interface IScriptEventHandler IScriptEventHandler;
typedef interface IDebugCallbackNotificationHandler IDebugCallbackNotificationHandler;
typedef interface IScriptEventHandlerSourceInfo IScriptEventHandlerSourceInfo;
typedef interface IDOMEventRegistrationCallback IDOMEventRegistrationCallback;
typedef interface IEventTarget2 IEventTarget2;
typedef interface HTMLNamespaceEvents HTMLNamespaceEvents;
typedef interface IHTMLNamespace IHTMLNamespace;
typedef interface IHTMLNamespaceCollection IHTMLNamespaceCollection;
typedef interface DispHTMLNamespace DispHTMLNamespace;
typedef class HTMLNamespace HTMLNamespace;
typedef interface DispHTMLNamespaceCollection DispHTMLNamespaceCollection;
typedef class HTMLNamespaceCollection HTMLNamespaceCollection;
typedef interface IHTMLPainter IHTMLPainter;
typedef interface IHTMLPaintSite IHTMLPaintSite;
typedef interface IHTMLPainterEventInfo IHTMLPainterEventInfo;
typedef interface IHTMLPainterOverlay IHTMLPainterOverlay;
typedef interface IHTMLIPrintCollection IHTMLIPrintCollection;
typedef interface IEnumPrivacyRecords IEnumPrivacyRecords;
typedef interface IWPCBlockedUrls IWPCBlockedUrls;
typedef interface IHTMLDOMConstructorCollection IHTMLDOMConstructorCollection;
typedef interface IHTMLDialog IHTMLDialog;
typedef interface IHTMLDialog2 IHTMLDialog2;
typedef interface IHTMLDialog3 IHTMLDialog3;
typedef interface IHTMLModelessInit IHTMLModelessInit;
typedef class ThreadDialogProcParam ThreadDialogProcParam;
typedef class HTMLDialog HTMLDialog;
typedef interface IHTMLPopup IHTMLPopup;
typedef interface DispHTMLPopup DispHTMLPopup;
typedef class HTMLPopup HTMLPopup;
typedef interface IHTMLAppBehavior IHTMLAppBehavior;
typedef interface IHTMLAppBehavior2 IHTMLAppBehavior2;
typedef interface IHTMLAppBehavior3 IHTMLAppBehavior3;
typedef interface DispHTMLAppBehavior DispHTMLAppBehavior;
typedef class HTMLAppBehavior HTMLAppBehavior;
typedef class OldHTMLDocument OldHTMLDocument;
typedef class OldHTMLFormElement OldHTMLFormElement;
typedef interface DispIHTMLInputButtonElement DispIHTMLInputButtonElement;
typedef class HTMLInputButtonElement HTMLInputButtonElement;
typedef interface DispIHTMLInputTextElement DispIHTMLInputTextElement;
typedef class HTMLInputTextElement HTMLInputTextElement;
typedef interface DispIHTMLInputFileElement DispIHTMLInputFileElement;
typedef class HTMLInputFileElement HTMLInputFileElement;
typedef interface DispIHTMLOptionButtonElement DispIHTMLOptionButtonElement;
typedef class HTMLOptionButtonElement HTMLOptionButtonElement;
typedef interface DispIHTMLInputImage DispIHTMLInputImage;
typedef class HTMLInputImage HTMLInputImage;
typedef interface IElementNamespace IElementNamespace;
typedef interface IElementNamespaceTable IElementNamespaceTable;
typedef interface IElementNamespaceFactory IElementNamespaceFactory;
typedef interface IElementNamespaceFactory2 IElementNamespaceFactory2;
typedef interface IElementNamespaceFactoryCallback IElementNamespaceFactoryCallback;
typedef interface IElementBehaviorSiteOM2 IElementBehaviorSiteOM2;
typedef interface IElementBehaviorCategory IElementBehaviorCategory;
typedef interface IElementBehaviorSiteCategory IElementBehaviorSiteCategory;
typedef interface IElementBehaviorSubmit IElementBehaviorSubmit;
typedef interface IElementBehaviorFocus IElementBehaviorFocus;
typedef interface IElementBehaviorLayout IElementBehaviorLayout;
typedef interface IElementBehaviorLayout2 IElementBehaviorLayout2;
typedef interface IElementBehaviorSiteLayout IElementBehaviorSiteLayout;
typedef interface IElementBehaviorSiteLayout2 IElementBehaviorSiteLayout2;
typedef interface IHostBehaviorInit IHostBehaviorInit;
typedef interface ISurfacePresenter ISurfacePresenter;
typedef interface IViewObjectPresentSite IViewObjectPresentSite;
typedef interface ICanvasPixelArrayData ICanvasPixelArrayData;
typedef interface IViewObjectPrint IViewObjectPrint;
typedef interface IViewObjectPresentNotifySite IViewObjectPresentNotifySite;
typedef interface IViewObjectPresentNotify IViewObjectPresentNotify;
typedef interface ITrackingProtection ITrackingProtection;
typedef interface IBFCacheable IBFCacheable;
#include "ocidl.h"
#include "dimm.h"
#include "shtypes.h"
#include "dispex.h"
extern "C"{
#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#include <dxgitype.h>
#include <olectl.h>
EXTERN_C const GUID CMDSETID_Forms3;
EXTERN_C const GUID CLSID_MHTMLDocument;
EXTERN_C const GUID CLSID_IEXMLDocument;
EXTERN_C const GUID CLSID_SVGDocument;
EXTERN_C const GUID CLSID_XHTMLDocument;
EXTERN_C const GUID CLSID_HTADocument;
EXTERN_C const GUID CLSID_HTMLApplication;
EXTERN_C const GUID CLSID_HTMLPluginDocument;
DEFINE_GUID(SID_SEditCommandTarget,0x3050f4b5,0x98b5,0x11cf,0xbb,0x82,0x00,0xaa,0x00,0xbd,0xce,0x0b);
DEFINE_GUID(CGID_EditStateCommands,0x3050f4b6,0x98b5,0x11cf,0xbb,0x82,0x00,0xaa,0x00,0xbd,0xce,0x0b);
DEFINE_GUID(SID_SHTMLEditHost,0x3050f6a0,0x98b5,0x11cf,0xbb,0x82,0x00,0xaa,0x00,0xbd,0xce,0x0b);
DEFINE_GUID(SID_SHTMLEditServices,0x3050f7f9,0x98b5,0x11cf,0xbb,0x82,0x00,0xaa,0x00,0xbd,0xce,0x0b);
extern RPC_IF_HANDLE __MIDL_itf_mshtml_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mshtml_0000_0000_v0_0_s_ifspec;
EXTERN_C const IID IID_IHTMLFiltersCollection;
    typedef struct IHTMLFiltersCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFiltersCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFiltersCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFiltersCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFiltersCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFiltersCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFiltersCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFiltersCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLFiltersCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLFiltersCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLFiltersCollection * This,
                       __RPC__in VARIANT *pvarIndex,
                                __RPC__out VARIANT *pvarResult);
        END_INTERFACE
    } IHTMLFiltersCollectionVtbl;
    interface IHTMLFiltersCollection
    {
        CONST_VTBL struct IHTMLFiltersCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,pvarIndex,pvarResult) )
EXTERN_C const IID IID_IIE70DispatchEx;
    typedef struct IIE70DispatchExVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IIE70DispatchEx * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IIE70DispatchEx * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IIE70DispatchEx * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IIE70DispatchEx * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IIE70DispatchEx * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IIE70DispatchEx * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IIE70DispatchEx * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        HRESULT ( STDMETHODCALLTYPE *GetDispID )(
            __RPC__in IIE70DispatchEx * This,
                       __RPC__in BSTR bstrName,
                       DWORD grfdex,
                        __RPC__out DISPID *pid);
                      HRESULT ( STDMETHODCALLTYPE *InvokeEx )(
            IIE70DispatchEx * This,
            _In_ DISPID id,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pdp,
            _Out_opt_ VARIANT *pvarRes,
            _Out_opt_ EXCEPINFO *pei,
            _In_opt_ IServiceProvider *pspCaller);
        HRESULT ( STDMETHODCALLTYPE *DeleteMemberByName )(
            __RPC__in IIE70DispatchEx * This,
                       __RPC__in BSTR bstrName,
                       DWORD grfdex);
        HRESULT ( STDMETHODCALLTYPE *DeleteMemberByDispID )(
            __RPC__in IIE70DispatchEx * This,
                       DISPID id);
        HRESULT ( STDMETHODCALLTYPE *GetMemberProperties )(
            __RPC__in IIE70DispatchEx * This,
                       DISPID id,
                       DWORD grfdexFetch,
                        __RPC__out DWORD *pgrfdex);
        HRESULT ( STDMETHODCALLTYPE *GetMemberName )(
            __RPC__in IIE70DispatchEx * This,
                       DISPID id,
                        __RPC__deref_out_opt BSTR *pbstrName);
        HRESULT ( STDMETHODCALLTYPE *GetNextDispID )(
            __RPC__in IIE70DispatchEx * This,
                       DWORD grfdex,
                       DISPID id,
                        __RPC__out DISPID *pid);
        HRESULT ( STDMETHODCALLTYPE *GetNameSpaceParent )(
            __RPC__in IIE70DispatchEx * This,
                        __RPC__deref_out_opt IUnknown **ppunk);
        END_INTERFACE
    } IIE70DispatchExVtbl;
    interface IIE70DispatchEx
    {
        CONST_VTBL struct IIE70DispatchExVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> GetDispID(This,bstrName,grfdex,pid) )
    ( (This)->lpVtbl -> InvokeEx(This,id,lcid,wFlags,pdp,pvarRes,pei,pspCaller) )
    ( (This)->lpVtbl -> DeleteMemberByName(This,bstrName,grfdex) )
    ( (This)->lpVtbl -> DeleteMemberByDispID(This,id) )
    ( (This)->lpVtbl -> GetMemberProperties(This,id,grfdexFetch,pgrfdex) )
    ( (This)->lpVtbl -> GetMemberName(This,id,pbstrName) )
    ( (This)->lpVtbl -> GetNextDispID(This,grfdex,id,pid) )
    ( (This)->lpVtbl -> GetNameSpaceParent(This,ppunk) )
EXTERN_C const IID IID_IIE80DispatchEx;
    typedef struct IIE80DispatchExVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IIE80DispatchEx * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IIE80DispatchEx * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IIE80DispatchEx * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IIE80DispatchEx * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IIE80DispatchEx * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IIE80DispatchEx * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IIE80DispatchEx * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        HRESULT ( STDMETHODCALLTYPE *GetDispID )(
            __RPC__in IIE80DispatchEx * This,
                       __RPC__in BSTR bstrName,
                       DWORD grfdex,
                        __RPC__out DISPID *pid);
                      HRESULT ( STDMETHODCALLTYPE *InvokeEx )(
            IIE80DispatchEx * This,
            _In_ DISPID id,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pdp,
            _Out_opt_ VARIANT *pvarRes,
            _Out_opt_ EXCEPINFO *pei,
            _In_opt_ IServiceProvider *pspCaller);
        HRESULT ( STDMETHODCALLTYPE *DeleteMemberByName )(
            __RPC__in IIE80DispatchEx * This,
                       __RPC__in BSTR bstrName,
                       DWORD grfdex);
        HRESULT ( STDMETHODCALLTYPE *DeleteMemberByDispID )(
            __RPC__in IIE80DispatchEx * This,
                       DISPID id);
        HRESULT ( STDMETHODCALLTYPE *GetMemberProperties )(
            __RPC__in IIE80DispatchEx * This,
                       DISPID id,
                       DWORD grfdexFetch,
                        __RPC__out DWORD *pgrfdex);
        HRESULT ( STDMETHODCALLTYPE *GetMemberName )(
            __RPC__in IIE80DispatchEx * This,
                       DISPID id,
                        __RPC__deref_out_opt BSTR *pbstrName);
        HRESULT ( STDMETHODCALLTYPE *GetNextDispID )(
            __RPC__in IIE80DispatchEx * This,
                       DWORD grfdex,
                       DISPID id,
                        __RPC__out DISPID *pid);
        HRESULT ( STDMETHODCALLTYPE *GetNameSpaceParent )(
            __RPC__in IIE80DispatchEx * This,
                        __RPC__deref_out_opt IUnknown **ppunk);
        END_INTERFACE
    } IIE80DispatchExVtbl;
    interface IIE80DispatchEx
    {
        CONST_VTBL struct IIE80DispatchExVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> GetDispID(This,bstrName,grfdex,pid) )
    ( (This)->lpVtbl -> InvokeEx(This,id,lcid,wFlags,pdp,pvarRes,pei,pspCaller) )
    ( (This)->lpVtbl -> DeleteMemberByName(This,bstrName,grfdex) )
    ( (This)->lpVtbl -> DeleteMemberByDispID(This,id) )
    ( (This)->lpVtbl -> GetMemberProperties(This,id,grfdexFetch,pgrfdex) )
    ( (This)->lpVtbl -> GetMemberName(This,id,pbstrName) )
    ( (This)->lpVtbl -> GetNextDispID(This,grfdex,id,pid) )
    ( (This)->lpVtbl -> GetNameSpaceParent(This,ppunk) )
typedef
enum _htmlDesignMode
    {
        htmlDesignModeInherit = -2,
        htmlDesignModeOn = -1,
        htmlDesignModeOff = 0,
        htmlDesignMode_Max = 2147483647L
    } htmlDesignMode;
typedef
enum _htmlZOrder
    {
        htmlZOrderFront = 0,
        htmlZOrderBack = 1,
        htmlZOrder_Max = 2147483647L
    } htmlZOrder;
typedef
enum _htmlClear
    {
        htmlClearNotSet = 0,
        htmlClearAll = 1,
        htmlClearLeft = 2,
        htmlClearRight = 3,
        htmlClearBoth = 4,
        htmlClearNone = 5,
        htmlClear_Max = 2147483647L
    } htmlClear;
typedef
enum _htmlControlAlign
    {
        htmlControlAlignNotSet = 0,
        htmlControlAlignLeft = 1,
        htmlControlAlignCenter = 2,
        htmlControlAlignRight = 3,
        htmlControlAlignTextTop = 4,
        htmlControlAlignAbsMiddle = 5,
        htmlControlAlignBaseline = 6,
        htmlControlAlignAbsBottom = 7,
        htmlControlAlignBottom = 8,
        htmlControlAlignMiddle = 9,
        htmlControlAlignTop = 10,
        htmlControlAlign_Max = 2147483647L
    } htmlControlAlign;
typedef
enum _htmlBlockAlign
    {
        htmlBlockAlignNotSet = 0,
        htmlBlockAlignLeft = 1,
        htmlBlockAlignCenter = 2,
        htmlBlockAlignRight = 3,
        htmlBlockAlignJustify = 4,
        htmlBlockAlign_Max = 2147483647L
    } htmlBlockAlign;
typedef
enum _htmlReadyState
    {
        htmlReadyStateuninitialized = 0,
        htmlReadyStateloading = 1,
        htmlReadyStateloaded = 2,
        htmlReadyStateinteractive = 3,
        htmlReadyStatecomplete = 4,
        htmlReadyState_Max = 2147483647L
    } htmlReadyState;
typedef
enum _htmlLoop
    {
        htmlLoopLoopInfinite = -1,
        htmlLoop_Max = 2147483647L
    } htmlLoop;
typedef
enum _mediaType
    {
        mediaTypeNotSet = 0,
        mediaTypeAll = 511,
        mediaTypeAural = 1,
        mediaTypeBraille = 2,
        mediaTypeEmbossed = 4,
        mediaTypeHandheld = 8,
        mediaTypePrint = 16,
        mediaTypeProjection = 32,
        mediaTypeScreen = 64,
        mediaTypeTty = 128,
        mediaTypeTv = 256,
        mediaType_Max = 2147483647L
    } mediaType;
typedef
enum _DomConstructor
    {
        DomConstructorObject = 0,
        DomConstructorAttr = 1,
        DomConstructorBehaviorUrnsCollection = 2,
        DomConstructorBookmarkCollection = 3,
        DomConstructorCompatibleInfo = 4,
        DomConstructorCompatibleInfoCollection = 5,
        DomConstructorControlRangeCollection = 6,
        DomConstructorCSSCurrentStyleDeclaration = 7,
        DomConstructorCSSRuleList = 8,
        DomConstructorCSSRuleStyleDeclaration = 9,
        DomConstructorCSSStyleDeclaration = 10,
        DomConstructorCSSStyleRule = 11,
        DomConstructorCSSStyleSheet = 12,
        DomConstructorDataTransfer = 13,
        DomConstructorDOMImplementation = 14,
        DomConstructorElement = 15,
        DomConstructorEvent = 16,
        DomConstructorHistory = 17,
        DomConstructorHTCElementBehaviorDefaults = 18,
        DomConstructorHTMLAnchorElement = 19,
        DomConstructorHTMLAreaElement = 20,
        DomConstructorHTMLAreasCollection = 21,
        DomConstructorHTMLBaseElement = 22,
        DomConstructorHTMLBaseFontElement = 23,
        DomConstructorHTMLBGSoundElement = 24,
        DomConstructorHTMLBlockElement = 25,
        DomConstructorHTMLBodyElement = 26,
        DomConstructorHTMLBRElement = 27,
        DomConstructorHTMLButtonElement = 28,
        DomConstructorHTMLCollection = 29,
        DomConstructorHTMLCommentElement = 30,
        DomConstructorHTMLDDElement = 31,
        DomConstructorHTMLDivElement = 32,
        DomConstructorHTMLDocument = 33,
        DomConstructorHTMLDListElement = 34,
        DomConstructorHTMLDTElement = 35,
        DomConstructorHTMLEmbedElement = 36,
        DomConstructorHTMLFieldSetElement = 37,
        DomConstructorHTMLFontElement = 38,
        DomConstructorHTMLFormElement = 39,
        DomConstructorHTMLFrameElement = 40,
        DomConstructorHTMLFrameSetElement = 41,
        DomConstructorHTMLGenericElement = 42,
        DomConstructorHTMLHeadElement = 43,
        DomConstructorHTMLHeadingElement = 44,
        DomConstructorHTMLHRElement = 45,
        DomConstructorHTMLHtmlElement = 46,
        DomConstructorHTMLIFrameElement = 47,
        DomConstructorHTMLImageElement = 48,
        DomConstructorHTMLInputElement = 49,
        DomConstructorHTMLIsIndexElement = 50,
        DomConstructorHTMLLabelElement = 51,
        DomConstructorHTMLLegendElement = 52,
        DomConstructorHTMLLIElement = 53,
        DomConstructorHTMLLinkElement = 54,
        DomConstructorHTMLMapElement = 55,
        DomConstructorHTMLMarqueeElement = 56,
        DomConstructorHTMLMetaElement = 57,
        DomConstructorHTMLModelessDialog = 58,
        DomConstructorHTMLNamespaceInfo = 59,
        DomConstructorHTMLNamespaceInfoCollection = 60,
        DomConstructorHTMLNextIdElement = 61,
        DomConstructorHTMLNoShowElement = 62,
        DomConstructorHTMLObjectElement = 63,
        DomConstructorHTMLOListElement = 64,
        DomConstructorHTMLOptionElement = 65,
        DomConstructorHTMLParagraphElement = 66,
        DomConstructorHTMLParamElement = 67,
        DomConstructorHTMLPhraseElement = 68,
        DomConstructorHTMLPluginsCollection = 69,
        DomConstructorHTMLPopup = 70,
        DomConstructorHTMLScriptElement = 71,
        DomConstructorHTMLSelectElement = 72,
        DomConstructorHTMLSpanElement = 73,
        DomConstructorHTMLStyleElement = 74,
        DomConstructorHTMLTableCaptionElement = 75,
        DomConstructorHTMLTableCellElement = 76,
        DomConstructorHTMLTableColElement = 77,
        DomConstructorHTMLTableElement = 78,
        DomConstructorHTMLTableRowElement = 79,
        DomConstructorHTMLTableSectionElement = 80,
        DomConstructorHTMLTextAreaElement = 81,
        DomConstructorHTMLTextElement = 82,
        DomConstructorHTMLTitleElement = 83,
        DomConstructorHTMLUListElement = 84,
        DomConstructorHTMLUnknownElement = 85,
        DomConstructorImage = 86,
        DomConstructorLocation = 87,
        DomConstructorNamedNodeMap = 88,
        DomConstructorNavigator = 89,
        DomConstructorNodeList = 90,
        DomConstructorOption = 91,
        DomConstructorScreen = 92,
        DomConstructorSelection = 93,
        DomConstructorStaticNodeList = 94,
        DomConstructorStorage = 95,
        DomConstructorStyleSheetList = 96,
        DomConstructorStyleSheetPage = 97,
        DomConstructorStyleSheetPageList = 98,
        DomConstructorText = 99,
        DomConstructorTextRange = 100,
        DomConstructorTextRangeCollection = 101,
        DomConstructorTextRectangle = 102,
        DomConstructorTextRectangleList = 103,
        DomConstructorWindow = 104,
        DomConstructorXDomainRequest = 105,
        DomConstructorXMLHttpRequest = 106,
        DomConstructorMax = 107,
        DomConstructor_Max = 2147483647L
    } DomConstructor;
typedef
enum _styleTextTransform
    {
        styleTextTransformNotSet = 0,
        styleTextTransformCapitalize = 1,
        styleTextTransformLowercase = 2,
        styleTextTransformUppercase = 3,
        styleTextTransformNone = 4,
        styleTextTransform_Max = 2147483647L
    } styleTextTransform;
typedef
enum _styleDataRepeat
    {
        styleDataRepeatNone = 0,
        styleDataRepeatInner = 1,
        styleDataRepeat_Max = 2147483647L
    } styleDataRepeat;
typedef
enum _styleOverflow
    {
        styleOverflowNotSet = 0,
        styleOverflowAuto = 1,
        styleOverflowHidden = 2,
        styleOverflowVisible = 3,
        styleOverflowScroll = 4,
        styleOverflow_Max = 2147483647L
    } styleOverflow;
typedef
enum _styleMsOverflowStyle
    {
        styleMsOverflowStyleNotSet = 0,
        styleMsOverflowStyleAuto = 1,
        styleMsOverflowStyleNone = 2,
        styleMsOverflowStyleScrollbar = 3,
        styleMsOverflowStyleMsAutoHidingScrollbar = 4,
        styleMsOverflowStyle_Max = 2147483647L
    } styleMsOverflowStyle;
typedef
enum _styleTableLayout
    {
        styleTableLayoutNotSet = 0,
        styleTableLayoutAuto = 1,
        styleTableLayoutFixed = 2,
        styleTableLayout_Max = 2147483647L
    } styleTableLayout;
typedef
enum _styleBorderCollapse
    {
        styleBorderCollapseNotSet = 0,
        styleBorderCollapseSeparate = 1,
        styleBorderCollapseCollapse = 2,
        styleBorderCollapse_Max = 2147483647L
    } styleBorderCollapse;
typedef
enum _styleCaptionSide
    {
        styleCaptionSideNotSet = 0,
        styleCaptionSideTop = 1,
        styleCaptionSideBottom = 2,
        styleCaptionSideLeft = 3,
        styleCaptionSideRight = 4,
        styleCaptionSide_Max = 2147483647L
    } styleCaptionSide;
typedef
enum _styleEmptyCells
    {
        styleEmptyCellsNotSet = 0,
        styleEmptyCellsShow = 1,
        styleEmptyCellsHide = 2,
        styleEmptyCells_Max = 2147483647L
    } styleEmptyCells;
typedef
enum _styleFontStyle
    {
        styleFontStyleNotSet = 0,
        styleFontStyleItalic = 1,
        styleFontStyleOblique = 2,
        styleFontStyleNormal = 3,
        styleFontStyle_Max = 2147483647L
    } styleFontStyle;
typedef
enum _styleFontVariant
    {
        styleFontVariantNotSet = 0,
        styleFontVariantSmallCaps = 1,
        styleFontVariantNormal = 2,
        styleFontVariant_Max = 2147483647L
    } styleFontVariant;
typedef
enum _styleBackgroundRepeat
    {
        styleBackgroundRepeatRepeat = 0,
        styleBackgroundRepeatRepeatX = 1,
        styleBackgroundRepeatRepeatY = 2,
        styleBackgroundRepeatNoRepeat = 3,
        styleBackgroundRepeatNotSet = 4,
        styleBackgroundRepeat_Max = 2147483647L
    } styleBackgroundRepeat;
typedef
enum _styleBackgroundAttachment
    {
        styleBackgroundAttachmentFixed = 0,
        styleBackgroundAttachmentScroll = 1,
        styleBackgroundAttachmentNotSet = 2,
        styleBackgroundAttachment_Max = 2147483647L
    } styleBackgroundAttachment;
typedef
enum _styleBackgroundAttachment3
    {
        styleBackgroundAttachment3Fixed = 0,
        styleBackgroundAttachment3Scroll = 1,
        styleBackgroundAttachment3Local = 2,
        styleBackgroundAttachment3NotSet = 3,
        styleBackgroundAttachment3_Max = 2147483647L
    } styleBackgroundAttachment3;
typedef
enum _styleBackgroundClip
    {
        styleBackgroundClipBorderBox = 0,
        styleBackgroundClipPaddingBox = 1,
        styleBackgroundClipContentBox = 2,
        styleBackgroundClipNotSet = 3,
        styleBackgroundClip_Max = 2147483647L
    } styleBackgroundClip;
typedef
enum _styleBackgroundOrigin
    {
        styleBackgroundOriginBorderBox = 0,
        styleBackgroundOriginPaddingBox = 1,
        styleBackgroundOriginContentBox = 2,
        styleBackgroundOriginNotSet = 3,
        styleBackgroundOrigin_Max = 2147483647L
    } styleBackgroundOrigin;
typedef
enum _styleVerticalAlign
    {
        styleVerticalAlignAuto = 0,
        styleVerticalAlignBaseline = 1,
        styleVerticalAlignSub = 2,
        styleVerticalAlignSuper = 3,
        styleVerticalAlignTop = 4,
        styleVerticalAlignTextTop = 5,
        styleVerticalAlignMiddle = 6,
        styleVerticalAlignBottom = 7,
        styleVerticalAlignTextBottom = 8,
        styleVerticalAlignInherit = 9,
        styleVerticalAlignNotSet = 10,
        styleVerticalAlign_Max = 2147483647L
    } styleVerticalAlign;
typedef
enum _styleFontWeight
    {
        styleFontWeightNotSet = 0,
        styleFontWeight100 = 1,
        styleFontWeight200 = 2,
        styleFontWeight300 = 3,
        styleFontWeight400 = 4,
        styleFontWeight500 = 5,
        styleFontWeight600 = 6,
        styleFontWeight700 = 7,
        styleFontWeight800 = 8,
        styleFontWeight900 = 9,
        styleFontWeightNormal = 10,
        styleFontWeightBold = 11,
        styleFontWeightBolder = 12,
        styleFontWeightLighter = 13,
        styleFontWeight_Max = 2147483647L
    } styleFontWeight;
typedef
enum _styleFontSize
    {
        styleFontSizeXXSmall = 0,
        styleFontSizeXSmall = 1,
        styleFontSizeSmall = 2,
        styleFontSizeMedium = 3,
        styleFontSizeLarge = 4,
        styleFontSizeXLarge = 5,
        styleFontSizeXXLarge = 6,
        styleFontSizeSmaller = 7,
        styleFontSizeLarger = 8,
        styleFontSize_Max = 2147483647L
    } styleFontSize;
typedef
enum _styleZIndex
    {
        styleZIndexAuto = -2147483647,
        styleZIndex_Max = 2147483647L
    } styleZIndex;
typedef
enum _styleWidowsOrphans
    {
        styleWidowsOrphansNotSet = -2147483647,
        styleWidowsOrphans_Max = 2147483647L
    } styleWidowsOrphans;
typedef
enum _styleAuto
    {
        styleAutoAuto = 0,
        styleAuto_Max = 2147483647L
    } styleAuto;
typedef
enum _styleNone
    {
        styleNoneNone = 0,
        styleNone_Max = 2147483647L
    } styleNone;
typedef
enum _styleNormal
    {
        styleNormalNormal = 0,
        styleNormal_Max = 2147483647L
    } styleNormal;
typedef
enum _styleBorderWidth
    {
        styleBorderWidthThin = 0,
        styleBorderWidthMedium = 1,
        styleBorderWidthThick = 2,
        styleBorderWidth_Max = 2147483647L
    } styleBorderWidth;
typedef
enum _stylePosition
    {
        stylePositionNotSet = 0,
        stylePositionstatic = 1,
        stylePositionrelative = 2,
        stylePositionabsolute = 3,
        stylePositionfixed = 4,
        stylePositionMsPage = 5,
        stylePositionMsDeviceFixed = 6,
        stylePosition_Max = 2147483647L
    } stylePosition;
typedef
enum _styleBorderStyle
    {
        styleBorderStyleNotSet = 0,
        styleBorderStyleDotted = 1,
        styleBorderStyleDashed = 2,
        styleBorderStyleSolid = 3,
        styleBorderStyleDouble = 4,
        styleBorderStyleGroove = 5,
        styleBorderStyleRidge = 6,
        styleBorderStyleInset = 7,
        styleBorderStyleOutset = 8,
        styleBorderStyleWindowInset = 9,
        styleBorderStyleNone = 10,
        styleBorderStyleHidden = 11,
        styleBorderStyle_Max = 2147483647L
    } styleBorderStyle;
typedef
enum _styleOutlineStyle
    {
        styleOutlineStyleNotSet = 0,
        styleOutlineStyleDotted = 1,
        styleOutlineStyleDashed = 2,
        styleOutlineStyleSolid = 3,
        styleOutlineStyleDouble = 4,
        styleOutlineStyleGroove = 5,
        styleOutlineStyleRidge = 6,
        styleOutlineStyleInset = 7,
        styleOutlineStyleOutset = 8,
        styleOutlineStyleWindowInset = 9,
        styleOutlineStyleNone = 10,
        styleOutlineStyle_Max = 2147483647L
    } styleOutlineStyle;
typedef
enum _styleStyleFloat
    {
        styleStyleFloatNotSet = 0,
        styleStyleFloatLeft = 1,
        styleStyleFloatRight = 2,
        styleStyleFloatNone = 3,
        styleStyleFloat_Max = 2147483647L
    } styleStyleFloat;
typedef
enum _styleDisplay
    {
        styleDisplayNotSet = 0,
        styleDisplayBlock = 1,
        styleDisplayInline = 2,
        styleDisplayListItem = 3,
        styleDisplayNone = 4,
        styleDisplayTableHeaderGroup = 5,
        styleDisplayTableFooterGroup = 6,
        styleDisplayInlineBlock = 7,
        styleDisplayTable = 8,
        styleDisplayInlineTable = 9,
        styleDisplayTableRow = 10,
        styleDisplayTableRowGroup = 11,
        styleDisplayTableColumn = 12,
        styleDisplayTableColumnGroup = 13,
        styleDisplayTableCell = 14,
        styleDisplayTableCaption = 15,
        styleDisplayRunIn = 16,
        styleDisplayRuby = 17,
        styleDisplayRubyBase = 18,
        styleDisplayRubyText = 19,
        styleDisplayRubyBaseContainer = 20,
        styleDisplayRubyTextContainer = 21,
        styleDisplayMsFlexbox = 22,
        styleDisplayMsInlineFlexbox = 23,
        styleDisplayMsGrid = 24,
        styleDisplayMsInlineGrid = 25,
        styleDisplayFlex = 26,
        styleDisplayInlineFlex = 27,
        styleDisplayWebkitBox = 28,
        styleDisplayWebkitInlineBox = 29,
        styleDisplay_Max = 2147483647L
    } styleDisplay;
typedef
enum _styleVisibility
    {
        styleVisibilityNotSet = 0,
        styleVisibilityInherit = 1,
        styleVisibilityVisible = 2,
        styleVisibilityHidden = 3,
        styleVisibilityCollapse = 4,
        styleVisibility_Max = 2147483647L
    } styleVisibility;
typedef
enum _styleListStyleType
    {
        styleListStyleTypeNotSet = 0,
        styleListStyleTypeDisc = 1,
        styleListStyleTypeCircle = 2,
        styleListStyleTypeSquare = 3,
        styleListStyleTypeDecimal = 4,
        styleListStyleTypeLowerRoman = 5,
        styleListStyleTypeUpperRoman = 6,
        styleListStyleTypeLowerAlpha = 7,
        styleListStyleTypeUpperAlpha = 8,
        styleListStyleTypeNone = 9,
        styleListStyleTypeDecimalLeadingZero = 10,
        styleListStyleTypeGeorgian = 11,
        styleListStyleTypeArmenian = 12,
        styleListStyleTypeUpperLatin = 13,
        styleListStyleTypeLowerLatin = 14,
        styleListStyleTypeUpperGreek = 15,
        styleListStyleTypeLowerGreek = 16,
        styleListStyleType_Max = 2147483647L
    } styleListStyleType;
typedef
enum _styleListStylePosition
    {
        styleListStylePositionNotSet = 0,
        styleListStylePositionInside = 1,
        styleListStylePositionOutSide = 2,
        styleListStylePosition_Max = 2147483647L
    } styleListStylePosition;
typedef
enum _styleWhiteSpace
    {
        styleWhiteSpaceNotSet = 0,
        styleWhiteSpaceNormal = 1,
        styleWhiteSpacePre = 2,
        styleWhiteSpaceNowrap = 3,
        styleWhiteSpacePreline = 4,
        styleWhiteSpacePrewrap = 5,
        styleWhiteSpace_Max = 2147483647L
    } styleWhiteSpace;
typedef
enum _stylePageBreak
    {
        stylePageBreakNotSet = 0,
        stylePageBreakAuto = 1,
        stylePageBreakAlways = 2,
        stylePageBreakLeft = 3,
        stylePageBreakRight = 4,
        stylePageBreakAvoid = 5,
        stylePageBreak_Max = 2147483647L
    } stylePageBreak;
typedef
enum _stylePageBreakInside
    {
        stylePageBreakInsideNotSet = 0,
        stylePageBreakInsideAuto = 1,
        stylePageBreakInsideAvoid = 2,
        stylePageBreakInside_Max = 2147483647L
    } stylePageBreakInside;
typedef
enum _styleCursor
    {
        styleCursorAuto = 0,
        styleCursorCrosshair = 1,
        styleCursorDefault = 2,
        styleCursorHand = 3,
        styleCursorMove = 4,
        styleCursorE_resize = 5,
        styleCursorNe_resize = 6,
        styleCursorNw_resize = 7,
        styleCursorN_resize = 8,
        styleCursorSe_resize = 9,
        styleCursorSw_resize = 10,
        styleCursorS_resize = 11,
        styleCursorW_resize = 12,
        styleCursorText = 13,
        styleCursorWait = 14,
        styleCursorHelp = 15,
        styleCursorPointer = 16,
        styleCursorProgress = 17,
        styleCursorNot_allowed = 18,
        styleCursorNo_drop = 19,
        styleCursorVertical_text = 20,
        styleCursorall_scroll = 21,
        styleCursorcol_resize = 22,
        styleCursorrow_resize = 23,
        styleCursorNone = 24,
        styleCursorContext_menu = 25,
        styleCursorEw_resize = 26,
        styleCursorNs_resize = 27,
        styleCursorNesw_resize = 28,
        styleCursorNwse_resize = 29,
        styleCursorCell = 30,
        styleCursorCopy = 31,
        styleCursorAlias = 32,
        styleCursorcustom = 33,
        styleCursorNotSet = 34,
        styleCursor_Max = 2147483647L
    } styleCursor;
typedef
enum _styleDir
    {
        styleDirNotSet = 0,
        styleDirLeftToRight = 1,
        styleDirRightToLeft = 2,
        styleDirInherit = 3,
        styleDir_Max = 2147483647L
    } styleDir;
typedef
enum _styleBidi
    {
        styleBidiNotSet = 0,
        styleBidiNormal = 1,
        styleBidiEmbed = 2,
        styleBidiOverride = 3,
        styleBidiInherit = 4,
        styleBidi_Max = 2147483647L
    } styleBidi;
typedef
enum _styleImeMode
    {
        styleImeModeAuto = 0,
        styleImeModeActive = 1,
        styleImeModeInactive = 2,
        styleImeModeDisabled = 3,
        styleImeModeNotSet = 4,
        styleImeMode_Max = 2147483647L
    } styleImeMode;
typedef
enum _styleRubyAlign
    {
        styleRubyAlignNotSet = 0,
        styleRubyAlignAuto = 1,
        styleRubyAlignLeft = 2,
        styleRubyAlignCenter = 3,
        styleRubyAlignRight = 4,
        styleRubyAlignDistributeLetter = 5,
        styleRubyAlignDistributeSpace = 6,
        styleRubyAlignLineEdge = 7,
        styleRubyAlign_Max = 2147483647L
    } styleRubyAlign;
typedef
enum _styleRubyPosition
    {
        styleRubyPositionNotSet = 0,
        styleRubyPositionAbove = 1,
        styleRubyPositionInline = 2,
        styleRubyPosition_Max = 2147483647L
    } styleRubyPosition;
typedef
enum _styleRubyOverhang
    {
        styleRubyOverhangNotSet = 0,
        styleRubyOverhangAuto = 1,
        styleRubyOverhangWhitespace = 2,
        styleRubyOverhangNone = 3,
        styleRubyOverhang_Max = 2147483647L
    } styleRubyOverhang;
typedef
enum _styleLayoutGridChar
    {
        styleLayoutGridCharNotSet = 0,
        styleLayoutGridCharAuto = 1,
        styleLayoutGridCharNone = 2,
        styleLayoutGridChar_Max = 2147483647L
    } styleLayoutGridChar;
typedef
enum _styleLayoutGridLine
    {
        styleLayoutGridLineNotSet = 0,
        styleLayoutGridLineAuto = 1,
        styleLayoutGridLineNone = 2,
        styleLayoutGridLine_Max = 2147483647L
    } styleLayoutGridLine;
typedef
enum _styleLayoutGridMode
    {
        styleLayoutGridModeNotSet = 0,
        styleLayoutGridModeChar = 1,
        styleLayoutGridModeLine = 2,
        styleLayoutGridModeBoth = 3,
        styleLayoutGridModeNone = 4,
        styleLayoutGridMode_Max = 2147483647L
    } styleLayoutGridMode;
typedef
enum _styleLayoutGridType
    {
        styleLayoutGridTypeNotSet = 0,
        styleLayoutGridTypeLoose = 1,
        styleLayoutGridTypeStrict = 2,
        styleLayoutGridTypeFixed = 3,
        styleLayoutGridType_Max = 2147483647L
    } styleLayoutGridType;
typedef
enum _styleLineBreak
    {
        styleLineBreakNotSet = 0,
        styleLineBreakNormal = 1,
        styleLineBreakStrict = 2,
        styleLineBreak_Max = 2147483647L
    } styleLineBreak;
typedef
enum _styleWordBreak
    {
        styleWordBreakNotSet = 0,
        styleWordBreakNormal = 1,
        styleWordBreakBreakAll = 2,
        styleWordBreakKeepAll = 3,
        styleWordBreak_Max = 2147483647L
    } styleWordBreak;
typedef
enum _styleWordWrap
    {
        styleWordWrapNotSet = 0,
        styleWordWrapOff = 1,
        styleWordWrapOn = 2,
        styleWordWrap_Max = 2147483647L
    } styleWordWrap;
typedef
enum _styleTextJustify
    {
        styleTextJustifyNotSet = 0,
        styleTextJustifyInterWord = 1,
        styleTextJustifyNewspaper = 2,
        styleTextJustifyDistribute = 3,
        styleTextJustifyDistributeAllLines = 4,
        styleTextJustifyInterIdeograph = 5,
        styleTextJustifyInterCluster = 6,
        styleTextJustifyKashida = 7,
        styleTextJustifyAuto = 8,
        styleTextJustify_Max = 2147483647L
    } styleTextJustify;
typedef
enum _styleTextAlignLast
    {
        styleTextAlignLastNotSet = 0,
        styleTextAlignLastLeft = 1,
        styleTextAlignLastCenter = 2,
        styleTextAlignLastRight = 3,
        styleTextAlignLastJustify = 4,
        styleTextAlignLastAuto = 5,
        styleTextAlignLast_Max = 2147483647L
    } styleTextAlignLast;
typedef
enum _styleTextJustifyTrim
    {
        styleTextJustifyTrimNotSet = 0,
        styleTextJustifyTrimNone = 1,
        styleTextJustifyTrimPunctuation = 2,
        styleTextJustifyTrimPunctAndKana = 3,
        styleTextJustifyTrim_Max = 2147483647L
    } styleTextJustifyTrim;
typedef
enum _styleAccelerator
    {
        styleAcceleratorFalse = 0,
        styleAcceleratorTrue = 1,
        styleAccelerator_Max = 2147483647L
    } styleAccelerator;
typedef
enum _styleLayoutFlow
    {
        styleLayoutFlowHorizontal = 0,
        styleLayoutFlowVerticalIdeographic = 1,
        styleLayoutFlowNotSet = 2,
        styleLayoutFlow_Max = 2147483647L
    } styleLayoutFlow;
typedef
enum _styleBlockProgression
    {
        styleBlockProgressionTb = 0,
        styleBlockProgressionRl = 1,
        styleBlockProgressionBt = 2,
        styleBlockProgressionLr = 3,
        styleBlockProgressionNotSet = 4,
        styleBlockProgression_Max = 2147483647L
    } styleBlockProgression;
typedef
enum _styleWritingMode
    {
        styleWritingModeLrtb = 0,
        styleWritingModeTbrl = 1,
        styleWritingModeRltb = 2,
        styleWritingModeBtrl = 3,
        styleWritingModeNotSet = 4,
        styleWritingModeTblr = 5,
        styleWritingModeBtlr = 6,
        styleWritingModeLrbt = 7,
        styleWritingModeRlbt = 8,
        styleWritingModeLr = 9,
        styleWritingModeRl = 10,
        styleWritingModeTb = 11,
        styleWritingMode_Max = 2147483647L
    } styleWritingMode;
typedef
enum _styleBool
    {
        styleBoolFalse = 0,
        styleBoolTrue = 1,
        styleBool_Max = 2147483647L
    } styleBool;
typedef
enum _styleTextUnderlinePosition
    {
        styleTextUnderlinePositionBelow = 0,
        styleTextUnderlinePositionAbove = 1,
        styleTextUnderlinePositionAuto = 2,
        styleTextUnderlinePositionNotSet = 3,
        styleTextUnderlinePosition_Max = 2147483647L
    } styleTextUnderlinePosition;
typedef
enum _styleTextOverflow
    {
        styleTextOverflowClip = 0,
        styleTextOverflowEllipsis = 1,
        styleTextOverflowNotSet = 2,
        styleTextOverflow_Max = 2147483647L
    } styleTextOverflow;
typedef
enum _styleInterpolation
    {
        styleInterpolationNotSet = 0,
        styleInterpolationNN = 1,
        styleInterpolationBCH = 2,
        styleInterpolation_Max = 2147483647L
    } styleInterpolation;
typedef
enum _styleBoxSizing
    {
        styleBoxSizingNotSet = 0,
        styleBoxSizingContentBox = 1,
        styleBoxSizingBorderBox = 2,
        styleBoxSizing_Max = 2147483647L
    } styleBoxSizing;
typedef
enum _styleFlex
    {
        styleFlexNone = 0,
        styleFlexNotSet = 1,
        styleFlex_Max = 2147483647L
    } styleFlex;
typedef
enum _styleFlexBasis
    {
        styleFlexBasisAuto = 0,
        styleFlexBasisNotSet = 1,
        styleFlexBasis_Max = 2147483647L
    } styleFlexBasis;
typedef
enum _styleFlexDirection
    {
        styleFlexDirectionRow = 0,
        styleFlexDirectionRowReverse = 1,
        styleFlexDirectionColumn = 2,
        styleFlexDirectionColumnReverse = 3,
        styleFlexDirectionNotSet = 4,
        styleFlexDirection_Max = 2147483647L
    } styleFlexDirection;
typedef
enum _styleWebkitBoxOrient
    {
        styleWebkitBoxOrientHorizontal = 0,
        styleWebkitBoxOrientInlineAxis = 1,
        styleWebkitBoxOrientVertical = 2,
        styleWebkitBoxOrientBlockAxis = 3,
        styleWebkitBoxOrientNotSet = 4,
        styleWebkitBoxOrient_Max = 2147483647L
    } styleWebkitBoxOrient;
typedef
enum _styleWebkitBoxDirection
    {
        styleWebkitBoxDirectionNormal = 0,
        styleWebkitBoxDirectionReverse = 1,
        styleWebkitBoxDirectionNotSet = 2,
        styleWebkitBoxDirection_Max = 2147483647L
    } styleWebkitBoxDirection;
typedef
enum _styleFlexWrap
    {
        styleFlexWrapNowrap = 0,
        styleFlexWrapWrap = 1,
        styleFlexWrapWrapReverse = 2,
        styleFlexWrapNotSet = 3,
        styleFlexWrap_Max = 2147483647L
    } styleFlexWrap;
typedef
enum _styleAlignItems
    {
        styleAlignItemsFlexStart = 0,
        styleAlignItemsFlexEnd = 1,
        styleAlignItemsCenter = 2,
        styleAlignItemsBaseline = 3,
        styleAlignItemsStretch = 4,
        styleAlignItemsNotSet = 5,
        styleAlignItems_Max = 2147483647L
    } styleAlignItems;
typedef
enum _styleMsFlexAlign
    {
        styleMsFlexAlignStart = 0,
        styleMsFlexAlignEnd = 1,
        styleMsFlexAlignCenter = 2,
        styleMsFlexAlignBaseline = 3,
        styleMsFlexAlignStretch = 4,
        styleMsFlexAlignNotSet = 5,
        styleMsFlexAlign_Max = 2147483647L
    } styleMsFlexAlign;
typedef
enum _styleMsFlexItemAlign
    {
        styleMsFlexItemAlignStart = 0,
        styleMsFlexItemAlignEnd = 1,
        styleMsFlexItemAlignCenter = 2,
        styleMsFlexItemAlignBaseline = 3,
        styleMsFlexItemAlignStretch = 4,
        styleMsFlexItemAlignAuto = 5,
        styleMsFlexItemAlignNotSet = 6,
        styleMsFlexItemAlign_Max = 2147483647L
    } styleMsFlexItemAlign;
typedef
enum _styleAlignSelf
    {
        styleAlignSelfFlexStart = 0,
        styleAlignSelfFlexEnd = 1,
        styleAlignSelfCenter = 2,
        styleAlignSelfBaseline = 3,
        styleAlignSelfStretch = 4,
        styleAlignSelfAuto = 5,
        styleAlignSelfNotSet = 6,
        styleAlignSelf_Max = 2147483647L
    } styleAlignSelf;
typedef
enum _styleJustifyContent
    {
        styleJustifyContentFlexStart = 0,
        styleJustifyContentFlexEnd = 1,
        styleJustifyContentCenter = 2,
        styleJustifyContentSpaceBetween = 3,
        styleJustifyContentSpaceAround = 4,
        styleJustifyContentNotSet = 5,
        styleJustifyContent_Max = 2147483647L
    } styleJustifyContent;
typedef
enum _styleMsFlexPack
    {
        styleMsFlexPackStart = 0,
        styleMsFlexPackEnd = 1,
        styleMsFlexPackCenter = 2,
        styleMsFlexPackJustify = 3,
        styleMsFlexPackDistribute = 4,
        styleMsFlexPackNotSet = 5,
        styleMsFlexPack_Max = 2147483647L
    } styleMsFlexPack;
typedef
enum _styleWebkitBoxPack
    {
        styleWebkitBoxPackStart = 0,
        styleWebkitBoxPackEnd = 1,
        styleWebkitBoxPackCenter = 2,
        styleWebkitBoxPackJustify = 3,
        styleWebkitBoxPackNotSet = 5,
        styleWebkitBoxPack_Max = 2147483647L
    } styleWebkitBoxPack;
typedef
enum _styleMsFlexLinePack
    {
        styleMsFlexLinePackStart = 0,
        styleMsFlexLinePackEnd = 1,
        styleMsFlexLinePackCenter = 2,
        styleMsFlexLinePackJustify = 3,
        styleMsFlexLinePackDistribute = 4,
        styleMsFlexLinePackStretch = 5,
        styleMsFlexLinePackNotSet = 6,
        styleMsFlexLinePack_Max = 2147483647L
    } styleMsFlexLinePack;
typedef
enum _styleAlignContent
    {
        styleAlignContentFlexStart = 0,
        styleAlignContentFlexEnd = 1,
        styleAlignContentCenter = 2,
        styleAlignContentSpaceBetween = 3,
        styleAlignContentSpaceAround = 4,
        styleAlignContentStretch = 5,
        styleAlignContentNotSet = 6,
        styleAlignContent_Max = 2147483647L
    } styleAlignContent;
typedef
enum _styleColumnFill
    {
        styleColumnFillAuto = 0,
        styleColumnFillBalance = 1,
        styleColumnFillNotSet = 2,
        styleColumnFill_Max = 2147483647L
    } styleColumnFill;
typedef
enum _styleColumnSpan
    {
        styleColumnSpanNone = 0,
        styleColumnSpanAll = 1,
        styleColumnSpanOne = 2,
        styleColumnSpanNotSet = 3,
        styleColumnSpan_Max = 2147483647L
    } styleColumnSpan;
typedef
enum _styleBreak
    {
        styleBreakNotSet = 0,
        styleBreakAuto = 1,
        styleBreakAlways = 2,
        styleBreakAvoid = 3,
        styleBreakLeft = 4,
        styleBreakRight = 5,
        styleBreakPage = 6,
        styleBreakColumn = 7,
        styleBreakAvoidPage = 8,
        styleBreakAvoidColumn = 9,
        styleBreak_Max = 2147483647L
    } styleBreak;
typedef
enum _styleBreakInside
    {
        styleBreakInsideNotSet = 0,
        styleBreakInsideAuto = 1,
        styleBreakInsideAvoid = 2,
        styleBreakInsideAvoidPage = 3,
        styleBreakInsideAvoidColumn = 4,
        styleBreakInside_Max = 2147483647L
    } styleBreakInside;
typedef
enum _styleMsScrollChaining
    {
        styleMsScrollChainingNotSet = 0,
        styleMsScrollChainingNone = 1,
        styleMsScrollChainingChained = 2,
        styleMsScrollChaining_Max = 2147483647L
    } styleMsScrollChaining;
typedef
enum _styleMsContentZooming
    {
        styleMsContentZoomingNotSet = 0,
        styleMsContentZoomingNone = 1,
        styleMsContentZoomingZoom = 2,
        styleMsContentZooming_Max = 2147483647L
    } styleMsContentZooming;
typedef
enum _styleMsContentZoomSnapType
    {
        styleMsContentZoomSnapTypeNotSet = 0,
        styleMsContentZoomSnapTypeNone = 1,
        styleMsContentZoomSnapTypeMandatory = 2,
        styleMsContentZoomSnapTypeProximity = 3,
        styleMsContentZoomSnapType_Max = 2147483647L
    } styleMsContentZoomSnapType;
typedef
enum _styleMsScrollRails
    {
        styleMsScrollRailsNotSet = 0,
        styleMsScrollRailsNone = 1,
        styleMsScrollRailsRailed = 2,
        styleMsScrollRails_Max = 2147483647L
    } styleMsScrollRails;
typedef
enum _styleMsContentZoomChaining
    {
        styleMsContentZoomChainingNotSet = 0,
        styleMsContentZoomChainingNone = 1,
        styleMsContentZoomChainingChained = 2,
        styleMsContentZoomChaining_Max = 2147483647L
    } styleMsContentZoomChaining;
typedef
enum _styleMsScrollSnapType
    {
        styleMsScrollSnapTypeNotSet = 0,
        styleMsScrollSnapTypeNone = 1,
        styleMsScrollSnapTypeMandatory = 2,
        styleMsScrollSnapTypeProximity = 3,
        styleMsScrollSnapType_Max = 2147483647L
    } styleMsScrollSnapType;
typedef
enum _styleGridColumn
    {
        styleGridColumnNotSet = 0,
        styleGridColumn_Max = 2147483647L
    } styleGridColumn;
typedef
enum _styleGridColumnAlign
    {
        styleGridColumnAlignCenter = 0,
        styleGridColumnAlignEnd = 1,
        styleGridColumnAlignStart = 2,
        styleGridColumnAlignStretch = 3,
        styleGridColumnAlignNotSet = 4,
        styleGridColumnAlign_Max = 2147483647L
    } styleGridColumnAlign;
typedef
enum _styleGridColumnSpan
    {
        styleGridColumnSpanNotSet = 0,
        styleGridColumnSpan_Max = 2147483647L
    } styleGridColumnSpan;
typedef
enum _styleGridRow
    {
        styleGridRowNotSet = 0,
        styleGridRow_Max = 2147483647L
    } styleGridRow;
typedef
enum _styleGridRowAlign
    {
        styleGridRowAlignCenter = 0,
        styleGridRowAlignEnd = 1,
        styleGridRowAlignStart = 2,
        styleGridRowAlignStretch = 3,
        styleGridRowAlignNotSet = 4,
        styleGridRowAlign_Max = 2147483647L
    } styleGridRowAlign;
typedef
enum _styleGridRowSpan
    {
        styleGridRowSpanNotSet = 0,
        styleGridRowSpan_Max = 2147483647L
    } styleGridRowSpan;
typedef
enum _styleWrapThrough
    {
        styleWrapThroughNotSet = 0,
        styleWrapThroughWrap = 1,
        styleWrapThroughNone = 2,
        styleWrapThrough_Max = 2147483647L
    } styleWrapThrough;
typedef
enum _styleWrapFlow
    {
        styleWrapFlowNotSet = 0,
        styleWrapFlowAuto = 1,
        styleWrapFlowBoth = 2,
        styleWrapFlowStart = 3,
        styleWrapFlowEnd = 4,
        styleWrapFlowClear = 5,
        styleWrapFlowMinimum = 6,
        styleWrapFlowMaximum = 7,
        styleWrapFlow_Max = 2147483647L
    } styleWrapFlow;
typedef
enum _styleAlignmentBaseline
    {
        styleAlignmentBaselineNotSet = 0,
        styleAlignmentBaselineAfterEdge = 1,
        styleAlignmentBaselineAlphabetic = 2,
        styleAlignmentBaselineAuto = 3,
        styleAlignmentBaselineBaseline = 4,
        styleAlignmentBaselineBeforeEdge = 5,
        styleAlignmentBaselineCentral = 6,
        styleAlignmentBaselineHanging = 7,
        styleAlignmentBaselineMathematical = 8,
        styleAlignmentBaselineMiddle = 9,
        styleAlignmentBaselineTextAfterEdge = 10,
        styleAlignmentBaselineTextBeforeEdge = 11,
        styleAlignmentBaselineIdeographic = 12,
        styleAlignmentBaseline_Max = 2147483647L
    } styleAlignmentBaseline;
typedef
enum _styleBaselineShift
    {
        styleBaselineShiftBaseline = 0,
        styleBaselineShiftSub = 1,
        styleBaselineShiftSuper = 2,
        styleBaselineShift_Max = 2147483647L
    } styleBaselineShift;
typedef
enum _styleClipRule
    {
        styleClipRuleNotSet = 0,
        styleClipRuleNonZero = 1,
        styleClipRuleEvenOdd = 2,
        styleClipRule_Max = 2147483647L
    } styleClipRule;
typedef
enum _styleDominantBaseline
    {
        styleDominantBaselineNotSet = 0,
        styleDominantBaselineAlphabetic = 1,
        styleDominantBaselineAuto = 2,
        styleDominantBaselineCentral = 3,
        styleDominantBaselineHanging = 4,
        styleDominantBaselineIdeographic = 5,
        styleDominantBaselineMathematical = 6,
        styleDominantBaselineMiddle = 7,
        styleDominantBaselineNoChange = 8,
        styleDominantBaselineResetSize = 9,
        styleDominantBaselineTextAfterEdge = 10,
        styleDominantBaselineTextBeforeEdge = 11,
        styleDominantBaselineUseScript = 12,
        styleDominantBaseline_Max = 2147483647L
    } styleDominantBaseline;
typedef
enum _styleFillRule
    {
        styleFillRuleNotSet = 0,
        styleFillRuleNonZero = 1,
        styleFillRuleEvenOdd = 2,
        styleFillRule_Max = 2147483647L
    } styleFillRule;
typedef
enum _styleFontStretch
    {
        styleFontStretchNotSet = 0,
        styleFontStretchWider = 1,
        styleFontStretchNarrower = 2,
        styleFontStretchUltraCondensed = 3,
        styleFontStretchExtraCondensed = 4,
        styleFontStretchCondensed = 5,
        styleFontStretchSemiCondensed = 6,
        styleFontStretchNormal = 7,
        styleFontStretchSemiExpanded = 8,
        styleFontStretchExpanded = 9,
        styleFontStretchExtraExpanded = 10,
        styleFontStretchUltraExpanded = 11,
        styleFontStretch_Max = 2147483647L
    } styleFontStretch;
typedef
enum _stylePointerEvents
    {
        stylePointerEventsNotSet = 0,
        stylePointerEventsVisiblePainted = 1,
        stylePointerEventsVisibleFill = 2,
        stylePointerEventsVisibleStroke = 3,
        stylePointerEventsVisible = 4,
        stylePointerEventsPainted = 5,
        stylePointerEventsFill = 6,
        stylePointerEventsStroke = 7,
        stylePointerEventsAll = 8,
        stylePointerEventsNone = 9,
        stylePointerEventsInitial = 10,
        stylePointerEventsAuto = 11,
        stylePointerEvents_Max = 2147483647L
    } stylePointerEvents;
typedef
enum _styleEnableBackground
    {
        styleEnableBackgroundNotSet = 0,
        styleEnableBackgroundAccumulate = 1,
        styleEnableBackgroundNew = 2,
        styleEnableBackgroundInherit = 3,
        styleEnableBackground_Max = 2147483647L
    } styleEnableBackground;
typedef
enum _styleStrokeLinecap
    {
        styleStrokeLinecapNotSet = 0,
        styleStrokeLinecapButt = 1,
        styleStrokeLinecapRound = 2,
        styleStrokeLinecapSquare = 3,
        styleStrokeLinecap_Max = 2147483647L
    } styleStrokeLinecap;
typedef
enum _styleStrokeLinejoin
    {
        styleStrokeLinejoinNotSet = 0,
        styleStrokeLinejoinMiter = 1,
        styleStrokeLinejoinRound = 2,
        styleStrokeLinejoinBevel = 3,
        styleStrokeLinejoin_Max = 2147483647L
    } styleStrokeLinejoin;
typedef
enum _styleTextAnchor
    {
        styleTextAnchorNotSet = 0,
        styleTextAnchorStart = 1,
        styleTextAnchorMiddle = 2,
        styleTextAnchorEnd = 3,
        styleTextAnchor_Max = 2147483647L
    } styleTextAnchor;
typedef
enum _styleAttrType
    {
        styleAttrTypeString = 0,
        styleAttrTypeColor = 1,
        styleAttrTypeUrl = 2,
        styleAttrTypeInteger = 3,
        styleAttrTypeNumber = 4,
        styleAttrTypeLength = 5,
        styleAttrTypePx = 6,
        styleAttrTypeEm = 7,
        styleAttrTypeEx = 8,
        styleAttrTypeIn = 9,
        styleAttrTypeCm = 10,
        styleAttrTypeMm = 11,
        styleAttrTypePt = 12,
        styleAttrTypePc = 13,
        styleAttrTypeRem = 14,
        styleAttrTypeCh = 15,
        styleAttrTypeVh = 16,
        styleAttrTypeVw = 17,
        styleAttrTypeVmin = 18,
        styleAttrTypePercentage = 19,
        styleAttrTypeAngle = 20,
        styleAttrTypeDeg = 21,
        styleAttrTypeRad = 22,
        styleAttrTypeGrad = 23,
        styleAttrTypeTime = 24,
        styleAttrTypeS = 25,
        styleAttrTypeMs = 26,
        styleAttrType_Max = 2147483647L
    } styleAttrType;
typedef
enum _styleInitialColor
    {
        styleInitialColorNoInitial = 0,
        styleInitialColorColorProperty = 1,
        styleInitialColorTransparent = 2,
        styleInitialColorInvert = 3,
        styleInitialColor_Max = 2147483647L
    } styleInitialColor;
typedef
enum _styleInitialString
    {
        styleInitialStringNoInitial = 0,
        styleInitialStringNone = 1,
        styleInitialStringAuto = 2,
        styleInitialStringNormal = 3,
        styleInitialString_Max = 2147483647L
    } styleInitialString;
typedef
enum _styleTransformOriginX
    {
        styleTransformOriginXNotSet = 0,
        styleTransformOriginXLeft = 1,
        styleTransformOriginXCenter = 2,
        styleTransformOriginXRight = 3,
        styleTransformOriginX_Max = 2147483647L
    } styleTransformOriginX;
typedef
enum _styleTransformOriginY
    {
        styleTransformOriginYNotSet = 0,
        styleTransformOriginYTop = 1,
        styleTransformOriginYCenter = 2,
        styleTransformOriginYBottom = 3,
        styleTransformOriginY_Max = 2147483647L
    } styleTransformOriginY;
typedef
enum _stylePerspectiveOriginX
    {
        stylePerspectiveOriginXNotSet = 0,
        stylePerspectiveOriginXLeft = 1,
        stylePerspectiveOriginXCenter = 2,
        stylePerspectiveOriginXRight = 3,
        stylePerspectiveOriginX_Max = 2147483647L
    } stylePerspectiveOriginX;
typedef
enum _stylePerspectiveOriginY
    {
        stylePerspectiveOriginYNotSet = 0,
        stylePerspectiveOriginYTop = 1,
        stylePerspectiveOriginYCenter = 2,
        stylePerspectiveOriginYBottom = 3,
        stylePerspectiveOriginY_Max = 2147483647L
    } stylePerspectiveOriginY;
typedef
enum _styleTransformStyle
    {
        styleTransformStyleFlat = 0,
        styleTransformStylePreserve3D = 1,
        styleTransformStyleNotSet = 2,
        styleTransformStyle_Max = 2147483647L
    } styleTransformStyle;
typedef
enum _styleBackfaceVisibility
    {
        styleBackfaceVisibilityVisible = 0,
        styleBackfaceVisibilityHidden = 1,
        styleBackfaceVisibilityNotSet = 2,
        styleBackfaceVisibility_Max = 2147483647L
    } styleBackfaceVisibility;
typedef
enum _styleTextSizeAdjust
    {
        styleTextSizeAdjustNone = 0,
        styleTextSizeAdjustAuto = 1,
        styleTextSizeAdjust_Max = 2147483647L
    } styleTextSizeAdjust;
typedef
enum _styleColorInterpolationFilters
    {
        styleColorInterpolationFiltersAuto = 0,
        styleColorInterpolationFiltersSRgb = 1,
        styleColorInterpolationFiltersLinearRgb = 2,
        styleColorInterpolationFiltersNotSet = 3,
        styleColorInterpolationFilters_Max = 2147483647L
    } styleColorInterpolationFilters;
typedef
enum _styleHyphens
    {
        styleHyphensNone = 0,
        styleHyphensManual = 1,
        styleHyphensAuto = 2,
        styleHyphensNotSet = 3,
        styleHyphens_Max = 2147483647L
    } styleHyphens;
typedef
enum _styleHyphenateLimitLines
    {
        styleHyphenateLimitLinesNoLimit = 0,
        styleHyphenateLimitLines_Max = 2147483647L
    } styleHyphenateLimitLines;
typedef
enum _styleMsAnimationPlayState
    {
        styleMsAnimationPlayStateRunning = 0,
        styleMsAnimationPlayStatePaused = 1,
        styleMsAnimationPlayStateNotSet = 2,
        styleMsAnimationPlayState_Max = 2147483647L
    } styleMsAnimationPlayState;
typedef
enum _styleMsAnimationDirection
    {
        styleMsAnimationDirectionNormal = 0,
        styleMsAnimationDirectionAlternate = 1,
        styleMsAnimationDirectionReverse = 2,
        styleMsAnimationDirectionAlternateReverse = 3,
        styleMsAnimationDirectionNotSet = 4,
        styleMsAnimationDirection_Max = 2147483647L
    } styleMsAnimationDirection;
typedef
enum _styleMsAnimationFillMode
    {
        styleMsAnimationFillModeNone = 0,
        styleMsAnimationFillModeForwards = 1,
        styleMsAnimationFillModeBackwards = 2,
        styleMsAnimationFillModeBoth = 3,
        styleMsAnimationFillModeNotSet = 4,
        styleMsAnimationFillMode_Max = 2147483647L
    } styleMsAnimationFillMode;
typedef
enum _styleMsHighContrastAdjust
    {
        styleMsHighContrastAdjustNotSet = 0,
        styleMsHighContrastAdjustAuto = 1,
        styleMsHighContrastAdjustNone = 2,
        styleMsHighContrastAdjust_Max = 2147483647L
    } styleMsHighContrastAdjust;
typedef
enum _styleMsUserSelect
    {
        styleMsUserSelectAuto = 0,
        styleMsUserSelectText = 1,
        styleMsUserSelectElement = 2,
        styleMsUserSelectNone = 3,
        styleMsUserSelectNotSet = 4,
        styleMsUserSelect_Max = 2147483647L
    } styleMsUserSelect;
typedef
enum _styleMsTouchAction
    {
        styleMsTouchActionNotSet = -1,
        styleMsTouchActionNone = 0,
        styleMsTouchActionAuto = 1,
        styleMsTouchActionManipulation = 2,
        styleMsTouchActionDoubleTapZoom = 4,
        styleMsTouchActionPanX = 8,
        styleMsTouchActionPanY = 16,
        styleMsTouchActionPinchZoom = 32,
        styleMsTouchActionCrossSlideX = 64,
        styleMsTouchActionCrossSlideY = 128,
        styleMsTouchAction_Max = 2147483647L
    } styleMsTouchAction;
typedef
enum _styleMsTouchSelect
    {
        styleMsTouchSelectGrippers = 0,
        styleMsTouchSelectNone = 1,
        styleMsTouchSelectNotSet = 2,
        styleMsTouchSelect_Max = 2147483647L
    } styleMsTouchSelect;
typedef
enum _styleMsScrollTranslation
    {
        styleMsScrollTranslationNotSet = 0,
        styleMsScrollTranslationNone = 1,
        styleMsScrollTranslationVtoH = 2,
        styleMsScrollTranslation_Max = 2147483647L
    } styleMsScrollTranslation;
typedef
enum _styleBorderImageRepeat
    {
        styleBorderImageRepeatStretch = 0,
        styleBorderImageRepeatRepeat = 1,
        styleBorderImageRepeatRound = 2,
        styleBorderImageRepeatSpace = 3,
        styleBorderImageRepeatNotSet = 4,
        styleBorderImageRepeat_Max = 2147483647L
    } styleBorderImageRepeat;
typedef
enum _styleBorderImageSliceFill
    {
        styleBorderImageSliceFillNotSet = 0,
        styleBorderImageSliceFillFill = 1,
        styleBorderImageSliceFill_Max = 2147483647L
    } styleBorderImageSliceFill;
typedef
enum _styleMsImeAlign
    {
        styleMsImeAlignAuto = 0,
        styleMsImeAlignAfter = 1,
        styleMsImeAlignNotSet = 2,
        styleMsImeAlign_Max = 2147483647L
    } styleMsImeAlign;
typedef
enum _styleMsTextCombineHorizontal
    {
        styleMsTextCombineHorizontalNone = 0,
        styleMsTextCombineHorizontalAll = 1,
        styleMsTextCombineHorizontalDigits = 2,
        styleMsTextCombineHorizontalNotSet = 3,
        styleMsTextCombineHorizontal_Max = 2147483647L
    } styleMsTextCombineHorizontal;
typedef
enum _styleWebkitAppearance
    {
        styleWebkitAppearanceNone = 0,
        styleWebkitAppearanceCapsLockIndicator = 1,
        styleWebkitAppearanceButton = 2,
        styleWebkitAppearanceButtonBevel = 3,
        styleWebkitAppearanceCaret = 4,
        styleWebkitAppearanceCheckbox = 5,
        styleWebkitAppearanceDefaultButton = 6,
        styleWebkitAppearanceListbox = 7,
        styleWebkitAppearanceListitem = 8,
        styleWebkitAppearanceMediaFullscreenButton = 9,
        styleWebkitAppearanceMediaMuteButton = 10,
        styleWebkitAppearanceMediaPlayButton = 11,
        styleWebkitAppearanceMediaSeekBackButton = 12,
        styleWebkitAppearanceMediaSeekForwardButton = 13,
        styleWebkitAppearanceMediaSlider = 14,
        styleWebkitAppearanceMediaSliderthumb = 15,
        styleWebkitAppearanceMenulist = 16,
        styleWebkitAppearanceMenulistButton = 17,
        styleWebkitAppearanceMenulistText = 18,
        styleWebkitAppearanceMenulistTextfield = 19,
        styleWebkitAppearancePushButton = 20,
        styleWebkitAppearanceRadio = 21,
        styleWebkitAppearanceSearchfield = 22,
        styleWebkitAppearanceSearchfieldCancelButton = 23,
        styleWebkitAppearanceSearchfieldDecoration = 24,
        styleWebkitAppearanceSearchfieldResultsButton = 25,
        styleWebkitAppearanceSearchfieldResultsDecoration = 26,
        styleWebkitAppearanceSliderHorizontal = 27,
        styleWebkitAppearanceSliderVertical = 28,
        styleWebkitAppearanceSliderthumbHorizontal = 29,
        styleWebkitAppearanceSliderthumbVertical = 30,
        styleWebkitAppearanceSquareButton = 31,
        styleWebkitAppearanceTextarea = 32,
        styleWebkitAppearanceTextfield = 33,
        styleWebkitAppearanceNotSet = 34,
        styleWebkitAppearance_Max = 2147483647L
    } styleWebkitAppearance;
EXTERN_C const GUID CLSID_CCSSStyleDeclaration;
EXTERN_C const GUID CLSID_CStyle;
EXTERN_C const GUID CLSID_CRuleStyle;
typedef
enum _styleViewportSize
    {
        styleViewportSizeAuto = 0,
        styleViewportSizeDeviceWidth = 1,
        styleViewportSizeDeviceHeight = 2,
        styleViewportSize_Max = 2147483647L
    } styleViewportSize;
typedef
enum _styleUserZoom
    {
        styleUserZoomNotSet = 0,
        styleUserZoomZoom = 1,
        styleUserZoomFixed = 2,
        styleUserZoom_Max = 2147483647L
    } styleUserZoom;
EXTERN_C const GUID CLSID_CCSSRule;
EXTERN_C const GUID CLSID_CCSSImportRule;
EXTERN_C const GUID CLSID_CCSSMediaRule;
EXTERN_C const GUID CLSID_CCSSMediaList;
EXTERN_C const GUID CLSID_CCSSNamespaceRule;
EXTERN_C const GUID CLSID_CMSCSSKeyframeRule;
EXTERN_C const GUID CLSID_CMSCSSKeyframesRule;
typedef
enum _styleTextLineThroughStyle
    {
        styleTextLineThroughStyleUndefined = 0,
        styleTextLineThroughStyleSingle = 1,
        styleTextLineThroughStyleDouble = 2,
        styleTextLineThroughStyle_Max = 2147483647L
    } styleTextLineThroughStyle;
typedef
enum _styleTextUnderlineStyle
    {
        styleTextUnderlineStyleUndefined = 0,
        styleTextUnderlineStyleSingle = 1,
        styleTextUnderlineStyleDouble = 2,
        styleTextUnderlineStyleWords = 3,
        styleTextUnderlineStyleDotted = 4,
        styleTextUnderlineStyleThick = 5,
        styleTextUnderlineStyleDash = 6,
        styleTextUnderlineStyleDotDash = 7,
        styleTextUnderlineStyleDotDotDash = 8,
        styleTextUnderlineStyleWave = 9,
        styleTextUnderlineStyleSingleAccounting = 10,
        styleTextUnderlineStyleDoubleAccounting = 11,
        styleTextUnderlineStyleThickDash = 12,
        styleTextUnderlineStyle_Max = 2147483647L
    } styleTextUnderlineStyle;
typedef
enum _styleTextEffect
    {
        styleTextEffectNone = 0,
        styleTextEffectEmboss = 1,
        styleTextEffectEngrave = 2,
        styleTextEffectOutline = 3,
        styleTextEffect_Max = 2147483647L
    } styleTextEffect;
typedef
enum _styleDefaultTextSelection
    {
        styleDefaultTextSelectionFalse = 0,
        styleDefaultTextSelectionTrue = 1,
        styleDefaultTextSelection_Max = 2147483647L
    } styleDefaultTextSelection;
typedef
enum _styleTextDecoration
    {
        styleTextDecorationNone = 0,
        styleTextDecorationUnderline = 1,
        styleTextDecorationOverline = 2,
        styleTextDecorationLineThrough = 3,
        styleTextDecorationBlink = 4,
        styleTextDecoration_Max = 2147483647L
    } styleTextDecoration;
EXTERN_C const GUID CLSID_CRenderStyle;
typedef
enum _textDecoration
    {
        textDecorationNone = 0,
        textDecorationUnderline = 1,
        textDecorationOverline = 2,
        textDecorationLineThrough = 3,
        textDecorationBlink = 4,
        textDecoration_Max = 2147483647L
    } textDecoration;
EXTERN_C const GUID CLSID_CCurrentStyle;
EXTERN_C const GUID CLSID_CAttribute;
EXTERN_C const GUID CLSID_CDOMTextNode;
EXTERN_C const GUID CLSID_CDOMImplementation;
EXTERN_C const GUID CLSID_CAttrCollectionator;
EXTERN_C const GUID CLSID_CStaticNodeList;
EXTERN_C const GUID CLSID_CDOMChildrenCollection;
typedef
enum _htmlListType
    {
        htmlListTypeNotSet = 0,
        htmlListTypeLargeAlpha = 1,
        htmlListTypeSmallAlpha = 2,
        htmlListTypeLargeRoman = 3,
        htmlListTypeSmallRoman = 4,
        htmlListTypeNumbers = 5,
        htmlListTypeDisc = 6,
        htmlListTypeCircle = 7,
        htmlListTypeSquare = 8,
        htmlListType_Max = 2147483647L
    } htmlListType;
typedef
enum _htmlMethod
    {
        htmlMethodNotSet = 0,
        htmlMethodGet = 1,
        htmlMethodPost = 2,
        htmlMethod_Max = 2147483647L
    } htmlMethod;
typedef
enum _htmlWrap
    {
        htmlWrapOff = 1,
        htmlWrapSoft = 2,
        htmlWrapHard = 3,
        htmlWrap_Max = 2147483647L
    } htmlWrap;
typedef
enum _htmlDir
    {
        htmlDirNotSet = 0,
        htmlDirLeftToRight = 1,
        htmlDirRightToLeft = 2,
        htmlDir_Max = 2147483647L
    } htmlDir;
typedef
enum _htmlEditable
    {
        htmlEditableInherit = 0,
        htmlEditableTrue = 1,
        htmlEditableFalse = 2,
        htmlEditable_Max = 2147483647L
    } htmlEditable;
typedef
enum _htmlInput
    {
        htmlInputNotSet = 0,
        htmlInputButton = 1,
        htmlInputCheckbox = 2,
        htmlInputFile = 3,
        htmlInputHidden = 4,
        htmlInputImage = 5,
        htmlInputPassword = 6,
        htmlInputRadio = 7,
        htmlInputReset = 8,
        htmlInputSelectOne = 9,
        htmlInputSelectMultiple = 10,
        htmlInputSubmit = 11,
        htmlInputText = 12,
        htmlInputTextarea = 13,
        htmlInputRichtext = 14,
        htmlInputRange = 15,
        htmlInputUrl = 16,
        htmlInputEmail = 17,
        htmlInputNumber = 18,
        htmlInputTel = 19,
        htmlInputSearch = 20,
        htmlInput_Max = 2147483647L
    } htmlInput;
typedef
enum _htmlSpellCheck
    {
        htmlSpellCheckNotSet = 0,
        htmlSpellCheckTrue = 1,
        htmlSpellCheckFalse = 2,
        htmlSpellCheckDefault = 3,
        htmlSpellCheck_Max = 2147483647L
    } htmlSpellCheck;
typedef
enum _htmlEncoding
    {
        htmlEncodingURL = 0,
        htmlEncodingMultipart = 1,
        htmlEncodingText = 2,
        htmlEncoding_Max = 2147483647L
    } htmlEncoding;
typedef
enum _htmlAdjacency
    {
        htmlAdjacencyBeforeBegin = 1,
        htmlAdjacencyAfterBegin = 2,
        htmlAdjacencyBeforeEnd = 3,
        htmlAdjacencyAfterEnd = 4,
        htmlAdjacency_Max = 2147483647L
    } htmlAdjacency;
typedef
enum _htmlTabIndex
    {
        htmlTabIndexNotSet = -32768,
        htmlTabIndex_Max = 2147483647L
    } htmlTabIndex;
typedef
enum _htmlComponent
    {
        htmlComponentClient = 0,
        htmlComponentSbLeft = 1,
        htmlComponentSbPageLeft = 2,
        htmlComponentSbHThumb = 3,
        htmlComponentSbPageRight = 4,
        htmlComponentSbRight = 5,
        htmlComponentSbUp = 6,
        htmlComponentSbPageUp = 7,
        htmlComponentSbVThumb = 8,
        htmlComponentSbPageDown = 9,
        htmlComponentSbDown = 10,
        htmlComponentSbLeft2 = 11,
        htmlComponentSbPageLeft2 = 12,
        htmlComponentSbRight2 = 13,
        htmlComponentSbPageRight2 = 14,
        htmlComponentSbUp2 = 15,
        htmlComponentSbPageUp2 = 16,
        htmlComponentSbDown2 = 17,
        htmlComponentSbPageDown2 = 18,
        htmlComponentSbTop = 19,
        htmlComponentSbBottom = 20,
        htmlComponentOutside = 21,
        htmlComponentGHTopLeft = 22,
        htmlComponentGHLeft = 23,
        htmlComponentGHTop = 24,
        htmlComponentGHBottomLeft = 25,
        htmlComponentGHTopRight = 26,
        htmlComponentGHBottom = 27,
        htmlComponentGHRight = 28,
        htmlComponentGHBottomRight = 29,
        htmlComponent_Max = 2147483647L
    } htmlComponent;
typedef
enum _htmlApplyLocation
    {
        htmlApplyLocationInside = 0,
        htmlApplyLocationOutside = 1,
        htmlApplyLocation_Max = 2147483647L
    } htmlApplyLocation;
typedef
enum _htmlGlyphMode
    {
        htmlGlyphModeNone = 0,
        htmlGlyphModeBegin = 1,
        htmlGlyphModeEnd = 2,
        htmlGlyphModeBoth = 3,
        htmlGlyphMode_Max = 2147483647L
    } htmlGlyphMode;
typedef
enum _htmlDraggable
    {
        htmlDraggableAuto = 0,
        htmlDraggableTrue = 1,
        htmlDraggableFalse = 2,
        htmlDraggable_Max = 2147483647L
    } htmlDraggable;
EXTERN_C const GUID CLSID_CDefaults;
EXTERN_C const GUID CLSID_CHtmlComponentDD;
EXTERN_C const GUID CLSID_CHtmlComponentProperty;
EXTERN_C const GUID CLSID_CHtmlComponentMethod;
EXTERN_C const GUID CLSID_CHtmlComponentEvent;
EXTERN_C const GUID CLSID_CHtmlComponentAttach;
EXTERN_C const GUID CLSID_CHtmlComponentDesc;
EXTERN_C const GUID CLSID_CPeerUrnCollection;
EXTERN_C const GUID CLSID_CGenericElement;
EXTERN_C const GUID CLSID_CStyleSheetRule;
EXTERN_C const GUID CLSID_CStyleSheetRuleArray;
EXTERN_C const GUID CLSID_CStyleSheetPage;
EXTERN_C const GUID CLSID_CStyleSheetPageArray;
EXTERN_C const GUID CLSID_CStyleSheet;
EXTERN_C const GUID CLSID_CStyleSheetArray;
EXTERN_C const GUID CLSID_CLinkElement;
typedef
enum _htmlUnit
    {
        htmlUnitCharacter = 1,
        htmlUnitWord = 2,
        htmlUnitSentence = 3,
        htmlUnitTextEdit = 6,
        htmlUnit_Max = 2147483647L
    } htmlUnit;
typedef
enum _htmlEndPoints
    {
        htmlEndPointsStartToStart = 1,
        htmlEndPointsStartToEnd = 2,
        htmlEndPointsEndToStart = 3,
        htmlEndPointsEndToEnd = 4,
        htmlEndPoints_Max = 2147483647L
    } htmlEndPoints;
typedef
enum _htmlDirection
    {
        htmlDirectionForward = 99999,
        htmlDirectionBackward = -99999,
        htmlDirection_Max = 2147483647L
    } htmlDirection;
EXTERN_C const GUID CLSID_CDomRange;
EXTERN_C const GUID CLSID_CFormElement;
typedef
enum _htmlStart
    {
        htmlStartfileopen = 0,
        htmlStartmouseover = 1,
        htmlStart_Max = 2147483647L
    } htmlStart;
EXTERN_C const GUID CLSID_CTextElement;
EXTERN_C const GUID CLSID_CImgElement;
EXTERN_C const GUID CLSID_CImageElementFactory;
typedef
enum _bodyScroll
    {
        bodyScrollyes = 1,
        bodyScrollno = 2,
        bodyScrollauto = 4,
        bodyScrolldefault = 3,
        bodyScroll_Max = 2147483647L
    } bodyScroll;
EXTERN_C const GUID CLSID_CBodyElement;
EXTERN_C const GUID CLSID_CFontElement;
EXTERN_C const GUID CLSID_CAnchorElement;
EXTERN_C const GUID CLSID_CLabelElement;
EXTERN_C const GUID CLSID_CListElement;
EXTERN_C const GUID CLSID_CUListElement;
EXTERN_C const GUID CLSID_COListElement;
EXTERN_C const GUID CLSID_CLIElement;
EXTERN_C const GUID CLSID_CBlockElement;
EXTERN_C const GUID CLSID_CDivElement;
EXTERN_C const GUID CLSID_CDDElement;
EXTERN_C const GUID CLSID_CDTElement;
EXTERN_C const GUID CLSID_CBRElement;
EXTERN_C const GUID CLSID_CDListElement;
EXTERN_C const GUID CLSID_CHRElement;
EXTERN_C const GUID CLSID_CParaElement;
EXTERN_C const GUID CLSID_CElementCollection;
EXTERN_C const GUID CLSID_CHeaderElement;
typedef
enum _htmlSelectType
    {
        htmlSelectTypeSelectOne = 1,
        htmlSelectTypeSelectMultiple = 2,
        htmlSelectType_Max = 2147483647L
    } htmlSelectType;
typedef
enum _htmlSelectExFlag
    {
        htmlSelectExFlagNone = 0,
        htmlSelectExFlagHideSelectionInDesign = 0x1,
        htmlSelectExFlag_Max = 2147483647L
    } htmlSelectExFlag;
EXTERN_C const GUID CLSID_CSelectElement;
EXTERN_C const GUID CLSID_CWndSelectElement;
typedef
enum _htmlSelection
    {
        htmlSelectionNone = 0,
        htmlSelectionText = 1,
        htmlSelectionControl = 2,
        htmlSelectionTable = 3,
        htmlSelection_Max = 2147483647L
    } htmlSelection;
EXTERN_C const GUID CLSID_COptionElement;
EXTERN_C const GUID CLSID_COptionElementFactory;
EXTERN_C const GUID CLSID_CWndOptionElement;
EXTERN_C const GUID CLSID_CInput;
EXTERN_C const GUID CLSID_CTextArea;
EXTERN_C const GUID CLSID_CRichtext;
EXTERN_C const GUID CLSID_CButton;
typedef
enum _htmlMarqueeBehavior
    {
        htmlMarqueeBehaviorscroll = 1,
        htmlMarqueeBehaviorslide = 2,
        htmlMarqueeBehavioralternate = 3,
        htmlMarqueeBehavior_Max = 2147483647L
    } htmlMarqueeBehavior;
typedef
enum _htmlMarqueeDirection
    {
        htmlMarqueeDirectionleft = 1,
        htmlMarqueeDirectionright = 3,
        htmlMarqueeDirectionup = 5,
        htmlMarqueeDirectiondown = 7,
        htmlMarqueeDirection_Max = 2147483647L
    } htmlMarqueeDirection;
EXTERN_C const GUID CLSID_CMarquee;
EXTERN_C const GUID CLSID_CHtmlElement;
EXTERN_C const GUID CLSID_CHeadElement;
EXTERN_C const GUID CLSID_CTitleElement;
EXTERN_C const GUID CLSID_CMetaElement;
EXTERN_C const GUID CLSID_CBaseElement;
EXTERN_C const GUID CLSID_CIsIndexElement;
EXTERN_C const GUID CLSID_CNextIdElement;
EXTERN_C const GUID CLSID_CBaseFontElement;
EXTERN_C const GUID CLSID_CUnknownElement;
EXTERN_C const GUID CLSID_COmHistory;
EXTERN_C const GUID CLSID_COpsProfile;
EXTERN_C const GUID CLSID_COmNavigator;
EXTERN_C const GUID CLSID_COmLocation;
EXTERN_C const GUID CLSID_CMimeTypes;
EXTERN_C const GUID CLSID_CPlugins;
typedef
enum _htmlPersistState
    {
        htmlPersistStateNormal = 0,
        htmlPersistStateFavorite = 1,
        htmlPersistStateHistory = 2,
        htmlPersistStateSnapshot = 3,
        htmlPersistStateUserData = 4,
        htmlPersistState_Max = 2147483647L
    } htmlPersistState;
typedef
enum _htmlDropEffect
    {
        htmlDropEffectCopy = 0,
        htmlDropEffectLink = 1,
        htmlDropEffectMove = 2,
        htmlDropEffectNone = 3,
        htmlDropEffect_Max = 2147483647L
    } htmlDropEffect;
typedef
enum _htmlEffectAllowed
    {
        htmlEffectAllowedCopy = 0,
        htmlEffectAllowedLink = 1,
        htmlEffectAllowedMove = 2,
        htmlEffectAllowedCopyLink = 3,
        htmlEffectAllowedCopyMove = 4,
        htmlEffectAllowedLinkMove = 5,
        htmlEffectAllowedAll = 6,
        htmlEffectAllowedNone = 7,
        htmlEffectAllowedUninitialized = 8,
        htmlEffectAllowed_Max = 2147483647L
    } htmlEffectAllowed;
EXTERN_C const GUID CLSID_CEventObj;
EXTERN_C const GUID CLSID_CStyleMedia;
EXTERN_C const GUID CLSID_CFramesCollection;
EXTERN_C const GUID CLSID_CScreen;
EXTERN_C const GUID CLSID_CWindow;
EXTERN_C const GUID CLSID_COmWindowProxy;
EXTERN_C const GUID CLSID_CDocumentVersion;
EXTERN_C const GUID CLSID_CDocumentVersionCollection;
typedef
enum _htmlCompatMode
    {
        htmlCompatModeBackCompat = 0,
        htmlCompatModeCSS1Compat = 1,
        htmlCompatMode_Max = 2147483647L
    } htmlCompatMode;
EXTERN_C const GUID CLSID_CDocument;
EXTERN_C const GUID CLSID_CScriptlet;
typedef
enum _BoolValue
    {
        True = 1,
        False = 0,
        BoolValue_Max = 2147483647L
    } BoolValue;
EXTERN_C const GUID CLSID_CPluginSite;
EXTERN_C const GUID CLSID_CAreasCollection;
EXTERN_C const GUID CLSID_CMapElement;
EXTERN_C const GUID CLSID_CAreaElement;
typedef
enum _htmlCaptionAlign
    {
        htmlCaptionAlignNotSet = 0,
        htmlCaptionAlignLeft = 1,
        htmlCaptionAlignCenter = 2,
        htmlCaptionAlignRight = 3,
        htmlCaptionAlignJustify = 4,
        htmlCaptionAlignTop = 5,
        htmlCaptionAlignBottom = 6,
        htmlCaptionAlign_Max = 2147483647L
    } htmlCaptionAlign;
typedef
enum _htmlCaptionVAlign
    {
        htmlCaptionVAlignNotSet = 0,
        htmlCaptionVAlignTop = 1,
        htmlCaptionVAlignBottom = 2,
        htmlCaptionVAlign_Max = 2147483647L
    } htmlCaptionVAlign;
EXTERN_C const GUID CLSID_CTableCaption;
EXTERN_C const GUID CLSID_CCommentElement;
EXTERN_C const GUID CLSID_CPhraseElement;
EXTERN_C const GUID CLSID_CSpanElement;
typedef
enum _htmlFrame
    {
        htmlFrameNotSet = 0,
        htmlFramevoid = 1,
        htmlFrameabove = 2,
        htmlFramebelow = 3,
        htmlFramehsides = 4,
        htmlFramelhs = 5,
        htmlFramerhs = 6,
        htmlFramevsides = 7,
        htmlFramebox = 8,
        htmlFrameborder = 9,
        htmlFrame_Max = 2147483647L
    } htmlFrame;
typedef
enum _htmlRules
    {
        htmlRulesNotSet = 0,
        htmlRulesnone = 1,
        htmlRulesgroups = 2,
        htmlRulesrows = 3,
        htmlRulescols = 4,
        htmlRulesall = 5,
        htmlRules_Max = 2147483647L
    } htmlRules;
typedef
enum _htmlCellAlign
    {
        htmlCellAlignNotSet = 0,
        htmlCellAlignLeft = 1,
        htmlCellAlignCenter = 2,
        htmlCellAlignRight = 3,
        htmlCellAlignMiddle = htmlCellAlignCenter,
        htmlCellAlign_Max = 2147483647L
    } htmlCellAlign;
typedef
enum _htmlCellVAlign
    {
        htmlCellVAlignNotSet = 0,
        htmlCellVAlignTop = 1,
        htmlCellVAlignMiddle = 2,
        htmlCellVAlignBottom = 3,
        htmlCellVAlignBaseline = 4,
        htmlCellVAlignCenter = htmlCellVAlignMiddle,
        htmlCellVAlign_Max = 2147483647L
    } htmlCellVAlign;
EXTERN_C const GUID CLSID_CTable;
EXTERN_C const GUID CLSID_CTableCol;
EXTERN_C const GUID CLSID_CTableSection;
EXTERN_C const GUID CLSID_CTableRow;
EXTERN_C const GUID CLSID_CTableCell;
EXTERN_C const GUID CLSID_CScriptElement;
EXTERN_C const GUID CLSID_CNoShowElement;
EXTERN_C const GUID CLSID_CObjectElement;
EXTERN_C const GUID CLSID_CParamElement;
typedef
enum _frameScrolling
    {
        frameScrollingyes = 1,
        frameScrollingno = 2,
        frameScrollingauto = 4,
        frameScrolling_Max = 2147483647L
    } frameScrolling;
EXTERN_C const GUID CLSID_CFrameSite;
EXTERN_C const GUID CLSID_CFrameElement;
typedef
enum _sandboxAllow
    {
        sandboxAllowScripts = 0,
        sandboxAllowSameOrigin = 1,
        sandboxAllowTopNavigation = 2,
        sandboxAllowForms = 3,
        sandboxAllowPopups = 4,
        sandboxAllow_Max = 2147483647L
    } sandboxAllow;
EXTERN_C const GUID CLSID_CIFrameElement;
EXTERN_C const GUID CLSID_C1DElement;
EXTERN_C const GUID CLSID_CFieldSetElement;
EXTERN_C const GUID CLSID_CLegendElement;
EXTERN_C const GUID CLSID_CSpanSite;
EXTERN_C const GUID CLSID_CFrameSetSite;
EXTERN_C const GUID CLSID_CBGsound;
EXTERN_C const GUID CLSID_CStyleElement;
EXTERN_C const GUID CLSID_CFontFace;
EXTERN_C const GUID CLSID_CXDomainRequest;
EXTERN_C const GUID CLSID_CXDomainRequestFactory;
EXTERN_C const GUID CLSID_CStorage;
EXTERN_C const GUID CLSID_CDOMEvent;
EXTERN_C const GUID CLSID_CDOMUIEvent;
EXTERN_C const GUID CLSID_CDOMMouseEvent;
EXTERN_C const GUID CLSID_CDOMDragEvent;
EXTERN_C const GUID CLSID_CDOMMouseWheelEvent;
EXTERN_C const GUID CLSID_CDOMWheelEvent;
EXTERN_C const GUID CLSID_CDOMTextEvent;
EXTERN_C const GUID CLSID_CDOMKeyboardEvent;
EXTERN_C const GUID CLSID_CDOMCompositionEvent;
EXTERN_C const GUID CLSID_CDOMMutationEvent;
EXTERN_C const GUID CLSID_CDOMBeforeUnloadEvent;
EXTERN_C const GUID CLSID_CDOMFocusEvent;
EXTERN_C const GUID CLSID_CDOMCustomEvent;
EXTERN_C const GUID CLSID_CCanvasGradient;
EXTERN_C const GUID CLSID_CCanvasPattern;
EXTERN_C const GUID CLSID_CCanvasTextMetrics;
EXTERN_C const GUID CLSID_CCanvasImageData;
EXTERN_C const GUID CLSID_CCanvasRenderingContext2D;
EXTERN_C const GUID CLSID_CHTMLCanvasElement;
EXTERN_C const GUID CLSID_CDOMProgressEvent;
EXTERN_C const GUID CLSID_CDOMMessageEvent;
EXTERN_C const GUID CLSID_CDOMSiteModeEvent;
EXTERN_C const GUID CLSID_CDOMStorageEvent;
EXTERN_C const GUID CLSID_CXMLHttpRequestEventTarget;
EXTERN_C const GUID CLSID_CXMLHttpRequest;
EXTERN_C const GUID CLSID_CXMLHttpRequestFactory;
typedef
enum _svgAngleType
    {
        SVG_ANGLETYPE_UNKNOWN = 0,
        SVG_ANGLETYPE_UNSPECIFIED = 1,
        SVG_ANGLETYPE_DEG = 2,
        SVG_ANGLETYPE_RAD = 3,
        SVG_ANGLETYPE_GRAD = 4,
        svgAngleType_Max = 2147483647L
    } svgAngleType;
EXTERN_C const GUID CLSID_CSVGAngle;
typedef
enum _svgExternalResourcesRequired
    {
        svgExternalResourcesRequiredFalse = 0,
        svgExternalResourcesRequiredTrue = 1,
        svgExternalResourcesRequired_Max = 2147483647L
    } svgExternalResourcesRequired;
EXTERN_C const GUID CLSID_CSVGAnimatedAngle;
EXTERN_C const GUID CLSID_CSVGAnimatedTransformList;
EXTERN_C const GUID CLSID_CSVGAnimatedBoolean;
EXTERN_C const GUID CLSID_CSVGAnimatedEnumeration;
EXTERN_C const GUID CLSID_CSVGAnimatedInteger;
EXTERN_C const GUID CLSID_CSVGAnimatedLength;
EXTERN_C const GUID CLSID_CSVGAnimatedLengthList;
EXTERN_C const GUID CLSID_CSVGAnimatedNumber;
EXTERN_C const GUID CLSID_CSVGAnimatedNumberList;
EXTERN_C const GUID CLSID_CSVGAnimatedRect;
EXTERN_C const GUID CLSID_CSVGAnimatedString;
EXTERN_C const GUID CLSID_CSVGClipPathElement;
typedef
enum _svgFocusable
    {
        svgFocusableNotSet = 0,
        svgFocusableAuto = 1,
        svgFocusableTrue = 2,
        svgFocusableFalse = 3,
        svgFocusable_Max = 2147483647L
    } svgFocusable;
EXTERN_C const GUID CLSID_CSVGElement;
typedef
enum _svgLengthType
    {
        SVG_LENGTHTYPE_UNKNOWN = 0,
        SVG_LENGTHTYPE_NUMBER = 1,
        SVG_LENGTHTYPE_PERCENTAGE = 2,
        SVG_LENGTHTYPE_EMS = 3,
        SVG_LENGTHTYPE_EXS = 4,
        SVG_LENGTHTYPE_PX = 5,
        SVG_LENGTHTYPE_CM = 6,
        SVG_LENGTHTYPE_MM = 7,
        SVG_LENGTHTYPE_IN = 8,
        SVG_LENGTHTYPE_PT = 9,
        SVG_LENGTHTYPE_PC = 10,
        svgLengthType_Max = 2147483647L
    } svgLengthType;
EXTERN_C const GUID CLSID_CSVGLength;
EXTERN_C const GUID CLSID_CSVGLengthList;
EXTERN_C const GUID CLSID_CSVGMatrix;
EXTERN_C const GUID CLSID_CSVGNumber;
EXTERN_C const GUID CLSID_CSVGNumberList;
EXTERN_C const GUID CLSID_CSVGPatternElement;
typedef
enum _svgPathSegType
    {
        PATHSEG_UNKNOWN = 0,
        PATHSEG_CLOSEPATH = 1,
        PATHSEG_MOVETO_ABS = 2,
        PATHSEG_MOVETO_REL = 3,
        PATHSEG_LINETO_ABS = 4,
        PATHSEG_LINETO_REL = 5,
        PATHSEG_CURVETO_CUBIC_ABS = 6,
        PATHSEG_CURVETO_CUBIC_REL = 7,
        PATHSEG_CURVETO_QUADRATIC_ABS = 8,
        PATHSEG_CURVETO_QUADRATIC_REL = 9,
        PATHSEG_ARC_ABS = 10,
        PATHSEG_ARC_REL = 11,
        PATHSEG_LINETO_HORIZONTAL_ABS = 12,
        PATHSEG_LINETO_HORIZONTAL_REL = 13,
        PATHSEG_LINETO_VERTICAL_ABS = 14,
        PATHSEG_LINETO_VERTICAL_REL = 15,
        PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16,
        PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17,
        PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18,
        PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19,
        svgPathSegType_Max = 2147483647L
    } svgPathSegType;
EXTERN_C const GUID CLSID_CSVGPathSeg;
EXTERN_C const GUID CLSID_CSVGPathSegArcAbs;
EXTERN_C const GUID CLSID_CSVGPathSegArcRel;
EXTERN_C const GUID CLSID_CSVGPathSegClosePath;
EXTERN_C const GUID CLSID_CSVGPathSegMovetoAbs;
EXTERN_C const GUID CLSID_CSVGPathSegMovetoRel;
EXTERN_C const GUID CLSID_CSVGPathSegLinetoAbs;
EXTERN_C const GUID CLSID_CSVGPathSegLinetoRel;
EXTERN_C const GUID CLSID_CSVGPathSegCurvetoCubicAbs;
EXTERN_C const GUID CLSID_CSVGPathSegCurvetoCubicRel;
EXTERN_C const GUID CLSID_CSVGPathSegCurvetoCubicSmoothAbs;
EXTERN_C const GUID CLSID_CSVGPathSegCurvetoCubicSmoothRel;
EXTERN_C const GUID CLSID_CSVGPathSegCurvetoQuadraticAbs;
EXTERN_C const GUID CLSID_CSVGPathSegCurvetoQuadraticRel;
EXTERN_C const GUID CLSID_CSVGPathSegCurvetoQuadraticSmoothAbs;
EXTERN_C const GUID CLSID_CSVGPathSegCurvetoQuadraticSmoothRel;
EXTERN_C const GUID CLSID_CSVGPathSegLinetoHorizontalAbs;
EXTERN_C const GUID CLSID_CSVGPathSegLinetoHorizontalRel;
EXTERN_C const GUID CLSID_CSVGPathSegLinetoVerticalAbs;
EXTERN_C const GUID CLSID_CSVGPathSegLinetoVerticalRel;
EXTERN_C const GUID CLSID_CSVGPathSegList;
EXTERN_C const GUID CLSID_CSVGPoint;
EXTERN_C const GUID CLSID_CSVGPointList;
EXTERN_C const GUID CLSID_CSVGRect;
EXTERN_C const GUID CLSID_CSVGStringList;
typedef
enum _svgTransformType
    {
        SVG_TRANSFORM_UNKNOWN = 0,
        SVG_TRANSFORM_MATRIX = 1,
        SVG_TRANSFORM_TRANSLATE = 2,
        SVG_TRANSFORM_SCALE = 3,
        SVG_TRANSFORM_ROTATE = 4,
        SVG_TRANSFORM_SKEWX = 5,
        SVG_TRANSFORM_SKEWY = 6,
        svgTransformType_Max = 2147483647L
    } svgTransformType;
EXTERN_C const GUID CLSID_CSVGTransform;
EXTERN_C const GUID CLSID_CSVGSVGElement;
EXTERN_C const GUID CLSID_CSVGUseElement;
EXTERN_C const GUID CLSID_CHTMLStyleSheetRulesAppliedCollection;
EXTERN_C const GUID CLSID_CRulesApplied;
EXTERN_C const GUID CLSID_CRulesAppliedCollection;
EXTERN_C const GUID CLSID_CW3CComputedStyle;
EXTERN_C const GUID CLSID_CSVGTransformList;
EXTERN_C const GUID CLSID_CSVGCircleElement;
EXTERN_C const GUID CLSID_CSVGEllipseElement;
EXTERN_C const GUID CLSID_CSVGLineElement;
EXTERN_C const GUID CLSID_CSVGRectElement;
EXTERN_C const GUID CLSID_CSVGPolygonElement;
EXTERN_C const GUID CLSID_CSVGPolylineElement;
EXTERN_C const GUID CLSID_CSVGGElement;
EXTERN_C const GUID CLSID_CSVGSymbolElement;
EXTERN_C const GUID CLSID_CSVGDefsElement;
EXTERN_C const GUID CLSID_CSVGPathElement;
typedef
enum _svgPreserveAspectRatioAlignType
    {
        SVG_PRESERVEASPECTRATIO_UNKNOWN = 0,
        SVG_PRESERVEASPECTRATIO_NONE = 1,
        SVG_PRESERVEASPECTRATIO_XMINYMIN = 2,
        SVG_PRESERVEASPECTRATIO_XMIDYMIN = 3,
        SVG_PRESERVEASPECTRATIO_XMAXYMIN = 4,
        SVG_PRESERVEASPECTRATIO_XMINYMID = 5,
        SVG_PRESERVEASPECTRATIO_XMIDYMID = 6,
        SVG_PRESERVEASPECTRATIO_XMAXYMID = 7,
        SVG_PRESERVEASPECTRATIO_XMINYMAX = 8,
        SVG_PRESERVEASPECTRATIO_XMIDYMAX = 9,
        SVG_PRESERVEASPECTRATIO_XMAXYMAX = 10,
        svgPreserveAspectRatioAlignType_Max = 2147483647L
    } svgPreserveAspectRatioAlignType;
typedef
enum _svgPreserveAspectMeetOrSliceType
    {
        SVG_MEETORSLICE_UNKNOWN = 0,
        SVG_MEETORSLICE_MEET = 1,
        SVG_MEETORSLICE_SLICE = 2,
        svgPreserveAspectMeetOrSliceType_Max = 2147483647L
    } svgPreserveAspectMeetOrSliceType;
EXTERN_C const GUID CLSID_CSVGPreserveAspectRatio;
EXTERN_C const GUID CLSID_CSVGTextElement;
EXTERN_C const GUID CLSID_CSVGAnimatedPreserveAspectRatio;
EXTERN_C const GUID CLSID_CSVGImageElement;
typedef
enum _svgUnitTypes
    {
        SVG_UNITTYPE_UNKNOWN = 0,
        SVG_UNITTYPE_USERSPACEONUSE = 1,
        SVG_UNITTYPE_OBJECTBOUNDINGBOX = 2,
        svgUnitTypes_Max = 2147483647L
    } svgUnitTypes;
EXTERN_C const GUID CLSID_CSVGStopElement;
typedef
enum _svgSpreadMethod
    {
        SVG_SPREADMETHOD_UNKNOWN = 0,
        SVG_SPREADMETHOD_PAD = 1,
        SVG_SPREADMETHOD_REFLECT = 2,
        SVG_SPREADMETHOD_REPEAT = 3,
        svgSpreadMethod_Max = 2147483647L
    } svgSpreadMethod;
EXTERN_C const GUID CLSID_CSVGGradientElement;
EXTERN_C const GUID CLSID_CSVGLinearGradientElement;
EXTERN_C const GUID CLSID_CSVGRadialGradientElement;
EXTERN_C const GUID CLSID_CSVGMaskElement;
typedef
enum _svgFeblendMode
    {
        SVG_FEBLEND_MODE_UNKNOWN = 0,
        SVG_FEBLEND_MODE_NORMAL = 1,
        SVG_FEBLEND_MODE_MULTIPLY = 2,
        SVG_FEBLEND_MODE_SCREEN = 3,
        SVG_FEBLEND_MODE_DARKEN = 4,
        SVG_FEBLEND_MODE_LIGHTEN = 5,
        svgFeblendMode_Max = 2147483647L
    } svgFeblendMode;
typedef
enum _svgFecolormatrixType
    {
        SVG_FECOLORMATRIX_TYPE_UNKNOWN = 0,
        SVG_FECOLORMATRIX_TYPE_MATRIX = 1,
        SVG_FECOLORMATRIX_TYPE_SATURATE = 2,
        SVG_FECOLORMATRIX_TYPE_HUEROTATE = 3,
        SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA = 4,
        svgFecolormatrixType_Max = 2147483647L
    } svgFecolormatrixType;
typedef
enum _svgFecomponenttransferType
    {
        SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN = 0,
        SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = 1,
        SVG_FECOMPONENTTRANSFER_TYPE_TABLE = 2,
        SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = 3,
        SVG_FECOMPONENTTRANSFER_TYPE_LINEAR = 4,
        SVG_FECOMPONENTTRANSFER_TYPE_GAMMA = 5,
        svgFecomponenttransferType_Max = 2147483647L
    } svgFecomponenttransferType;
typedef
enum _svgFecompositeOperator
    {
        SVG_FECOMPOSITE_OPERATOR_UNKNOWN = 0,
        SVG_FECOMPOSITE_OPERATOR_OVER = 1,
        SVG_FECOMPOSITE_OPERATOR_IN = 2,
        SVG_FECOMPOSITE_OPERATOR_OUT = 3,
        SVG_FECOMPOSITE_OPERATOR_ATOP = 4,
        SVG_FECOMPOSITE_OPERATOR_XOR = 5,
        SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = 6,
        svgFecompositeOperator_Max = 2147483647L
    } svgFecompositeOperator;
typedef
enum _svgEdgemode
    {
        SVG_EDGEMODE_UNKNOWN = 0,
        SVG_EDGEMODE_DUPLICATE = 1,
        SVG_EDGEMODE_WRAP = 2,
        SVG_EDGEMODE_NONE = 3,
        svgEdgemode_Max = 2147483647L
    } svgEdgemode;
typedef
enum _svgPreserveAlpha
    {
        SVG_PRESERVEALPHA_FALSE = 0,
        SVG_PRESERVEALPHA_TRUE = 1,
        svgPreserveAlpha_Max = 2147483647L
    } svgPreserveAlpha;
typedef
enum _svgChannel
    {
        SVG_CHANNEL_UNKNOWN = 0,
        SVG_CHANNEL_R = 1,
        SVG_CHANNEL_G = 2,
        SVG_CHANNEL_B = 3,
        SVG_CHANNEL_A = 4,
        svgChannel_Max = 2147483647L
    } svgChannel;
typedef
enum _svgMorphologyOperator
    {
        SVG_MORPHOLOGY_OPERATOR_UNKNOWN = 0,
        SVG_MORPHOLOGY_OPERATOR_ERODE = 1,
        SVG_MORPHOLOGY_OPERATOR_DILATE = 2,
        svgMorphologyOperator_Max = 2147483647L
    } svgMorphologyOperator;
typedef
enum _svgTurbulenceType
    {
        SVG_TURBULENCE_TYPE_UNKNOWN = 0,
        SVG_TURBULENCE_TYPE_FACTALNOISE = 1,
        SVG_TURBULENCE_TYPE_TURBULENCE = 2,
        svgTurbulenceType_Max = 2147483647L
    } svgTurbulenceType;
typedef
enum _svgStitchtype
    {
        SVG_STITCHTYPE_UNKNOWN = 0,
        SVG_STITCHTYPE_STITCH = 1,
        SVG_STITCHTYPE_NOSTITCH = 2,
        svgStitchtype_Max = 2147483647L
    } svgStitchtype;
typedef
enum _svgMarkerUnits
    {
        SVG_MARKERUNITS_UNKNOWN = 0,
        SVG_MARKERUNITS_USERSPACEONUSE = 1,
        SVG_MARKERUNITS_STROKEWIDTH = 2,
        svgMarkerUnits_Max = 2147483647L
    } svgMarkerUnits;
typedef
enum _svgMarkerOrient
    {
        SVG_MARKER_ORIENT_UNKNOWN = 0,
        SVG_MARKER_ORIENT_AUTO = 1,
        SVG_MARKER_ORIENT_ANGLE = 2,
        svgMarkerOrient_Max = 2147483647L
    } svgMarkerOrient;
typedef
enum _svgMarkerOrientAttribute
    {
        svgMarkerOrientAttributeAuto = 0,
        svgMarkerOrientAttribute_Max = 2147483647L
    } svgMarkerOrientAttribute;
EXTERN_C const GUID CLSID_CSVGMarkerElement;
EXTERN_C const GUID CLSID_CSVGZoomEvent;
EXTERN_C const GUID CLSID_CSVGAElement;
EXTERN_C const GUID CLSID_CSVGViewElement;
typedef
enum _htmlMediaNetworkState
    {
        htmlMediaNetworkStateEmpty = 0,
        htmlMediaNetworkStateIdle = 1,
        htmlMediaNetworkStateLoading = 2,
        htmlMediaNetworkStateNoSource = 3,
        htmlMediaNetworkState_Max = 2147483647L
    } htmlMediaNetworkState;
typedef
enum _htmlMediaReadyState
    {
        htmlMediaReadyStateHaveNothing = 0,
        htmlMediaReadyStateHaveMetadata = 1,
        htmlMediaReadyStateHaveCurrentData = 2,
        htmlMediaReadyStateHaveFutureData = 3,
        htmlMediaReadyStateHaveEnoughData = 4,
        htmlMediaReadyState_Max = 2147483647L
    } htmlMediaReadyState;
typedef
enum _htmlMediaErr
    {
        htmlMediaErrAborted = 0,
        htmlMediaErrNetwork = 1,
        htmlMediaErrDecode = 2,
        htmlMediaErrSrcNotSupported = 3,
        htmlMediaErr_Max = 2147483647L
    } htmlMediaErr;
EXTERN_C const GUID CLSID_CMediaError;
EXTERN_C const GUID CLSID_CTimeRanges;
EXTERN_C const GUID CLSID_CMediaElement;
EXTERN_C const GUID CLSID_CSourceElement;
EXTERN_C const GUID CLSID_CAudioElement;
EXTERN_C const GUID CLSID_CAudioElementFactory;
EXTERN_C const GUID CLSID_CVideoElement;
EXTERN_C const GUID CLSID_CSVGSwitchElement;
EXTERN_C const GUID CLSID_CSVGDescElement;
EXTERN_C const GUID CLSID_CSVGTitleElement;
EXTERN_C const GUID CLSID_CSVGMetadataElement;
EXTERN_C const GUID CLSID_CSVGElementInstance;
EXTERN_C const GUID CLSID_CSVGElementInstanceList;
EXTERN_C const GUID CLSID_CDOMException;
EXTERN_C const GUID CLSID_CRangeException;
EXTERN_C const GUID CLSID_CSVGException;
EXTERN_C const GUID CLSID_CEventException;
EXTERN_C const GUID CLSID_CSVGScriptElement;
EXTERN_C const GUID CLSID_CSVGStyleElement;
typedef
enum _lengthAdjust
    {
        LENGTHADJUST_UNKNOWN = 0,
        LENGTHADJUST_SPACING = 1,
        LENGTHADJUST_SPACINGANDGLYPHS = 2,
        lengthAdjust_Max = 2147483647L
    } lengthAdjust;
EXTERN_C const GUID CLSID_CSVGTextContentElement;
EXTERN_C const GUID CLSID_CSVGTextPositioningElement;
EXTERN_C const GUID CLSID_CDocumentType;
EXTERN_C const GUID CLSID_CTraversalNodeIterator;
EXTERN_C const GUID CLSID_CTraversalTreeWalker;
EXTERN_C const GUID CLSID_CProcessingInstruction;
EXTERN_C const GUID CLSID_CMSPerformance;
EXTERN_C const GUID CLSID_CMSPerformanceNavigation;
EXTERN_C const GUID CLSID_CMSPerformanceTiming;
EXTERN_C const GUID CLSID_CSVGTSpanElement;
EXTERN_C const GUID CLSID_CTemplatePrinter;
EXTERN_C const GUID CLSID_CPrintManagerTemplatePrinter;
typedef
enum _textpathMethodtype
    {
        TEXTPATH_METHODTYPE_UNKNOWN = 0,
        TEXTPATH_METHODTYPE_ALIGN = 1,
        TEXTPATH_METHODTYPE_STRETCH = 2,
        textpathMethodtype_Max = 2147483647L
    } textpathMethodtype;
typedef
enum _textpathSpacingtype
    {
        TEXTPATH_SPACINGTYPE_UNKNOWN = 0,
        TEXTPATH_SPACINGTYPE_AUTO = 1,
        TEXTPATH_SPACINGTYPE_EXACT = 2,
        textpathSpacingtype_Max = 2147483647L
    } textpathSpacingtype;
EXTERN_C const GUID CLSID_CSVGTextPathElement;
EXTERN_C const GUID CLSID_CDOMXmlSerializer;
EXTERN_C const GUID CLSID_CDOMParser;
EXTERN_C const GUID CLSID_CDOMXmlSerializerFactory;
EXTERN_C const GUID CLSID_CDOMParserFactory;
EXTERN_C const GUID CLSID_CSemanticElement;
EXTERN_C const GUID CLSID_CProgressElement;
EXTERN_C const GUID CLSID_CDOMMSTransitionEvent;
EXTERN_C const GUID CLSID_CDOMMSAnimationEvent;
EXTERN_C const GUID CLSID_CWebGeolocation;
EXTERN_C const GUID CLSID_CWebGeocoordinates;
EXTERN_C const GUID CLSID_CWebGeopositionError;
EXTERN_C const GUID CLSID_CWebGeoposition;
EXTERN_C const GUID CLSID_CClientCaps;
EXTERN_C const GUID CLSID_CDOMMSManipulationEvent;
EXTERN_C const GUID CLSID_CDOMCloseEvent;
EXTERN_C const GUID CLSID_CApplicationCache;
typedef
enum _ELEMENT_CORNER
    {
        ELEMENT_CORNER_NONE = 0,
        ELEMENT_CORNER_TOP = 1,
        ELEMENT_CORNER_LEFT = 2,
        ELEMENT_CORNER_BOTTOM = 3,
        ELEMENT_CORNER_RIGHT = 4,
        ELEMENT_CORNER_TOPLEFT = 5,
        ELEMENT_CORNER_TOPRIGHT = 6,
        ELEMENT_CORNER_BOTTOMLEFT = 7,
        ELEMENT_CORNER_BOTTOMRIGHT = 8,
        ELEMENT_CORNER_Max = 2147483647L
    } ELEMENT_CORNER;
typedef
enum _SECUREURLHOSTVALIDATE_FLAGS
    {
        SUHV_PROMPTBEFORENO = 0x1,
        SUHV_SILENTYES = 0x2,
        SUHV_UNSECURESOURCE = 0x4,
        SECUREURLHOSTVALIDATE_FLAGS_Max = 2147483647L
    } SECUREURLHOSTVALIDATE_FLAGS;
typedef
enum _POINTER_GRAVITY
    {
        POINTER_GRAVITY_Left = 0,
        POINTER_GRAVITY_Right = 1,
        POINTER_GRAVITY_Max = 2147483647L
    } POINTER_GRAVITY;
typedef
enum _ELEMENT_ADJACENCY
    {
        ELEM_ADJ_BeforeBegin = 0,
        ELEM_ADJ_AfterBegin = 1,
        ELEM_ADJ_BeforeEnd = 2,
        ELEM_ADJ_AfterEnd = 3,
        ELEMENT_ADJACENCY_Max = 2147483647L
    } ELEMENT_ADJACENCY;
typedef
enum _MARKUP_CONTEXT_TYPE
    {
        CONTEXT_TYPE_None = 0,
        CONTEXT_TYPE_Text = 1,
        CONTEXT_TYPE_EnterScope = 2,
        CONTEXT_TYPE_ExitScope = 3,
        CONTEXT_TYPE_NoScope = 4,
        MARKUP_CONTEXT_TYPE_Max = 2147483647L
    } MARKUP_CONTEXT_TYPE;
typedef
enum _FINDTEXT_FLAGS
    {
        FINDTEXT_BACKWARDS = 0x1,
        FINDTEXT_WHOLEWORD = 0x2,
        FINDTEXT_MATCHCASE = 0x4,
        FINDTEXT_RAW = 0x20000,
        FINDTEXT_MATCHREPEATEDWHITESPACE = 0x40000,
        FINDTEXT_MATCHDIAC = 0x20000000,
        FINDTEXT_MATCHKASHIDA = 0x40000000,
        FINDTEXT_MATCHALEFHAMZA = 0x80000000,
        FINDTEXT_FLAGS_Max = 2147483647L
    } FINDTEXT_FLAGS;
typedef
enum _MOVEUNIT_ACTION
    {
        MOVEUNIT_PREVCHAR = 0,
        MOVEUNIT_NEXTCHAR = 1,
        MOVEUNIT_PREVCLUSTERBEGIN = 2,
        MOVEUNIT_NEXTCLUSTERBEGIN = 3,
        MOVEUNIT_PREVCLUSTEREND = 4,
        MOVEUNIT_NEXTCLUSTEREND = 5,
        MOVEUNIT_PREVWORDBEGIN = 6,
        MOVEUNIT_NEXTWORDBEGIN = 7,
        MOVEUNIT_PREVWORDEND = 8,
        MOVEUNIT_NEXTWORDEND = 9,
        MOVEUNIT_PREVPROOFWORD = 10,
        MOVEUNIT_NEXTPROOFWORD = 11,
        MOVEUNIT_NEXTURLBEGIN = 12,
        MOVEUNIT_PREVURLBEGIN = 13,
        MOVEUNIT_NEXTURLEND = 14,
        MOVEUNIT_PREVURLEND = 15,
        MOVEUNIT_PREVSENTENCE = 16,
        MOVEUNIT_NEXTSENTENCE = 17,
        MOVEUNIT_PREVBLOCK = 18,
        MOVEUNIT_NEXTBLOCK = 19,
        MOVEUNIT_ACTION_Max = 2147483647L
    } MOVEUNIT_ACTION;
typedef
enum _PARSE_FLAGS
    {
        PARSE_ABSOLUTIFYIE40URLS = 0x1,
        PARSE_DISABLEVML = 0x2,
        PARSE_FLAGS_Max = 2147483647L
    } PARSE_FLAGS;
typedef
enum _ELEMENT_TAG_ID
    {
        TAGID_NULL = 0,
        TAGID_UNKNOWN = 1,
        TAGID_A = 2,
        TAGID_ACRONYM = 3,
        TAGID_ADDRESS = 4,
        TAGID_APPLET = 5,
        TAGID_AREA = 6,
        TAGID_B = 7,
        TAGID_BASE = 8,
        TAGID_BASEFONT = 9,
        TAGID_BDO = 10,
        TAGID_BGSOUND = 11,
        TAGID_BIG = 12,
        TAGID_BLINK = 13,
        TAGID_BLOCKQUOTE = 14,
        TAGID_BODY = 15,
        TAGID_BR = 16,
        TAGID_BUTTON = 17,
        TAGID_CAPTION = 18,
        TAGID_CENTER = 19,
        TAGID_CITE = 20,
        TAGID_CODE = 21,
        TAGID_COL = 22,
        TAGID_COLGROUP = 23,
        TAGID_COMMENT = 24,
        TAGID_COMMENT_RAW = 25,
        TAGID_DD = 26,
        TAGID_DEL = 27,
        TAGID_DFN = 28,
        TAGID_DIR = 29,
        TAGID_DIV = 30,
        TAGID_DL = 31,
        TAGID_DT = 32,
        TAGID_EM = 33,
        TAGID_EMBED = 34,
        TAGID_FIELDSET = 35,
        TAGID_FONT = 36,
        TAGID_FORM = 37,
        TAGID_FRAME = 38,
        TAGID_FRAMESET = 39,
        TAGID_GENERIC = 40,
        TAGID_H1 = 41,
        TAGID_H2 = 42,
        TAGID_H3 = 43,
        TAGID_H4 = 44,
        TAGID_H5 = 45,
        TAGID_H6 = 46,
        TAGID_HEAD = 47,
        TAGID_HR = 48,
        TAGID_HTML = 49,
        TAGID_I = 50,
        TAGID_IFRAME = 51,
        TAGID_IMG = 52,
        TAGID_INPUT = 53,
        TAGID_INS = 54,
        TAGID_KBD = 55,
        TAGID_LABEL = 56,
        TAGID_LEGEND = 57,
        TAGID_LI = 58,
        TAGID_LINK = 59,
        TAGID_LISTING = 60,
        TAGID_MAP = 61,
        TAGID_MARQUEE = 62,
        TAGID_MENU = 63,
        TAGID_META = 64,
        TAGID_NEXTID = 65,
        TAGID_NOBR = 66,
        TAGID_NOEMBED = 67,
        TAGID_NOFRAMES = 68,
        TAGID_NOSCRIPT = 69,
        TAGID_OBJECT = 70,
        TAGID_OL = 71,
        TAGID_OPTION = 72,
        TAGID_P = 73,
        TAGID_PARAM = 74,
        TAGID_PLAINTEXT = 75,
        TAGID_PRE = 76,
        TAGID_Q = 77,
        TAGID_RP = 78,
        TAGID_RT = 79,
        TAGID_RUBY = 80,
        TAGID_S = 81,
        TAGID_SAMP = 82,
        TAGID_SCRIPT = 83,
        TAGID_SELECT = 84,
        TAGID_SMALL = 85,
        TAGID_SPAN = 86,
        TAGID_STRIKE = 87,
        TAGID_STRONG = 88,
        TAGID_STYLE = 89,
        TAGID_SUB = 90,
        TAGID_SUP = 91,
        TAGID_TABLE = 92,
        TAGID_TBODY = 93,
        TAGID_TC = 94,
        TAGID_TD = 95,
        TAGID_TEXTAREA = 96,
        TAGID_TFOOT = 97,
        TAGID_TH = 98,
        TAGID_THEAD = 99,
        TAGID_TITLE = 100,
        TAGID_TR = 101,
        TAGID_TT = 102,
        TAGID_U = 103,
        TAGID_UL = 104,
        TAGID_VAR = 105,
        TAGID_WBR = 106,
        TAGID_XMP = 107,
        TAGID_ROOT = 108,
        TAGID_OPTGROUP = 109,
        TAGID_ABBR = 110,
        TAGID_SVG_A = 111,
        TAGID_SVG_ALTGLYPH = 112,
        TAGID_SVG_ALTGLYPHDEF = 113,
        TAGID_SVG_ALTGLYPHITEM = 114,
        TAGID_SVG_ANIMATE = 115,
        TAGID_SVG_ANIMATECOLOR = 116,
        TAGID_SVG_ANIMATEMOTION = 117,
        TAGID_SVG_ANIMATETRANSFORM = 118,
        TAGID_SVG_CIRCLE = 119,
        TAGID_SVG_CLIPPATH = 120,
        TAGID_SVG_COLOR_PROFILE = 121,
        TAGID_SVG_CURSOR = 122,
        TAGID_SVG_DEFINITION_SRC = 123,
        TAGID_SVG_DEFS = 124,
        TAGID_SVG_DESC = 125,
        TAGID_SVG_ELLIPSE = 126,
        TAGID_SVG_FEBLEND = 127,
        TAGID_SVG_FECOLORMATRIX = 128,
        TAGID_SVG_FECOMPONENTTRANSFER = 129,
        TAGID_SVG_FECOMPOSITE = 130,
        TAGID_SVG_FECONVOLVEMATRIX = 131,
        TAGID_SVG_FEDIFFUSELIGHTING = 132,
        TAGID_SVG_FEDISPLACEMENTMAP = 133,
        TAGID_SVG_FEDISTANTLIGHT = 134,
        TAGID_SVG_FEFLOOD = 135,
        TAGID_SVG_FEFUNCA = 136,
        TAGID_SVG_FEFUNCB = 137,
        TAGID_SVG_FEFUNCG = 138,
        TAGID_SVG_FEFUNCR = 139,
        TAGID_SVG_FEGAUSSIANBLUR = 140,
        TAGID_SVG_FEIMAGE = 141,
        TAGID_SVG_FEMERGE = 142,
        TAGID_SVG_FEMERGENODE = 143,
        TAGID_SVG_FEMORPHOLOGY = 144,
        TAGID_SVG_FEOFFSET = 145,
        TAGID_SVG_FEPOINTLIGHT = 146,
        TAGID_SVG_FESPECULARLIGHTING = 147,
        TAGID_SVG_FESPOTLIGHT = 148,
        TAGID_SVG_FETILE = 149,
        TAGID_SVG_FETURBULENCE = 150,
        TAGID_SVG_FILTER = 151,
        TAGID_SVG_FONT = 152,
        TAGID_SVG_FONT_FACE = 153,
        TAGID_SVG_FONT_FACE_FORMAT = 154,
        TAGID_SVG_FONT_FACE_NAME = 155,
        TAGID_SVG_FONT_FACE_SRC = 156,
        TAGID_SVG_FONT_FACE_URI = 157,
        TAGID_SVG_FOREIGNOBJECT = 158,
        TAGID_SVG_G = 159,
        TAGID_SVG_GLYPH = 160,
        TAGID_SVG_GLYPHREF = 161,
        TAGID_SVG_HKERN = 162,
        TAGID_SVG_IMAGE = 163,
        TAGID_SVG_LINE = 164,
        TAGID_SVG_LINEARGRADIENT = 165,
        TAGID_SVG_MARKER = 166,
        TAGID_SVG_MASK = 167,
        TAGID_SVG_METADATA = 168,
        TAGID_SVG_MISSING_GLYPH = 169,
        TAGID_SVG_MPATH = 170,
        TAGID_SVG_PATH = 171,
        TAGID_SVG_PATTERN = 172,
        TAGID_SVG_POLYGON = 173,
        TAGID_SVG_POLYLINE = 174,
        TAGID_SVG_RADIALGRADIENT = 175,
        TAGID_SVG_RECT = 176,
        TAGID_SVG_SCRIPT = 177,
        TAGID_SVG_SET = 178,
        TAGID_SVG_STOP = 179,
        TAGID_SVG_STYLE = 180,
        TAGID_SVG_SVG = 181,
        TAGID_SVG_SWITCH = 182,
        TAGID_SVG_SYMBOL = 183,
        TAGID_SVG_TEXT = 184,
        TAGID_SVG_TEXTPATH = 185,
        TAGID_SVG_TITLE = 186,
        TAGID_SVG_TREF = 187,
        TAGID_SVG_TSPAN = 188,
        TAGID_SVG_USE = 189,
        TAGID_SVG_VIEW = 190,
        TAGID_SVG_VKERN = 191,
        TAGID_AUDIO = 192,
        TAGID_SOURCE = 193,
        TAGID_VIDEO = 194,
        TAGID_CANVAS = 195,
        TAGID_DOCTYPE = 196,
        TAGID_KEYGEN = 197,
        TAGID_PROCESSINGINSTRUCTION = 198,
        TAGID_ARTICLE = 199,
        TAGID_ASIDE = 200,
        TAGID_FIGCAPTION = 201,
        TAGID_FIGURE = 202,
        TAGID_FOOTER = 203,
        TAGID_HEADER = 204,
        TAGID_HGROUP = 205,
        TAGID_MARK = 206,
        TAGID_NAV = 207,
        TAGID_SECTION = 208,
        TAGID_PROGRESS = 209,
        TAGID_MATHML_ANNOTATION_XML = 210,
        TAGID_MATHML_MATH = 211,
        TAGID_MATHML_MI = 212,
        TAGID_MATHML_MN = 213,
        TAGID_MATHML_MO = 214,
        TAGID_MATHML_MS = 215,
        TAGID_MATHML_MTEXT = 216,
        TAGID_DATALIST = 217,
        TAGID_TRACK = 218,
        TAGID_ISINDEX = 219,
        TAGID_COMMAND = 220,
        TAGID_DETAILS = 221,
        TAGID_SUMMARY = 222,
        TAGID_X_MS_WEBVIEW = 223,
        TAGID_COUNT = 224,
        TAGID_LAST_PREDEFINED = 10000,
        ELEMENT_TAG_ID_Max = 2147483647L
    } ELEMENT_TAG_ID;
typedef
enum _SELECTION_TYPE
    {
        SELECTION_TYPE_None = 0,
        SELECTION_TYPE_Caret = 1,
        SELECTION_TYPE_Text = 2,
        SELECTION_TYPE_Control = 3,
        SELECTION_TYPE_Max = 2147483647L
    } SELECTION_TYPE;
typedef
enum _SAVE_SEGMENTS_FLAGS
    {
        SAVE_SEGMENTS_NoIE4SelectionCompat = 0x1,
        SAVE_SEGMENTS_FLAGS_Max = 2147483647L
    } SAVE_SEGMENTS_FLAGS;
typedef
enum _CARET_DIRECTION
    {
        CARET_DIRECTION_INDETERMINATE = 0,
        CARET_DIRECTION_SAME = 1,
        CARET_DIRECTION_BACKWARD = 2,
        CARET_DIRECTION_FORWARD = 3,
        CARET_DIRECTION_Max = 2147483647L
    } CARET_DIRECTION;
typedef
enum _LINE_DIRECTION
    {
        LINE_DIRECTION_RightToLeft = 1,
        LINE_DIRECTION_LeftToRight = 2,
        LINE_DIRECTION_Max = 2147483647L
    } LINE_DIRECTION;
typedef
enum _HT_OPTIONS
    {
        HT_OPT_AllowAfterEOL = 0x1,
        HT_OPTIONS_Max = 2147483647L
    } HT_OPTIONS;
typedef
enum _HT_RESULTS
    {
        HT_RESULTS_Glyph = 0x1,
        HT_RESULTS_Max = 2147483647L
    } HT_RESULTS;
typedef
enum _DISPLAY_MOVEUNIT
    {
        DISPLAY_MOVEUNIT_PreviousLine = 1,
        DISPLAY_MOVEUNIT_NextLine = 2,
        DISPLAY_MOVEUNIT_CurrentLineStart = 3,
        DISPLAY_MOVEUNIT_CurrentLineEnd = 4,
        DISPLAY_MOVEUNIT_TopOfWindow = 5,
        DISPLAY_MOVEUNIT_BottomOfWindow = 6,
        DISPLAY_MOVEUNIT_Max = 2147483647L
    } DISPLAY_MOVEUNIT;
typedef
enum _DISPLAY_GRAVITY
    {
        DISPLAY_GRAVITY_PreviousLine = 1,
        DISPLAY_GRAVITY_NextLine = 2,
        DISPLAY_GRAVITY_Max = 2147483647L
    } DISPLAY_GRAVITY;
typedef
enum _DISPLAY_BREAK
    {
        DISPLAY_BREAK_None = 0,
        DISPLAY_BREAK_Block = 0x1,
        DISPLAY_BREAK_Break = 0x2,
        DISPLAY_BREAK_Max = 2147483647L
    } DISPLAY_BREAK;
typedef
enum _COORD_SYSTEM
    {
        COORD_SYSTEM_GLOBAL = 0,
        COORD_SYSTEM_PARENT = 1,
        COORD_SYSTEM_CONTAINER = 2,
        COORD_SYSTEM_CONTENT = 3,
        COORD_SYSTEM_FRAME = 4,
        COORD_SYSTEM_CLIENT = 5,
        COORD_SYSTEM_Max = 2147483647L
    } COORD_SYSTEM;
EXTERN_C const GUID CLSID_HtmlDlgSafeHelper;
EXTERN_C const GUID CLSID_BlockFormats;
EXTERN_C const GUID CLSID_FontNames;
typedef
enum _DEV_CONSOLE_MESSAGE_LEVEL
    {
        DCML_INFORMATIONAL = 0,
        DCML_WARNING = 0x1,
        DCML_ERROR = 0x2,
        DEV_CONSOLE_MESSAGE_LEVEL_Max = 2147483647L
    } DEV_CONSOLE_MESSAGE_LEVEL;
typedef
enum _DOM_EVENT_PHASE
    {
        DEP_CAPTURING_PHASE = 0x1,
        DEP_AT_TARGET = 0x2,
        DEP_BUBBLING_PHASE = 0x3,
        DOM_EVENT_PHASE_Max = 2147483647L
    } DOM_EVENT_PHASE;
typedef
enum _SCRIPT_TIMER_TYPE
    {
        STT_TIMEOUT = 0,
        STT_INTERVAL = 0x1,
        STT_IMMEDIATE = 0x2,
        STT_ANIMATION_FRAME = 0x3,
        SCRIPT_TIMER_TYPE_Max = 2147483647L
    } SCRIPT_TIMER_TYPE;
EXTERN_C const GUID CLSID_CHTMLNamespace;
EXTERN_C const GUID CLSID_CHTMLNamespaceCollection;
typedef
enum _HTML_PAINTER
    {
        HTMLPAINTER_OPAQUE = 0x1,
        HTMLPAINTER_TRANSPARENT = 0x2,
        HTMLPAINTER_ALPHA = 0x4,
        HTMLPAINTER_COMPLEX = 0x8,
        HTMLPAINTER_OVERLAY = 0x10,
        HTMLPAINTER_HITTEST = 0x20,
        HTMLPAINTER_SURFACE = 0x100,
        HTMLPAINTER_3DSURFACE = 0x200,
        HTMLPAINTER_NOBAND = 0x400,
        HTMLPAINTER_NODC = 0x1000,
        HTMLPAINTER_NOPHYSICALCLIP = 0x2000,
        HTMLPAINTER_NOSAVEDC = 0x4000,
        HTMLPAINTER_SUPPORTS_XFORM = 0x8000,
        HTMLPAINTER_EXPAND = 0x10000,
        HTMLPAINTER_NOSCROLLBITS = 0x20000,
        HTML_PAINTER_Max = 2147483647L
    } HTML_PAINTER;
typedef
enum _HTML_PAINT_ZORDER
    {
        HTMLPAINT_ZORDER_NONE = 0,
        HTMLPAINT_ZORDER_REPLACE_ALL = 1,
        HTMLPAINT_ZORDER_REPLACE_CONTENT = 2,
        HTMLPAINT_ZORDER_REPLACE_BACKGROUND = 3,
        HTMLPAINT_ZORDER_BELOW_CONTENT = 4,
        HTMLPAINT_ZORDER_BELOW_FLOW = 5,
        HTMLPAINT_ZORDER_ABOVE_FLOW = 6,
        HTMLPAINT_ZORDER_ABOVE_CONTENT = 7,
        HTMLPAINT_ZORDER_WINDOW_TOP = 8,
        HTML_PAINT_ZORDER_Max = 2147483647L
    } HTML_PAINT_ZORDER;
typedef
enum _HTML_PAINT_DRAW_FLAGS
    {
        HTMLPAINT_DRAW_UPDATEREGION = 0x1,
        HTMLPAINT_DRAW_USE_XFORM = 0x2,
        HTML_PAINT_DRAW_FLAGS_Max = 2147483647L
    } HTML_PAINT_DRAW_FLAGS;
typedef
enum _HTML_PAINT_EVENT_FLAGS
    {
        HTMLPAINT_EVENT_TARGET = 0x1,
        HTMLPAINT_EVENT_SETCURSOR = 0x2,
        HTML_PAINT_EVENT_FLAGS_Max = 2147483647L
    } HTML_PAINT_EVENT_FLAGS;
typedef
enum _HTML_PAINT_DRAW_INFO_FLAGS
    {
        HTMLPAINT_DRAWINFO_VIEWPORT = 0x1,
        HTMLPAINT_DRAWINFO_UPDATEREGION = 0x2,
        HTMLPAINT_DRAWINFO_XFORM = 0x4,
        HTML_PAINT_DRAW_INFO_FLAGS_Max = 2147483647L
    } HTML_PAINT_DRAW_INFO_FLAGS;
typedef struct _HTML_PAINTER_INFO
    {
    LONG lFlags;
    LONG lZOrder;
    IID iidDrawObject;
    RECT rcExpand;
    } HTML_PAINTER_INFO;
typedef struct _HTML_PAINT_XFORM
    {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
    } HTML_PAINT_XFORM;
typedef struct _HTML_PAINT_DRAW_INFO
    {
    RECT rcViewport;
    HRGN hrgnUpdate;
    HTML_PAINT_XFORM xform;
    } HTML_PAINT_DRAW_INFO;
typedef
enum _HTMLDlgFlag
    {
        HTMLDlgFlagNo = 0,
        HTMLDlgFlagOff = 0,
        HTMLDlgFlag0 = 0,
        HTMLDlgFlagYes = 1,
        HTMLDlgFlagOn = 1,
        HTMLDlgFlag1 = 1,
        HTMLDlgFlagNotSet = -1,
        HTMLDlgFlag_Max = 2147483647L
    } HTMLDlgFlag;
typedef
enum _HTMLDlgBorder
    {
        HTMLDlgBorderThin = 0,
        HTMLDlgBorderThick = 0x40000L,
        HTMLDlgBorder_Max = 2147483647L
    } HTMLDlgBorder;
typedef
enum _HTMLDlgEdge
    {
        HTMLDlgEdgeSunken = 0,
        HTMLDlgEdgeRaised = 16,
        HTMLDlgEdge_Max = 2147483647L
    } HTMLDlgEdge;
typedef
enum _HTMLDlgCenter
    {
        HTMLDlgCenterNo = 0,
        HTMLDlgCenterOff = 0,
        HTMLDlgCenter0 = 0,
        HTMLDlgCenterYes = 1,
        HTMLDlgCenterOn = 1,
        HTMLDlgCenter1 = 1,
        HTMLDlgCenterParent = 1,
        HTMLDlgCenterDesktop = 2,
        HTMLDlgCenter_Max = 2147483647L
    } HTMLDlgCenter;
EXTERN_C const GUID CLSID_CThreadDialogProcParam;
EXTERN_C const GUID CLSID_CHTMLDlg;
EXTERN_C const GUID CLSID_CHTMLPopup;
typedef
enum _HTMLAppFlag
    {
        HTMLAppFlagNo = 0,
        HTMLAppFlagOff = 0,
        HTMLAppFlag0 = 0,
        HTMLAppFlagYes = 1,
        HTMLAppFlagOn = 1,
        HTMLAppFlag1 = 1,
        HTMLAppFlag_Max = 2147483647L
    } HTMLAppFlag;
typedef
enum _HTMLMinimizeFlag
    {
        HTMLMinimizeFlagNo = 0,
        HTMLMinimizeFlagYes = 0x20000L,
        HTMLMinimizeFlag_Max = 2147483647L
    } HTMLMinimizeFlag;
typedef
enum _HTMLMaximizeFlag
    {
        HTMLMaximizeFlagNo = 0,
        HTMLMaximizeFlagYes = 0x10000L,
        HTMLMaximizeFlag_Max = 2147483647L
    } HTMLMaximizeFlag;
typedef
enum _HTMLCaptionFlag
    {
        HTMLCaptionFlagNo = 0,
        HTMLCaptionFlagYes = 0xc00000L,
        HTMLCaptionFlag_Max = 2147483647L
    } HTMLCaptionFlag;
typedef
enum _HTMLSysMenuFlag
    {
        HTMLSysMenuFlagNo = 0,
        HTMLSysMenuFlagYes = 0x80000L,
        HTMLSysMenuFlag_Max = 2147483647L
    } HTMLSysMenuFlag;
typedef
enum _HTMLBorder
    {
        HTMLBorderNone = 0,
        HTMLBorderThick = 0x40000L,
        HTMLBorderDialog = 0x400000L,
        HTMLBorderThin = 0x800000L,
        HTMLBorder_Max = 2147483647L
    } HTMLBorder;
typedef
enum _HTMLBorderStyle
    {
        HTMLBorderStyleNormal = 0,
        HTMLBorderStyleRaised = 0x100L,
        HTMLBorderStyleSunken = 0x200L,
        HTMLBorderStylecombined = 0x300L,
        HTMLBorderStyleStatic = 0x20000L,
        HTMLBorderStyle_Max = 2147483647L
    } HTMLBorderStyle;
typedef
enum _HTMLWindowState
    {
        HTMLWindowStateNormal = 1,
        HTMLWindowStateMaximize = 3,
        HTMLWindowStateMinimize = 6,
        HTMLWindowState_Max = 2147483647L
    } HTMLWindowState;
EXTERN_C const GUID CLSID_CAppBehavior;
typedef
enum _BEHAVIOR_EVENT
    {
        BEHAVIOREVENT_FIRST = 0,
        BEHAVIOREVENT_CONTENTREADY = 0,
        BEHAVIOREVENT_DOCUMENTREADY = 1,
        BEHAVIOREVENT_APPLYSTYLE = 2,
        BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE = 3,
        BEHAVIOREVENT_CONTENTSAVE = 4,
        BEHAVIOREVENT_LAST = 4,
        BEHAVIOR_EVENT_Max = 2147483647L
    } BEHAVIOR_EVENT;
typedef
enum _BEHAVIOR_EVENT_FLAGS
    {
        BEHAVIOREVENTFLAGS_BUBBLE = 1,
        BEHAVIOREVENTFLAGS_STANDARDADDITIVE = 2,
        BEHAVIOR_EVENT_FLAGS_Max = 2147483647L
    } BEHAVIOR_EVENT_FLAGS;
typedef
enum _BEHAVIOR_RENDER_INFO
    {
        BEHAVIORRENDERINFO_BEFOREBACKGROUND = 0x1,
        BEHAVIORRENDERINFO_AFTERBACKGROUND = 0x2,
        BEHAVIORRENDERINFO_BEFORECONTENT = 0x4,
        BEHAVIORRENDERINFO_AFTERCONTENT = 0x8,
        BEHAVIORRENDERINFO_AFTERFOREGROUND = 0x20,
        BEHAVIORRENDERINFO_ABOVECONTENT = 0x28,
        BEHAVIORRENDERINFO_ALLLAYERS = 0xff,
        BEHAVIORRENDERINFO_DISABLEBACKGROUND = 0x100,
        BEHAVIORRENDERINFO_DISABLENEGATIVEZ = 0x200,
        BEHAVIORRENDERINFO_DISABLECONTENT = 0x400,
        BEHAVIORRENDERINFO_DISABLEPOSITIVEZ = 0x800,
        BEHAVIORRENDERINFO_DISABLEALLLAYERS = 0xf00,
        BEHAVIORRENDERINFO_HITTESTING = 0x1000,
        BEHAVIORRENDERINFO_SURFACE = 0x100000,
        BEHAVIORRENDERINFO_3DSURFACE = 0x200000,
        BEHAVIOR_RENDER_INFO_Max = 2147483647L
    } BEHAVIOR_RENDER_INFO;
typedef
enum _BEHAVIOR_RELATION
    {
        BEHAVIOR_FIRSTRELATION = 0,
        BEHAVIOR_SAMEELEMENT = 0,
        BEHAVIOR_PARENT = 1,
        BEHAVIOR_CHILD = 2,
        BEHAVIOR_SIBLING = 3,
        BEHAVIOR_LASTRELATION = 3,
        BEHAVIOR_RELATION_Max = 2147483647L
    } BEHAVIOR_RELATION;
typedef
enum _BEHAVIOR_LAYOUT_INFO
    {
        BEHAVIORLAYOUTINFO_FULLDELEGATION = 0x1,
        BEHAVIORLAYOUTINFO_MODIFYNATURAL = 0x2,
        BEHAVIORLAYOUTINFO_MAPSIZE = 0x4,
        BEHAVIOR_LAYOUT_INFO_Max = 2147483647L
    } BEHAVIOR_LAYOUT_INFO;
typedef
enum _BEHAVIOR_LAYOUT_MODE
    {
        BEHAVIORLAYOUTMODE_NATURAL = 0x1,
        BEHAVIORLAYOUTMODE_MINWIDTH = 0x2,
        BEHAVIORLAYOUTMODE_MAXWIDTH = 0x4,
        BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION = 0x4000,
        BEHAVIORLAYOUTMODE_FINAL_PERCENT = 0x8000,
        BEHAVIOR_LAYOUT_MODE_Max = 2147483647L
    } BEHAVIOR_LAYOUT_MODE;
typedef
enum _ELEMENTDESCRIPTOR_FLAGS
    {
        ELEMENTDESCRIPTORFLAGS_LITERAL = 1,
        ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL = 2,
        ELEMENTDESCRIPTOR_FLAGS_Max = 2147483647L
    } ELEMENTDESCRIPTOR_FLAGS;
typedef
enum _ELEMENTNAMESPACE_FLAGS
    {
        ELEMENTNAMESPACEFLAGS_ALLOWANYTAG = 0x1,
        ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS = 0x2,
        ELEMENTNAMESPACE_FLAGS_Max = 2147483647L
    } ELEMENTNAMESPACE_FLAGS;
typedef
enum _VIEW_OBJECT_ALPHA_MODE
    {
        VIEW_OBJECT_ALPHA_MODE_IGNORE = 0,
        VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED = 1,
        VIEW_OBJECT_ALPHA_MODE_Max = 2147483647L
    } VIEW_OBJECT_ALPHA_MODE;
typedef
enum _VIEW_OBJECT_COMPOSITION_MODE
    {
        VIEW_OBJECT_COMPOSITION_MODE_LEGACY = 0,
        VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER = 1,
        VIEW_OBJECT_COMPOSITION_MODE_Max = 2147483647L
    } VIEW_OBJECT_COMPOSITION_MODE;
EXTERN_C const IID LIBID_MSHTML;
EXTERN_C const IID IID_IHTMLEventObj;
    typedef struct IHTMLEventObjVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEventObj * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEventObj * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEventObj * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLEventObj * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLEventObj * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLEventObj * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLEventObj * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_srcElement )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_altKey )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_ctrlKey )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_shiftKey )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_returnValue )(
            __RPC__in IHTMLEventObj * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_returnValue )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_cancelBubble )(
            __RPC__in IHTMLEventObj * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_cancelBubble )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fromElement )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_toElement )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *put_keyCode )(
            __RPC__in IHTMLEventObj * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_keyCode )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_button )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_qualifier )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_reason )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_clientX )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_clientY )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetX )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetY )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_screenX )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_screenY )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_srcFilter )(
            __RPC__in IHTMLEventObj * This,
                                __RPC__deref_out_opt IDispatch **p);
        END_INTERFACE
    } IHTMLEventObjVtbl;
    interface IHTMLEventObj
    {
        CONST_VTBL struct IHTMLEventObjVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_srcElement(This,p) )
    ( (This)->lpVtbl -> get_altKey(This,p) )
    ( (This)->lpVtbl -> get_ctrlKey(This,p) )
    ( (This)->lpVtbl -> get_shiftKey(This,p) )
    ( (This)->lpVtbl -> put_returnValue(This,v) )
    ( (This)->lpVtbl -> get_returnValue(This,p) )
    ( (This)->lpVtbl -> put_cancelBubble(This,v) )
    ( (This)->lpVtbl -> get_cancelBubble(This,p) )
    ( (This)->lpVtbl -> get_fromElement(This,p) )
    ( (This)->lpVtbl -> get_toElement(This,p) )
    ( (This)->lpVtbl -> put_keyCode(This,v) )
    ( (This)->lpVtbl -> get_keyCode(This,p) )
    ( (This)->lpVtbl -> get_button(This,p) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> get_qualifier(This,p) )
    ( (This)->lpVtbl -> get_reason(This,p) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> get_clientX(This,p) )
    ( (This)->lpVtbl -> get_clientY(This,p) )
    ( (This)->lpVtbl -> get_offsetX(This,p) )
    ( (This)->lpVtbl -> get_offsetY(This,p) )
    ( (This)->lpVtbl -> get_screenX(This,p) )
    ( (This)->lpVtbl -> get_screenY(This,p) )
    ( (This)->lpVtbl -> get_srcFilter(This,p) )
EXTERN_C const IID IID_IElementBehaviorSite;
    typedef struct IElementBehaviorSiteVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorSite * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorSite * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorSite * This);
        HRESULT ( STDMETHODCALLTYPE *GetElement )(
            __RPC__in IElementBehaviorSite * This,
                                __RPC__deref_out_opt IHTMLElement **ppElement);
        HRESULT ( STDMETHODCALLTYPE *RegisterNotification )(
            __RPC__in IElementBehaviorSite * This,
                       LONG lEvent);
        END_INTERFACE
    } IElementBehaviorSiteVtbl;
    interface IElementBehaviorSite
    {
        CONST_VTBL struct IElementBehaviorSiteVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetElement(This,ppElement) )
    ( (This)->lpVtbl -> RegisterNotification(This,lEvent) )
EXTERN_C const IID IID_IElementBehavior;
    typedef struct IElementBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *Init )(
            __RPC__in IElementBehavior * This,
                       __RPC__in_opt IElementBehaviorSite *pBehaviorSite);
        HRESULT ( STDMETHODCALLTYPE *Notify )(
            __RPC__in IElementBehavior * This,
                       LONG lEvent,
                            __RPC__inout VARIANT *pVar);
        HRESULT ( STDMETHODCALLTYPE *Detach )(
            __RPC__in IElementBehavior * This);
        END_INTERFACE
    } IElementBehaviorVtbl;
    interface IElementBehavior
    {
        CONST_VTBL struct IElementBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Init(This,pBehaviorSite) )
    ( (This)->lpVtbl -> Notify(This,lEvent,pVar) )
    ( (This)->lpVtbl -> Detach(This) )
EXTERN_C const IID IID_IElementBehaviorFactory;
    typedef struct IElementBehaviorFactoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorFactory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorFactory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorFactory * This);
        HRESULT ( STDMETHODCALLTYPE *FindBehavior )(
            __RPC__in IElementBehaviorFactory * This,
                       __RPC__in BSTR bstrBehavior,
                       __RPC__in BSTR bstrBehaviorUrl,
                       __RPC__in_opt IElementBehaviorSite *pSite,
                                __RPC__deref_out_opt IElementBehavior **ppBehavior);
        END_INTERFACE
    } IElementBehaviorFactoryVtbl;
    interface IElementBehaviorFactory
    {
        CONST_VTBL struct IElementBehaviorFactoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> FindBehavior(This,bstrBehavior,bstrBehaviorUrl,pSite,ppBehavior) )
EXTERN_C const IID IID_IElementBehaviorSiteOM;
    typedef struct IElementBehaviorSiteOMVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorSiteOM * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorSiteOM * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorSiteOM * This);
        HRESULT ( STDMETHODCALLTYPE *RegisterEvent )(
            __RPC__in IElementBehaviorSiteOM * This,
                       __RPC__in LPOLESTR pchEvent,
                       LONG lFlags,
                                __RPC__out LONG *plCookie);
        HRESULT ( STDMETHODCALLTYPE *GetEventCookie )(
            __RPC__in IElementBehaviorSiteOM * This,
                       __RPC__in LPOLESTR pchEvent,
                                __RPC__out LONG *plCookie);
        HRESULT ( STDMETHODCALLTYPE *FireEvent )(
            __RPC__in IElementBehaviorSiteOM * This,
                       LONG lCookie,
                       __RPC__in_opt IHTMLEventObj *pEventObject);
        HRESULT ( STDMETHODCALLTYPE *CreateEventObject )(
            __RPC__in IElementBehaviorSiteOM * This,
                                __RPC__deref_out_opt IHTMLEventObj **ppEventObject);
        HRESULT ( STDMETHODCALLTYPE *RegisterName )(
            __RPC__in IElementBehaviorSiteOM * This,
                       __RPC__in LPOLESTR pchName);
        HRESULT ( STDMETHODCALLTYPE *RegisterUrn )(
            __RPC__in IElementBehaviorSiteOM * This,
                       __RPC__in LPOLESTR pchUrn);
        END_INTERFACE
    } IElementBehaviorSiteOMVtbl;
    interface IElementBehaviorSiteOM
    {
        CONST_VTBL struct IElementBehaviorSiteOMVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> RegisterEvent(This,pchEvent,lFlags,plCookie) )
    ( (This)->lpVtbl -> GetEventCookie(This,pchEvent,plCookie) )
    ( (This)->lpVtbl -> FireEvent(This,lCookie,pEventObject) )
    ( (This)->lpVtbl -> CreateEventObject(This,ppEventObject) )
    ( (This)->lpVtbl -> RegisterName(This,pchName) )
    ( (This)->lpVtbl -> RegisterUrn(This,pchUrn) )
EXTERN_C const IID IID_IElementBehaviorRender;
    typedef struct IElementBehaviorRenderVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorRender * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorRender * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorRender * This);
        HRESULT ( STDMETHODCALLTYPE *Draw )(
            __RPC__in IElementBehaviorRender * This,
                       __RPC__in HDC hdc,
                       LONG lLayer,
                       __RPC__in RECT *pRect,
                       __RPC__in_opt IUnknown *pReserved);
        HRESULT ( STDMETHODCALLTYPE *GetRenderInfo )(
            __RPC__in IElementBehaviorRender * This,
                                __RPC__out LONG *plRenderInfo);
        HRESULT ( STDMETHODCALLTYPE *HitTestPoint )(
            __RPC__in IElementBehaviorRender * This,
                       __RPC__in POINT *pPoint,
                       __RPC__in_opt IUnknown *pReserved,
                                __RPC__out BOOL *pbHit);
        END_INTERFACE
    } IElementBehaviorRenderVtbl;
    interface IElementBehaviorRender
    {
        CONST_VTBL struct IElementBehaviorRenderVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Draw(This,hdc,lLayer,pRect,pReserved) )
    ( (This)->lpVtbl -> GetRenderInfo(This,plRenderInfo) )
    ( (This)->lpVtbl -> HitTestPoint(This,pPoint,pReserved,pbHit) )
EXTERN_C const IID IID_IElementBehaviorSiteRender;
    typedef struct IElementBehaviorSiteRenderVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorSiteRender * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorSiteRender * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorSiteRender * This);
        HRESULT ( STDMETHODCALLTYPE *Invalidate )(
            __RPC__in IElementBehaviorSiteRender * This,
                       __RPC__in RECT *pRect);
        HRESULT ( STDMETHODCALLTYPE *InvalidateRenderInfo )(
            __RPC__in IElementBehaviorSiteRender * This);
        HRESULT ( STDMETHODCALLTYPE *InvalidateStyle )(
            __RPC__in IElementBehaviorSiteRender * This);
        END_INTERFACE
    } IElementBehaviorSiteRenderVtbl;
    interface IElementBehaviorSiteRender
    {
        CONST_VTBL struct IElementBehaviorSiteRenderVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Invalidate(This,pRect) )
    ( (This)->lpVtbl -> InvalidateRenderInfo(This) )
    ( (This)->lpVtbl -> InvalidateStyle(This) )
EXTERN_C const IID IID_IDOMEvent;
    typedef struct IDOMEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_bubbles )(
            __RPC__in IDOMEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_cancelable )(
            __RPC__in IDOMEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_currentTarget )(
            __RPC__in IDOMEvent * This,
                                __RPC__deref_out_opt IEventTarget **p);
                            HRESULT ( STDMETHODCALLTYPE *get_defaultPrevented )(
            __RPC__in IDOMEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_eventPhase )(
            __RPC__in IDOMEvent * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_target )(
            __RPC__in IDOMEvent * This,
                                __RPC__deref_out_opt IEventTarget **p);
                            HRESULT ( STDMETHODCALLTYPE *get_timeStamp )(
            __RPC__in IDOMEvent * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IDOMEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *initEvent )(
            __RPC__in IDOMEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable);
                   HRESULT ( STDMETHODCALLTYPE *preventDefault )(
            __RPC__in IDOMEvent * This);
                   HRESULT ( STDMETHODCALLTYPE *stopPropagation )(
            __RPC__in IDOMEvent * This);
                   HRESULT ( STDMETHODCALLTYPE *stopImmediatePropagation )(
            __RPC__in IDOMEvent * This);
                            HRESULT ( STDMETHODCALLTYPE *get_isTrusted )(
            __RPC__in IDOMEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_cancelBubble )(
            __RPC__in IDOMEvent * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_cancelBubble )(
            __RPC__in IDOMEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_srcElement )(
            __RPC__in IDOMEvent * This,
                                __RPC__deref_out_opt IHTMLElement **p);
        END_INTERFACE
    } IDOMEventVtbl;
    interface IDOMEvent
    {
        CONST_VTBL struct IDOMEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_bubbles(This,p) )
    ( (This)->lpVtbl -> get_cancelable(This,p) )
    ( (This)->lpVtbl -> get_currentTarget(This,p) )
    ( (This)->lpVtbl -> get_defaultPrevented(This,p) )
    ( (This)->lpVtbl -> get_eventPhase(This,p) )
    ( (This)->lpVtbl -> get_target(This,p) )
    ( (This)->lpVtbl -> get_timeStamp(This,p) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> initEvent(This,eventType,canBubble,cancelable) )
    ( (This)->lpVtbl -> preventDefault(This) )
    ( (This)->lpVtbl -> stopPropagation(This) )
    ( (This)->lpVtbl -> stopImmediatePropagation(This) )
    ( (This)->lpVtbl -> get_isTrusted(This,p) )
    ( (This)->lpVtbl -> put_cancelBubble(This,v) )
    ( (This)->lpVtbl -> get_cancelBubble(This,p) )
    ( (This)->lpVtbl -> get_srcElement(This,p) )
EXTERN_C const IID IID_IHTMLDOMConstructor;
    typedef struct IHTMLDOMConstructorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMConstructor * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMConstructor * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMConstructor * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMConstructor * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMConstructor * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMConstructor * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMConstructor * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *get_constructor )(
            __RPC__in IHTMLDOMConstructor * This,
                                __RPC__deref_out_opt IDispatch **p);
        HRESULT ( STDMETHODCALLTYPE *LookupGetter )(
            __RPC__in IHTMLDOMConstructor * This,
                       __RPC__in BSTR propname,
                                __RPC__out VARIANT *ppDispHandler);
        HRESULT ( STDMETHODCALLTYPE *LookupSetter )(
            __RPC__in IHTMLDOMConstructor * This,
                       __RPC__in BSTR propname,
                                __RPC__out VARIANT *ppDispHandler);
        HRESULT ( STDMETHODCALLTYPE *DefineGetter )(
            __RPC__in IHTMLDOMConstructor * This,
                       __RPC__in BSTR propname,
                       __RPC__in VARIANT *pdispHandler);
        HRESULT ( STDMETHODCALLTYPE *DefineSetter )(
            __RPC__in IHTMLDOMConstructor * This,
                       __RPC__in BSTR propname,
                       __RPC__in VARIANT *pdispHandler);
        END_INTERFACE
    } IHTMLDOMConstructorVtbl;
    interface IHTMLDOMConstructor
    {
        CONST_VTBL struct IHTMLDOMConstructorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_constructor(This,p) )
    ( (This)->lpVtbl -> LookupGetter(This,propname,ppDispHandler) )
    ( (This)->lpVtbl -> LookupSetter(This,propname,ppDispHandler) )
    ( (This)->lpVtbl -> DefineGetter(This,propname,pdispHandler) )
    ( (This)->lpVtbl -> DefineSetter(This,propname,pdispHandler) )
EXTERN_C const IID IID_IHTMLStyleSheetRule;
    typedef struct IHTMLStyleSheetRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheetRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheetRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheetRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheetRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheetRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheetRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheetRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_selectorText )(
            __RPC__in IHTMLStyleSheetRule * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectorText )(
            __RPC__in IHTMLStyleSheetRule * This,
                                __RPC__deref_out_opt BSTR *p);
                                          HRESULT ( STDMETHODCALLTYPE *get_style )(
            __RPC__in IHTMLStyleSheetRule * This,
                                __RPC__deref_out_opt IHTMLRuleStyle **p);
                            HRESULT ( STDMETHODCALLTYPE *get_readOnly )(
            __RPC__in IHTMLStyleSheetRule * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLStyleSheetRuleVtbl;
    interface IHTMLStyleSheetRule
    {
        CONST_VTBL struct IHTMLStyleSheetRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_selectorText(This,v) )
    ( (This)->lpVtbl -> get_selectorText(This,p) )
    ( (This)->lpVtbl -> get_style(This,p) )
    ( (This)->lpVtbl -> get_readOnly(This,p) )
EXTERN_C const IID IID_IHTMLCSSStyleDeclaration;
    typedef struct IHTMLCSSStyleDeclarationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCSSStyleDeclaration * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCSSStyleDeclaration * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCSSStyleDeclaration * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_parentRule )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *getPropertyValue )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR bstrPropertyName,
                                __RPC__deref_out_opt BSTR *pbstrPropertyValue);
                   HRESULT ( STDMETHODCALLTYPE *getPropertyPriority )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR bstrPropertyName,
                                __RPC__deref_out_opt BSTR *pbstrPropertyPriority);
                   HRESULT ( STDMETHODCALLTYPE *removeProperty )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR bstrPropertyName,
                                __RPC__deref_out_opt BSTR *pbstrPropertyValue);
                   HRESULT ( STDMETHODCALLTYPE *setProperty )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR bstrPropertyName,
                       __RPC__in VARIANT *pvarPropertyValue,
                                     __RPC__in VARIANT *pvarPropertyPriority);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       long index,
                                __RPC__deref_out_opt BSTR *pbstrPropertyName);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontFamily )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontFamily )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontVariant )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontVariant )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontWeight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontWeight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontSize )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontSize )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_font )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_font )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_color )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_color )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_background )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_background )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundImage )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundImage )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundRepeat )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundRepeat )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundAttachment )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundAttachment )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundPosition )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundPosition )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundPositionX )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundPositionX )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundPositionY )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundPositionY )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_wordSpacing )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordSpacing )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_letterSpacing )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_letterSpacing )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecoration )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecoration )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_verticalAlign )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_verticalAlign )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textTransform )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textTransform )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textAlign )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAlign )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textIndent )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textIndent )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_lineHeight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lineHeight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginTop )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginTop )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginRight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginRight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginBottom )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginBottom )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginLeft )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginLeft )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_margin )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_margin )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingTop )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingTop )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingRight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingRight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingBottom )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingBottom )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingLeft )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingLeft )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_padding )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_padding )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_border )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_border )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTop )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTop )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottom )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottom )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeft )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeft )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTopColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRightColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottomColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeftColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTopWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRightWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottomWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeftWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTopStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRightStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottomStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeftStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_styleFloat )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_styleFloat )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_clear )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clear )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_display )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_display )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_visibility )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_visibility )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_listStyleType )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStyleType )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_listStylePosition )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStylePosition )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_listStyleImage )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStyleImage )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_listStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_listStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_whiteSpace )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_whiteSpace )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_top )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_top )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_left )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_left )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_zIndex )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_zIndex )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_overflow )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflow )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_pageBreakBefore )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakBefore )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_pageBreakAfter )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakAfter )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_cssText )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_cssText )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_cursor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_cursor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_clip )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clip )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_filter )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_filter )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_tableLayout )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_tableLayout )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderCollapse )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderCollapse )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_direction )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_direction )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_behavior )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_behavior )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_position )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_position )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_unicodeBidi )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_unicodeBidi )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_bottom )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_bottom )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_right )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_right )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_imeMode )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_imeMode )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rubyAlign )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyAlign )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rubyPosition )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyPosition )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rubyOverhang )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyOverhang )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridChar )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridChar )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridLine )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridLine )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridMode )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridMode )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridType )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridType )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_layoutGrid )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_layoutGrid )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textAutospace )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAutospace )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_wordBreak )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordBreak )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_lineBreak )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lineBreak )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textJustify )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textJustify )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textJustifyTrim )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textJustifyTrim )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textKashida )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textKashida )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_overflowX )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflowX )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_overflowY )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflowY )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_accelerator )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_accelerator )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutFlow )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutFlow )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_zoom )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_zoom )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_wordWrap )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordWrap )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textUnderlinePosition )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textUnderlinePosition )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarBaseColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarBaseColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarFaceColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarFaceColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbar3dLightColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbar3dLightColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarShadowColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarShadowColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarHighlightColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarHighlightColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarDarkShadowColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarDarkShadowColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarArrowColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarArrowColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarTrackColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarTrackColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_writingMode )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_writingMode )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textAlignLast )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAlignLast )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textKashidaSpace )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textKashidaSpace )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textOverflow )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textOverflow )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_minHeight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_minHeight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msInterpolationMode )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msInterpolationMode )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_maxHeight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_maxHeight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_minWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_minWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_maxWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_maxWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_content )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_content )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_captionSide )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_captionSide )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_counterIncrement )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_counterIncrement )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_counterReset )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_counterReset )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outline )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outline )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outlineWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outlineStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineStyle )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outlineColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_boxSizing )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_boxSizing )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderSpacing )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderSpacing )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_orphans )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_orphans )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_widows )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_widows )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_pageBreakInside )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakInside )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_emptyCells )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_emptyCells )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msBlockProgression )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msBlockProgression )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_quotes )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_quotes )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_alignmentBaseline )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_alignmentBaseline )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_baselineShift )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_baselineShift )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_dominantBaseline )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_dominantBaseline )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontSizeAdjust )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontSizeAdjust )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontStretch )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontStretch )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_opacity )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_opacity )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_clipPath )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clipPath )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_clipRule )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clipRule )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fill )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fill )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fillOpacity )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fillOpacity )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fillRule )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fillRule )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_kerning )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_kerning )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marker )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marker )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_markerEnd )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_markerEnd )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_markerMid )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_markerMid )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_markerStart )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_markerStart )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_mask )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_mask )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_pointerEvents )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pointerEvents )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_stopColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_stopColor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_stopOpacity )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_stopOpacity )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_stroke )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_stroke )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_strokeDasharray )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_strokeDasharray )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_strokeDashoffset )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_strokeDashoffset )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_strokeLinecap )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_strokeLinecap )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_strokeLinejoin )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_strokeLinejoin )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_strokeMiterlimit )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_strokeMiterlimit )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_strokeOpacity )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_strokeOpacity )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_strokeWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_strokeWidth )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textAnchor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAnchor )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_glyphOrientationHorizontal )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_glyphOrientationHorizontal )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_glyphOrientationVertical )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_glyphOrientationVertical )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRadius )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRadius )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTopLeftRadius )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopLeftRadius )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTopRightRadius )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopRightRadius )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottomRightRadius )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomRightRadius )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottomLeftRadius )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomLeftRadius )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_clipTop )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_clipTop )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_clipRight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_clipRight )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *get_clipBottom )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_clipLeft )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_clipLeft )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_cssFloat )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_cssFloat )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundClip )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundClip )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundSize )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundSize )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_boxShadow )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_boxShadow )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTransform )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTransform )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTransformOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTransformOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLCSSStyleDeclarationVtbl;
    interface IHTMLCSSStyleDeclaration
    {
        CONST_VTBL struct IHTMLCSSStyleDeclarationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get_parentRule(This,p) )
    ( (This)->lpVtbl -> getPropertyValue(This,bstrPropertyName,pbstrPropertyValue) )
    ( (This)->lpVtbl -> getPropertyPriority(This,bstrPropertyName,pbstrPropertyPriority) )
    ( (This)->lpVtbl -> removeProperty(This,bstrPropertyName,pbstrPropertyValue) )
    ( (This)->lpVtbl -> setProperty(This,bstrPropertyName,pvarPropertyValue,pvarPropertyPriority) )
    ( (This)->lpVtbl -> item(This,index,pbstrPropertyName) )
    ( (This)->lpVtbl -> put_fontFamily(This,v) )
    ( (This)->lpVtbl -> get_fontFamily(This,p) )
    ( (This)->lpVtbl -> put_fontStyle(This,v) )
    ( (This)->lpVtbl -> get_fontStyle(This,p) )
    ( (This)->lpVtbl -> put_fontVariant(This,v) )
    ( (This)->lpVtbl -> get_fontVariant(This,p) )
    ( (This)->lpVtbl -> put_fontWeight(This,v) )
    ( (This)->lpVtbl -> get_fontWeight(This,p) )
    ( (This)->lpVtbl -> put_fontSize(This,v) )
    ( (This)->lpVtbl -> get_fontSize(This,p) )
    ( (This)->lpVtbl -> put_font(This,v) )
    ( (This)->lpVtbl -> get_font(This,p) )
    ( (This)->lpVtbl -> put_color(This,v) )
    ( (This)->lpVtbl -> get_color(This,p) )
    ( (This)->lpVtbl -> put_background(This,v) )
    ( (This)->lpVtbl -> get_background(This,p) )
    ( (This)->lpVtbl -> put_backgroundColor(This,v) )
    ( (This)->lpVtbl -> get_backgroundColor(This,p) )
    ( (This)->lpVtbl -> put_backgroundImage(This,v) )
    ( (This)->lpVtbl -> get_backgroundImage(This,p) )
    ( (This)->lpVtbl -> put_backgroundRepeat(This,v) )
    ( (This)->lpVtbl -> get_backgroundRepeat(This,p) )
    ( (This)->lpVtbl -> put_backgroundAttachment(This,v) )
    ( (This)->lpVtbl -> get_backgroundAttachment(This,p) )
    ( (This)->lpVtbl -> put_backgroundPosition(This,v) )
    ( (This)->lpVtbl -> get_backgroundPosition(This,p) )
    ( (This)->lpVtbl -> put_backgroundPositionX(This,v) )
    ( (This)->lpVtbl -> get_backgroundPositionX(This,p) )
    ( (This)->lpVtbl -> put_backgroundPositionY(This,v) )
    ( (This)->lpVtbl -> get_backgroundPositionY(This,p) )
    ( (This)->lpVtbl -> put_wordSpacing(This,v) )
    ( (This)->lpVtbl -> get_wordSpacing(This,p) )
    ( (This)->lpVtbl -> put_letterSpacing(This,v) )
    ( (This)->lpVtbl -> get_letterSpacing(This,p) )
    ( (This)->lpVtbl -> put_textDecoration(This,v) )
    ( (This)->lpVtbl -> get_textDecoration(This,p) )
    ( (This)->lpVtbl -> put_verticalAlign(This,v) )
    ( (This)->lpVtbl -> get_verticalAlign(This,p) )
    ( (This)->lpVtbl -> put_textTransform(This,v) )
    ( (This)->lpVtbl -> get_textTransform(This,p) )
    ( (This)->lpVtbl -> put_textAlign(This,v) )
    ( (This)->lpVtbl -> get_textAlign(This,p) )
    ( (This)->lpVtbl -> put_textIndent(This,v) )
    ( (This)->lpVtbl -> get_textIndent(This,p) )
    ( (This)->lpVtbl -> put_lineHeight(This,v) )
    ( (This)->lpVtbl -> get_lineHeight(This,p) )
    ( (This)->lpVtbl -> put_marginTop(This,v) )
    ( (This)->lpVtbl -> get_marginTop(This,p) )
    ( (This)->lpVtbl -> put_marginRight(This,v) )
    ( (This)->lpVtbl -> get_marginRight(This,p) )
    ( (This)->lpVtbl -> put_marginBottom(This,v) )
    ( (This)->lpVtbl -> get_marginBottom(This,p) )
    ( (This)->lpVtbl -> put_marginLeft(This,v) )
    ( (This)->lpVtbl -> get_marginLeft(This,p) )
    ( (This)->lpVtbl -> put_margin(This,v) )
    ( (This)->lpVtbl -> get_margin(This,p) )
    ( (This)->lpVtbl -> put_paddingTop(This,v) )
    ( (This)->lpVtbl -> get_paddingTop(This,p) )
    ( (This)->lpVtbl -> put_paddingRight(This,v) )
    ( (This)->lpVtbl -> get_paddingRight(This,p) )
    ( (This)->lpVtbl -> put_paddingBottom(This,v) )
    ( (This)->lpVtbl -> get_paddingBottom(This,p) )
    ( (This)->lpVtbl -> put_paddingLeft(This,v) )
    ( (This)->lpVtbl -> get_paddingLeft(This,p) )
    ( (This)->lpVtbl -> put_padding(This,v) )
    ( (This)->lpVtbl -> get_padding(This,p) )
    ( (This)->lpVtbl -> put_border(This,v) )
    ( (This)->lpVtbl -> get_border(This,p) )
    ( (This)->lpVtbl -> put_borderTop(This,v) )
    ( (This)->lpVtbl -> get_borderTop(This,p) )
    ( (This)->lpVtbl -> put_borderRight(This,v) )
    ( (This)->lpVtbl -> get_borderRight(This,p) )
    ( (This)->lpVtbl -> put_borderBottom(This,v) )
    ( (This)->lpVtbl -> get_borderBottom(This,p) )
    ( (This)->lpVtbl -> put_borderLeft(This,v) )
    ( (This)->lpVtbl -> get_borderLeft(This,p) )
    ( (This)->lpVtbl -> put_borderColor(This,v) )
    ( (This)->lpVtbl -> get_borderColor(This,p) )
    ( (This)->lpVtbl -> put_borderTopColor(This,v) )
    ( (This)->lpVtbl -> get_borderTopColor(This,p) )
    ( (This)->lpVtbl -> put_borderRightColor(This,v) )
    ( (This)->lpVtbl -> get_borderRightColor(This,p) )
    ( (This)->lpVtbl -> put_borderBottomColor(This,v) )
    ( (This)->lpVtbl -> get_borderBottomColor(This,p) )
    ( (This)->lpVtbl -> put_borderLeftColor(This,v) )
    ( (This)->lpVtbl -> get_borderLeftColor(This,p) )
    ( (This)->lpVtbl -> put_borderWidth(This,v) )
    ( (This)->lpVtbl -> get_borderWidth(This,p) )
    ( (This)->lpVtbl -> put_borderTopWidth(This,v) )
    ( (This)->lpVtbl -> get_borderTopWidth(This,p) )
    ( (This)->lpVtbl -> put_borderRightWidth(This,v) )
    ( (This)->lpVtbl -> get_borderRightWidth(This,p) )
    ( (This)->lpVtbl -> put_borderBottomWidth(This,v) )
    ( (This)->lpVtbl -> get_borderBottomWidth(This,p) )
    ( (This)->lpVtbl -> put_borderLeftWidth(This,v) )
    ( (This)->lpVtbl -> get_borderLeftWidth(This,p) )
    ( (This)->lpVtbl -> put_borderStyle(This,v) )
    ( (This)->lpVtbl -> get_borderStyle(This,p) )
    ( (This)->lpVtbl -> put_borderTopStyle(This,v) )
    ( (This)->lpVtbl -> get_borderTopStyle(This,p) )
    ( (This)->lpVtbl -> put_borderRightStyle(This,v) )
    ( (This)->lpVtbl -> get_borderRightStyle(This,p) )
    ( (This)->lpVtbl -> put_borderBottomStyle(This,v) )
    ( (This)->lpVtbl -> get_borderBottomStyle(This,p) )
    ( (This)->lpVtbl -> put_borderLeftStyle(This,v) )
    ( (This)->lpVtbl -> get_borderLeftStyle(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_styleFloat(This,v) )
    ( (This)->lpVtbl -> get_styleFloat(This,p) )
    ( (This)->lpVtbl -> put_clear(This,v) )
    ( (This)->lpVtbl -> get_clear(This,p) )
    ( (This)->lpVtbl -> put_display(This,v) )
    ( (This)->lpVtbl -> get_display(This,p) )
    ( (This)->lpVtbl -> put_visibility(This,v) )
    ( (This)->lpVtbl -> get_visibility(This,p) )
    ( (This)->lpVtbl -> put_listStyleType(This,v) )
    ( (This)->lpVtbl -> get_listStyleType(This,p) )
    ( (This)->lpVtbl -> put_listStylePosition(This,v) )
    ( (This)->lpVtbl -> get_listStylePosition(This,p) )
    ( (This)->lpVtbl -> put_listStyleImage(This,v) )
    ( (This)->lpVtbl -> get_listStyleImage(This,p) )
    ( (This)->lpVtbl -> put_listStyle(This,v) )
    ( (This)->lpVtbl -> get_listStyle(This,p) )
    ( (This)->lpVtbl -> put_whiteSpace(This,v) )
    ( (This)->lpVtbl -> get_whiteSpace(This,p) )
    ( (This)->lpVtbl -> put_top(This,v) )
    ( (This)->lpVtbl -> get_top(This,p) )
    ( (This)->lpVtbl -> put_left(This,v) )
    ( (This)->lpVtbl -> get_left(This,p) )
    ( (This)->lpVtbl -> put_zIndex(This,v) )
    ( (This)->lpVtbl -> get_zIndex(This,p) )
    ( (This)->lpVtbl -> put_overflow(This,v) )
    ( (This)->lpVtbl -> get_overflow(This,p) )
    ( (This)->lpVtbl -> put_pageBreakBefore(This,v) )
    ( (This)->lpVtbl -> get_pageBreakBefore(This,p) )
    ( (This)->lpVtbl -> put_pageBreakAfter(This,v) )
    ( (This)->lpVtbl -> get_pageBreakAfter(This,p) )
    ( (This)->lpVtbl -> put_cssText(This,v) )
    ( (This)->lpVtbl -> get_cssText(This,p) )
    ( (This)->lpVtbl -> put_cursor(This,v) )
    ( (This)->lpVtbl -> get_cursor(This,p) )
    ( (This)->lpVtbl -> put_clip(This,v) )
    ( (This)->lpVtbl -> get_clip(This,p) )
    ( (This)->lpVtbl -> put_filter(This,v) )
    ( (This)->lpVtbl -> get_filter(This,p) )
    ( (This)->lpVtbl -> put_tableLayout(This,v) )
    ( (This)->lpVtbl -> get_tableLayout(This,p) )
    ( (This)->lpVtbl -> put_borderCollapse(This,v) )
    ( (This)->lpVtbl -> get_borderCollapse(This,p) )
    ( (This)->lpVtbl -> put_direction(This,v) )
    ( (This)->lpVtbl -> get_direction(This,p) )
    ( (This)->lpVtbl -> put_behavior(This,v) )
    ( (This)->lpVtbl -> get_behavior(This,p) )
    ( (This)->lpVtbl -> put_position(This,v) )
    ( (This)->lpVtbl -> get_position(This,p) )
    ( (This)->lpVtbl -> put_unicodeBidi(This,v) )
    ( (This)->lpVtbl -> get_unicodeBidi(This,p) )
    ( (This)->lpVtbl -> put_bottom(This,v) )
    ( (This)->lpVtbl -> get_bottom(This,p) )
    ( (This)->lpVtbl -> put_right(This,v) )
    ( (This)->lpVtbl -> get_right(This,p) )
    ( (This)->lpVtbl -> put_imeMode(This,v) )
    ( (This)->lpVtbl -> get_imeMode(This,p) )
    ( (This)->lpVtbl -> put_rubyAlign(This,v) )
    ( (This)->lpVtbl -> get_rubyAlign(This,p) )
    ( (This)->lpVtbl -> put_rubyPosition(This,v) )
    ( (This)->lpVtbl -> get_rubyPosition(This,p) )
    ( (This)->lpVtbl -> put_rubyOverhang(This,v) )
    ( (This)->lpVtbl -> get_rubyOverhang(This,p) )
    ( (This)->lpVtbl -> put_layoutGridChar(This,v) )
    ( (This)->lpVtbl -> get_layoutGridChar(This,p) )
    ( (This)->lpVtbl -> put_layoutGridLine(This,v) )
    ( (This)->lpVtbl -> get_layoutGridLine(This,p) )
    ( (This)->lpVtbl -> put_layoutGridMode(This,v) )
    ( (This)->lpVtbl -> get_layoutGridMode(This,p) )
    ( (This)->lpVtbl -> put_layoutGridType(This,v) )
    ( (This)->lpVtbl -> get_layoutGridType(This,p) )
    ( (This)->lpVtbl -> put_layoutGrid(This,v) )
    ( (This)->lpVtbl -> get_layoutGrid(This,p) )
    ( (This)->lpVtbl -> put_textAutospace(This,v) )
    ( (This)->lpVtbl -> get_textAutospace(This,p) )
    ( (This)->lpVtbl -> put_wordBreak(This,v) )
    ( (This)->lpVtbl -> get_wordBreak(This,p) )
    ( (This)->lpVtbl -> put_lineBreak(This,v) )
    ( (This)->lpVtbl -> get_lineBreak(This,p) )
    ( (This)->lpVtbl -> put_textJustify(This,v) )
    ( (This)->lpVtbl -> get_textJustify(This,p) )
    ( (This)->lpVtbl -> put_textJustifyTrim(This,v) )
    ( (This)->lpVtbl -> get_textJustifyTrim(This,p) )
    ( (This)->lpVtbl -> put_textKashida(This,v) )
    ( (This)->lpVtbl -> get_textKashida(This,p) )
    ( (This)->lpVtbl -> put_overflowX(This,v) )
    ( (This)->lpVtbl -> get_overflowX(This,p) )
    ( (This)->lpVtbl -> put_overflowY(This,v) )
    ( (This)->lpVtbl -> get_overflowY(This,p) )
    ( (This)->lpVtbl -> put_accelerator(This,v) )
    ( (This)->lpVtbl -> get_accelerator(This,p) )
    ( (This)->lpVtbl -> put_layoutFlow(This,v) )
    ( (This)->lpVtbl -> get_layoutFlow(This,p) )
    ( (This)->lpVtbl -> put_zoom(This,v) )
    ( (This)->lpVtbl -> get_zoom(This,p) )
    ( (This)->lpVtbl -> put_wordWrap(This,v) )
    ( (This)->lpVtbl -> get_wordWrap(This,p) )
    ( (This)->lpVtbl -> put_textUnderlinePosition(This,v) )
    ( (This)->lpVtbl -> get_textUnderlinePosition(This,p) )
    ( (This)->lpVtbl -> put_scrollbarBaseColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarBaseColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarFaceColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarFaceColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbar3dLightColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbar3dLightColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarShadowColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarShadowColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarHighlightColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarHighlightColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarDarkShadowColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarDarkShadowColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarArrowColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarArrowColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarTrackColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarTrackColor(This,p) )
    ( (This)->lpVtbl -> put_writingMode(This,v) )
    ( (This)->lpVtbl -> get_writingMode(This,p) )
    ( (This)->lpVtbl -> put_textAlignLast(This,v) )
    ( (This)->lpVtbl -> get_textAlignLast(This,p) )
    ( (This)->lpVtbl -> put_textKashidaSpace(This,v) )
    ( (This)->lpVtbl -> get_textKashidaSpace(This,p) )
    ( (This)->lpVtbl -> put_textOverflow(This,v) )
    ( (This)->lpVtbl -> get_textOverflow(This,p) )
    ( (This)->lpVtbl -> put_minHeight(This,v) )
    ( (This)->lpVtbl -> get_minHeight(This,p) )
    ( (This)->lpVtbl -> put_msInterpolationMode(This,v) )
    ( (This)->lpVtbl -> get_msInterpolationMode(This,p) )
    ( (This)->lpVtbl -> put_maxHeight(This,v) )
    ( (This)->lpVtbl -> get_maxHeight(This,p) )
    ( (This)->lpVtbl -> put_minWidth(This,v) )
    ( (This)->lpVtbl -> get_minWidth(This,p) )
    ( (This)->lpVtbl -> put_maxWidth(This,v) )
    ( (This)->lpVtbl -> get_maxWidth(This,p) )
    ( (This)->lpVtbl -> put_content(This,v) )
    ( (This)->lpVtbl -> get_content(This,p) )
    ( (This)->lpVtbl -> put_captionSide(This,v) )
    ( (This)->lpVtbl -> get_captionSide(This,p) )
    ( (This)->lpVtbl -> put_counterIncrement(This,v) )
    ( (This)->lpVtbl -> get_counterIncrement(This,p) )
    ( (This)->lpVtbl -> put_counterReset(This,v) )
    ( (This)->lpVtbl -> get_counterReset(This,p) )
    ( (This)->lpVtbl -> put_outline(This,v) )
    ( (This)->lpVtbl -> get_outline(This,p) )
    ( (This)->lpVtbl -> put_outlineWidth(This,v) )
    ( (This)->lpVtbl -> get_outlineWidth(This,p) )
    ( (This)->lpVtbl -> put_outlineStyle(This,v) )
    ( (This)->lpVtbl -> get_outlineStyle(This,p) )
    ( (This)->lpVtbl -> put_outlineColor(This,v) )
    ( (This)->lpVtbl -> get_outlineColor(This,p) )
    ( (This)->lpVtbl -> put_boxSizing(This,v) )
    ( (This)->lpVtbl -> get_boxSizing(This,p) )
    ( (This)->lpVtbl -> put_borderSpacing(This,v) )
    ( (This)->lpVtbl -> get_borderSpacing(This,p) )
    ( (This)->lpVtbl -> put_orphans(This,v) )
    ( (This)->lpVtbl -> get_orphans(This,p) )
    ( (This)->lpVtbl -> put_widows(This,v) )
    ( (This)->lpVtbl -> get_widows(This,p) )
    ( (This)->lpVtbl -> put_pageBreakInside(This,v) )
    ( (This)->lpVtbl -> get_pageBreakInside(This,p) )
    ( (This)->lpVtbl -> put_emptyCells(This,v) )
    ( (This)->lpVtbl -> get_emptyCells(This,p) )
    ( (This)->lpVtbl -> put_msBlockProgression(This,v) )
    ( (This)->lpVtbl -> get_msBlockProgression(This,p) )
    ( (This)->lpVtbl -> put_quotes(This,v) )
    ( (This)->lpVtbl -> get_quotes(This,p) )
    ( (This)->lpVtbl -> put_alignmentBaseline(This,v) )
    ( (This)->lpVtbl -> get_alignmentBaseline(This,p) )
    ( (This)->lpVtbl -> put_baselineShift(This,v) )
    ( (This)->lpVtbl -> get_baselineShift(This,p) )
    ( (This)->lpVtbl -> put_dominantBaseline(This,v) )
    ( (This)->lpVtbl -> get_dominantBaseline(This,p) )
    ( (This)->lpVtbl -> put_fontSizeAdjust(This,v) )
    ( (This)->lpVtbl -> get_fontSizeAdjust(This,p) )
    ( (This)->lpVtbl -> put_fontStretch(This,v) )
    ( (This)->lpVtbl -> get_fontStretch(This,p) )
    ( (This)->lpVtbl -> put_opacity(This,v) )
    ( (This)->lpVtbl -> get_opacity(This,p) )
    ( (This)->lpVtbl -> put_clipPath(This,v) )
    ( (This)->lpVtbl -> get_clipPath(This,p) )
    ( (This)->lpVtbl -> put_clipRule(This,v) )
    ( (This)->lpVtbl -> get_clipRule(This,p) )
    ( (This)->lpVtbl -> put_fill(This,v) )
    ( (This)->lpVtbl -> get_fill(This,p) )
    ( (This)->lpVtbl -> put_fillOpacity(This,v) )
    ( (This)->lpVtbl -> get_fillOpacity(This,p) )
    ( (This)->lpVtbl -> put_fillRule(This,v) )
    ( (This)->lpVtbl -> get_fillRule(This,p) )
    ( (This)->lpVtbl -> put_kerning(This,v) )
    ( (This)->lpVtbl -> get_kerning(This,p) )
    ( (This)->lpVtbl -> put_marker(This,v) )
    ( (This)->lpVtbl -> get_marker(This,p) )
    ( (This)->lpVtbl -> put_markerEnd(This,v) )
    ( (This)->lpVtbl -> get_markerEnd(This,p) )
    ( (This)->lpVtbl -> put_markerMid(This,v) )
    ( (This)->lpVtbl -> get_markerMid(This,p) )
    ( (This)->lpVtbl -> put_markerStart(This,v) )
    ( (This)->lpVtbl -> get_markerStart(This,p) )
    ( (This)->lpVtbl -> put_mask(This,v) )
    ( (This)->lpVtbl -> get_mask(This,p) )
    ( (This)->lpVtbl -> put_pointerEvents(This,v) )
    ( (This)->lpVtbl -> get_pointerEvents(This,p) )
    ( (This)->lpVtbl -> put_stopColor(This,v) )
    ( (This)->lpVtbl -> get_stopColor(This,p) )
    ( (This)->lpVtbl -> put_stopOpacity(This,v) )
    ( (This)->lpVtbl -> get_stopOpacity(This,p) )
    ( (This)->lpVtbl -> put_stroke(This,v) )
    ( (This)->lpVtbl -> get_stroke(This,p) )
    ( (This)->lpVtbl -> put_strokeDasharray(This,v) )
    ( (This)->lpVtbl -> get_strokeDasharray(This,p) )
    ( (This)->lpVtbl -> put_strokeDashoffset(This,v) )
    ( (This)->lpVtbl -> get_strokeDashoffset(This,p) )
    ( (This)->lpVtbl -> put_strokeLinecap(This,v) )
    ( (This)->lpVtbl -> get_strokeLinecap(This,p) )
    ( (This)->lpVtbl -> put_strokeLinejoin(This,v) )
    ( (This)->lpVtbl -> get_strokeLinejoin(This,p) )
    ( (This)->lpVtbl -> put_strokeMiterlimit(This,v) )
    ( (This)->lpVtbl -> get_strokeMiterlimit(This,p) )
    ( (This)->lpVtbl -> put_strokeOpacity(This,v) )
    ( (This)->lpVtbl -> get_strokeOpacity(This,p) )
    ( (This)->lpVtbl -> put_strokeWidth(This,v) )
    ( (This)->lpVtbl -> get_strokeWidth(This,p) )
    ( (This)->lpVtbl -> put_textAnchor(This,v) )
    ( (This)->lpVtbl -> get_textAnchor(This,p) )
    ( (This)->lpVtbl -> put_glyphOrientationHorizontal(This,v) )
    ( (This)->lpVtbl -> get_glyphOrientationHorizontal(This,p) )
    ( (This)->lpVtbl -> put_glyphOrientationVertical(This,v) )
    ( (This)->lpVtbl -> get_glyphOrientationVertical(This,p) )
    ( (This)->lpVtbl -> put_borderRadius(This,v) )
    ( (This)->lpVtbl -> get_borderRadius(This,p) )
    ( (This)->lpVtbl -> put_borderTopLeftRadius(This,v) )
    ( (This)->lpVtbl -> get_borderTopLeftRadius(This,p) )
    ( (This)->lpVtbl -> put_borderTopRightRadius(This,v) )
    ( (This)->lpVtbl -> get_borderTopRightRadius(This,p) )
    ( (This)->lpVtbl -> put_borderBottomRightRadius(This,v) )
    ( (This)->lpVtbl -> get_borderBottomRightRadius(This,p) )
    ( (This)->lpVtbl -> put_borderBottomLeftRadius(This,v) )
    ( (This)->lpVtbl -> get_borderBottomLeftRadius(This,p) )
    ( (This)->lpVtbl -> put_clipTop(This,v) )
    ( (This)->lpVtbl -> get_clipTop(This,p) )
    ( (This)->lpVtbl -> put_clipRight(This,v) )
    ( (This)->lpVtbl -> get_clipRight(This,p) )
    ( (This)->lpVtbl -> get_clipBottom(This,p) )
    ( (This)->lpVtbl -> put_clipLeft(This,v) )
    ( (This)->lpVtbl -> get_clipLeft(This,p) )
    ( (This)->lpVtbl -> put_cssFloat(This,v) )
    ( (This)->lpVtbl -> get_cssFloat(This,p) )
    ( (This)->lpVtbl -> put_backgroundClip(This,v) )
    ( (This)->lpVtbl -> get_backgroundClip(This,p) )
    ( (This)->lpVtbl -> put_backgroundOrigin(This,v) )
    ( (This)->lpVtbl -> get_backgroundOrigin(This,p) )
    ( (This)->lpVtbl -> put_backgroundSize(This,v) )
    ( (This)->lpVtbl -> get_backgroundSize(This,p) )
    ( (This)->lpVtbl -> put_boxShadow(This,v) )
    ( (This)->lpVtbl -> get_boxShadow(This,p) )
    ( (This)->lpVtbl -> put_msTransform(This,v) )
    ( (This)->lpVtbl -> get_msTransform(This,p) )
    ( (This)->lpVtbl -> put_msTransformOrigin(This,v) )
    ( (This)->lpVtbl -> get_msTransformOrigin(This,p) )
EXTERN_C const IID IID_IHTMLCSSStyleDeclaration2;
    typedef struct IHTMLCSSStyleDeclaration2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCSSStyleDeclaration2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollChaining )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollChaining )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msContentZooming )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msContentZooming )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msContentZoomSnapType )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msContentZoomSnapType )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollRails )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollRails )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msContentZoomChaining )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msContentZoomChaining )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollSnapType )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollSnapType )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msContentZoomLimit )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msContentZoomLimit )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msContentZoomSnap )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msContentZoomSnap )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msContentZoomSnapPoints )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msContentZoomSnapPoints )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msContentZoomLimitMin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msContentZoomLimitMin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msContentZoomLimitMax )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msContentZoomLimitMax )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollSnapX )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollSnapX )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollSnapY )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollSnapY )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollSnapPointsX )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollSnapPointsX )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollSnapPointsY )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollSnapPointsY )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msGridColumn )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msGridColumn )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msGridColumnAlign )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msGridColumnAlign )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msGridColumns )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msGridColumns )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msGridColumnSpan )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msGridColumnSpan )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msGridRow )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msGridRow )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msGridRowAlign )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msGridRowAlign )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msGridRows )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msGridRows )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msGridRowSpan )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msGridRowSpan )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msWrapThrough )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msWrapThrough )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msWrapMargin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msWrapMargin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msWrapFlow )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msWrapFlow )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msAnimationName )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msAnimationName )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msAnimationDuration )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msAnimationDuration )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msAnimationTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msAnimationTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msAnimationDelay )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msAnimationDelay )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msAnimationDirection )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msAnimationDirection )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msAnimationPlayState )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msAnimationPlayState )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msAnimationIterationCount )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msAnimationIterationCount )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msAnimation )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msAnimation )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msAnimationFillMode )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msAnimationFillMode )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_colorInterpolationFilters )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_colorInterpolationFilters )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_columnCount )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_columnCount )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_columnWidth )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_columnWidth )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_columnGap )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_columnGap )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_columnFill )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_columnFill )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_columnSpan )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_columnSpan )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_columns )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_columns )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_columnRule )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_columnRule )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_columnRuleColor )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_columnRuleColor )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_columnRuleStyle )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_columnRuleStyle )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_columnRuleWidth )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_columnRuleWidth )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_breakBefore )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_breakBefore )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_breakAfter )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_breakAfter )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_breakInside )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_breakInside )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_floodColor )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_floodColor )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_floodOpacity )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_floodOpacity )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_lightingColor )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lightingColor )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollLimitXMin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollLimitXMin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollLimitYMin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollLimitYMin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollLimitXMax )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollLimitXMax )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollLimitYMax )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollLimitYMax )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollLimit )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollLimit )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textShadow )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textShadow )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlowFrom )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlowFrom )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlowInto )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlowInto )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msHyphens )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msHyphens )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msHyphenateLimitZone )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msHyphenateLimitZone )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msHyphenateLimitChars )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msHyphenateLimitChars )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msHyphenateLimitLines )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msHyphenateLimitLines )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msHighContrastAdjust )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msHighContrastAdjust )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_enableBackground )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_enableBackground )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFontFeatureSettings )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFontFeatureSettings )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msUserSelect )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msUserSelect )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msOverflowStyle )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msOverflowStyle )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTransformStyle )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTransformStyle )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msBackfaceVisibility )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msBackfaceVisibility )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msPerspective )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msPerspective )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msPerspectiveOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msPerspectiveOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTransitionProperty )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTransitionProperty )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTransitionDuration )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTransitionDuration )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTransitionTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTransitionTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTransitionDelay )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTransitionDelay )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTransition )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTransition )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTouchAction )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTouchAction )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msScrollTranslation )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msScrollTranslation )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlex )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlex )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlexPositive )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlexPositive )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlexNegative )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlexNegative )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlexPreferredSize )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlexPreferredSize )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlexFlow )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlexFlow )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlexDirection )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlexDirection )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlexWrap )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlexWrap )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlexAlign )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlexAlign )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlexItemAlign )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlexItemAlign )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlexPack )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlexPack )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlexLinePack )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlexLinePack )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msFlexOrder )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msFlexOrder )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTouchSelect )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTouchSelect )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_transform )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_transform )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_transformOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_transformOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_transformStyle )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_transformStyle )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backfaceVisibility )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backfaceVisibility )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_perspective )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_perspective )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_perspectiveOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_perspectiveOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_transitionProperty )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_transitionProperty )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_transitionDuration )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_transitionDuration )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_transitionTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_transitionTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_transitionDelay )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_transitionDelay )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_transition )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_transition )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontFeatureSettings )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontFeatureSettings )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_animationName )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_animationName )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_animationDuration )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_animationDuration )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_animationTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_animationTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_animationDelay )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_animationDelay )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_animationDirection )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_animationDirection )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_animationPlayState )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_animationPlayState )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_animationIterationCount )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_animationIterationCount )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_animation )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_animation )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_animationFillMode )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_animationFillMode )(
            __RPC__in IHTMLCSSStyleDeclaration2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLCSSStyleDeclaration2Vtbl;
    interface IHTMLCSSStyleDeclaration2
    {
        CONST_VTBL struct IHTMLCSSStyleDeclaration2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_msScrollChaining(This,v) )
    ( (This)->lpVtbl -> get_msScrollChaining(This,p) )
    ( (This)->lpVtbl -> put_msContentZooming(This,v) )
    ( (This)->lpVtbl -> get_msContentZooming(This,p) )
    ( (This)->lpVtbl -> put_msContentZoomSnapType(This,v) )
    ( (This)->lpVtbl -> get_msContentZoomSnapType(This,p) )
    ( (This)->lpVtbl -> put_msScrollRails(This,v) )
    ( (This)->lpVtbl -> get_msScrollRails(This,p) )
    ( (This)->lpVtbl -> put_msContentZoomChaining(This,v) )
    ( (This)->lpVtbl -> get_msContentZoomChaining(This,p) )
    ( (This)->lpVtbl -> put_msScrollSnapType(This,v) )
    ( (This)->lpVtbl -> get_msScrollSnapType(This,p) )
    ( (This)->lpVtbl -> put_msContentZoomLimit(This,v) )
    ( (This)->lpVtbl -> get_msContentZoomLimit(This,p) )
    ( (This)->lpVtbl -> put_msContentZoomSnap(This,v) )
    ( (This)->lpVtbl -> get_msContentZoomSnap(This,p) )
    ( (This)->lpVtbl -> put_msContentZoomSnapPoints(This,v) )
    ( (This)->lpVtbl -> get_msContentZoomSnapPoints(This,p) )
    ( (This)->lpVtbl -> put_msContentZoomLimitMin(This,v) )
    ( (This)->lpVtbl -> get_msContentZoomLimitMin(This,p) )
    ( (This)->lpVtbl -> put_msContentZoomLimitMax(This,v) )
    ( (This)->lpVtbl -> get_msContentZoomLimitMax(This,p) )
    ( (This)->lpVtbl -> put_msScrollSnapX(This,v) )
    ( (This)->lpVtbl -> get_msScrollSnapX(This,p) )
    ( (This)->lpVtbl -> put_msScrollSnapY(This,v) )
    ( (This)->lpVtbl -> get_msScrollSnapY(This,p) )
    ( (This)->lpVtbl -> put_msScrollSnapPointsX(This,v) )
    ( (This)->lpVtbl -> get_msScrollSnapPointsX(This,p) )
    ( (This)->lpVtbl -> put_msScrollSnapPointsY(This,v) )
    ( (This)->lpVtbl -> get_msScrollSnapPointsY(This,p) )
    ( (This)->lpVtbl -> put_msGridColumn(This,v) )
    ( (This)->lpVtbl -> get_msGridColumn(This,p) )
    ( (This)->lpVtbl -> put_msGridColumnAlign(This,v) )
    ( (This)->lpVtbl -> get_msGridColumnAlign(This,p) )
    ( (This)->lpVtbl -> put_msGridColumns(This,v) )
    ( (This)->lpVtbl -> get_msGridColumns(This,p) )
    ( (This)->lpVtbl -> put_msGridColumnSpan(This,v) )
    ( (This)->lpVtbl -> get_msGridColumnSpan(This,p) )
    ( (This)->lpVtbl -> put_msGridRow(This,v) )
    ( (This)->lpVtbl -> get_msGridRow(This,p) )
    ( (This)->lpVtbl -> put_msGridRowAlign(This,v) )
    ( (This)->lpVtbl -> get_msGridRowAlign(This,p) )
    ( (This)->lpVtbl -> put_msGridRows(This,v) )
    ( (This)->lpVtbl -> get_msGridRows(This,p) )
    ( (This)->lpVtbl -> put_msGridRowSpan(This,v) )
    ( (This)->lpVtbl -> get_msGridRowSpan(This,p) )
    ( (This)->lpVtbl -> put_msWrapThrough(This,v) )
    ( (This)->lpVtbl -> get_msWrapThrough(This,p) )
    ( (This)->lpVtbl -> put_msWrapMargin(This,v) )
    ( (This)->lpVtbl -> get_msWrapMargin(This,p) )
    ( (This)->lpVtbl -> put_msWrapFlow(This,v) )
    ( (This)->lpVtbl -> get_msWrapFlow(This,p) )
    ( (This)->lpVtbl -> put_msAnimationName(This,v) )
    ( (This)->lpVtbl -> get_msAnimationName(This,p) )
    ( (This)->lpVtbl -> put_msAnimationDuration(This,v) )
    ( (This)->lpVtbl -> get_msAnimationDuration(This,p) )
    ( (This)->lpVtbl -> put_msAnimationTimingFunction(This,v) )
    ( (This)->lpVtbl -> get_msAnimationTimingFunction(This,p) )
    ( (This)->lpVtbl -> put_msAnimationDelay(This,v) )
    ( (This)->lpVtbl -> get_msAnimationDelay(This,p) )
    ( (This)->lpVtbl -> put_msAnimationDirection(This,v) )
    ( (This)->lpVtbl -> get_msAnimationDirection(This,p) )
    ( (This)->lpVtbl -> put_msAnimationPlayState(This,v) )
    ( (This)->lpVtbl -> get_msAnimationPlayState(This,p) )
    ( (This)->lpVtbl -> put_msAnimationIterationCount(This,v) )
    ( (This)->lpVtbl -> get_msAnimationIterationCount(This,p) )
    ( (This)->lpVtbl -> put_msAnimation(This,v) )
    ( (This)->lpVtbl -> get_msAnimation(This,p) )
    ( (This)->lpVtbl -> put_msAnimationFillMode(This,v) )
    ( (This)->lpVtbl -> get_msAnimationFillMode(This,p) )
    ( (This)->lpVtbl -> put_colorInterpolationFilters(This,v) )
    ( (This)->lpVtbl -> get_colorInterpolationFilters(This,p) )
    ( (This)->lpVtbl -> put_columnCount(This,v) )
    ( (This)->lpVtbl -> get_columnCount(This,p) )
    ( (This)->lpVtbl -> put_columnWidth(This,v) )
    ( (This)->lpVtbl -> get_columnWidth(This,p) )
    ( (This)->lpVtbl -> put_columnGap(This,v) )
    ( (This)->lpVtbl -> get_columnGap(This,p) )
    ( (This)->lpVtbl -> put_columnFill(This,v) )
    ( (This)->lpVtbl -> get_columnFill(This,p) )
    ( (This)->lpVtbl -> put_columnSpan(This,v) )
    ( (This)->lpVtbl -> get_columnSpan(This,p) )
    ( (This)->lpVtbl -> put_columns(This,v) )
    ( (This)->lpVtbl -> get_columns(This,p) )
    ( (This)->lpVtbl -> put_columnRule(This,v) )
    ( (This)->lpVtbl -> get_columnRule(This,p) )
    ( (This)->lpVtbl -> put_columnRuleColor(This,v) )
    ( (This)->lpVtbl -> get_columnRuleColor(This,p) )
    ( (This)->lpVtbl -> put_columnRuleStyle(This,v) )
    ( (This)->lpVtbl -> get_columnRuleStyle(This,p) )
    ( (This)->lpVtbl -> put_columnRuleWidth(This,v) )
    ( (This)->lpVtbl -> get_columnRuleWidth(This,p) )
    ( (This)->lpVtbl -> put_breakBefore(This,v) )
    ( (This)->lpVtbl -> get_breakBefore(This,p) )
    ( (This)->lpVtbl -> put_breakAfter(This,v) )
    ( (This)->lpVtbl -> get_breakAfter(This,p) )
    ( (This)->lpVtbl -> put_breakInside(This,v) )
    ( (This)->lpVtbl -> get_breakInside(This,p) )
    ( (This)->lpVtbl -> put_floodColor(This,v) )
    ( (This)->lpVtbl -> get_floodColor(This,p) )
    ( (This)->lpVtbl -> put_floodOpacity(This,v) )
    ( (This)->lpVtbl -> get_floodOpacity(This,p) )
    ( (This)->lpVtbl -> put_lightingColor(This,v) )
    ( (This)->lpVtbl -> get_lightingColor(This,p) )
    ( (This)->lpVtbl -> put_msScrollLimitXMin(This,v) )
    ( (This)->lpVtbl -> get_msScrollLimitXMin(This,p) )
    ( (This)->lpVtbl -> put_msScrollLimitYMin(This,v) )
    ( (This)->lpVtbl -> get_msScrollLimitYMin(This,p) )
    ( (This)->lpVtbl -> put_msScrollLimitXMax(This,v) )
    ( (This)->lpVtbl -> get_msScrollLimitXMax(This,p) )
    ( (This)->lpVtbl -> put_msScrollLimitYMax(This,v) )
    ( (This)->lpVtbl -> get_msScrollLimitYMax(This,p) )
    ( (This)->lpVtbl -> put_msScrollLimit(This,v) )
    ( (This)->lpVtbl -> get_msScrollLimit(This,p) )
    ( (This)->lpVtbl -> put_textShadow(This,v) )
    ( (This)->lpVtbl -> get_textShadow(This,p) )
    ( (This)->lpVtbl -> put_msFlowFrom(This,v) )
    ( (This)->lpVtbl -> get_msFlowFrom(This,p) )
    ( (This)->lpVtbl -> put_msFlowInto(This,v) )
    ( (This)->lpVtbl -> get_msFlowInto(This,p) )
    ( (This)->lpVtbl -> put_msHyphens(This,v) )
    ( (This)->lpVtbl -> get_msHyphens(This,p) )
    ( (This)->lpVtbl -> put_msHyphenateLimitZone(This,v) )
    ( (This)->lpVtbl -> get_msHyphenateLimitZone(This,p) )
    ( (This)->lpVtbl -> put_msHyphenateLimitChars(This,v) )
    ( (This)->lpVtbl -> get_msHyphenateLimitChars(This,p) )
    ( (This)->lpVtbl -> put_msHyphenateLimitLines(This,v) )
    ( (This)->lpVtbl -> get_msHyphenateLimitLines(This,p) )
    ( (This)->lpVtbl -> put_msHighContrastAdjust(This,v) )
    ( (This)->lpVtbl -> get_msHighContrastAdjust(This,p) )
    ( (This)->lpVtbl -> put_enableBackground(This,v) )
    ( (This)->lpVtbl -> get_enableBackground(This,p) )
    ( (This)->lpVtbl -> put_msFontFeatureSettings(This,v) )
    ( (This)->lpVtbl -> get_msFontFeatureSettings(This,p) )
    ( (This)->lpVtbl -> put_msUserSelect(This,v) )
    ( (This)->lpVtbl -> get_msUserSelect(This,p) )
    ( (This)->lpVtbl -> put_msOverflowStyle(This,v) )
    ( (This)->lpVtbl -> get_msOverflowStyle(This,p) )
    ( (This)->lpVtbl -> put_msTransformStyle(This,v) )
    ( (This)->lpVtbl -> get_msTransformStyle(This,p) )
    ( (This)->lpVtbl -> put_msBackfaceVisibility(This,v) )
    ( (This)->lpVtbl -> get_msBackfaceVisibility(This,p) )
    ( (This)->lpVtbl -> put_msPerspective(This,v) )
    ( (This)->lpVtbl -> get_msPerspective(This,p) )
    ( (This)->lpVtbl -> put_msPerspectiveOrigin(This,v) )
    ( (This)->lpVtbl -> get_msPerspectiveOrigin(This,p) )
    ( (This)->lpVtbl -> put_msTransitionProperty(This,v) )
    ( (This)->lpVtbl -> get_msTransitionProperty(This,p) )
    ( (This)->lpVtbl -> put_msTransitionDuration(This,v) )
    ( (This)->lpVtbl -> get_msTransitionDuration(This,p) )
    ( (This)->lpVtbl -> put_msTransitionTimingFunction(This,v) )
    ( (This)->lpVtbl -> get_msTransitionTimingFunction(This,p) )
    ( (This)->lpVtbl -> put_msTransitionDelay(This,v) )
    ( (This)->lpVtbl -> get_msTransitionDelay(This,p) )
    ( (This)->lpVtbl -> put_msTransition(This,v) )
    ( (This)->lpVtbl -> get_msTransition(This,p) )
    ( (This)->lpVtbl -> put_msTouchAction(This,v) )
    ( (This)->lpVtbl -> get_msTouchAction(This,p) )
    ( (This)->lpVtbl -> put_msScrollTranslation(This,v) )
    ( (This)->lpVtbl -> get_msScrollTranslation(This,p) )
    ( (This)->lpVtbl -> put_msFlex(This,v) )
    ( (This)->lpVtbl -> get_msFlex(This,p) )
    ( (This)->lpVtbl -> put_msFlexPositive(This,v) )
    ( (This)->lpVtbl -> get_msFlexPositive(This,p) )
    ( (This)->lpVtbl -> put_msFlexNegative(This,v) )
    ( (This)->lpVtbl -> get_msFlexNegative(This,p) )
    ( (This)->lpVtbl -> put_msFlexPreferredSize(This,v) )
    ( (This)->lpVtbl -> get_msFlexPreferredSize(This,p) )
    ( (This)->lpVtbl -> put_msFlexFlow(This,v) )
    ( (This)->lpVtbl -> get_msFlexFlow(This,p) )
    ( (This)->lpVtbl -> put_msFlexDirection(This,v) )
    ( (This)->lpVtbl -> get_msFlexDirection(This,p) )
    ( (This)->lpVtbl -> put_msFlexWrap(This,v) )
    ( (This)->lpVtbl -> get_msFlexWrap(This,p) )
    ( (This)->lpVtbl -> put_msFlexAlign(This,v) )
    ( (This)->lpVtbl -> get_msFlexAlign(This,p) )
    ( (This)->lpVtbl -> put_msFlexItemAlign(This,v) )
    ( (This)->lpVtbl -> get_msFlexItemAlign(This,p) )
    ( (This)->lpVtbl -> put_msFlexPack(This,v) )
    ( (This)->lpVtbl -> get_msFlexPack(This,p) )
    ( (This)->lpVtbl -> put_msFlexLinePack(This,v) )
    ( (This)->lpVtbl -> get_msFlexLinePack(This,p) )
    ( (This)->lpVtbl -> put_msFlexOrder(This,v) )
    ( (This)->lpVtbl -> get_msFlexOrder(This,p) )
    ( (This)->lpVtbl -> put_msTouchSelect(This,v) )
    ( (This)->lpVtbl -> get_msTouchSelect(This,p) )
    ( (This)->lpVtbl -> put_transform(This,v) )
    ( (This)->lpVtbl -> get_transform(This,p) )
    ( (This)->lpVtbl -> put_transformOrigin(This,v) )
    ( (This)->lpVtbl -> get_transformOrigin(This,p) )
    ( (This)->lpVtbl -> put_transformStyle(This,v) )
    ( (This)->lpVtbl -> get_transformStyle(This,p) )
    ( (This)->lpVtbl -> put_backfaceVisibility(This,v) )
    ( (This)->lpVtbl -> get_backfaceVisibility(This,p) )
    ( (This)->lpVtbl -> put_perspective(This,v) )
    ( (This)->lpVtbl -> get_perspective(This,p) )
    ( (This)->lpVtbl -> put_perspectiveOrigin(This,v) )
    ( (This)->lpVtbl -> get_perspectiveOrigin(This,p) )
    ( (This)->lpVtbl -> put_transitionProperty(This,v) )
    ( (This)->lpVtbl -> get_transitionProperty(This,p) )
    ( (This)->lpVtbl -> put_transitionDuration(This,v) )
    ( (This)->lpVtbl -> get_transitionDuration(This,p) )
    ( (This)->lpVtbl -> put_transitionTimingFunction(This,v) )
    ( (This)->lpVtbl -> get_transitionTimingFunction(This,p) )
    ( (This)->lpVtbl -> put_transitionDelay(This,v) )
    ( (This)->lpVtbl -> get_transitionDelay(This,p) )
    ( (This)->lpVtbl -> put_transition(This,v) )
    ( (This)->lpVtbl -> get_transition(This,p) )
    ( (This)->lpVtbl -> put_fontFeatureSettings(This,v) )
    ( (This)->lpVtbl -> get_fontFeatureSettings(This,p) )
    ( (This)->lpVtbl -> put_animationName(This,v) )
    ( (This)->lpVtbl -> get_animationName(This,p) )
    ( (This)->lpVtbl -> put_animationDuration(This,v) )
    ( (This)->lpVtbl -> get_animationDuration(This,p) )
    ( (This)->lpVtbl -> put_animationTimingFunction(This,v) )
    ( (This)->lpVtbl -> get_animationTimingFunction(This,p) )
    ( (This)->lpVtbl -> put_animationDelay(This,v) )
    ( (This)->lpVtbl -> get_animationDelay(This,p) )
    ( (This)->lpVtbl -> put_animationDirection(This,v) )
    ( (This)->lpVtbl -> get_animationDirection(This,p) )
    ( (This)->lpVtbl -> put_animationPlayState(This,v) )
    ( (This)->lpVtbl -> get_animationPlayState(This,p) )
    ( (This)->lpVtbl -> put_animationIterationCount(This,v) )
    ( (This)->lpVtbl -> get_animationIterationCount(This,p) )
    ( (This)->lpVtbl -> put_animation(This,v) )
    ( (This)->lpVtbl -> get_animation(This,p) )
    ( (This)->lpVtbl -> put_animationFillMode(This,v) )
    ( (This)->lpVtbl -> get_animationFillMode(This,p) )
EXTERN_C const IID IID_IHTMLCSSStyleDeclaration3;
    typedef struct IHTMLCSSStyleDeclaration3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCSSStyleDeclaration3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_flex )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_flex )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_flexDirection )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_flexDirection )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_flexWrap )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_flexWrap )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_flexFlow )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_flexFlow )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_flexGrow )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_flexGrow )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_flexShrink )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_flexShrink )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_flexBasis )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_flexBasis )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_justifyContent )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_justifyContent )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_alignItems )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_alignItems )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_alignSelf )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_alignSelf )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_alignContent )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_alignContent )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_borderImage )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_borderImage )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderImageSource )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderImageSource )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderImageSlice )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderImageSlice )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderImageWidth )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderImageWidth )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderImageOutset )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderImageOutset )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderImageRepeat )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderImageRepeat )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msImeAlign )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msImeAlign )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTextCombineHorizontal )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTextCombineHorizontal )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_touchAction )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_touchAction )(
            __RPC__in IHTMLCSSStyleDeclaration3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLCSSStyleDeclaration3Vtbl;
    interface IHTMLCSSStyleDeclaration3
    {
        CONST_VTBL struct IHTMLCSSStyleDeclaration3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_flex(This,v) )
    ( (This)->lpVtbl -> get_flex(This,p) )
    ( (This)->lpVtbl -> put_flexDirection(This,v) )
    ( (This)->lpVtbl -> get_flexDirection(This,p) )
    ( (This)->lpVtbl -> put_flexWrap(This,v) )
    ( (This)->lpVtbl -> get_flexWrap(This,p) )
    ( (This)->lpVtbl -> put_flexFlow(This,v) )
    ( (This)->lpVtbl -> get_flexFlow(This,p) )
    ( (This)->lpVtbl -> put_flexGrow(This,v) )
    ( (This)->lpVtbl -> get_flexGrow(This,p) )
    ( (This)->lpVtbl -> put_flexShrink(This,v) )
    ( (This)->lpVtbl -> get_flexShrink(This,p) )
    ( (This)->lpVtbl -> put_flexBasis(This,v) )
    ( (This)->lpVtbl -> get_flexBasis(This,p) )
    ( (This)->lpVtbl -> put_justifyContent(This,v) )
    ( (This)->lpVtbl -> get_justifyContent(This,p) )
    ( (This)->lpVtbl -> put_alignItems(This,v) )
    ( (This)->lpVtbl -> get_alignItems(This,p) )
    ( (This)->lpVtbl -> put_alignSelf(This,v) )
    ( (This)->lpVtbl -> get_alignSelf(This,p) )
    ( (This)->lpVtbl -> put_alignContent(This,v) )
    ( (This)->lpVtbl -> get_alignContent(This,p) )
    ( (This)->lpVtbl -> put_borderImage(This,v) )
    ( (This)->lpVtbl -> get_borderImage(This,p) )
    ( (This)->lpVtbl -> put_borderImageSource(This,v) )
    ( (This)->lpVtbl -> get_borderImageSource(This,p) )
    ( (This)->lpVtbl -> put_borderImageSlice(This,v) )
    ( (This)->lpVtbl -> get_borderImageSlice(This,p) )
    ( (This)->lpVtbl -> put_borderImageWidth(This,v) )
    ( (This)->lpVtbl -> get_borderImageWidth(This,p) )
    ( (This)->lpVtbl -> put_borderImageOutset(This,v) )
    ( (This)->lpVtbl -> get_borderImageOutset(This,p) )
    ( (This)->lpVtbl -> put_borderImageRepeat(This,v) )
    ( (This)->lpVtbl -> get_borderImageRepeat(This,p) )
    ( (This)->lpVtbl -> put_msImeAlign(This,v) )
    ( (This)->lpVtbl -> get_msImeAlign(This,p) )
    ( (This)->lpVtbl -> put_msTextCombineHorizontal(This,v) )
    ( (This)->lpVtbl -> get_msTextCombineHorizontal(This,p) )
    ( (This)->lpVtbl -> put_touchAction(This,v) )
    ( (This)->lpVtbl -> get_touchAction(This,p) )
EXTERN_C const IID IID_IHTMLCSSStyleDeclaration4;
    typedef struct IHTMLCSSStyleDeclaration4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCSSStyleDeclaration4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitAppearance )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitAppearance )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitUserSelect )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitUserSelect )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBoxAlign )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBoxAlign )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBoxOrdinalGroup )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBoxOrdinalGroup )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBoxPack )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBoxPack )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBoxFlex )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBoxFlex )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBoxOrient )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBoxOrient )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBoxDirection )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBoxDirection )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitTransform )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitTransform )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBackgroundSize )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBackgroundSize )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBackfaceVisibility )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBackfaceVisibility )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitAnimation )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitAnimation )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitTransition )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitTransition )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitAnimationName )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitAnimationName )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitAnimationDuration )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitAnimationDuration )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitAnimationTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitAnimationTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitAnimationDelay )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitAnimationDelay )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitAnimationIterationCount )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitAnimationIterationCount )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitAnimationDirection )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitAnimationDirection )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitAnimationPlayState )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitAnimationPlayState )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitTransitionProperty )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitTransitionProperty )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitTransitionDuration )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitTransitionDuration )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitTransitionTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitTransitionTimingFunction )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitTransitionDelay )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitTransitionDelay )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBackgroundAttachment )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBackgroundAttachment )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBackgroundColor )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBackgroundColor )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBackgroundClip )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBackgroundClip )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBackgroundImage )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBackgroundImage )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBackgroundRepeat )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBackgroundRepeat )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBackgroundOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBackgroundOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBackgroundPosition )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBackgroundPosition )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBackgroundPositionX )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBackgroundPositionX )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBackgroundPositionY )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBackgroundPositionY )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_webkitBackground )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_webkitBackground )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitTransformOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitTransformOrigin )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msTextSizeAdjust )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msTextSizeAdjust )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitTextSizeAdjust )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitTextSizeAdjust )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_webkitBorderImage )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_webkitBorderImage )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBorderImageSource )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBorderImageSource )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBorderImageSlice )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBorderImageSlice )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBorderImageWidth )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBorderImageWidth )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBorderImageOutset )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBorderImageOutset )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBorderImageRepeat )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBorderImageRepeat )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitBoxSizing )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitBoxSizing )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_webkitAnimationFillMode )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_webkitAnimationFillMode )(
            __RPC__in IHTMLCSSStyleDeclaration4 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLCSSStyleDeclaration4Vtbl;
    interface IHTMLCSSStyleDeclaration4
    {
        CONST_VTBL struct IHTMLCSSStyleDeclaration4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_webkitAppearance(This,v) )
    ( (This)->lpVtbl -> get_webkitAppearance(This,p) )
    ( (This)->lpVtbl -> put_webkitUserSelect(This,v) )
    ( (This)->lpVtbl -> get_webkitUserSelect(This,p) )
    ( (This)->lpVtbl -> put_webkitBoxAlign(This,v) )
    ( (This)->lpVtbl -> get_webkitBoxAlign(This,p) )
    ( (This)->lpVtbl -> put_webkitBoxOrdinalGroup(This,v) )
    ( (This)->lpVtbl -> get_webkitBoxOrdinalGroup(This,p) )
    ( (This)->lpVtbl -> put_webkitBoxPack(This,v) )
    ( (This)->lpVtbl -> get_webkitBoxPack(This,p) )
    ( (This)->lpVtbl -> put_webkitBoxFlex(This,v) )
    ( (This)->lpVtbl -> get_webkitBoxFlex(This,p) )
    ( (This)->lpVtbl -> put_webkitBoxOrient(This,v) )
    ( (This)->lpVtbl -> get_webkitBoxOrient(This,p) )
    ( (This)->lpVtbl -> put_webkitBoxDirection(This,v) )
    ( (This)->lpVtbl -> get_webkitBoxDirection(This,p) )
    ( (This)->lpVtbl -> put_webkitTransform(This,v) )
    ( (This)->lpVtbl -> get_webkitTransform(This,p) )
    ( (This)->lpVtbl -> put_webkitBackgroundSize(This,v) )
    ( (This)->lpVtbl -> get_webkitBackgroundSize(This,p) )
    ( (This)->lpVtbl -> put_webkitBackfaceVisibility(This,v) )
    ( (This)->lpVtbl -> get_webkitBackfaceVisibility(This,p) )
    ( (This)->lpVtbl -> put_webkitAnimation(This,v) )
    ( (This)->lpVtbl -> get_webkitAnimation(This,p) )
    ( (This)->lpVtbl -> put_webkitTransition(This,v) )
    ( (This)->lpVtbl -> get_webkitTransition(This,p) )
    ( (This)->lpVtbl -> put_webkitAnimationName(This,v) )
    ( (This)->lpVtbl -> get_webkitAnimationName(This,p) )
    ( (This)->lpVtbl -> put_webkitAnimationDuration(This,v) )
    ( (This)->lpVtbl -> get_webkitAnimationDuration(This,p) )
    ( (This)->lpVtbl -> put_webkitAnimationTimingFunction(This,v) )
    ( (This)->lpVtbl -> get_webkitAnimationTimingFunction(This,p) )
    ( (This)->lpVtbl -> put_webkitAnimationDelay(This,v) )
    ( (This)->lpVtbl -> get_webkitAnimationDelay(This,p) )
    ( (This)->lpVtbl -> put_webkitAnimationIterationCount(This,v) )
    ( (This)->lpVtbl -> get_webkitAnimationIterationCount(This,p) )
    ( (This)->lpVtbl -> put_webkitAnimationDirection(This,v) )
    ( (This)->lpVtbl -> get_webkitAnimationDirection(This,p) )
    ( (This)->lpVtbl -> put_webkitAnimationPlayState(This,v) )
    ( (This)->lpVtbl -> get_webkitAnimationPlayState(This,p) )
    ( (This)->lpVtbl -> put_webkitTransitionProperty(This,v) )
    ( (This)->lpVtbl -> get_webkitTransitionProperty(This,p) )
    ( (This)->lpVtbl -> put_webkitTransitionDuration(This,v) )
    ( (This)->lpVtbl -> get_webkitTransitionDuration(This,p) )
    ( (This)->lpVtbl -> put_webkitTransitionTimingFunction(This,v) )
    ( (This)->lpVtbl -> get_webkitTransitionTimingFunction(This,p) )
    ( (This)->lpVtbl -> put_webkitTransitionDelay(This,v) )
    ( (This)->lpVtbl -> get_webkitTransitionDelay(This,p) )
    ( (This)->lpVtbl -> put_webkitBackgroundAttachment(This,v) )
    ( (This)->lpVtbl -> get_webkitBackgroundAttachment(This,p) )
    ( (This)->lpVtbl -> put_webkitBackgroundColor(This,v) )
    ( (This)->lpVtbl -> get_webkitBackgroundColor(This,p) )
    ( (This)->lpVtbl -> put_webkitBackgroundClip(This,v) )
    ( (This)->lpVtbl -> get_webkitBackgroundClip(This,p) )
    ( (This)->lpVtbl -> put_webkitBackgroundImage(This,v) )
    ( (This)->lpVtbl -> get_webkitBackgroundImage(This,p) )
    ( (This)->lpVtbl -> put_webkitBackgroundRepeat(This,v) )
    ( (This)->lpVtbl -> get_webkitBackgroundRepeat(This,p) )
    ( (This)->lpVtbl -> put_webkitBackgroundOrigin(This,v) )
    ( (This)->lpVtbl -> get_webkitBackgroundOrigin(This,p) )
    ( (This)->lpVtbl -> put_webkitBackgroundPosition(This,v) )
    ( (This)->lpVtbl -> get_webkitBackgroundPosition(This,p) )
    ( (This)->lpVtbl -> put_webkitBackgroundPositionX(This,v) )
    ( (This)->lpVtbl -> get_webkitBackgroundPositionX(This,p) )
    ( (This)->lpVtbl -> put_webkitBackgroundPositionY(This,v) )
    ( (This)->lpVtbl -> get_webkitBackgroundPositionY(This,p) )
    ( (This)->lpVtbl -> put_webkitBackground(This,v) )
    ( (This)->lpVtbl -> get_webkitBackground(This,p) )
    ( (This)->lpVtbl -> put_webkitTransformOrigin(This,v) )
    ( (This)->lpVtbl -> get_webkitTransformOrigin(This,p) )
    ( (This)->lpVtbl -> put_msTextSizeAdjust(This,v) )
    ( (This)->lpVtbl -> get_msTextSizeAdjust(This,p) )
    ( (This)->lpVtbl -> put_webkitTextSizeAdjust(This,v) )
    ( (This)->lpVtbl -> get_webkitTextSizeAdjust(This,p) )
    ( (This)->lpVtbl -> put_webkitBorderImage(This,v) )
    ( (This)->lpVtbl -> get_webkitBorderImage(This,p) )
    ( (This)->lpVtbl -> put_webkitBorderImageSource(This,v) )
    ( (This)->lpVtbl -> get_webkitBorderImageSource(This,p) )
    ( (This)->lpVtbl -> put_webkitBorderImageSlice(This,v) )
    ( (This)->lpVtbl -> get_webkitBorderImageSlice(This,p) )
    ( (This)->lpVtbl -> put_webkitBorderImageWidth(This,v) )
    ( (This)->lpVtbl -> get_webkitBorderImageWidth(This,p) )
    ( (This)->lpVtbl -> put_webkitBorderImageOutset(This,v) )
    ( (This)->lpVtbl -> get_webkitBorderImageOutset(This,p) )
    ( (This)->lpVtbl -> put_webkitBorderImageRepeat(This,v) )
    ( (This)->lpVtbl -> get_webkitBorderImageRepeat(This,p) )
    ( (This)->lpVtbl -> put_webkitBoxSizing(This,v) )
    ( (This)->lpVtbl -> get_webkitBoxSizing(This,p) )
    ( (This)->lpVtbl -> put_webkitAnimationFillMode(This,v) )
    ( (This)->lpVtbl -> get_webkitAnimationFillMode(This,p) )
EXTERN_C const IID IID_IHTMLStyleEnabled;
    typedef struct IHTMLStyleEnabledVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleEnabled * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleEnabled * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleEnabled * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleEnabled * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleEnabled * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleEnabled * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleEnabled * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *msGetPropertyEnabled )(
            __RPC__in IHTMLStyleEnabled * This,
                       __RPC__in BSTR name,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *msPutPropertyEnabled )(
            __RPC__in IHTMLStyleEnabled * This,
                       __RPC__in BSTR name,
                       VARIANT_BOOL b);
        END_INTERFACE
    } IHTMLStyleEnabledVtbl;
    interface IHTMLStyleEnabled
    {
        CONST_VTBL struct IHTMLStyleEnabledVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> msGetPropertyEnabled(This,name,p) )
    ( (This)->lpVtbl -> msPutPropertyEnabled(This,name,b) )
EXTERN_C const IID DIID_DispHTMLCSSStyleDeclaration;
    typedef struct DispHTMLCSSStyleDeclarationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLCSSStyleDeclaration * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLCSSStyleDeclaration * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLCSSStyleDeclaration * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLCSSStyleDeclaration * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLCSSStyleDeclaration * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLCSSStyleDeclaration * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLCSSStyleDeclaration * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLCSSStyleDeclarationVtbl;
    interface DispHTMLCSSStyleDeclaration
    {
        CONST_VTBL struct DispHTMLCSSStyleDeclarationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLCSSStyleDeclaration;
class DECLSPEC_UUID("30510741-98b5-11cf-bb82-00aa00bdce0b")
HTMLCSSStyleDeclaration;
EXTERN_C const IID IID_IHTMLStyle;
    typedef struct IHTMLStyleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyle * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyle * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyle * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyle * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontFamily )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontFamily )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontStyle )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontStyle )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontVariant )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontVariant )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontWeight )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontWeight )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontSize )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontSize )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_font )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_font )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_color )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_color )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_background )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_background )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundColor )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundColor )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundImage )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundImage )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundRepeat )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundRepeat )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundAttachment )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundAttachment )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundPosition )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundPosition )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundPositionX )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundPositionX )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundPositionY )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundPositionY )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_wordSpacing )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordSpacing )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_letterSpacing )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_letterSpacing )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecoration )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecoration )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecorationNone )(
            __RPC__in IHTMLStyle * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecorationNone )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecorationUnderline )(
            __RPC__in IHTMLStyle * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecorationUnderline )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecorationOverline )(
            __RPC__in IHTMLStyle * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecorationOverline )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecorationLineThrough )(
            __RPC__in IHTMLStyle * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecorationLineThrough )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecorationBlink )(
            __RPC__in IHTMLStyle * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecorationBlink )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_verticalAlign )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_verticalAlign )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textTransform )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textTransform )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textAlign )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAlign )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textIndent )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textIndent )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_lineHeight )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lineHeight )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginTop )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginTop )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginRight )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginRight )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginBottom )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginBottom )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginLeft )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginLeft )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_margin )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_margin )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingTop )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingTop )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingRight )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingRight )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingBottom )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingBottom )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingLeft )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingLeft )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_padding )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_padding )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_border )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_border )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTop )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTop )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRight )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRight )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottom )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottom )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeft )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeft )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderColor )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderColor )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTopColor )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopColor )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRightColor )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightColor )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottomColor )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomColor )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeftColor )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftColor )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderWidth )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderWidth )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTopWidth )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopWidth )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRightWidth )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightWidth )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottomWidth )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomWidth )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeftWidth )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftWidth )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderStyle )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderStyle )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTopStyle )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopStyle )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRightStyle )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightStyle )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottomStyle )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomStyle )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeftStyle )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftStyle )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_styleFloat )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_styleFloat )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_clear )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clear )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_display )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_display )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_visibility )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_visibility )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_listStyleType )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStyleType )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_listStylePosition )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStylePosition )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_listStyleImage )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStyleImage )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_listStyle )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_listStyle )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_whiteSpace )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_whiteSpace )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_top )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_top )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_left )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_left )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_position )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_zIndex )(
            __RPC__in IHTMLStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_zIndex )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_overflow )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflow )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_pageBreakBefore )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakBefore )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_pageBreakAfter )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakAfter )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_cssText )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_cssText )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_pixelTop )(
            __RPC__in IHTMLStyle * This,
                       long v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_pixelTop )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out long *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_pixelLeft )(
            __RPC__in IHTMLStyle * This,
                       long v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_pixelLeft )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out long *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_pixelWidth )(
            __RPC__in IHTMLStyle * This,
                       long v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_pixelWidth )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out long *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_pixelHeight )(
            __RPC__in IHTMLStyle * This,
                       long v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_pixelHeight )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_posTop )(
            __RPC__in IHTMLStyle * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_posTop )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_posLeft )(
            __RPC__in IHTMLStyle * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_posLeft )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_posWidth )(
            __RPC__in IHTMLStyle * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_posWidth )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_posHeight )(
            __RPC__in IHTMLStyle * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_posHeight )(
            __RPC__in IHTMLStyle * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_cursor )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_cursor )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_clip )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clip )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_filter )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_filter )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *setAttribute )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR strAttributeName,
                       VARIANT AttributeValue,
                                     LONG lFlags);
                   HRESULT ( STDMETHODCALLTYPE *getAttribute )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR strAttributeName,
                                     LONG lFlags,
                                __RPC__out VARIANT *AttributeValue);
                   HRESULT ( STDMETHODCALLTYPE *removeAttribute )(
            __RPC__in IHTMLStyle * This,
                       __RPC__in BSTR strAttributeName,
                                     LONG lFlags,
                                __RPC__out VARIANT_BOOL *pfSuccess);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLStyle * This,
                                __RPC__deref_out_opt BSTR *String);
        END_INTERFACE
    } IHTMLStyleVtbl;
    interface IHTMLStyle
    {
        CONST_VTBL struct IHTMLStyleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_fontFamily(This,v) )
    ( (This)->lpVtbl -> get_fontFamily(This,p) )
    ( (This)->lpVtbl -> put_fontStyle(This,v) )
    ( (This)->lpVtbl -> get_fontStyle(This,p) )
    ( (This)->lpVtbl -> put_fontVariant(This,v) )
    ( (This)->lpVtbl -> get_fontVariant(This,p) )
    ( (This)->lpVtbl -> put_fontWeight(This,v) )
    ( (This)->lpVtbl -> get_fontWeight(This,p) )
    ( (This)->lpVtbl -> put_fontSize(This,v) )
    ( (This)->lpVtbl -> get_fontSize(This,p) )
    ( (This)->lpVtbl -> put_font(This,v) )
    ( (This)->lpVtbl -> get_font(This,p) )
    ( (This)->lpVtbl -> put_color(This,v) )
    ( (This)->lpVtbl -> get_color(This,p) )
    ( (This)->lpVtbl -> put_background(This,v) )
    ( (This)->lpVtbl -> get_background(This,p) )
    ( (This)->lpVtbl -> put_backgroundColor(This,v) )
    ( (This)->lpVtbl -> get_backgroundColor(This,p) )
    ( (This)->lpVtbl -> put_backgroundImage(This,v) )
    ( (This)->lpVtbl -> get_backgroundImage(This,p) )
    ( (This)->lpVtbl -> put_backgroundRepeat(This,v) )
    ( (This)->lpVtbl -> get_backgroundRepeat(This,p) )
    ( (This)->lpVtbl -> put_backgroundAttachment(This,v) )
    ( (This)->lpVtbl -> get_backgroundAttachment(This,p) )
    ( (This)->lpVtbl -> put_backgroundPosition(This,v) )
    ( (This)->lpVtbl -> get_backgroundPosition(This,p) )
    ( (This)->lpVtbl -> put_backgroundPositionX(This,v) )
    ( (This)->lpVtbl -> get_backgroundPositionX(This,p) )
    ( (This)->lpVtbl -> put_backgroundPositionY(This,v) )
    ( (This)->lpVtbl -> get_backgroundPositionY(This,p) )
    ( (This)->lpVtbl -> put_wordSpacing(This,v) )
    ( (This)->lpVtbl -> get_wordSpacing(This,p) )
    ( (This)->lpVtbl -> put_letterSpacing(This,v) )
    ( (This)->lpVtbl -> get_letterSpacing(This,p) )
    ( (This)->lpVtbl -> put_textDecoration(This,v) )
    ( (This)->lpVtbl -> get_textDecoration(This,p) )
    ( (This)->lpVtbl -> put_textDecorationNone(This,v) )
    ( (This)->lpVtbl -> get_textDecorationNone(This,p) )
    ( (This)->lpVtbl -> put_textDecorationUnderline(This,v) )
    ( (This)->lpVtbl -> get_textDecorationUnderline(This,p) )
    ( (This)->lpVtbl -> put_textDecorationOverline(This,v) )
    ( (This)->lpVtbl -> get_textDecorationOverline(This,p) )
    ( (This)->lpVtbl -> put_textDecorationLineThrough(This,v) )
    ( (This)->lpVtbl -> get_textDecorationLineThrough(This,p) )
    ( (This)->lpVtbl -> put_textDecorationBlink(This,v) )
    ( (This)->lpVtbl -> get_textDecorationBlink(This,p) )
    ( (This)->lpVtbl -> put_verticalAlign(This,v) )
    ( (This)->lpVtbl -> get_verticalAlign(This,p) )
    ( (This)->lpVtbl -> put_textTransform(This,v) )
    ( (This)->lpVtbl -> get_textTransform(This,p) )
    ( (This)->lpVtbl -> put_textAlign(This,v) )
    ( (This)->lpVtbl -> get_textAlign(This,p) )
    ( (This)->lpVtbl -> put_textIndent(This,v) )
    ( (This)->lpVtbl -> get_textIndent(This,p) )
    ( (This)->lpVtbl -> put_lineHeight(This,v) )
    ( (This)->lpVtbl -> get_lineHeight(This,p) )
    ( (This)->lpVtbl -> put_marginTop(This,v) )
    ( (This)->lpVtbl -> get_marginTop(This,p) )
    ( (This)->lpVtbl -> put_marginRight(This,v) )
    ( (This)->lpVtbl -> get_marginRight(This,p) )
    ( (This)->lpVtbl -> put_marginBottom(This,v) )
    ( (This)->lpVtbl -> get_marginBottom(This,p) )
    ( (This)->lpVtbl -> put_marginLeft(This,v) )
    ( (This)->lpVtbl -> get_marginLeft(This,p) )
    ( (This)->lpVtbl -> put_margin(This,v) )
    ( (This)->lpVtbl -> get_margin(This,p) )
    ( (This)->lpVtbl -> put_paddingTop(This,v) )
    ( (This)->lpVtbl -> get_paddingTop(This,p) )
    ( (This)->lpVtbl -> put_paddingRight(This,v) )
    ( (This)->lpVtbl -> get_paddingRight(This,p) )
    ( (This)->lpVtbl -> put_paddingBottom(This,v) )
    ( (This)->lpVtbl -> get_paddingBottom(This,p) )
    ( (This)->lpVtbl -> put_paddingLeft(This,v) )
    ( (This)->lpVtbl -> get_paddingLeft(This,p) )
    ( (This)->lpVtbl -> put_padding(This,v) )
    ( (This)->lpVtbl -> get_padding(This,p) )
    ( (This)->lpVtbl -> put_border(This,v) )
    ( (This)->lpVtbl -> get_border(This,p) )
    ( (This)->lpVtbl -> put_borderTop(This,v) )
    ( (This)->lpVtbl -> get_borderTop(This,p) )
    ( (This)->lpVtbl -> put_borderRight(This,v) )
    ( (This)->lpVtbl -> get_borderRight(This,p) )
    ( (This)->lpVtbl -> put_borderBottom(This,v) )
    ( (This)->lpVtbl -> get_borderBottom(This,p) )
    ( (This)->lpVtbl -> put_borderLeft(This,v) )
    ( (This)->lpVtbl -> get_borderLeft(This,p) )
    ( (This)->lpVtbl -> put_borderColor(This,v) )
    ( (This)->lpVtbl -> get_borderColor(This,p) )
    ( (This)->lpVtbl -> put_borderTopColor(This,v) )
    ( (This)->lpVtbl -> get_borderTopColor(This,p) )
    ( (This)->lpVtbl -> put_borderRightColor(This,v) )
    ( (This)->lpVtbl -> get_borderRightColor(This,p) )
    ( (This)->lpVtbl -> put_borderBottomColor(This,v) )
    ( (This)->lpVtbl -> get_borderBottomColor(This,p) )
    ( (This)->lpVtbl -> put_borderLeftColor(This,v) )
    ( (This)->lpVtbl -> get_borderLeftColor(This,p) )
    ( (This)->lpVtbl -> put_borderWidth(This,v) )
    ( (This)->lpVtbl -> get_borderWidth(This,p) )
    ( (This)->lpVtbl -> put_borderTopWidth(This,v) )
    ( (This)->lpVtbl -> get_borderTopWidth(This,p) )
    ( (This)->lpVtbl -> put_borderRightWidth(This,v) )
    ( (This)->lpVtbl -> get_borderRightWidth(This,p) )
    ( (This)->lpVtbl -> put_borderBottomWidth(This,v) )
    ( (This)->lpVtbl -> get_borderBottomWidth(This,p) )
    ( (This)->lpVtbl -> put_borderLeftWidth(This,v) )
    ( (This)->lpVtbl -> get_borderLeftWidth(This,p) )
    ( (This)->lpVtbl -> put_borderStyle(This,v) )
    ( (This)->lpVtbl -> get_borderStyle(This,p) )
    ( (This)->lpVtbl -> put_borderTopStyle(This,v) )
    ( (This)->lpVtbl -> get_borderTopStyle(This,p) )
    ( (This)->lpVtbl -> put_borderRightStyle(This,v) )
    ( (This)->lpVtbl -> get_borderRightStyle(This,p) )
    ( (This)->lpVtbl -> put_borderBottomStyle(This,v) )
    ( (This)->lpVtbl -> get_borderBottomStyle(This,p) )
    ( (This)->lpVtbl -> put_borderLeftStyle(This,v) )
    ( (This)->lpVtbl -> get_borderLeftStyle(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_styleFloat(This,v) )
    ( (This)->lpVtbl -> get_styleFloat(This,p) )
    ( (This)->lpVtbl -> put_clear(This,v) )
    ( (This)->lpVtbl -> get_clear(This,p) )
    ( (This)->lpVtbl -> put_display(This,v) )
    ( (This)->lpVtbl -> get_display(This,p) )
    ( (This)->lpVtbl -> put_visibility(This,v) )
    ( (This)->lpVtbl -> get_visibility(This,p) )
    ( (This)->lpVtbl -> put_listStyleType(This,v) )
    ( (This)->lpVtbl -> get_listStyleType(This,p) )
    ( (This)->lpVtbl -> put_listStylePosition(This,v) )
    ( (This)->lpVtbl -> get_listStylePosition(This,p) )
    ( (This)->lpVtbl -> put_listStyleImage(This,v) )
    ( (This)->lpVtbl -> get_listStyleImage(This,p) )
    ( (This)->lpVtbl -> put_listStyle(This,v) )
    ( (This)->lpVtbl -> get_listStyle(This,p) )
    ( (This)->lpVtbl -> put_whiteSpace(This,v) )
    ( (This)->lpVtbl -> get_whiteSpace(This,p) )
    ( (This)->lpVtbl -> put_top(This,v) )
    ( (This)->lpVtbl -> get_top(This,p) )
    ( (This)->lpVtbl -> put_left(This,v) )
    ( (This)->lpVtbl -> get_left(This,p) )
    ( (This)->lpVtbl -> get_position(This,p) )
    ( (This)->lpVtbl -> put_zIndex(This,v) )
    ( (This)->lpVtbl -> get_zIndex(This,p) )
    ( (This)->lpVtbl -> put_overflow(This,v) )
    ( (This)->lpVtbl -> get_overflow(This,p) )
    ( (This)->lpVtbl -> put_pageBreakBefore(This,v) )
    ( (This)->lpVtbl -> get_pageBreakBefore(This,p) )
    ( (This)->lpVtbl -> put_pageBreakAfter(This,v) )
    ( (This)->lpVtbl -> get_pageBreakAfter(This,p) )
    ( (This)->lpVtbl -> put_cssText(This,v) )
    ( (This)->lpVtbl -> get_cssText(This,p) )
    ( (This)->lpVtbl -> put_pixelTop(This,v) )
    ( (This)->lpVtbl -> get_pixelTop(This,p) )
    ( (This)->lpVtbl -> put_pixelLeft(This,v) )
    ( (This)->lpVtbl -> get_pixelLeft(This,p) )
    ( (This)->lpVtbl -> put_pixelWidth(This,v) )
    ( (This)->lpVtbl -> get_pixelWidth(This,p) )
    ( (This)->lpVtbl -> put_pixelHeight(This,v) )
    ( (This)->lpVtbl -> get_pixelHeight(This,p) )
    ( (This)->lpVtbl -> put_posTop(This,v) )
    ( (This)->lpVtbl -> get_posTop(This,p) )
    ( (This)->lpVtbl -> put_posLeft(This,v) )
    ( (This)->lpVtbl -> get_posLeft(This,p) )
    ( (This)->lpVtbl -> put_posWidth(This,v) )
    ( (This)->lpVtbl -> get_posWidth(This,p) )
    ( (This)->lpVtbl -> put_posHeight(This,v) )
    ( (This)->lpVtbl -> get_posHeight(This,p) )
    ( (This)->lpVtbl -> put_cursor(This,v) )
    ( (This)->lpVtbl -> get_cursor(This,p) )
    ( (This)->lpVtbl -> put_clip(This,v) )
    ( (This)->lpVtbl -> get_clip(This,p) )
    ( (This)->lpVtbl -> put_filter(This,v) )
    ( (This)->lpVtbl -> get_filter(This,p) )
    ( (This)->lpVtbl -> setAttribute(This,strAttributeName,AttributeValue,lFlags) )
    ( (This)->lpVtbl -> getAttribute(This,strAttributeName,lFlags,AttributeValue) )
    ( (This)->lpVtbl -> removeAttribute(This,strAttributeName,lFlags,pfSuccess) )
    ( (This)->lpVtbl -> toString(This,String) )
EXTERN_C const IID IID_IHTMLStyle2;
    typedef struct IHTMLStyle2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyle2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyle2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyle2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyle2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyle2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_tableLayout )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_tableLayout )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderCollapse )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderCollapse )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_direction )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_direction )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_behavior )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_behavior )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *setExpression )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR propname,
                       __RPC__in BSTR expression,
                                     __RPC__in BSTR language);
                   HRESULT ( STDMETHODCALLTYPE *getExpression )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR propname,
                                __RPC__out VARIANT *expression);
                   HRESULT ( STDMETHODCALLTYPE *removeExpression )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR propname,
                                __RPC__out VARIANT_BOOL *pfSuccess);
                                                   HRESULT ( STDMETHODCALLTYPE *put_position )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_position )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_unicodeBidi )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_unicodeBidi )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_bottom )(
            __RPC__in IHTMLStyle2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_bottom )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_right )(
            __RPC__in IHTMLStyle2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_right )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_pixelBottom )(
            __RPC__in IHTMLStyle2 * This,
                       long v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_pixelBottom )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__out long *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_pixelRight )(
            __RPC__in IHTMLStyle2 * This,
                       long v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_pixelRight )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_posBottom )(
            __RPC__in IHTMLStyle2 * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_posBottom )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_posRight )(
            __RPC__in IHTMLStyle2 * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_posRight )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_imeMode )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_imeMode )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rubyAlign )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyAlign )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rubyPosition )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyPosition )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rubyOverhang )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyOverhang )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridChar )(
            __RPC__in IHTMLStyle2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridChar )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridLine )(
            __RPC__in IHTMLStyle2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridLine )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridMode )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridMode )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridType )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridType )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_layoutGrid )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_layoutGrid )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_wordBreak )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordBreak )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_lineBreak )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lineBreak )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textJustify )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textJustify )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textJustifyTrim )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textJustifyTrim )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textKashida )(
            __RPC__in IHTMLStyle2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textKashida )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textAutospace )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAutospace )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_overflowX )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflowX )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_overflowY )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflowY )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_accelerator )(
            __RPC__in IHTMLStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_accelerator )(
            __RPC__in IHTMLStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLStyle2Vtbl;
    interface IHTMLStyle2
    {
        CONST_VTBL struct IHTMLStyle2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_tableLayout(This,v) )
    ( (This)->lpVtbl -> get_tableLayout(This,p) )
    ( (This)->lpVtbl -> put_borderCollapse(This,v) )
    ( (This)->lpVtbl -> get_borderCollapse(This,p) )
    ( (This)->lpVtbl -> put_direction(This,v) )
    ( (This)->lpVtbl -> get_direction(This,p) )
    ( (This)->lpVtbl -> put_behavior(This,v) )
    ( (This)->lpVtbl -> get_behavior(This,p) )
    ( (This)->lpVtbl -> setExpression(This,propname,expression,language) )
    ( (This)->lpVtbl -> getExpression(This,propname,expression) )
    ( (This)->lpVtbl -> removeExpression(This,propname,pfSuccess) )
    ( (This)->lpVtbl -> put_position(This,v) )
    ( (This)->lpVtbl -> get_position(This,p) )
    ( (This)->lpVtbl -> put_unicodeBidi(This,v) )
    ( (This)->lpVtbl -> get_unicodeBidi(This,p) )
    ( (This)->lpVtbl -> put_bottom(This,v) )
    ( (This)->lpVtbl -> get_bottom(This,p) )
    ( (This)->lpVtbl -> put_right(This,v) )
    ( (This)->lpVtbl -> get_right(This,p) )
    ( (This)->lpVtbl -> put_pixelBottom(This,v) )
    ( (This)->lpVtbl -> get_pixelBottom(This,p) )
    ( (This)->lpVtbl -> put_pixelRight(This,v) )
    ( (This)->lpVtbl -> get_pixelRight(This,p) )
    ( (This)->lpVtbl -> put_posBottom(This,v) )
    ( (This)->lpVtbl -> get_posBottom(This,p) )
    ( (This)->lpVtbl -> put_posRight(This,v) )
    ( (This)->lpVtbl -> get_posRight(This,p) )
    ( (This)->lpVtbl -> put_imeMode(This,v) )
    ( (This)->lpVtbl -> get_imeMode(This,p) )
    ( (This)->lpVtbl -> put_rubyAlign(This,v) )
    ( (This)->lpVtbl -> get_rubyAlign(This,p) )
    ( (This)->lpVtbl -> put_rubyPosition(This,v) )
    ( (This)->lpVtbl -> get_rubyPosition(This,p) )
    ( (This)->lpVtbl -> put_rubyOverhang(This,v) )
    ( (This)->lpVtbl -> get_rubyOverhang(This,p) )
    ( (This)->lpVtbl -> put_layoutGridChar(This,v) )
    ( (This)->lpVtbl -> get_layoutGridChar(This,p) )
    ( (This)->lpVtbl -> put_layoutGridLine(This,v) )
    ( (This)->lpVtbl -> get_layoutGridLine(This,p) )
    ( (This)->lpVtbl -> put_layoutGridMode(This,v) )
    ( (This)->lpVtbl -> get_layoutGridMode(This,p) )
    ( (This)->lpVtbl -> put_layoutGridType(This,v) )
    ( (This)->lpVtbl -> get_layoutGridType(This,p) )
    ( (This)->lpVtbl -> put_layoutGrid(This,v) )
    ( (This)->lpVtbl -> get_layoutGrid(This,p) )
    ( (This)->lpVtbl -> put_wordBreak(This,v) )
    ( (This)->lpVtbl -> get_wordBreak(This,p) )
    ( (This)->lpVtbl -> put_lineBreak(This,v) )
    ( (This)->lpVtbl -> get_lineBreak(This,p) )
    ( (This)->lpVtbl -> put_textJustify(This,v) )
    ( (This)->lpVtbl -> get_textJustify(This,p) )
    ( (This)->lpVtbl -> put_textJustifyTrim(This,v) )
    ( (This)->lpVtbl -> get_textJustifyTrim(This,p) )
    ( (This)->lpVtbl -> put_textKashida(This,v) )
    ( (This)->lpVtbl -> get_textKashida(This,p) )
    ( (This)->lpVtbl -> put_textAutospace(This,v) )
    ( (This)->lpVtbl -> get_textAutospace(This,p) )
    ( (This)->lpVtbl -> put_overflowX(This,v) )
    ( (This)->lpVtbl -> get_overflowX(This,p) )
    ( (This)->lpVtbl -> put_overflowY(This,v) )
    ( (This)->lpVtbl -> get_overflowY(This,p) )
    ( (This)->lpVtbl -> put_accelerator(This,v) )
    ( (This)->lpVtbl -> get_accelerator(This,p) )
EXTERN_C const IID IID_IHTMLStyle3;
    typedef struct IHTMLStyle3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyle3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyle3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyle3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyle3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyle3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyle3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyle3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutFlow )(
            __RPC__in IHTMLStyle3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutFlow )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_zoom )(
            __RPC__in IHTMLStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_zoom )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_wordWrap )(
            __RPC__in IHTMLStyle3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordWrap )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textUnderlinePosition )(
            __RPC__in IHTMLStyle3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textUnderlinePosition )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarBaseColor )(
            __RPC__in IHTMLStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarBaseColor )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarFaceColor )(
            __RPC__in IHTMLStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarFaceColor )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbar3dLightColor )(
            __RPC__in IHTMLStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbar3dLightColor )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarShadowColor )(
            __RPC__in IHTMLStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarShadowColor )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarHighlightColor )(
            __RPC__in IHTMLStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarHighlightColor )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarDarkShadowColor )(
            __RPC__in IHTMLStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarDarkShadowColor )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarArrowColor )(
            __RPC__in IHTMLStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarArrowColor )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarTrackColor )(
            __RPC__in IHTMLStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarTrackColor )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_writingMode )(
            __RPC__in IHTMLStyle3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_writingMode )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textAlignLast )(
            __RPC__in IHTMLStyle3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAlignLast )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textKashidaSpace )(
            __RPC__in IHTMLStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textKashidaSpace )(
            __RPC__in IHTMLStyle3 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLStyle3Vtbl;
    interface IHTMLStyle3
    {
        CONST_VTBL struct IHTMLStyle3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_layoutFlow(This,v) )
    ( (This)->lpVtbl -> get_layoutFlow(This,p) )
    ( (This)->lpVtbl -> put_zoom(This,v) )
    ( (This)->lpVtbl -> get_zoom(This,p) )
    ( (This)->lpVtbl -> put_wordWrap(This,v) )
    ( (This)->lpVtbl -> get_wordWrap(This,p) )
    ( (This)->lpVtbl -> put_textUnderlinePosition(This,v) )
    ( (This)->lpVtbl -> get_textUnderlinePosition(This,p) )
    ( (This)->lpVtbl -> put_scrollbarBaseColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarBaseColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarFaceColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarFaceColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbar3dLightColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbar3dLightColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarShadowColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarShadowColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarHighlightColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarHighlightColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarDarkShadowColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarDarkShadowColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarArrowColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarArrowColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarTrackColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarTrackColor(This,p) )
    ( (This)->lpVtbl -> put_writingMode(This,v) )
    ( (This)->lpVtbl -> get_writingMode(This,p) )
    ( (This)->lpVtbl -> put_textAlignLast(This,v) )
    ( (This)->lpVtbl -> get_textAlignLast(This,p) )
    ( (This)->lpVtbl -> put_textKashidaSpace(This,v) )
    ( (This)->lpVtbl -> get_textKashidaSpace(This,p) )
EXTERN_C const IID IID_IHTMLStyle4;
    typedef struct IHTMLStyle4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyle4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyle4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyle4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyle4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyle4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyle4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyle4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textOverflow )(
            __RPC__in IHTMLStyle4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textOverflow )(
            __RPC__in IHTMLStyle4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_minHeight )(
            __RPC__in IHTMLStyle4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_minHeight )(
            __RPC__in IHTMLStyle4 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLStyle4Vtbl;
    interface IHTMLStyle4
    {
        CONST_VTBL struct IHTMLStyle4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_textOverflow(This,v) )
    ( (This)->lpVtbl -> get_textOverflow(This,p) )
    ( (This)->lpVtbl -> put_minHeight(This,v) )
    ( (This)->lpVtbl -> get_minHeight(This,p) )
EXTERN_C const IID IID_IHTMLStyle5;
    typedef struct IHTMLStyle5Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyle5 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyle5 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyle5 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyle5 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyle5 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyle5 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyle5 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msInterpolationMode )(
            __RPC__in IHTMLStyle5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msInterpolationMode )(
            __RPC__in IHTMLStyle5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_maxHeight )(
            __RPC__in IHTMLStyle5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_maxHeight )(
            __RPC__in IHTMLStyle5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_minWidth )(
            __RPC__in IHTMLStyle5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_minWidth )(
            __RPC__in IHTMLStyle5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_maxWidth )(
            __RPC__in IHTMLStyle5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_maxWidth )(
            __RPC__in IHTMLStyle5 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLStyle5Vtbl;
    interface IHTMLStyle5
    {
        CONST_VTBL struct IHTMLStyle5Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_msInterpolationMode(This,v) )
    ( (This)->lpVtbl -> get_msInterpolationMode(This,p) )
    ( (This)->lpVtbl -> put_maxHeight(This,v) )
    ( (This)->lpVtbl -> get_maxHeight(This,p) )
    ( (This)->lpVtbl -> put_minWidth(This,v) )
    ( (This)->lpVtbl -> get_minWidth(This,p) )
    ( (This)->lpVtbl -> put_maxWidth(This,v) )
    ( (This)->lpVtbl -> get_maxWidth(This,p) )
EXTERN_C const IID IID_IHTMLStyle6;
    typedef struct IHTMLStyle6Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyle6 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyle6 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyle6 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyle6 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyle6 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_content )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_content )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_captionSide )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_captionSide )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_counterIncrement )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_counterIncrement )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_counterReset )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_counterReset )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outline )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outline )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outlineWidth )(
            __RPC__in IHTMLStyle6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineWidth )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outlineStyle )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineStyle )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outlineColor )(
            __RPC__in IHTMLStyle6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineColor )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_boxSizing )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_boxSizing )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderSpacing )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderSpacing )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_orphans )(
            __RPC__in IHTMLStyle6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_orphans )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_widows )(
            __RPC__in IHTMLStyle6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_widows )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_pageBreakInside )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakInside )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_emptyCells )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_emptyCells )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msBlockProgression )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msBlockProgression )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_quotes )(
            __RPC__in IHTMLStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_quotes )(
            __RPC__in IHTMLStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLStyle6Vtbl;
    interface IHTMLStyle6
    {
        CONST_VTBL struct IHTMLStyle6Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_content(This,v) )
    ( (This)->lpVtbl -> get_content(This,p) )
    ( (This)->lpVtbl -> put_captionSide(This,v) )
    ( (This)->lpVtbl -> get_captionSide(This,p) )
    ( (This)->lpVtbl -> put_counterIncrement(This,v) )
    ( (This)->lpVtbl -> get_counterIncrement(This,p) )
    ( (This)->lpVtbl -> put_counterReset(This,v) )
    ( (This)->lpVtbl -> get_counterReset(This,p) )
    ( (This)->lpVtbl -> put_outline(This,v) )
    ( (This)->lpVtbl -> get_outline(This,p) )
    ( (This)->lpVtbl -> put_outlineWidth(This,v) )
    ( (This)->lpVtbl -> get_outlineWidth(This,p) )
    ( (This)->lpVtbl -> put_outlineStyle(This,v) )
    ( (This)->lpVtbl -> get_outlineStyle(This,p) )
    ( (This)->lpVtbl -> put_outlineColor(This,v) )
    ( (This)->lpVtbl -> get_outlineColor(This,p) )
    ( (This)->lpVtbl -> put_boxSizing(This,v) )
    ( (This)->lpVtbl -> get_boxSizing(This,p) )
    ( (This)->lpVtbl -> put_borderSpacing(This,v) )
    ( (This)->lpVtbl -> get_borderSpacing(This,p) )
    ( (This)->lpVtbl -> put_orphans(This,v) )
    ( (This)->lpVtbl -> get_orphans(This,p) )
    ( (This)->lpVtbl -> put_widows(This,v) )
    ( (This)->lpVtbl -> get_widows(This,p) )
    ( (This)->lpVtbl -> put_pageBreakInside(This,v) )
    ( (This)->lpVtbl -> get_pageBreakInside(This,p) )
    ( (This)->lpVtbl -> put_emptyCells(This,v) )
    ( (This)->lpVtbl -> get_emptyCells(This,p) )
    ( (This)->lpVtbl -> put_msBlockProgression(This,v) )
    ( (This)->lpVtbl -> get_msBlockProgression(This,p) )
    ( (This)->lpVtbl -> put_quotes(This,v) )
    ( (This)->lpVtbl -> get_quotes(This,p) )
EXTERN_C const IID IID_IHTMLRuleStyle;
    typedef struct IHTMLRuleStyleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLRuleStyle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLRuleStyle * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLRuleStyle * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLRuleStyle * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLRuleStyle * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontFamily )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontFamily )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontStyle )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontStyle )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontVariant )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontVariant )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontWeight )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontWeight )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontSize )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontSize )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_font )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_font )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_color )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_color )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_background )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_background )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundColor )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundColor )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundImage )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundImage )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundRepeat )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundRepeat )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundAttachment )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundAttachment )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundPosition )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundPosition )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundPositionX )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundPositionX )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_backgroundPositionY )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundPositionY )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_wordSpacing )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordSpacing )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_letterSpacing )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_letterSpacing )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecoration )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecoration )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecorationNone )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecorationNone )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecorationUnderline )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecorationUnderline )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecorationOverline )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecorationOverline )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecorationLineThrough )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecorationLineThrough )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecorationBlink )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecorationBlink )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_verticalAlign )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_verticalAlign )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textTransform )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textTransform )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textAlign )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAlign )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textIndent )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textIndent )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_lineHeight )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lineHeight )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginTop )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginTop )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginRight )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginRight )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginBottom )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginBottom )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_marginLeft )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginLeft )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_margin )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_margin )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingTop )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingTop )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingRight )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingRight )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingBottom )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingBottom )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_paddingLeft )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingLeft )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_padding )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_padding )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_border )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_border )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTop )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTop )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRight )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRight )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottom )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottom )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeft )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeft )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderColor )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderColor )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTopColor )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopColor )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRightColor )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightColor )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottomColor )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomColor )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeftColor )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftColor )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderWidth )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderWidth )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTopWidth )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopWidth )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRightWidth )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightWidth )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottomWidth )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomWidth )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeftWidth )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftWidth )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderStyle )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderStyle )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderTopStyle )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopStyle )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderRightStyle )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightStyle )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderBottomStyle )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomStyle )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderLeftStyle )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftStyle )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_styleFloat )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_styleFloat )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_clear )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clear )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_display )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_display )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_visibility )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_visibility )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_listStyleType )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStyleType )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_listStylePosition )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStylePosition )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_listStyleImage )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStyleImage )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_listStyle )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_listStyle )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_whiteSpace )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_whiteSpace )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_top )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_top )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_left )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_left )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_position )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_zIndex )(
            __RPC__in IHTMLRuleStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_zIndex )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_overflow )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflow )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_pageBreakBefore )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakBefore )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_pageBreakAfter )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakAfter )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_cssText )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_cssText )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_cursor )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_cursor )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_clip )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clip )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_filter )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_filter )(
            __RPC__in IHTMLRuleStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *setAttribute )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR strAttributeName,
                       VARIANT AttributeValue,
                                     LONG lFlags);
                   HRESULT ( STDMETHODCALLTYPE *getAttribute )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR strAttributeName,
                                     LONG lFlags,
                                __RPC__out VARIANT *AttributeValue);
                   HRESULT ( STDMETHODCALLTYPE *removeAttribute )(
            __RPC__in IHTMLRuleStyle * This,
                       __RPC__in BSTR strAttributeName,
                                     LONG lFlags,
                                __RPC__out VARIANT_BOOL *pfSuccess);
        END_INTERFACE
    } IHTMLRuleStyleVtbl;
    interface IHTMLRuleStyle
    {
        CONST_VTBL struct IHTMLRuleStyleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_fontFamily(This,v) )
    ( (This)->lpVtbl -> get_fontFamily(This,p) )
    ( (This)->lpVtbl -> put_fontStyle(This,v) )
    ( (This)->lpVtbl -> get_fontStyle(This,p) )
    ( (This)->lpVtbl -> put_fontVariant(This,v) )
    ( (This)->lpVtbl -> get_fontVariant(This,p) )
    ( (This)->lpVtbl -> put_fontWeight(This,v) )
    ( (This)->lpVtbl -> get_fontWeight(This,p) )
    ( (This)->lpVtbl -> put_fontSize(This,v) )
    ( (This)->lpVtbl -> get_fontSize(This,p) )
    ( (This)->lpVtbl -> put_font(This,v) )
    ( (This)->lpVtbl -> get_font(This,p) )
    ( (This)->lpVtbl -> put_color(This,v) )
    ( (This)->lpVtbl -> get_color(This,p) )
    ( (This)->lpVtbl -> put_background(This,v) )
    ( (This)->lpVtbl -> get_background(This,p) )
    ( (This)->lpVtbl -> put_backgroundColor(This,v) )
    ( (This)->lpVtbl -> get_backgroundColor(This,p) )
    ( (This)->lpVtbl -> put_backgroundImage(This,v) )
    ( (This)->lpVtbl -> get_backgroundImage(This,p) )
    ( (This)->lpVtbl -> put_backgroundRepeat(This,v) )
    ( (This)->lpVtbl -> get_backgroundRepeat(This,p) )
    ( (This)->lpVtbl -> put_backgroundAttachment(This,v) )
    ( (This)->lpVtbl -> get_backgroundAttachment(This,p) )
    ( (This)->lpVtbl -> put_backgroundPosition(This,v) )
    ( (This)->lpVtbl -> get_backgroundPosition(This,p) )
    ( (This)->lpVtbl -> put_backgroundPositionX(This,v) )
    ( (This)->lpVtbl -> get_backgroundPositionX(This,p) )
    ( (This)->lpVtbl -> put_backgroundPositionY(This,v) )
    ( (This)->lpVtbl -> get_backgroundPositionY(This,p) )
    ( (This)->lpVtbl -> put_wordSpacing(This,v) )
    ( (This)->lpVtbl -> get_wordSpacing(This,p) )
    ( (This)->lpVtbl -> put_letterSpacing(This,v) )
    ( (This)->lpVtbl -> get_letterSpacing(This,p) )
    ( (This)->lpVtbl -> put_textDecoration(This,v) )
    ( (This)->lpVtbl -> get_textDecoration(This,p) )
    ( (This)->lpVtbl -> put_textDecorationNone(This,v) )
    ( (This)->lpVtbl -> get_textDecorationNone(This,p) )
    ( (This)->lpVtbl -> put_textDecorationUnderline(This,v) )
    ( (This)->lpVtbl -> get_textDecorationUnderline(This,p) )
    ( (This)->lpVtbl -> put_textDecorationOverline(This,v) )
    ( (This)->lpVtbl -> get_textDecorationOverline(This,p) )
    ( (This)->lpVtbl -> put_textDecorationLineThrough(This,v) )
    ( (This)->lpVtbl -> get_textDecorationLineThrough(This,p) )
    ( (This)->lpVtbl -> put_textDecorationBlink(This,v) )
    ( (This)->lpVtbl -> get_textDecorationBlink(This,p) )
    ( (This)->lpVtbl -> put_verticalAlign(This,v) )
    ( (This)->lpVtbl -> get_verticalAlign(This,p) )
    ( (This)->lpVtbl -> put_textTransform(This,v) )
    ( (This)->lpVtbl -> get_textTransform(This,p) )
    ( (This)->lpVtbl -> put_textAlign(This,v) )
    ( (This)->lpVtbl -> get_textAlign(This,p) )
    ( (This)->lpVtbl -> put_textIndent(This,v) )
    ( (This)->lpVtbl -> get_textIndent(This,p) )
    ( (This)->lpVtbl -> put_lineHeight(This,v) )
    ( (This)->lpVtbl -> get_lineHeight(This,p) )
    ( (This)->lpVtbl -> put_marginTop(This,v) )
    ( (This)->lpVtbl -> get_marginTop(This,p) )
    ( (This)->lpVtbl -> put_marginRight(This,v) )
    ( (This)->lpVtbl -> get_marginRight(This,p) )
    ( (This)->lpVtbl -> put_marginBottom(This,v) )
    ( (This)->lpVtbl -> get_marginBottom(This,p) )
    ( (This)->lpVtbl -> put_marginLeft(This,v) )
    ( (This)->lpVtbl -> get_marginLeft(This,p) )
    ( (This)->lpVtbl -> put_margin(This,v) )
    ( (This)->lpVtbl -> get_margin(This,p) )
    ( (This)->lpVtbl -> put_paddingTop(This,v) )
    ( (This)->lpVtbl -> get_paddingTop(This,p) )
    ( (This)->lpVtbl -> put_paddingRight(This,v) )
    ( (This)->lpVtbl -> get_paddingRight(This,p) )
    ( (This)->lpVtbl -> put_paddingBottom(This,v) )
    ( (This)->lpVtbl -> get_paddingBottom(This,p) )
    ( (This)->lpVtbl -> put_paddingLeft(This,v) )
    ( (This)->lpVtbl -> get_paddingLeft(This,p) )
    ( (This)->lpVtbl -> put_padding(This,v) )
    ( (This)->lpVtbl -> get_padding(This,p) )
    ( (This)->lpVtbl -> put_border(This,v) )
    ( (This)->lpVtbl -> get_border(This,p) )
    ( (This)->lpVtbl -> put_borderTop(This,v) )
    ( (This)->lpVtbl -> get_borderTop(This,p) )
    ( (This)->lpVtbl -> put_borderRight(This,v) )
    ( (This)->lpVtbl -> get_borderRight(This,p) )
    ( (This)->lpVtbl -> put_borderBottom(This,v) )
    ( (This)->lpVtbl -> get_borderBottom(This,p) )
    ( (This)->lpVtbl -> put_borderLeft(This,v) )
    ( (This)->lpVtbl -> get_borderLeft(This,p) )
    ( (This)->lpVtbl -> put_borderColor(This,v) )
    ( (This)->lpVtbl -> get_borderColor(This,p) )
    ( (This)->lpVtbl -> put_borderTopColor(This,v) )
    ( (This)->lpVtbl -> get_borderTopColor(This,p) )
    ( (This)->lpVtbl -> put_borderRightColor(This,v) )
    ( (This)->lpVtbl -> get_borderRightColor(This,p) )
    ( (This)->lpVtbl -> put_borderBottomColor(This,v) )
    ( (This)->lpVtbl -> get_borderBottomColor(This,p) )
    ( (This)->lpVtbl -> put_borderLeftColor(This,v) )
    ( (This)->lpVtbl -> get_borderLeftColor(This,p) )
    ( (This)->lpVtbl -> put_borderWidth(This,v) )
    ( (This)->lpVtbl -> get_borderWidth(This,p) )
    ( (This)->lpVtbl -> put_borderTopWidth(This,v) )
    ( (This)->lpVtbl -> get_borderTopWidth(This,p) )
    ( (This)->lpVtbl -> put_borderRightWidth(This,v) )
    ( (This)->lpVtbl -> get_borderRightWidth(This,p) )
    ( (This)->lpVtbl -> put_borderBottomWidth(This,v) )
    ( (This)->lpVtbl -> get_borderBottomWidth(This,p) )
    ( (This)->lpVtbl -> put_borderLeftWidth(This,v) )
    ( (This)->lpVtbl -> get_borderLeftWidth(This,p) )
    ( (This)->lpVtbl -> put_borderStyle(This,v) )
    ( (This)->lpVtbl -> get_borderStyle(This,p) )
    ( (This)->lpVtbl -> put_borderTopStyle(This,v) )
    ( (This)->lpVtbl -> get_borderTopStyle(This,p) )
    ( (This)->lpVtbl -> put_borderRightStyle(This,v) )
    ( (This)->lpVtbl -> get_borderRightStyle(This,p) )
    ( (This)->lpVtbl -> put_borderBottomStyle(This,v) )
    ( (This)->lpVtbl -> get_borderBottomStyle(This,p) )
    ( (This)->lpVtbl -> put_borderLeftStyle(This,v) )
    ( (This)->lpVtbl -> get_borderLeftStyle(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_styleFloat(This,v) )
    ( (This)->lpVtbl -> get_styleFloat(This,p) )
    ( (This)->lpVtbl -> put_clear(This,v) )
    ( (This)->lpVtbl -> get_clear(This,p) )
    ( (This)->lpVtbl -> put_display(This,v) )
    ( (This)->lpVtbl -> get_display(This,p) )
    ( (This)->lpVtbl -> put_visibility(This,v) )
    ( (This)->lpVtbl -> get_visibility(This,p) )
    ( (This)->lpVtbl -> put_listStyleType(This,v) )
    ( (This)->lpVtbl -> get_listStyleType(This,p) )
    ( (This)->lpVtbl -> put_listStylePosition(This,v) )
    ( (This)->lpVtbl -> get_listStylePosition(This,p) )
    ( (This)->lpVtbl -> put_listStyleImage(This,v) )
    ( (This)->lpVtbl -> get_listStyleImage(This,p) )
    ( (This)->lpVtbl -> put_listStyle(This,v) )
    ( (This)->lpVtbl -> get_listStyle(This,p) )
    ( (This)->lpVtbl -> put_whiteSpace(This,v) )
    ( (This)->lpVtbl -> get_whiteSpace(This,p) )
    ( (This)->lpVtbl -> put_top(This,v) )
    ( (This)->lpVtbl -> get_top(This,p) )
    ( (This)->lpVtbl -> put_left(This,v) )
    ( (This)->lpVtbl -> get_left(This,p) )
    ( (This)->lpVtbl -> get_position(This,p) )
    ( (This)->lpVtbl -> put_zIndex(This,v) )
    ( (This)->lpVtbl -> get_zIndex(This,p) )
    ( (This)->lpVtbl -> put_overflow(This,v) )
    ( (This)->lpVtbl -> get_overflow(This,p) )
    ( (This)->lpVtbl -> put_pageBreakBefore(This,v) )
    ( (This)->lpVtbl -> get_pageBreakBefore(This,p) )
    ( (This)->lpVtbl -> put_pageBreakAfter(This,v) )
    ( (This)->lpVtbl -> get_pageBreakAfter(This,p) )
    ( (This)->lpVtbl -> put_cssText(This,v) )
    ( (This)->lpVtbl -> get_cssText(This,p) )
    ( (This)->lpVtbl -> put_cursor(This,v) )
    ( (This)->lpVtbl -> get_cursor(This,p) )
    ( (This)->lpVtbl -> put_clip(This,v) )
    ( (This)->lpVtbl -> get_clip(This,p) )
    ( (This)->lpVtbl -> put_filter(This,v) )
    ( (This)->lpVtbl -> get_filter(This,p) )
    ( (This)->lpVtbl -> setAttribute(This,strAttributeName,AttributeValue,lFlags) )
    ( (This)->lpVtbl -> getAttribute(This,strAttributeName,lFlags,AttributeValue) )
    ( (This)->lpVtbl -> removeAttribute(This,strAttributeName,lFlags,pfSuccess) )
EXTERN_C const IID IID_IHTMLRuleStyle2;
    typedef struct IHTMLRuleStyle2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLRuleStyle2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLRuleStyle2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLRuleStyle2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLRuleStyle2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLRuleStyle2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_tableLayout )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_tableLayout )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderCollapse )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderCollapse )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_direction )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_direction )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_behavior )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_behavior )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_position )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_position )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_unicodeBidi )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_unicodeBidi )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_bottom )(
            __RPC__in IHTMLRuleStyle2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_bottom )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_right )(
            __RPC__in IHTMLRuleStyle2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_right )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_pixelBottom )(
            __RPC__in IHTMLRuleStyle2 * This,
                       long v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_pixelBottom )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__out long *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_pixelRight )(
            __RPC__in IHTMLRuleStyle2 * This,
                       long v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_pixelRight )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_posBottom )(
            __RPC__in IHTMLRuleStyle2 * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_posBottom )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_posRight )(
            __RPC__in IHTMLRuleStyle2 * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_posRight )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_imeMode )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_imeMode )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rubyAlign )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyAlign )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rubyPosition )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyPosition )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rubyOverhang )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyOverhang )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridChar )(
            __RPC__in IHTMLRuleStyle2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridChar )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridLine )(
            __RPC__in IHTMLRuleStyle2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridLine )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridMode )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridMode )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutGridType )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridType )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                                 HRESULT ( STDMETHODCALLTYPE *put_layoutGrid )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                                 HRESULT ( STDMETHODCALLTYPE *get_layoutGrid )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textAutospace )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAutospace )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_wordBreak )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordBreak )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_lineBreak )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lineBreak )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textJustify )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textJustify )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textJustifyTrim )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textJustifyTrim )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textKashida )(
            __RPC__in IHTMLRuleStyle2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textKashida )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_overflowX )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflowX )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_overflowY )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflowY )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_accelerator )(
            __RPC__in IHTMLRuleStyle2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_accelerator )(
            __RPC__in IHTMLRuleStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLRuleStyle2Vtbl;
    interface IHTMLRuleStyle2
    {
        CONST_VTBL struct IHTMLRuleStyle2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_tableLayout(This,v) )
    ( (This)->lpVtbl -> get_tableLayout(This,p) )
    ( (This)->lpVtbl -> put_borderCollapse(This,v) )
    ( (This)->lpVtbl -> get_borderCollapse(This,p) )
    ( (This)->lpVtbl -> put_direction(This,v) )
    ( (This)->lpVtbl -> get_direction(This,p) )
    ( (This)->lpVtbl -> put_behavior(This,v) )
    ( (This)->lpVtbl -> get_behavior(This,p) )
    ( (This)->lpVtbl -> put_position(This,v) )
    ( (This)->lpVtbl -> get_position(This,p) )
    ( (This)->lpVtbl -> put_unicodeBidi(This,v) )
    ( (This)->lpVtbl -> get_unicodeBidi(This,p) )
    ( (This)->lpVtbl -> put_bottom(This,v) )
    ( (This)->lpVtbl -> get_bottom(This,p) )
    ( (This)->lpVtbl -> put_right(This,v) )
    ( (This)->lpVtbl -> get_right(This,p) )
    ( (This)->lpVtbl -> put_pixelBottom(This,v) )
    ( (This)->lpVtbl -> get_pixelBottom(This,p) )
    ( (This)->lpVtbl -> put_pixelRight(This,v) )
    ( (This)->lpVtbl -> get_pixelRight(This,p) )
    ( (This)->lpVtbl -> put_posBottom(This,v) )
    ( (This)->lpVtbl -> get_posBottom(This,p) )
    ( (This)->lpVtbl -> put_posRight(This,v) )
    ( (This)->lpVtbl -> get_posRight(This,p) )
    ( (This)->lpVtbl -> put_imeMode(This,v) )
    ( (This)->lpVtbl -> get_imeMode(This,p) )
    ( (This)->lpVtbl -> put_rubyAlign(This,v) )
    ( (This)->lpVtbl -> get_rubyAlign(This,p) )
    ( (This)->lpVtbl -> put_rubyPosition(This,v) )
    ( (This)->lpVtbl -> get_rubyPosition(This,p) )
    ( (This)->lpVtbl -> put_rubyOverhang(This,v) )
    ( (This)->lpVtbl -> get_rubyOverhang(This,p) )
    ( (This)->lpVtbl -> put_layoutGridChar(This,v) )
    ( (This)->lpVtbl -> get_layoutGridChar(This,p) )
    ( (This)->lpVtbl -> put_layoutGridLine(This,v) )
    ( (This)->lpVtbl -> get_layoutGridLine(This,p) )
    ( (This)->lpVtbl -> put_layoutGridMode(This,v) )
    ( (This)->lpVtbl -> get_layoutGridMode(This,p) )
    ( (This)->lpVtbl -> put_layoutGridType(This,v) )
    ( (This)->lpVtbl -> get_layoutGridType(This,p) )
    ( (This)->lpVtbl -> put_layoutGrid(This,v) )
    ( (This)->lpVtbl -> get_layoutGrid(This,p) )
    ( (This)->lpVtbl -> put_textAutospace(This,v) )
    ( (This)->lpVtbl -> get_textAutospace(This,p) )
    ( (This)->lpVtbl -> put_wordBreak(This,v) )
    ( (This)->lpVtbl -> get_wordBreak(This,p) )
    ( (This)->lpVtbl -> put_lineBreak(This,v) )
    ( (This)->lpVtbl -> get_lineBreak(This,p) )
    ( (This)->lpVtbl -> put_textJustify(This,v) )
    ( (This)->lpVtbl -> get_textJustify(This,p) )
    ( (This)->lpVtbl -> put_textJustifyTrim(This,v) )
    ( (This)->lpVtbl -> get_textJustifyTrim(This,p) )
    ( (This)->lpVtbl -> put_textKashida(This,v) )
    ( (This)->lpVtbl -> get_textKashida(This,p) )
    ( (This)->lpVtbl -> put_overflowX(This,v) )
    ( (This)->lpVtbl -> get_overflowX(This,p) )
    ( (This)->lpVtbl -> put_overflowY(This,v) )
    ( (This)->lpVtbl -> get_overflowY(This,p) )
    ( (This)->lpVtbl -> put_accelerator(This,v) )
    ( (This)->lpVtbl -> get_accelerator(This,p) )
EXTERN_C const IID IID_IHTMLRuleStyle3;
    typedef struct IHTMLRuleStyle3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLRuleStyle3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLRuleStyle3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLRuleStyle3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLRuleStyle3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLRuleStyle3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLRuleStyle3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLRuleStyle3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_layoutFlow )(
            __RPC__in IHTMLRuleStyle3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutFlow )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_zoom )(
            __RPC__in IHTMLRuleStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_zoom )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_wordWrap )(
            __RPC__in IHTMLRuleStyle3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordWrap )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textUnderlinePosition )(
            __RPC__in IHTMLRuleStyle3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textUnderlinePosition )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarBaseColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarBaseColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarFaceColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarFaceColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbar3dLightColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbar3dLightColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarShadowColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarShadowColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarHighlightColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarHighlightColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarDarkShadowColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarDarkShadowColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarArrowColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarArrowColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollbarTrackColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarTrackColor )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_writingMode )(
            __RPC__in IHTMLRuleStyle3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_writingMode )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textAlignLast )(
            __RPC__in IHTMLRuleStyle3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAlignLast )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textKashidaSpace )(
            __RPC__in IHTMLRuleStyle3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textKashidaSpace )(
            __RPC__in IHTMLRuleStyle3 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLRuleStyle3Vtbl;
    interface IHTMLRuleStyle3
    {
        CONST_VTBL struct IHTMLRuleStyle3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_layoutFlow(This,v) )
    ( (This)->lpVtbl -> get_layoutFlow(This,p) )
    ( (This)->lpVtbl -> put_zoom(This,v) )
    ( (This)->lpVtbl -> get_zoom(This,p) )
    ( (This)->lpVtbl -> put_wordWrap(This,v) )
    ( (This)->lpVtbl -> get_wordWrap(This,p) )
    ( (This)->lpVtbl -> put_textUnderlinePosition(This,v) )
    ( (This)->lpVtbl -> get_textUnderlinePosition(This,p) )
    ( (This)->lpVtbl -> put_scrollbarBaseColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarBaseColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarFaceColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarFaceColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbar3dLightColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbar3dLightColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarShadowColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarShadowColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarHighlightColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarHighlightColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarDarkShadowColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarDarkShadowColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarArrowColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarArrowColor(This,p) )
    ( (This)->lpVtbl -> put_scrollbarTrackColor(This,v) )
    ( (This)->lpVtbl -> get_scrollbarTrackColor(This,p) )
    ( (This)->lpVtbl -> put_writingMode(This,v) )
    ( (This)->lpVtbl -> get_writingMode(This,p) )
    ( (This)->lpVtbl -> put_textAlignLast(This,v) )
    ( (This)->lpVtbl -> get_textAlignLast(This,p) )
    ( (This)->lpVtbl -> put_textKashidaSpace(This,v) )
    ( (This)->lpVtbl -> get_textKashidaSpace(This,p) )
EXTERN_C const IID IID_IHTMLRuleStyle4;
    typedef struct IHTMLRuleStyle4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLRuleStyle4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLRuleStyle4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLRuleStyle4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLRuleStyle4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLRuleStyle4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLRuleStyle4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLRuleStyle4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textOverflow )(
            __RPC__in IHTMLRuleStyle4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textOverflow )(
            __RPC__in IHTMLRuleStyle4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_minHeight )(
            __RPC__in IHTMLRuleStyle4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_minHeight )(
            __RPC__in IHTMLRuleStyle4 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLRuleStyle4Vtbl;
    interface IHTMLRuleStyle4
    {
        CONST_VTBL struct IHTMLRuleStyle4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_textOverflow(This,v) )
    ( (This)->lpVtbl -> get_textOverflow(This,p) )
    ( (This)->lpVtbl -> put_minHeight(This,v) )
    ( (This)->lpVtbl -> get_minHeight(This,p) )
EXTERN_C const IID IID_IHTMLRuleStyle5;
    typedef struct IHTMLRuleStyle5Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLRuleStyle5 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLRuleStyle5 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLRuleStyle5 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLRuleStyle5 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLRuleStyle5 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLRuleStyle5 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLRuleStyle5 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msInterpolationMode )(
            __RPC__in IHTMLRuleStyle5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msInterpolationMode )(
            __RPC__in IHTMLRuleStyle5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_maxHeight )(
            __RPC__in IHTMLRuleStyle5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_maxHeight )(
            __RPC__in IHTMLRuleStyle5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_minWidth )(
            __RPC__in IHTMLRuleStyle5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_minWidth )(
            __RPC__in IHTMLRuleStyle5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_maxWidth )(
            __RPC__in IHTMLRuleStyle5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_maxWidth )(
            __RPC__in IHTMLRuleStyle5 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLRuleStyle5Vtbl;
    interface IHTMLRuleStyle5
    {
        CONST_VTBL struct IHTMLRuleStyle5Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_msInterpolationMode(This,v) )
    ( (This)->lpVtbl -> get_msInterpolationMode(This,p) )
    ( (This)->lpVtbl -> put_maxHeight(This,v) )
    ( (This)->lpVtbl -> get_maxHeight(This,p) )
    ( (This)->lpVtbl -> put_minWidth(This,v) )
    ( (This)->lpVtbl -> get_minWidth(This,p) )
    ( (This)->lpVtbl -> put_maxWidth(This,v) )
    ( (This)->lpVtbl -> get_maxWidth(This,p) )
EXTERN_C const IID IID_IHTMLRuleStyle6;
    typedef struct IHTMLRuleStyle6Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLRuleStyle6 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLRuleStyle6 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLRuleStyle6 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLRuleStyle6 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLRuleStyle6 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_content )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_content )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_captionSide )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_captionSide )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_counterIncrement )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_counterIncrement )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_counterReset )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_counterReset )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outline )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outline )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outlineWidth )(
            __RPC__in IHTMLRuleStyle6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineWidth )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outlineStyle )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineStyle )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_outlineColor )(
            __RPC__in IHTMLRuleStyle6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineColor )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_boxSizing )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_boxSizing )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_borderSpacing )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderSpacing )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_orphans )(
            __RPC__in IHTMLRuleStyle6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_orphans )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_widows )(
            __RPC__in IHTMLRuleStyle6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_widows )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_pageBreakInside )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakInside )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_emptyCells )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_emptyCells )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msBlockProgression )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msBlockProgression )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_quotes )(
            __RPC__in IHTMLRuleStyle6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_quotes )(
            __RPC__in IHTMLRuleStyle6 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLRuleStyle6Vtbl;
    interface IHTMLRuleStyle6
    {
        CONST_VTBL struct IHTMLRuleStyle6Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_content(This,v) )
    ( (This)->lpVtbl -> get_content(This,p) )
    ( (This)->lpVtbl -> put_captionSide(This,v) )
    ( (This)->lpVtbl -> get_captionSide(This,p) )
    ( (This)->lpVtbl -> put_counterIncrement(This,v) )
    ( (This)->lpVtbl -> get_counterIncrement(This,p) )
    ( (This)->lpVtbl -> put_counterReset(This,v) )
    ( (This)->lpVtbl -> get_counterReset(This,p) )
    ( (This)->lpVtbl -> put_outline(This,v) )
    ( (This)->lpVtbl -> get_outline(This,p) )
    ( (This)->lpVtbl -> put_outlineWidth(This,v) )
    ( (This)->lpVtbl -> get_outlineWidth(This,p) )
    ( (This)->lpVtbl -> put_outlineStyle(This,v) )
    ( (This)->lpVtbl -> get_outlineStyle(This,p) )
    ( (This)->lpVtbl -> put_outlineColor(This,v) )
    ( (This)->lpVtbl -> get_outlineColor(This,p) )
    ( (This)->lpVtbl -> put_boxSizing(This,v) )
    ( (This)->lpVtbl -> get_boxSizing(This,p) )
    ( (This)->lpVtbl -> put_borderSpacing(This,v) )
    ( (This)->lpVtbl -> get_borderSpacing(This,p) )
    ( (This)->lpVtbl -> put_orphans(This,v) )
    ( (This)->lpVtbl -> get_orphans(This,p) )
    ( (This)->lpVtbl -> put_widows(This,v) )
    ( (This)->lpVtbl -> get_widows(This,p) )
    ( (This)->lpVtbl -> put_pageBreakInside(This,v) )
    ( (This)->lpVtbl -> get_pageBreakInside(This,p) )
    ( (This)->lpVtbl -> put_emptyCells(This,v) )
    ( (This)->lpVtbl -> get_emptyCells(This,p) )
    ( (This)->lpVtbl -> put_msBlockProgression(This,v) )
    ( (This)->lpVtbl -> get_msBlockProgression(This,p) )
    ( (This)->lpVtbl -> put_quotes(This,v) )
    ( (This)->lpVtbl -> get_quotes(This,p) )
EXTERN_C const IID DIID_DispHTMLStyle;
    typedef struct DispHTMLStyleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStyle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStyle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStyle * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStyle * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStyle * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStyle * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStyle * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStyleVtbl;
    interface DispHTMLStyle
    {
        CONST_VTBL struct DispHTMLStyleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStyle;
class DECLSPEC_UUID("3050f285-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyle;
EXTERN_C const IID DIID_DispHTMLRuleStyle;
    typedef struct DispHTMLRuleStyleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLRuleStyle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLRuleStyle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLRuleStyle * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLRuleStyle * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLRuleStyle * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLRuleStyle * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLRuleStyle * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLRuleStyleVtbl;
    interface DispHTMLRuleStyle
    {
        CONST_VTBL struct DispHTMLRuleStyleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLRuleStyle;
class DECLSPEC_UUID("3050f3d0-98b5-11cf-bb82-00aa00bdce0b")
HTMLRuleStyle;
EXTERN_C const IID IID_IHTMLStyleSheetRulesCollection;
    typedef struct IHTMLStyleSheetRulesCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheetRulesCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheetRulesCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheetRulesCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheetRulesCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheetRulesCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheetRulesCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheetRulesCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLStyleSheetRulesCollection * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLStyleSheetRulesCollection * This,
                       long index,
                                __RPC__deref_out_opt IHTMLStyleSheetRule **ppHTMLStyleSheetRule);
        END_INTERFACE
    } IHTMLStyleSheetRulesCollectionVtbl;
    interface IHTMLStyleSheetRulesCollection
    {
        CONST_VTBL struct IHTMLStyleSheetRulesCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> item(This,index,ppHTMLStyleSheetRule) )
EXTERN_C const IID IID_IHTMLStyleSheet;
    typedef struct IHTMLStyleSheetVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheet * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheet * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheet * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheet * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheet * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheet * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheet * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_title )(
            __RPC__in IHTMLStyleSheet * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_title )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_parentStyleSheet )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__deref_out_opt IHTMLStyleSheet **p);
                            HRESULT ( STDMETHODCALLTYPE *get_owningElement )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLStyleSheet * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_readOnly )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_imports )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__deref_out_opt IHTMLStyleSheetsCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *put_href )(
            __RPC__in IHTMLStyleSheet * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_id )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *addImport )(
            __RPC__in IHTMLStyleSheet * This,
                       __RPC__in BSTR bstrURL,
                                     long lIndex,
                                __RPC__out long *plIndex);
                   HRESULT ( STDMETHODCALLTYPE *addRule )(
            __RPC__in IHTMLStyleSheet * This,
                       __RPC__in BSTR bstrSelector,
                       __RPC__in BSTR bstrStyle,
                                     long lIndex,
                                __RPC__out long *plNewIndex);
                   HRESULT ( STDMETHODCALLTYPE *removeImport )(
            __RPC__in IHTMLStyleSheet * This,
                       long lIndex);
                   HRESULT ( STDMETHODCALLTYPE *removeRule )(
            __RPC__in IHTMLStyleSheet * This,
                       long lIndex);
                            HRESULT ( STDMETHODCALLTYPE *put_media )(
            __RPC__in IHTMLStyleSheet * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_media )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_cssText )(
            __RPC__in IHTMLStyleSheet * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_cssText )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_rules )(
            __RPC__in IHTMLStyleSheet * This,
                                __RPC__deref_out_opt IHTMLStyleSheetRulesCollection **p);
        END_INTERFACE
    } IHTMLStyleSheetVtbl;
    interface IHTMLStyleSheet
    {
        CONST_VTBL struct IHTMLStyleSheetVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_title(This,v) )
    ( (This)->lpVtbl -> get_title(This,p) )
    ( (This)->lpVtbl -> get_parentStyleSheet(This,p) )
    ( (This)->lpVtbl -> get_owningElement(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> get_readOnly(This,p) )
    ( (This)->lpVtbl -> get_imports(This,p) )
    ( (This)->lpVtbl -> put_href(This,v) )
    ( (This)->lpVtbl -> get_href(This,p) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> get_id(This,p) )
    ( (This)->lpVtbl -> addImport(This,bstrURL,lIndex,plIndex) )
    ( (This)->lpVtbl -> addRule(This,bstrSelector,bstrStyle,lIndex,plNewIndex) )
    ( (This)->lpVtbl -> removeImport(This,lIndex) )
    ( (This)->lpVtbl -> removeRule(This,lIndex) )
    ( (This)->lpVtbl -> put_media(This,v) )
    ( (This)->lpVtbl -> get_media(This,p) )
    ( (This)->lpVtbl -> put_cssText(This,v) )
    ( (This)->lpVtbl -> get_cssText(This,p) )
    ( (This)->lpVtbl -> get_rules(This,p) )
EXTERN_C const IID IID_IHTMLCSSRule;
    typedef struct IHTMLCSSRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCSSRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCSSRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCSSRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCSSRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCSSRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCSSRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCSSRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLCSSRule * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_cssText )(
            __RPC__in IHTMLCSSRule * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_cssText )(
            __RPC__in IHTMLCSSRule * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_parentRule )(
            __RPC__in IHTMLCSSRule * This,
                                __RPC__deref_out_opt IHTMLCSSRule **p);
                            HRESULT ( STDMETHODCALLTYPE *get_parentStyleSheet )(
            __RPC__in IHTMLCSSRule * This,
                                __RPC__deref_out_opt IHTMLStyleSheet **p);
        END_INTERFACE
    } IHTMLCSSRuleVtbl;
    interface IHTMLCSSRule
    {
        CONST_VTBL struct IHTMLCSSRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_cssText(This,v) )
    ( (This)->lpVtbl -> get_cssText(This,p) )
    ( (This)->lpVtbl -> get_parentRule(This,p) )
    ( (This)->lpVtbl -> get_parentStyleSheet(This,p) )
EXTERN_C const IID IID_IHTMLCSSImportRule;
    typedef struct IHTMLCSSImportRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCSSImportRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCSSImportRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCSSImportRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCSSImportRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCSSImportRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCSSImportRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCSSImportRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLCSSImportRule * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_media )(
            __RPC__in IHTMLCSSImportRule * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_media )(
            __RPC__in IHTMLCSSImportRule * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_styleSheet )(
            __RPC__in IHTMLCSSImportRule * This,
                                __RPC__deref_out_opt IHTMLStyleSheet **p);
        END_INTERFACE
    } IHTMLCSSImportRuleVtbl;
    interface IHTMLCSSImportRule
    {
        CONST_VTBL struct IHTMLCSSImportRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_href(This,p) )
    ( (This)->lpVtbl -> put_media(This,v) )
    ( (This)->lpVtbl -> get_media(This,p) )
    ( (This)->lpVtbl -> get_styleSheet(This,p) )
EXTERN_C const IID IID_IHTMLCSSMediaRule;
    typedef struct IHTMLCSSMediaRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCSSMediaRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCSSMediaRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCSSMediaRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCSSMediaRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCSSMediaRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCSSMediaRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCSSMediaRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_media )(
            __RPC__in IHTMLCSSMediaRule * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_media )(
            __RPC__in IHTMLCSSMediaRule * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_cssRules )(
            __RPC__in IHTMLCSSMediaRule * This,
                                __RPC__deref_out_opt IHTMLStyleSheetRulesCollection **p);
                   HRESULT ( STDMETHODCALLTYPE *insertRule )(
            __RPC__in IHTMLCSSMediaRule * This,
                       __RPC__in BSTR bstrRule,
                                     long lIndex,
                                __RPC__out long *plNewIndex);
                   HRESULT ( STDMETHODCALLTYPE *deleteRule )(
            __RPC__in IHTMLCSSMediaRule * This,
                                     long lIndex);
        END_INTERFACE
    } IHTMLCSSMediaRuleVtbl;
    interface IHTMLCSSMediaRule
    {
        CONST_VTBL struct IHTMLCSSMediaRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_media(This,v) )
    ( (This)->lpVtbl -> get_media(This,p) )
    ( (This)->lpVtbl -> get_cssRules(This,p) )
    ( (This)->lpVtbl -> insertRule(This,bstrRule,lIndex,plNewIndex) )
    ( (This)->lpVtbl -> deleteRule(This,lIndex) )
EXTERN_C const IID IID_IHTMLCSSMediaList;
    typedef struct IHTMLCSSMediaListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCSSMediaList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCSSMediaList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCSSMediaList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCSSMediaList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCSSMediaList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCSSMediaList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCSSMediaList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_mediaText )(
            __RPC__in IHTMLCSSMediaList * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_mediaText )(
            __RPC__in IHTMLCSSMediaList * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLCSSMediaList * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLCSSMediaList * This,
                       long index,
                                __RPC__deref_out_opt BSTR *pbstrMedium);
                   HRESULT ( STDMETHODCALLTYPE *appendMedium )(
            __RPC__in IHTMLCSSMediaList * This,
                       __RPC__in BSTR bstrMedium);
                   HRESULT ( STDMETHODCALLTYPE *deleteMedium )(
            __RPC__in IHTMLCSSMediaList * This,
                       __RPC__in BSTR bstrMedium);
        END_INTERFACE
    } IHTMLCSSMediaListVtbl;
    interface IHTMLCSSMediaList
    {
        CONST_VTBL struct IHTMLCSSMediaListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_mediaText(This,v) )
    ( (This)->lpVtbl -> get_mediaText(This,p) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> item(This,index,pbstrMedium) )
    ( (This)->lpVtbl -> appendMedium(This,bstrMedium) )
    ( (This)->lpVtbl -> deleteMedium(This,bstrMedium) )
EXTERN_C const IID IID_IHTMLCSSNamespaceRule;
    typedef struct IHTMLCSSNamespaceRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCSSNamespaceRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCSSNamespaceRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCSSNamespaceRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCSSNamespaceRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCSSNamespaceRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCSSNamespaceRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCSSNamespaceRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )(
            __RPC__in IHTMLCSSNamespaceRule * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_prefix )(
            __RPC__in IHTMLCSSNamespaceRule * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLCSSNamespaceRuleVtbl;
    interface IHTMLCSSNamespaceRule
    {
        CONST_VTBL struct IHTMLCSSNamespaceRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_namespaceURI(This,p) )
    ( (This)->lpVtbl -> get_prefix(This,p) )
EXTERN_C const IID IID_IHTMLMSCSSKeyframeRule;
    typedef struct IHTMLMSCSSKeyframeRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMSCSSKeyframeRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMSCSSKeyframeRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMSCSSKeyframeRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMSCSSKeyframeRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMSCSSKeyframeRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMSCSSKeyframeRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMSCSSKeyframeRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_keyText )(
            __RPC__in IHTMLMSCSSKeyframeRule * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_keyText )(
            __RPC__in IHTMLMSCSSKeyframeRule * This,
                                __RPC__deref_out_opt BSTR *p);
                                          HRESULT ( STDMETHODCALLTYPE *get_style )(
            __RPC__in IHTMLMSCSSKeyframeRule * This,
                                __RPC__deref_out_opt IHTMLRuleStyle **p);
        END_INTERFACE
    } IHTMLMSCSSKeyframeRuleVtbl;
    interface IHTMLMSCSSKeyframeRule
    {
        CONST_VTBL struct IHTMLMSCSSKeyframeRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_keyText(This,v) )
    ( (This)->lpVtbl -> get_keyText(This,p) )
    ( (This)->lpVtbl -> get_style(This,p) )
EXTERN_C const IID IID_IHTMLMSCSSKeyframesRule;
    typedef struct IHTMLMSCSSKeyframesRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMSCSSKeyframesRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMSCSSKeyframesRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMSCSSKeyframesRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMSCSSKeyframesRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMSCSSKeyframesRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMSCSSKeyframesRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMSCSSKeyframesRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLMSCSSKeyframesRule * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLMSCSSKeyframesRule * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_cssRules )(
            __RPC__in IHTMLMSCSSKeyframesRule * This,
                                __RPC__deref_out_opt IHTMLStyleSheetRulesCollection **p);
                   HRESULT ( STDMETHODCALLTYPE *appendRule )(
            __RPC__in IHTMLMSCSSKeyframesRule * This,
                       __RPC__in BSTR bstrRule);
                   HRESULT ( STDMETHODCALLTYPE *deleteRule )(
            __RPC__in IHTMLMSCSSKeyframesRule * This,
                       __RPC__in BSTR bstrKey);
                   HRESULT ( STDMETHODCALLTYPE *findRule )(
            __RPC__in IHTMLMSCSSKeyframesRule * This,
                       __RPC__in BSTR bstrKey,
                                __RPC__deref_out_opt IHTMLMSCSSKeyframeRule **ppMSKeyframeRule);
        END_INTERFACE
    } IHTMLMSCSSKeyframesRuleVtbl;
    interface IHTMLMSCSSKeyframesRule
    {
        CONST_VTBL struct IHTMLMSCSSKeyframesRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> get_cssRules(This,p) )
    ( (This)->lpVtbl -> appendRule(This,bstrRule) )
    ( (This)->lpVtbl -> deleteRule(This,bstrKey) )
    ( (This)->lpVtbl -> findRule(This,bstrKey,ppMSKeyframeRule) )
EXTERN_C const IID DIID_DispHTMLCSSRule;
    typedef struct DispHTMLCSSRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLCSSRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLCSSRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLCSSRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLCSSRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLCSSRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLCSSRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLCSSRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLCSSRuleVtbl;
    interface DispHTMLCSSRule
    {
        CONST_VTBL struct DispHTMLCSSRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLCSSRule;
class DECLSPEC_UUID("305106ef-98b5-11cf-bb82-00aa00bdce0b")
HTMLCSSRule;
EXTERN_C const IID DIID_DispHTMLCSSImportRule;
    typedef struct DispHTMLCSSImportRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLCSSImportRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLCSSImportRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLCSSImportRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLCSSImportRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLCSSImportRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLCSSImportRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLCSSImportRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLCSSImportRuleVtbl;
    interface DispHTMLCSSImportRule
    {
        CONST_VTBL struct DispHTMLCSSImportRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLCSSImportRule;
class DECLSPEC_UUID("305106f0-98b5-11cf-bb82-00aa00bdce0b")
HTMLCSSImportRule;
EXTERN_C const IID DIID_DispHTMLCSSMediaRule;
    typedef struct DispHTMLCSSMediaRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLCSSMediaRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLCSSMediaRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLCSSMediaRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLCSSMediaRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLCSSMediaRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLCSSMediaRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLCSSMediaRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLCSSMediaRuleVtbl;
    interface DispHTMLCSSMediaRule
    {
        CONST_VTBL struct DispHTMLCSSMediaRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLCSSMediaRule;
class DECLSPEC_UUID("305106f1-98b5-11cf-bb82-00aa00bdce0b")
HTMLCSSMediaRule;
EXTERN_C const IID DIID_DispHTMLCSSMediaList;
    typedef struct DispHTMLCSSMediaListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLCSSMediaList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLCSSMediaList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLCSSMediaList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLCSSMediaList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLCSSMediaList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLCSSMediaList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLCSSMediaList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLCSSMediaListVtbl;
    interface DispHTMLCSSMediaList
    {
        CONST_VTBL struct DispHTMLCSSMediaListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLCSSMediaList;
class DECLSPEC_UUID("30510732-98b5-11cf-bb82-00aa00bdce0b")
HTMLCSSMediaList;
EXTERN_C const IID DIID_DispHTMLCSSNamespaceRule;
    typedef struct DispHTMLCSSNamespaceRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLCSSNamespaceRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLCSSNamespaceRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLCSSNamespaceRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLCSSNamespaceRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLCSSNamespaceRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLCSSNamespaceRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLCSSNamespaceRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLCSSNamespaceRuleVtbl;
    interface DispHTMLCSSNamespaceRule
    {
        CONST_VTBL struct DispHTMLCSSNamespaceRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLCSSNamespaceRule;
class DECLSPEC_UUID("305106f2-98b5-11cf-bb82-00aa00bdce0b")
HTMLCSSNamespaceRule;
EXTERN_C const IID DIID_DispHTMLMSCSSKeyframeRule;
    typedef struct DispHTMLMSCSSKeyframeRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLMSCSSKeyframeRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLMSCSSKeyframeRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLMSCSSKeyframeRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLMSCSSKeyframeRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLMSCSSKeyframeRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLMSCSSKeyframeRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLMSCSSKeyframeRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLMSCSSKeyframeRuleVtbl;
    interface DispHTMLMSCSSKeyframeRule
    {
        CONST_VTBL struct DispHTMLMSCSSKeyframeRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLMSCSSKeyframeRule;
class DECLSPEC_UUID("3051080E-98b5-11cf-bb82-00aa00bdce0b")
HTMLMSCSSKeyframeRule;
EXTERN_C const IID DIID_DispHTMLMSCSSKeyframesRule;
    typedef struct DispHTMLMSCSSKeyframesRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLMSCSSKeyframesRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLMSCSSKeyframesRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLMSCSSKeyframesRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLMSCSSKeyframesRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLMSCSSKeyframesRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLMSCSSKeyframesRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLMSCSSKeyframesRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLMSCSSKeyframesRuleVtbl;
    interface DispHTMLMSCSSKeyframesRule
    {
        CONST_VTBL struct DispHTMLMSCSSKeyframesRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLMSCSSKeyframesRule;
class DECLSPEC_UUID("3051080F-98b5-11cf-bb82-00aa00bdce0b")
HTMLMSCSSKeyframesRule;
EXTERN_C const IID IID_IHTMLRenderStyle;
    typedef struct IHTMLRenderStyleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLRenderStyle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLRenderStyle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLRenderStyle * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLRenderStyle * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLRenderStyle * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLRenderStyle * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLRenderStyle * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textLineThroughStyle )(
            __RPC__in IHTMLRenderStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textLineThroughStyle )(
            __RPC__in IHTMLRenderStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textUnderlineStyle )(
            __RPC__in IHTMLRenderStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textUnderlineStyle )(
            __RPC__in IHTMLRenderStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textEffect )(
            __RPC__in IHTMLRenderStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textEffect )(
            __RPC__in IHTMLRenderStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textColor )(
            __RPC__in IHTMLRenderStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textColor )(
            __RPC__in IHTMLRenderStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textBackgroundColor )(
            __RPC__in IHTMLRenderStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textBackgroundColor )(
            __RPC__in IHTMLRenderStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecorationColor )(
            __RPC__in IHTMLRenderStyle * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecorationColor )(
            __RPC__in IHTMLRenderStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_renderingPriority )(
            __RPC__in IHTMLRenderStyle * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_renderingPriority )(
            __RPC__in IHTMLRenderStyle * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_defaultTextSelection )(
            __RPC__in IHTMLRenderStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_defaultTextSelection )(
            __RPC__in IHTMLRenderStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_textDecoration )(
            __RPC__in IHTMLRenderStyle * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecoration )(
            __RPC__in IHTMLRenderStyle * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLRenderStyleVtbl;
    interface IHTMLRenderStyle
    {
        CONST_VTBL struct IHTMLRenderStyleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_textLineThroughStyle(This,v) )
    ( (This)->lpVtbl -> get_textLineThroughStyle(This,p) )
    ( (This)->lpVtbl -> put_textUnderlineStyle(This,v) )
    ( (This)->lpVtbl -> get_textUnderlineStyle(This,p) )
    ( (This)->lpVtbl -> put_textEffect(This,v) )
    ( (This)->lpVtbl -> get_textEffect(This,p) )
    ( (This)->lpVtbl -> put_textColor(This,v) )
    ( (This)->lpVtbl -> get_textColor(This,p) )
    ( (This)->lpVtbl -> put_textBackgroundColor(This,v) )
    ( (This)->lpVtbl -> get_textBackgroundColor(This,p) )
    ( (This)->lpVtbl -> put_textDecorationColor(This,v) )
    ( (This)->lpVtbl -> get_textDecorationColor(This,p) )
    ( (This)->lpVtbl -> put_renderingPriority(This,v) )
    ( (This)->lpVtbl -> get_renderingPriority(This,p) )
    ( (This)->lpVtbl -> put_defaultTextSelection(This,v) )
    ( (This)->lpVtbl -> get_defaultTextSelection(This,p) )
    ( (This)->lpVtbl -> put_textDecoration(This,v) )
    ( (This)->lpVtbl -> get_textDecoration(This,p) )
EXTERN_C const IID DIID_DispHTMLRenderStyle;
    typedef struct DispHTMLRenderStyleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLRenderStyle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLRenderStyle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLRenderStyle * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLRenderStyle * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLRenderStyle * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLRenderStyle * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLRenderStyle * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLRenderStyleVtbl;
    interface DispHTMLRenderStyle
    {
        CONST_VTBL struct DispHTMLRenderStyleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLRenderStyle;
class DECLSPEC_UUID("3050f6aa-98b5-11cf-bb82-00aa00bdce0b")
HTMLRenderStyle;
EXTERN_C const IID IID_IHTMLCurrentStyle;
    typedef struct IHTMLCurrentStyleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCurrentStyle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCurrentStyle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCurrentStyle * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCurrentStyle * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCurrentStyle * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCurrentStyle * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCurrentStyle * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *get_position )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_styleFloat )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_color )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundColor )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontFamily )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontStyle )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                           HRESULT ( STDMETHODCALLTYPE *get_fontVariant )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontWeight )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontSize )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundImage )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundPositionX )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundPositionY )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundRepeat )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftColor )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopColor )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightColor )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomColor )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopStyle )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightStyle )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomStyle )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftStyle )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderTopWidth )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderRightWidth )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderBottomWidth )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderLeftWidth )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_left )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_top )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingLeft )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingTop )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingRight )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paddingBottom )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAlign )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textDecoration )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_display )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_visibility )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_zIndex )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_letterSpacing )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lineHeight )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textIndent )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_verticalAlign )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_backgroundAttachment )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginTop )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginRight )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginBottom )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_marginLeft )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clear )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStyleType )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStylePosition )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_listStyleImage )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clipTop )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clipRight )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clipBottom )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clipLeft )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflow )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakBefore )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakAfter )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_cursor )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_tableLayout )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderCollapse )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_direction )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_behavior )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *getAttribute )(
            __RPC__in IHTMLCurrentStyle * This,
                       __RPC__in BSTR strAttributeName,
                                     LONG lFlags,
                                __RPC__out VARIANT *AttributeValue);
                                                   HRESULT ( STDMETHODCALLTYPE *get_unicodeBidi )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_right )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_bottom )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_imeMode )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyAlign )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyPosition )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rubyOverhang )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAutospace )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lineBreak )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordBreak )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textJustify )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textJustifyTrim )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textKashida )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_blockDirection )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridChar )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridLine )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridMode )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutGridType )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderStyle )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderColor )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderWidth )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_padding )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_margin )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_accelerator )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflowX )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_overflowY )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textTransform )(
            __RPC__in IHTMLCurrentStyle * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLCurrentStyleVtbl;
    interface IHTMLCurrentStyle
    {
        CONST_VTBL struct IHTMLCurrentStyleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_position(This,p) )
    ( (This)->lpVtbl -> get_styleFloat(This,p) )
    ( (This)->lpVtbl -> get_color(This,p) )
    ( (This)->lpVtbl -> get_backgroundColor(This,p) )
    ( (This)->lpVtbl -> get_fontFamily(This,p) )
    ( (This)->lpVtbl -> get_fontStyle(This,p) )
    ( (This)->lpVtbl -> get_fontVariant(This,p) )
    ( (This)->lpVtbl -> get_fontWeight(This,p) )
    ( (This)->lpVtbl -> get_fontSize(This,p) )
    ( (This)->lpVtbl -> get_backgroundImage(This,p) )
    ( (This)->lpVtbl -> get_backgroundPositionX(This,p) )
    ( (This)->lpVtbl -> get_backgroundPositionY(This,p) )
    ( (This)->lpVtbl -> get_backgroundRepeat(This,p) )
    ( (This)->lpVtbl -> get_borderLeftColor(This,p) )
    ( (This)->lpVtbl -> get_borderTopColor(This,p) )
    ( (This)->lpVtbl -> get_borderRightColor(This,p) )
    ( (This)->lpVtbl -> get_borderBottomColor(This,p) )
    ( (This)->lpVtbl -> get_borderTopStyle(This,p) )
    ( (This)->lpVtbl -> get_borderRightStyle(This,p) )
    ( (This)->lpVtbl -> get_borderBottomStyle(This,p) )
    ( (This)->lpVtbl -> get_borderLeftStyle(This,p) )
    ( (This)->lpVtbl -> get_borderTopWidth(This,p) )
    ( (This)->lpVtbl -> get_borderRightWidth(This,p) )
    ( (This)->lpVtbl -> get_borderBottomWidth(This,p) )
    ( (This)->lpVtbl -> get_borderLeftWidth(This,p) )
    ( (This)->lpVtbl -> get_left(This,p) )
    ( (This)->lpVtbl -> get_top(This,p) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> get_paddingLeft(This,p) )
    ( (This)->lpVtbl -> get_paddingTop(This,p) )
    ( (This)->lpVtbl -> get_paddingRight(This,p) )
    ( (This)->lpVtbl -> get_paddingBottom(This,p) )
    ( (This)->lpVtbl -> get_textAlign(This,p) )
    ( (This)->lpVtbl -> get_textDecoration(This,p) )
    ( (This)->lpVtbl -> get_display(This,p) )
    ( (This)->lpVtbl -> get_visibility(This,p) )
    ( (This)->lpVtbl -> get_zIndex(This,p) )
    ( (This)->lpVtbl -> get_letterSpacing(This,p) )
    ( (This)->lpVtbl -> get_lineHeight(This,p) )
    ( (This)->lpVtbl -> get_textIndent(This,p) )
    ( (This)->lpVtbl -> get_verticalAlign(This,p) )
    ( (This)->lpVtbl -> get_backgroundAttachment(This,p) )
    ( (This)->lpVtbl -> get_marginTop(This,p) )
    ( (This)->lpVtbl -> get_marginRight(This,p) )
    ( (This)->lpVtbl -> get_marginBottom(This,p) )
    ( (This)->lpVtbl -> get_marginLeft(This,p) )
    ( (This)->lpVtbl -> get_clear(This,p) )
    ( (This)->lpVtbl -> get_listStyleType(This,p) )
    ( (This)->lpVtbl -> get_listStylePosition(This,p) )
    ( (This)->lpVtbl -> get_listStyleImage(This,p) )
    ( (This)->lpVtbl -> get_clipTop(This,p) )
    ( (This)->lpVtbl -> get_clipRight(This,p) )
    ( (This)->lpVtbl -> get_clipBottom(This,p) )
    ( (This)->lpVtbl -> get_clipLeft(This,p) )
    ( (This)->lpVtbl -> get_overflow(This,p) )
    ( (This)->lpVtbl -> get_pageBreakBefore(This,p) )
    ( (This)->lpVtbl -> get_pageBreakAfter(This,p) )
    ( (This)->lpVtbl -> get_cursor(This,p) )
    ( (This)->lpVtbl -> get_tableLayout(This,p) )
    ( (This)->lpVtbl -> get_borderCollapse(This,p) )
    ( (This)->lpVtbl -> get_direction(This,p) )
    ( (This)->lpVtbl -> get_behavior(This,p) )
    ( (This)->lpVtbl -> getAttribute(This,strAttributeName,lFlags,AttributeValue) )
    ( (This)->lpVtbl -> get_unicodeBidi(This,p) )
    ( (This)->lpVtbl -> get_right(This,p) )
    ( (This)->lpVtbl -> get_bottom(This,p) )
    ( (This)->lpVtbl -> get_imeMode(This,p) )
    ( (This)->lpVtbl -> get_rubyAlign(This,p) )
    ( (This)->lpVtbl -> get_rubyPosition(This,p) )
    ( (This)->lpVtbl -> get_rubyOverhang(This,p) )
    ( (This)->lpVtbl -> get_textAutospace(This,p) )
    ( (This)->lpVtbl -> get_lineBreak(This,p) )
    ( (This)->lpVtbl -> get_wordBreak(This,p) )
    ( (This)->lpVtbl -> get_textJustify(This,p) )
    ( (This)->lpVtbl -> get_textJustifyTrim(This,p) )
    ( (This)->lpVtbl -> get_textKashida(This,p) )
    ( (This)->lpVtbl -> get_blockDirection(This,p) )
    ( (This)->lpVtbl -> get_layoutGridChar(This,p) )
    ( (This)->lpVtbl -> get_layoutGridLine(This,p) )
    ( (This)->lpVtbl -> get_layoutGridMode(This,p) )
    ( (This)->lpVtbl -> get_layoutGridType(This,p) )
    ( (This)->lpVtbl -> get_borderStyle(This,p) )
    ( (This)->lpVtbl -> get_borderColor(This,p) )
    ( (This)->lpVtbl -> get_borderWidth(This,p) )
    ( (This)->lpVtbl -> get_padding(This,p) )
    ( (This)->lpVtbl -> get_margin(This,p) )
    ( (This)->lpVtbl -> get_accelerator(This,p) )
    ( (This)->lpVtbl -> get_overflowX(This,p) )
    ( (This)->lpVtbl -> get_overflowY(This,p) )
    ( (This)->lpVtbl -> get_textTransform(This,p) )
EXTERN_C const IID IID_IHTMLCurrentStyle2;
    typedef struct IHTMLCurrentStyle2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCurrentStyle2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCurrentStyle2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCurrentStyle2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCurrentStyle2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCurrentStyle2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCurrentStyle2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCurrentStyle2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *get_layoutFlow )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordWrap )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textUnderlinePosition )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_hasLayout )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarBaseColor )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarFaceColor )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbar3dLightColor )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarShadowColor )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarHighlightColor )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarDarkShadowColor )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarArrowColor )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollbarTrackColor )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_writingMode )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_zoom )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_filter )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textAlignLast )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textKashidaSpace )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT *p);
                                                                                     HRESULT ( STDMETHODCALLTYPE *get_isBlock )(
            __RPC__in IHTMLCurrentStyle2 * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLCurrentStyle2Vtbl;
    interface IHTMLCurrentStyle2
    {
        CONST_VTBL struct IHTMLCurrentStyle2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_layoutFlow(This,p) )
    ( (This)->lpVtbl -> get_wordWrap(This,p) )
    ( (This)->lpVtbl -> get_textUnderlinePosition(This,p) )
    ( (This)->lpVtbl -> get_hasLayout(This,p) )
    ( (This)->lpVtbl -> get_scrollbarBaseColor(This,p) )
    ( (This)->lpVtbl -> get_scrollbarFaceColor(This,p) )
    ( (This)->lpVtbl -> get_scrollbar3dLightColor(This,p) )
    ( (This)->lpVtbl -> get_scrollbarShadowColor(This,p) )
    ( (This)->lpVtbl -> get_scrollbarHighlightColor(This,p) )
    ( (This)->lpVtbl -> get_scrollbarDarkShadowColor(This,p) )
    ( (This)->lpVtbl -> get_scrollbarArrowColor(This,p) )
    ( (This)->lpVtbl -> get_scrollbarTrackColor(This,p) )
    ( (This)->lpVtbl -> get_writingMode(This,p) )
    ( (This)->lpVtbl -> get_zoom(This,p) )
    ( (This)->lpVtbl -> get_filter(This,p) )
    ( (This)->lpVtbl -> get_textAlignLast(This,p) )
    ( (This)->lpVtbl -> get_textKashidaSpace(This,p) )
    ( (This)->lpVtbl -> get_isBlock(This,p) )
EXTERN_C const IID IID_IHTMLCurrentStyle3;
    typedef struct IHTMLCurrentStyle3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCurrentStyle3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCurrentStyle3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCurrentStyle3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCurrentStyle3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCurrentStyle3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCurrentStyle3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCurrentStyle3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *get_textOverflow )(
            __RPC__in IHTMLCurrentStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_minHeight )(
            __RPC__in IHTMLCurrentStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wordSpacing )(
            __RPC__in IHTMLCurrentStyle3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_whiteSpace )(
            __RPC__in IHTMLCurrentStyle3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLCurrentStyle3Vtbl;
    interface IHTMLCurrentStyle3
    {
        CONST_VTBL struct IHTMLCurrentStyle3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_textOverflow(This,p) )
    ( (This)->lpVtbl -> get_minHeight(This,p) )
    ( (This)->lpVtbl -> get_wordSpacing(This,p) )
    ( (This)->lpVtbl -> get_whiteSpace(This,p) )
EXTERN_C const IID IID_IHTMLCurrentStyle4;
    typedef struct IHTMLCurrentStyle4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCurrentStyle4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCurrentStyle4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCurrentStyle4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCurrentStyle4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCurrentStyle4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCurrentStyle4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCurrentStyle4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msInterpolationMode )(
            __RPC__in IHTMLCurrentStyle4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_maxHeight )(
            __RPC__in IHTMLCurrentStyle4 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_minWidth )(
            __RPC__in IHTMLCurrentStyle4 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_maxWidth )(
            __RPC__in IHTMLCurrentStyle4 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLCurrentStyle4Vtbl;
    interface IHTMLCurrentStyle4
    {
        CONST_VTBL struct IHTMLCurrentStyle4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_msInterpolationMode(This,p) )
    ( (This)->lpVtbl -> get_maxHeight(This,p) )
    ( (This)->lpVtbl -> get_minWidth(This,p) )
    ( (This)->lpVtbl -> get_maxWidth(This,p) )
EXTERN_C const IID IID_IHTMLCurrentStyle5;
    typedef struct IHTMLCurrentStyle5Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCurrentStyle5 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCurrentStyle5 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCurrentStyle5 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCurrentStyle5 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCurrentStyle5 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCurrentStyle5 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCurrentStyle5 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *get_captionSide )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outline )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineWidth )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineStyle )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_outlineColor )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_boxSizing )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_borderSpacing )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_orphans )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_widows )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_pageBreakInside )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_emptyCells )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msBlockProgression )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_quotes )(
            __RPC__in IHTMLCurrentStyle5 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLCurrentStyle5Vtbl;
    interface IHTMLCurrentStyle5
    {
        CONST_VTBL struct IHTMLCurrentStyle5Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_captionSide(This,p) )
    ( (This)->lpVtbl -> get_outline(This,p) )
    ( (This)->lpVtbl -> get_outlineWidth(This,p) )
    ( (This)->lpVtbl -> get_outlineStyle(This,p) )
    ( (This)->lpVtbl -> get_outlineColor(This,p) )
    ( (This)->lpVtbl -> get_boxSizing(This,p) )
    ( (This)->lpVtbl -> get_borderSpacing(This,p) )
    ( (This)->lpVtbl -> get_orphans(This,p) )
    ( (This)->lpVtbl -> get_widows(This,p) )
    ( (This)->lpVtbl -> get_pageBreakInside(This,p) )
    ( (This)->lpVtbl -> get_emptyCells(This,p) )
    ( (This)->lpVtbl -> get_msBlockProgression(This,p) )
    ( (This)->lpVtbl -> get_quotes(This,p) )
EXTERN_C const IID DIID_DispHTMLCurrentStyle;
    typedef struct DispHTMLCurrentStyleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLCurrentStyle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLCurrentStyle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLCurrentStyle * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLCurrentStyle * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLCurrentStyle * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLCurrentStyle * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLCurrentStyle * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLCurrentStyleVtbl;
    interface DispHTMLCurrentStyle
    {
        CONST_VTBL struct DispHTMLCurrentStyleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLCurrentStyle;
class DECLSPEC_UUID("3050f3dc-98b5-11cf-bb82-00aa00bdce0b")
HTMLCurrentStyle;
EXTERN_C const IID IID_IHTMLElement;
    typedef struct IHTMLElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *setAttribute )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR strAttributeName,
                       VARIANT AttributeValue,
                                     LONG lFlags);
                   HRESULT ( STDMETHODCALLTYPE *getAttribute )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR strAttributeName,
                                     LONG lFlags,
                                __RPC__out VARIANT *AttributeValue);
                   HRESULT ( STDMETHODCALLTYPE *removeAttribute )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR strAttributeName,
                                     LONG lFlags,
                                __RPC__out VARIANT_BOOL *pfSuccess);
                                      HRESULT ( STDMETHODCALLTYPE *put_className )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR v);
                                      HRESULT ( STDMETHODCALLTYPE *get_className )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                      HRESULT ( STDMETHODCALLTYPE *put_id )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR v);
                                      HRESULT ( STDMETHODCALLTYPE *get_id )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_tagName )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_parentElement )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                                          HRESULT ( STDMETHODCALLTYPE *get_style )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt IHTMLStyle **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onhelp )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onhelp )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onclick )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onclick )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondblclick )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondblclick )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onkeydown )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onkeydown )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onkeyup )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onkeyup )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onkeypress )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onkeypress )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseout )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseout )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseover )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseover )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmousemove )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmousemove )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmousedown )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmousedown )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseup )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseup )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_document )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt IDispatch **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_title )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_title )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_language )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_language )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onselectstart )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onselectstart )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *scrollIntoView )(
            __RPC__in IHTMLElement * This,
                                 VARIANT varargStart);
                   HRESULT ( STDMETHODCALLTYPE *contains )(
            __RPC__in IHTMLElement * This,
                       __RPC__in_opt IHTMLElement *pChild,
                                __RPC__out VARIANT_BOOL *pfResult);
                                      HRESULT ( STDMETHODCALLTYPE *get_sourceIndex )(
            __RPC__in IHTMLElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_recordNumber )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_lang )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_lang )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetLeft )(
            __RPC__in IHTMLElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetTop )(
            __RPC__in IHTMLElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetWidth )(
            __RPC__in IHTMLElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetHeight )(
            __RPC__in IHTMLElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetParent )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *put_innerHTML )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_innerHTML )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_innerText )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_innerText )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_outerHTML )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_outerHTML )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_outerText )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_outerText )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *insertAdjacentHTML )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR where,
                       __RPC__in BSTR html);
                   HRESULT ( STDMETHODCALLTYPE *insertAdjacentText )(
            __RPC__in IHTMLElement * This,
                       __RPC__in BSTR where,
                       __RPC__in BSTR text);
                            HRESULT ( STDMETHODCALLTYPE *get_parentTextEdit )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_isTextEdit )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *click )(
            __RPC__in IHTMLElement * This);
                            HRESULT ( STDMETHODCALLTYPE *get_filters )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt IHTMLFiltersCollection **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragstart )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragstart )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt BSTR *String);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeupdate )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeupdate )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onafterupdate )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onafterupdate )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerrorupdate )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerrorupdate )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onrowexit )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onrowexit )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onrowenter )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onrowenter )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondatasetchanged )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondatasetchanged )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondataavailable )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondataavailable )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondatasetcomplete )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondatasetcomplete )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfilterchange )(
            __RPC__in IHTMLElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfilterchange )(
            __RPC__in IHTMLElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_children )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_all )(
            __RPC__in IHTMLElement * This,
                                __RPC__deref_out_opt IDispatch **p);
        END_INTERFACE
    } IHTMLElementVtbl;
    interface IHTMLElement
    {
        CONST_VTBL struct IHTMLElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> setAttribute(This,strAttributeName,AttributeValue,lFlags) )
    ( (This)->lpVtbl -> getAttribute(This,strAttributeName,lFlags,AttributeValue) )
    ( (This)->lpVtbl -> removeAttribute(This,strAttributeName,lFlags,pfSuccess) )
    ( (This)->lpVtbl -> put_className(This,v) )
    ( (This)->lpVtbl -> get_className(This,p) )
    ( (This)->lpVtbl -> put_id(This,v) )
    ( (This)->lpVtbl -> get_id(This,p) )
    ( (This)->lpVtbl -> get_tagName(This,p) )
    ( (This)->lpVtbl -> get_parentElement(This,p) )
    ( (This)->lpVtbl -> get_style(This,p) )
    ( (This)->lpVtbl -> put_onhelp(This,v) )
    ( (This)->lpVtbl -> get_onhelp(This,p) )
    ( (This)->lpVtbl -> put_onclick(This,v) )
    ( (This)->lpVtbl -> get_onclick(This,p) )
    ( (This)->lpVtbl -> put_ondblclick(This,v) )
    ( (This)->lpVtbl -> get_ondblclick(This,p) )
    ( (This)->lpVtbl -> put_onkeydown(This,v) )
    ( (This)->lpVtbl -> get_onkeydown(This,p) )
    ( (This)->lpVtbl -> put_onkeyup(This,v) )
    ( (This)->lpVtbl -> get_onkeyup(This,p) )
    ( (This)->lpVtbl -> put_onkeypress(This,v) )
    ( (This)->lpVtbl -> get_onkeypress(This,p) )
    ( (This)->lpVtbl -> put_onmouseout(This,v) )
    ( (This)->lpVtbl -> get_onmouseout(This,p) )
    ( (This)->lpVtbl -> put_onmouseover(This,v) )
    ( (This)->lpVtbl -> get_onmouseover(This,p) )
    ( (This)->lpVtbl -> put_onmousemove(This,v) )
    ( (This)->lpVtbl -> get_onmousemove(This,p) )
    ( (This)->lpVtbl -> put_onmousedown(This,v) )
    ( (This)->lpVtbl -> get_onmousedown(This,p) )
    ( (This)->lpVtbl -> put_onmouseup(This,v) )
    ( (This)->lpVtbl -> get_onmouseup(This,p) )
    ( (This)->lpVtbl -> get_document(This,p) )
    ( (This)->lpVtbl -> put_title(This,v) )
    ( (This)->lpVtbl -> get_title(This,p) )
    ( (This)->lpVtbl -> put_language(This,v) )
    ( (This)->lpVtbl -> get_language(This,p) )
    ( (This)->lpVtbl -> put_onselectstart(This,v) )
    ( (This)->lpVtbl -> get_onselectstart(This,p) )
    ( (This)->lpVtbl -> scrollIntoView(This,varargStart) )
    ( (This)->lpVtbl -> contains(This,pChild,pfResult) )
    ( (This)->lpVtbl -> get_sourceIndex(This,p) )
    ( (This)->lpVtbl -> get_recordNumber(This,p) )
    ( (This)->lpVtbl -> put_lang(This,v) )
    ( (This)->lpVtbl -> get_lang(This,p) )
    ( (This)->lpVtbl -> get_offsetLeft(This,p) )
    ( (This)->lpVtbl -> get_offsetTop(This,p) )
    ( (This)->lpVtbl -> get_offsetWidth(This,p) )
    ( (This)->lpVtbl -> get_offsetHeight(This,p) )
    ( (This)->lpVtbl -> get_offsetParent(This,p) )
    ( (This)->lpVtbl -> put_innerHTML(This,v) )
    ( (This)->lpVtbl -> get_innerHTML(This,p) )
    ( (This)->lpVtbl -> put_innerText(This,v) )
    ( (This)->lpVtbl -> get_innerText(This,p) )
    ( (This)->lpVtbl -> put_outerHTML(This,v) )
    ( (This)->lpVtbl -> get_outerHTML(This,p) )
    ( (This)->lpVtbl -> put_outerText(This,v) )
    ( (This)->lpVtbl -> get_outerText(This,p) )
    ( (This)->lpVtbl -> insertAdjacentHTML(This,where,html) )
    ( (This)->lpVtbl -> insertAdjacentText(This,where,text) )
    ( (This)->lpVtbl -> get_parentTextEdit(This,p) )
    ( (This)->lpVtbl -> get_isTextEdit(This,p) )
    ( (This)->lpVtbl -> click(This) )
    ( (This)->lpVtbl -> get_filters(This,p) )
    ( (This)->lpVtbl -> put_ondragstart(This,v) )
    ( (This)->lpVtbl -> get_ondragstart(This,p) )
    ( (This)->lpVtbl -> toString(This,String) )
    ( (This)->lpVtbl -> put_onbeforeupdate(This,v) )
    ( (This)->lpVtbl -> get_onbeforeupdate(This,p) )
    ( (This)->lpVtbl -> put_onafterupdate(This,v) )
    ( (This)->lpVtbl -> get_onafterupdate(This,p) )
    ( (This)->lpVtbl -> put_onerrorupdate(This,v) )
    ( (This)->lpVtbl -> get_onerrorupdate(This,p) )
    ( (This)->lpVtbl -> put_onrowexit(This,v) )
    ( (This)->lpVtbl -> get_onrowexit(This,p) )
    ( (This)->lpVtbl -> put_onrowenter(This,v) )
    ( (This)->lpVtbl -> get_onrowenter(This,p) )
    ( (This)->lpVtbl -> put_ondatasetchanged(This,v) )
    ( (This)->lpVtbl -> get_ondatasetchanged(This,p) )
    ( (This)->lpVtbl -> put_ondataavailable(This,v) )
    ( (This)->lpVtbl -> get_ondataavailable(This,p) )
    ( (This)->lpVtbl -> put_ondatasetcomplete(This,v) )
    ( (This)->lpVtbl -> get_ondatasetcomplete(This,p) )
    ( (This)->lpVtbl -> put_onfilterchange(This,v) )
    ( (This)->lpVtbl -> get_onfilterchange(This,p) )
    ( (This)->lpVtbl -> get_children(This,p) )
    ( (This)->lpVtbl -> get_all(This,p) )
EXTERN_C const IID IID_IHTMLRect;
    typedef struct IHTMLRectVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLRect * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLRect * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLRect * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLRect * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLRect * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLRect * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLRect * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_left )(
            __RPC__in IHTMLRect * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_left )(
            __RPC__in IHTMLRect * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_top )(
            __RPC__in IHTMLRect * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_top )(
            __RPC__in IHTMLRect * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_right )(
            __RPC__in IHTMLRect * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_right )(
            __RPC__in IHTMLRect * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_bottom )(
            __RPC__in IHTMLRect * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_bottom )(
            __RPC__in IHTMLRect * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLRectVtbl;
    interface IHTMLRect
    {
        CONST_VTBL struct IHTMLRectVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_left(This,v) )
    ( (This)->lpVtbl -> get_left(This,p) )
    ( (This)->lpVtbl -> put_top(This,v) )
    ( (This)->lpVtbl -> get_top(This,p) )
    ( (This)->lpVtbl -> put_right(This,v) )
    ( (This)->lpVtbl -> get_right(This,p) )
    ( (This)->lpVtbl -> put_bottom(This,v) )
    ( (This)->lpVtbl -> get_bottom(This,p) )
EXTERN_C const IID IID_IHTMLRect2;
    typedef struct IHTMLRect2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLRect2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLRect2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLRect2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLRect2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLRect2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLRect2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLRect2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLRect2 * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLRect2 * This,
                                __RPC__out float *p);
        END_INTERFACE
    } IHTMLRect2Vtbl;
    interface IHTMLRect2
    {
        CONST_VTBL struct IHTMLRect2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> get_height(This,p) )
EXTERN_C const IID IID_IHTMLRectCollection;
    typedef struct IHTMLRectCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLRectCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLRectCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLRectCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLRectCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLRectCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLRectCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLRectCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLRectCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLRectCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLRectCollection * This,
                       __RPC__in VARIANT *pvarIndex,
                                __RPC__out VARIANT *pvarResult);
        END_INTERFACE
    } IHTMLRectCollectionVtbl;
    interface IHTMLRectCollection
    {
        CONST_VTBL struct IHTMLRectCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,pvarIndex,pvarResult) )
EXTERN_C const IID IID_IHTMLElementCollection;
    typedef struct IHTMLElementCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElementCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElementCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElementCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElementCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElementCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElementCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElementCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLElementCollection * This,
                                __RPC__deref_out_opt BSTR *String);
                            HRESULT ( STDMETHODCALLTYPE *put_length )(
            __RPC__in IHTMLElementCollection * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLElementCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLElementCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLElementCollection * This,
                                 VARIANT name,
                                 VARIANT index,
                                __RPC__deref_out_opt IDispatch **pdisp);
                   HRESULT ( STDMETHODCALLTYPE *tags )(
            __RPC__in IHTMLElementCollection * This,
                       VARIANT tagName,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLElementCollectionVtbl;
    interface IHTMLElementCollection
    {
        CONST_VTBL struct IHTMLElementCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> toString(This,String) )
    ( (This)->lpVtbl -> put_length(This,v) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,name,index,pdisp) )
    ( (This)->lpVtbl -> tags(This,tagName,pdisp) )
EXTERN_C const IID IID_IHTMLElement2;
    typedef struct IHTMLElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_scopeName )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *setCapture )(
            __RPC__in IHTMLElement2 * This,
                                     VARIANT_BOOL containerCapture);
                   HRESULT ( STDMETHODCALLTYPE *releaseCapture )(
            __RPC__in IHTMLElement2 * This);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onlosecapture )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onlosecapture )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *componentFromPoint )(
            __RPC__in IHTMLElement2 * This,
                       long x,
                       long y,
                                __RPC__deref_out_opt BSTR *component);
                   HRESULT ( STDMETHODCALLTYPE *doScroll )(
            __RPC__in IHTMLElement2 * This,
                                 VARIANT component);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onscroll )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onscroll )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondrag )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondrag )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragend )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragend )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragenter )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragenter )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragover )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragover )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragleave )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragleave )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondrop )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondrop )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforecut )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforecut )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncut )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncut )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforecopy )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforecopy )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncopy )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncopy )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforepaste )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforepaste )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onpaste )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onpaste )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                          HRESULT ( STDMETHODCALLTYPE *get_currentStyle )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__deref_out_opt IHTMLCurrentStyle **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onpropertychange )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onpropertychange )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *getClientRects )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__deref_out_opt IHTMLRectCollection **pRectCol);
                   HRESULT ( STDMETHODCALLTYPE *getBoundingClientRect )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__deref_out_opt IHTMLRect **pRect);
                   HRESULT ( STDMETHODCALLTYPE *setExpression )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR propname,
                       __RPC__in BSTR expression,
                                     __RPC__in BSTR language);
                   HRESULT ( STDMETHODCALLTYPE *getExpression )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR propname,
                                __RPC__out VARIANT *expression);
                   HRESULT ( STDMETHODCALLTYPE *removeExpression )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR propname,
                                __RPC__out VARIANT_BOOL *pfSuccess);
                                                   HRESULT ( STDMETHODCALLTYPE *put_tabIndex )(
            __RPC__in IHTMLElement2 * This,
                       short v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_tabIndex )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out short *p);
                   HRESULT ( STDMETHODCALLTYPE *focus )(
            __RPC__in IHTMLElement2 * This);
                                                   HRESULT ( STDMETHODCALLTYPE *put_accessKey )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_accessKey )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onblur )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onblur )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocus )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocus )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onresize )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onresize )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *blur )(
            __RPC__in IHTMLElement2 * This);
                   HRESULT ( STDMETHODCALLTYPE *addFilter )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in_opt IUnknown *pUnk);
                   HRESULT ( STDMETHODCALLTYPE *removeFilter )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in_opt IUnknown *pUnk);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientHeight )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientWidth )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientTop )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientLeft )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *attachEvent )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR event,
                       __RPC__in_opt IDispatch *pDisp,
                                __RPC__out VARIANT_BOOL *pfResult);
                   HRESULT ( STDMETHODCALLTYPE *detachEvent )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR event,
                       __RPC__in_opt IDispatch *pDisp);
                            HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onrowsdelete )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onrowsdelete )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onrowsinserted )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onrowsinserted )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncellchange )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncellchange )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_dir )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_dir )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *createControlRange )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__deref_out_opt IDispatch **range);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollHeight )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollWidth )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollTop )(
            __RPC__in IHTMLElement2 * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollTop )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollLeft )(
            __RPC__in IHTMLElement2 * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollLeft )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *clearAttributes )(
            __RPC__in IHTMLElement2 * This);
                   HRESULT ( STDMETHODCALLTYPE *mergeAttributes )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in_opt IHTMLElement *mergeThis);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncontextmenu )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncontextmenu )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *insertAdjacentElement )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR where,
                       __RPC__in_opt IHTMLElement *insertedElement,
                                __RPC__deref_out_opt IHTMLElement **inserted);
                   HRESULT ( STDMETHODCALLTYPE *applyElement )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in_opt IHTMLElement *apply,
                       __RPC__in BSTR where,
                                __RPC__deref_out_opt IHTMLElement **applied);
                   HRESULT ( STDMETHODCALLTYPE *getAdjacentText )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR where,
                                __RPC__deref_out_opt BSTR *text);
                   HRESULT ( STDMETHODCALLTYPE *replaceAdjacentText )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR where,
                       __RPC__in BSTR newText,
                                __RPC__deref_out_opt BSTR *oldText);
                            HRESULT ( STDMETHODCALLTYPE *get_canHaveChildren )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *addBehavior )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR bstrUrl,
                                 __RPC__in VARIANT *pvarFactory,
                                __RPC__out long *pCookie);
                   HRESULT ( STDMETHODCALLTYPE *removeBehavior )(
            __RPC__in IHTMLElement2 * This,
                       long cookie,
                                __RPC__out VARIANT_BOOL *pfResult);
                                          HRESULT ( STDMETHODCALLTYPE *get_runtimeStyle )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__deref_out_opt IHTMLStyle **p);
                            HRESULT ( STDMETHODCALLTYPE *get_behaviorUrns )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *put_tagUrn )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_tagUrn )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeeditfocus )(
            __RPC__in IHTMLElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeeditfocus )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out VARIANT *p);
                                                HRESULT ( STDMETHODCALLTYPE *get_readyStateValue )(
            __RPC__in IHTMLElement2 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )(
            __RPC__in IHTMLElement2 * This,
                       __RPC__in BSTR v,
                                __RPC__deref_out_opt IHTMLElementCollection **pelColl);
        END_INTERFACE
    } IHTMLElement2Vtbl;
    interface IHTMLElement2
    {
        CONST_VTBL struct IHTMLElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_scopeName(This,p) )
    ( (This)->lpVtbl -> setCapture(This,containerCapture) )
    ( (This)->lpVtbl -> releaseCapture(This) )
    ( (This)->lpVtbl -> put_onlosecapture(This,v) )
    ( (This)->lpVtbl -> get_onlosecapture(This,p) )
    ( (This)->lpVtbl -> componentFromPoint(This,x,y,component) )
    ( (This)->lpVtbl -> doScroll(This,component) )
    ( (This)->lpVtbl -> put_onscroll(This,v) )
    ( (This)->lpVtbl -> get_onscroll(This,p) )
    ( (This)->lpVtbl -> put_ondrag(This,v) )
    ( (This)->lpVtbl -> get_ondrag(This,p) )
    ( (This)->lpVtbl -> put_ondragend(This,v) )
    ( (This)->lpVtbl -> get_ondragend(This,p) )
    ( (This)->lpVtbl -> put_ondragenter(This,v) )
    ( (This)->lpVtbl -> get_ondragenter(This,p) )
    ( (This)->lpVtbl -> put_ondragover(This,v) )
    ( (This)->lpVtbl -> get_ondragover(This,p) )
    ( (This)->lpVtbl -> put_ondragleave(This,v) )
    ( (This)->lpVtbl -> get_ondragleave(This,p) )
    ( (This)->lpVtbl -> put_ondrop(This,v) )
    ( (This)->lpVtbl -> get_ondrop(This,p) )
    ( (This)->lpVtbl -> put_onbeforecut(This,v) )
    ( (This)->lpVtbl -> get_onbeforecut(This,p) )
    ( (This)->lpVtbl -> put_oncut(This,v) )
    ( (This)->lpVtbl -> get_oncut(This,p) )
    ( (This)->lpVtbl -> put_onbeforecopy(This,v) )
    ( (This)->lpVtbl -> get_onbeforecopy(This,p) )
    ( (This)->lpVtbl -> put_oncopy(This,v) )
    ( (This)->lpVtbl -> get_oncopy(This,p) )
    ( (This)->lpVtbl -> put_onbeforepaste(This,v) )
    ( (This)->lpVtbl -> get_onbeforepaste(This,p) )
    ( (This)->lpVtbl -> put_onpaste(This,v) )
    ( (This)->lpVtbl -> get_onpaste(This,p) )
    ( (This)->lpVtbl -> get_currentStyle(This,p) )
    ( (This)->lpVtbl -> put_onpropertychange(This,v) )
    ( (This)->lpVtbl -> get_onpropertychange(This,p) )
    ( (This)->lpVtbl -> getClientRects(This,pRectCol) )
    ( (This)->lpVtbl -> getBoundingClientRect(This,pRect) )
    ( (This)->lpVtbl -> setExpression(This,propname,expression,language) )
    ( (This)->lpVtbl -> getExpression(This,propname,expression) )
    ( (This)->lpVtbl -> removeExpression(This,propname,pfSuccess) )
    ( (This)->lpVtbl -> put_tabIndex(This,v) )
    ( (This)->lpVtbl -> get_tabIndex(This,p) )
    ( (This)->lpVtbl -> focus(This) )
    ( (This)->lpVtbl -> put_accessKey(This,v) )
    ( (This)->lpVtbl -> get_accessKey(This,p) )
    ( (This)->lpVtbl -> put_onblur(This,v) )
    ( (This)->lpVtbl -> get_onblur(This,p) )
    ( (This)->lpVtbl -> put_onfocus(This,v) )
    ( (This)->lpVtbl -> get_onfocus(This,p) )
    ( (This)->lpVtbl -> put_onresize(This,v) )
    ( (This)->lpVtbl -> get_onresize(This,p) )
    ( (This)->lpVtbl -> blur(This) )
    ( (This)->lpVtbl -> addFilter(This,pUnk) )
    ( (This)->lpVtbl -> removeFilter(This,pUnk) )
    ( (This)->lpVtbl -> get_clientHeight(This,p) )
    ( (This)->lpVtbl -> get_clientWidth(This,p) )
    ( (This)->lpVtbl -> get_clientTop(This,p) )
    ( (This)->lpVtbl -> get_clientLeft(This,p) )
    ( (This)->lpVtbl -> attachEvent(This,event,pDisp,pfResult) )
    ( (This)->lpVtbl -> detachEvent(This,event,pDisp) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> put_onreadystatechange(This,v) )
    ( (This)->lpVtbl -> get_onreadystatechange(This,p) )
    ( (This)->lpVtbl -> put_onrowsdelete(This,v) )
    ( (This)->lpVtbl -> get_onrowsdelete(This,p) )
    ( (This)->lpVtbl -> put_onrowsinserted(This,v) )
    ( (This)->lpVtbl -> get_onrowsinserted(This,p) )
    ( (This)->lpVtbl -> put_oncellchange(This,v) )
    ( (This)->lpVtbl -> get_oncellchange(This,p) )
    ( (This)->lpVtbl -> put_dir(This,v) )
    ( (This)->lpVtbl -> get_dir(This,p) )
    ( (This)->lpVtbl -> createControlRange(This,range) )
    ( (This)->lpVtbl -> get_scrollHeight(This,p) )
    ( (This)->lpVtbl -> get_scrollWidth(This,p) )
    ( (This)->lpVtbl -> put_scrollTop(This,v) )
    ( (This)->lpVtbl -> get_scrollTop(This,p) )
    ( (This)->lpVtbl -> put_scrollLeft(This,v) )
    ( (This)->lpVtbl -> get_scrollLeft(This,p) )
    ( (This)->lpVtbl -> clearAttributes(This) )
    ( (This)->lpVtbl -> mergeAttributes(This,mergeThis) )
    ( (This)->lpVtbl -> put_oncontextmenu(This,v) )
    ( (This)->lpVtbl -> get_oncontextmenu(This,p) )
    ( (This)->lpVtbl -> insertAdjacentElement(This,where,insertedElement,inserted) )
    ( (This)->lpVtbl -> applyElement(This,apply,where,applied) )
    ( (This)->lpVtbl -> getAdjacentText(This,where,text) )
    ( (This)->lpVtbl -> replaceAdjacentText(This,where,newText,oldText) )
    ( (This)->lpVtbl -> get_canHaveChildren(This,p) )
    ( (This)->lpVtbl -> addBehavior(This,bstrUrl,pvarFactory,pCookie) )
    ( (This)->lpVtbl -> removeBehavior(This,cookie,pfResult) )
    ( (This)->lpVtbl -> get_runtimeStyle(This,p) )
    ( (This)->lpVtbl -> get_behaviorUrns(This,p) )
    ( (This)->lpVtbl -> put_tagUrn(This,v) )
    ( (This)->lpVtbl -> get_tagUrn(This,p) )
    ( (This)->lpVtbl -> put_onbeforeeditfocus(This,v) )
    ( (This)->lpVtbl -> get_onbeforeeditfocus(This,p) )
    ( (This)->lpVtbl -> get_readyStateValue(This,p) )
    ( (This)->lpVtbl -> getElementsByTagName(This,v,pelColl) )
EXTERN_C const IID IID_IHTMLAttributeCollection3;
    typedef struct IHTMLAttributeCollection3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAttributeCollection3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAttributeCollection3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAttributeCollection3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAttributeCollection3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAttributeCollection3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAttributeCollection3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAttributeCollection3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *getNamedItem )(
            __RPC__in IHTMLAttributeCollection3 * This,
                       __RPC__in BSTR bstrName,
                                __RPC__deref_out_opt IHTMLDOMAttribute **ppNodeOut);
                   HRESULT ( STDMETHODCALLTYPE *setNamedItem )(
            __RPC__in IHTMLAttributeCollection3 * This,
                       __RPC__in_opt IHTMLDOMAttribute *pNodeIn,
                                __RPC__deref_out_opt IHTMLDOMAttribute **ppNodeOut);
                   HRESULT ( STDMETHODCALLTYPE *removeNamedItem )(
            __RPC__in IHTMLAttributeCollection3 * This,
                       __RPC__in BSTR bstrName,
                                __RPC__deref_out_opt IHTMLDOMAttribute **ppNodeOut);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLAttributeCollection3 * This,
                       long index,
                                __RPC__deref_out_opt IHTMLDOMAttribute **ppNodeOut);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLAttributeCollection3 * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLAttributeCollection3Vtbl;
    interface IHTMLAttributeCollection3
    {
        CONST_VTBL struct IHTMLAttributeCollection3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> getNamedItem(This,bstrName,ppNodeOut) )
    ( (This)->lpVtbl -> setNamedItem(This,pNodeIn,ppNodeOut) )
    ( (This)->lpVtbl -> removeNamedItem(This,bstrName,ppNodeOut) )
    ( (This)->lpVtbl -> item(This,index,ppNodeOut) )
    ( (This)->lpVtbl -> get_length(This,p) )
EXTERN_C const IID IID_IDOMDocumentType;
    typedef struct IDOMDocumentTypeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMDocumentType * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMDocumentType * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMDocumentType * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMDocumentType * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMDocumentType * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMDocumentType * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMDocumentType * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IDOMDocumentType * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_entities )(
            __RPC__in IDOMDocumentType * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_notations )(
            __RPC__in IDOMDocumentType * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_publicId )(
            __RPC__in IDOMDocumentType * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_systemId )(
            __RPC__in IDOMDocumentType * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_internalSubset )(
            __RPC__in IDOMDocumentType * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IDOMDocumentTypeVtbl;
    interface IDOMDocumentType
    {
        CONST_VTBL struct IDOMDocumentTypeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> get_entities(This,p) )
    ( (This)->lpVtbl -> get_notations(This,p) )
    ( (This)->lpVtbl -> get_publicId(This,p) )
    ( (This)->lpVtbl -> get_systemId(This,p) )
    ( (This)->lpVtbl -> get_internalSubset(This,p) )
EXTERN_C const IID IID_IHTMLDocument7;
    typedef struct IHTMLDocument7Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDocument7 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDocument7 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDocument7 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDocument7 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDocument7 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_defaultView )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__deref_out_opt IHTMLWindow2 **p);
                   HRESULT ( STDMETHODCALLTYPE *createCDATASection )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in BSTR text,
                                __RPC__deref_out_opt IHTMLDOMNode **newCDATASectionNode);
                   HRESULT ( STDMETHODCALLTYPE *getSelection )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__deref_out_opt IHTMLSelection **ppIHTMLSelection);
                   HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in VARIANT *pvarNS,
                       __RPC__in BSTR bstrLocalName,
                                __RPC__deref_out_opt IHTMLElementCollection **pelColl);
                   HRESULT ( STDMETHODCALLTYPE *createElementNS )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in VARIANT *pvarNS,
                       __RPC__in BSTR bstrTag,
                                __RPC__deref_out_opt IHTMLElement **newElem);
                   HRESULT ( STDMETHODCALLTYPE *createAttributeNS )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in VARIANT *pvarNS,
                       __RPC__in BSTR bstrAttrName,
                                __RPC__deref_out_opt IHTMLDOMAttribute **ppAttribute);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsthumbnailclick )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsthumbnailclick )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_characterSet )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *createElement )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in BSTR bstrTag,
                                __RPC__deref_out_opt IHTMLElement **newElem);
                   HRESULT ( STDMETHODCALLTYPE *createAttribute )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in BSTR bstrAttrName,
                                __RPC__deref_out_opt IHTMLDOMAttribute **ppAttribute);
                   HRESULT ( STDMETHODCALLTYPE *getElementsByClassName )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in BSTR v,
                                __RPC__deref_out_opt IHTMLElementCollection **pel);
                   HRESULT ( STDMETHODCALLTYPE *createProcessingInstruction )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in BSTR bstrTarget,
                       __RPC__in BSTR bstrData,
                                __RPC__deref_out_opt IDOMProcessingInstruction **newProcessingInstruction);
                   HRESULT ( STDMETHODCALLTYPE *adoptNode )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in_opt IHTMLDOMNode *pNodeSource,
                                __RPC__deref_out_opt IHTMLDOMNode3 **ppNodeDest);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmssitemodejumplistitemremoved )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmssitemodejumplistitemremoved )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_all )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_inputEncoding )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_xmlEncoding )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_xmlStandalone )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_xmlStandalone )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_xmlVersion )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_xmlVersion )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *hasAttributes )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT_BOOL *pfHasAttributes);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onabort )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onabort )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onblur )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onblur )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncanplay )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncanplay )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncanplaythrough )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncanplaythrough )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onchange )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onchange )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondrag )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondrag )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragend )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragend )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragenter )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragenter )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragleave )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragleave )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragover )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragover )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondrop )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondrop )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondurationchange )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondurationchange )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onemptied )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onemptied )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onended )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onended )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocus )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocus )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oninput )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oninput )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onloadeddata )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onloadeddata )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onloadedmetadata )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onloadedmetadata )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onloadstart )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onloadstart )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onpause )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onpause )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onplay )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onplay )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onplaying )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onplaying )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onprogress )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onprogress )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onratechange )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onratechange )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreset )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreset )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onscroll )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onscroll )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onseeked )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onseeked )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onseeking )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onseeking )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onselect )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onselect )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onstalled )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onstalled )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onsubmit )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onsubmit )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onsuspend )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onsuspend )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ontimeupdate )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ontimeupdate )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onvolumechange )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onvolumechange )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onwaiting )(
            __RPC__in IHTMLDocument7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onwaiting )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *normalize )(
            __RPC__in IHTMLDocument7 * This);
                   HRESULT ( STDMETHODCALLTYPE *importNode )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in_opt IHTMLDOMNode *pNodeSource,
                       VARIANT_BOOL fDeep,
                                __RPC__deref_out_opt IHTMLDOMNode3 **ppNodeDest);
                            HRESULT ( STDMETHODCALLTYPE *get_parentWindow )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__deref_out_opt IHTMLWindow2 **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_body )(
            __RPC__in IHTMLDocument7 * This,
                       __RPC__in_opt IHTMLElement *v);
                            HRESULT ( STDMETHODCALLTYPE *get_body )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_head )(
            __RPC__in IHTMLDocument7 * This,
                                __RPC__deref_out_opt IHTMLElement **p);
        END_INTERFACE
    } IHTMLDocument7Vtbl;
    interface IHTMLDocument7
    {
        CONST_VTBL struct IHTMLDocument7Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_defaultView(This,p) )
    ( (This)->lpVtbl -> createCDATASection(This,text,newCDATASectionNode) )
    ( (This)->lpVtbl -> getSelection(This,ppIHTMLSelection) )
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,pvarNS,bstrLocalName,pelColl) )
    ( (This)->lpVtbl -> createElementNS(This,pvarNS,bstrTag,newElem) )
    ( (This)->lpVtbl -> createAttributeNS(This,pvarNS,bstrAttrName,ppAttribute) )
    ( (This)->lpVtbl -> put_onmsthumbnailclick(This,v) )
    ( (This)->lpVtbl -> get_onmsthumbnailclick(This,p) )
    ( (This)->lpVtbl -> get_characterSet(This,p) )
    ( (This)->lpVtbl -> createElement(This,bstrTag,newElem) )
    ( (This)->lpVtbl -> createAttribute(This,bstrAttrName,ppAttribute) )
    ( (This)->lpVtbl -> getElementsByClassName(This,v,pel) )
    ( (This)->lpVtbl -> createProcessingInstruction(This,bstrTarget,bstrData,newProcessingInstruction) )
    ( (This)->lpVtbl -> adoptNode(This,pNodeSource,ppNodeDest) )
    ( (This)->lpVtbl -> put_onmssitemodejumplistitemremoved(This,v) )
    ( (This)->lpVtbl -> get_onmssitemodejumplistitemremoved(This,p) )
    ( (This)->lpVtbl -> get_all(This,p) )
    ( (This)->lpVtbl -> get_inputEncoding(This,p) )
    ( (This)->lpVtbl -> get_xmlEncoding(This,p) )
    ( (This)->lpVtbl -> put_xmlStandalone(This,v) )
    ( (This)->lpVtbl -> get_xmlStandalone(This,p) )
    ( (This)->lpVtbl -> put_xmlVersion(This,v) )
    ( (This)->lpVtbl -> get_xmlVersion(This,p) )
    ( (This)->lpVtbl -> hasAttributes(This,pfHasAttributes) )
    ( (This)->lpVtbl -> put_onabort(This,v) )
    ( (This)->lpVtbl -> get_onabort(This,p) )
    ( (This)->lpVtbl -> put_onblur(This,v) )
    ( (This)->lpVtbl -> get_onblur(This,p) )
    ( (This)->lpVtbl -> put_oncanplay(This,v) )
    ( (This)->lpVtbl -> get_oncanplay(This,p) )
    ( (This)->lpVtbl -> put_oncanplaythrough(This,v) )
    ( (This)->lpVtbl -> get_oncanplaythrough(This,p) )
    ( (This)->lpVtbl -> put_onchange(This,v) )
    ( (This)->lpVtbl -> get_onchange(This,p) )
    ( (This)->lpVtbl -> put_ondrag(This,v) )
    ( (This)->lpVtbl -> get_ondrag(This,p) )
    ( (This)->lpVtbl -> put_ondragend(This,v) )
    ( (This)->lpVtbl -> get_ondragend(This,p) )
    ( (This)->lpVtbl -> put_ondragenter(This,v) )
    ( (This)->lpVtbl -> get_ondragenter(This,p) )
    ( (This)->lpVtbl -> put_ondragleave(This,v) )
    ( (This)->lpVtbl -> get_ondragleave(This,p) )
    ( (This)->lpVtbl -> put_ondragover(This,v) )
    ( (This)->lpVtbl -> get_ondragover(This,p) )
    ( (This)->lpVtbl -> put_ondrop(This,v) )
    ( (This)->lpVtbl -> get_ondrop(This,p) )
    ( (This)->lpVtbl -> put_ondurationchange(This,v) )
    ( (This)->lpVtbl -> get_ondurationchange(This,p) )
    ( (This)->lpVtbl -> put_onemptied(This,v) )
    ( (This)->lpVtbl -> get_onemptied(This,p) )
    ( (This)->lpVtbl -> put_onended(This,v) )
    ( (This)->lpVtbl -> get_onended(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> put_onfocus(This,v) )
    ( (This)->lpVtbl -> get_onfocus(This,p) )
    ( (This)->lpVtbl -> put_oninput(This,v) )
    ( (This)->lpVtbl -> get_oninput(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> put_onloadeddata(This,v) )
    ( (This)->lpVtbl -> get_onloadeddata(This,p) )
    ( (This)->lpVtbl -> put_onloadedmetadata(This,v) )
    ( (This)->lpVtbl -> get_onloadedmetadata(This,p) )
    ( (This)->lpVtbl -> put_onloadstart(This,v) )
    ( (This)->lpVtbl -> get_onloadstart(This,p) )
    ( (This)->lpVtbl -> put_onpause(This,v) )
    ( (This)->lpVtbl -> get_onpause(This,p) )
    ( (This)->lpVtbl -> put_onplay(This,v) )
    ( (This)->lpVtbl -> get_onplay(This,p) )
    ( (This)->lpVtbl -> put_onplaying(This,v) )
    ( (This)->lpVtbl -> get_onplaying(This,p) )
    ( (This)->lpVtbl -> put_onprogress(This,v) )
    ( (This)->lpVtbl -> get_onprogress(This,p) )
    ( (This)->lpVtbl -> put_onratechange(This,v) )
    ( (This)->lpVtbl -> get_onratechange(This,p) )
    ( (This)->lpVtbl -> put_onreset(This,v) )
    ( (This)->lpVtbl -> get_onreset(This,p) )
    ( (This)->lpVtbl -> put_onscroll(This,v) )
    ( (This)->lpVtbl -> get_onscroll(This,p) )
    ( (This)->lpVtbl -> put_onseeked(This,v) )
    ( (This)->lpVtbl -> get_onseeked(This,p) )
    ( (This)->lpVtbl -> put_onseeking(This,v) )
    ( (This)->lpVtbl -> get_onseeking(This,p) )
    ( (This)->lpVtbl -> put_onselect(This,v) )
    ( (This)->lpVtbl -> get_onselect(This,p) )
    ( (This)->lpVtbl -> put_onstalled(This,v) )
    ( (This)->lpVtbl -> get_onstalled(This,p) )
    ( (This)->lpVtbl -> put_onsubmit(This,v) )
    ( (This)->lpVtbl -> get_onsubmit(This,p) )
    ( (This)->lpVtbl -> put_onsuspend(This,v) )
    ( (This)->lpVtbl -> get_onsuspend(This,p) )
    ( (This)->lpVtbl -> put_ontimeupdate(This,v) )
    ( (This)->lpVtbl -> get_ontimeupdate(This,p) )
    ( (This)->lpVtbl -> put_onvolumechange(This,v) )
    ( (This)->lpVtbl -> get_onvolumechange(This,p) )
    ( (This)->lpVtbl -> put_onwaiting(This,v) )
    ( (This)->lpVtbl -> get_onwaiting(This,p) )
    ( (This)->lpVtbl -> normalize(This) )
    ( (This)->lpVtbl -> importNode(This,pNodeSource,fDeep,ppNodeDest) )
    ( (This)->lpVtbl -> get_parentWindow(This,p) )
    ( (This)->lpVtbl -> putref_body(This,v) )
    ( (This)->lpVtbl -> get_body(This,p) )
    ( (This)->lpVtbl -> get_head(This,p) )
EXTERN_C const IID IID_IHTMLDOMNode;
    typedef struct IHTMLDOMNodeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMNode * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMNode * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMNode * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMNode * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMNode * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMNode * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMNode * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_nodeType )(
            __RPC__in IHTMLDOMNode * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_parentNode )(
            __RPC__in IHTMLDOMNode * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                   HRESULT ( STDMETHODCALLTYPE *hasChildNodes )(
            __RPC__in IHTMLDOMNode * This,
                                __RPC__out VARIANT_BOOL *fChildren);
                            HRESULT ( STDMETHODCALLTYPE *get_childNodes )(
            __RPC__in IHTMLDOMNode * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_attributes )(
            __RPC__in IHTMLDOMNode * This,
                                __RPC__deref_out_opt IDispatch **p);
                   HRESULT ( STDMETHODCALLTYPE *insertBefore )(
            __RPC__in IHTMLDOMNode * This,
                       __RPC__in_opt IHTMLDOMNode *newChild,
                                 VARIANT refChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                   HRESULT ( STDMETHODCALLTYPE *removeChild )(
            __RPC__in IHTMLDOMNode * This,
                       __RPC__in_opt IHTMLDOMNode *oldChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                   HRESULT ( STDMETHODCALLTYPE *replaceChild )(
            __RPC__in IHTMLDOMNode * This,
                       __RPC__in_opt IHTMLDOMNode *newChild,
                       __RPC__in_opt IHTMLDOMNode *oldChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                   HRESULT ( STDMETHODCALLTYPE *cloneNode )(
            __RPC__in IHTMLDOMNode * This,
                       VARIANT_BOOL fDeep,
                                __RPC__deref_out_opt IHTMLDOMNode **clonedNode);
                   HRESULT ( STDMETHODCALLTYPE *removeNode )(
            __RPC__in IHTMLDOMNode * This,
                                     VARIANT_BOOL fDeep,
                                __RPC__deref_out_opt IHTMLDOMNode **removed);
                   HRESULT ( STDMETHODCALLTYPE *swapNode )(
            __RPC__in IHTMLDOMNode * This,
                       __RPC__in_opt IHTMLDOMNode *otherNode,
                                __RPC__deref_out_opt IHTMLDOMNode **swappedNode);
                   HRESULT ( STDMETHODCALLTYPE *replaceNode )(
            __RPC__in IHTMLDOMNode * This,
                       __RPC__in_opt IHTMLDOMNode *replacement,
                                __RPC__deref_out_opt IHTMLDOMNode **replaced);
                   HRESULT ( STDMETHODCALLTYPE *appendChild )(
            __RPC__in IHTMLDOMNode * This,
                       __RPC__in_opt IHTMLDOMNode *newChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                            HRESULT ( STDMETHODCALLTYPE *get_nodeName )(
            __RPC__in IHTMLDOMNode * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_nodeValue )(
            __RPC__in IHTMLDOMNode * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_nodeValue )(
            __RPC__in IHTMLDOMNode * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_firstChild )(
            __RPC__in IHTMLDOMNode * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_lastChild )(
            __RPC__in IHTMLDOMNode * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_previousSibling )(
            __RPC__in IHTMLDOMNode * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_nextSibling )(
            __RPC__in IHTMLDOMNode * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
        END_INTERFACE
    } IHTMLDOMNodeVtbl;
    interface IHTMLDOMNode
    {
        CONST_VTBL struct IHTMLDOMNodeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_nodeType(This,p) )
    ( (This)->lpVtbl -> get_parentNode(This,p) )
    ( (This)->lpVtbl -> hasChildNodes(This,fChildren) )
    ( (This)->lpVtbl -> get_childNodes(This,p) )
    ( (This)->lpVtbl -> get_attributes(This,p) )
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,node) )
    ( (This)->lpVtbl -> removeChild(This,oldChild,node) )
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,node) )
    ( (This)->lpVtbl -> cloneNode(This,fDeep,clonedNode) )
    ( (This)->lpVtbl -> removeNode(This,fDeep,removed) )
    ( (This)->lpVtbl -> swapNode(This,otherNode,swappedNode) )
    ( (This)->lpVtbl -> replaceNode(This,replacement,replaced) )
    ( (This)->lpVtbl -> appendChild(This,newChild,node) )
    ( (This)->lpVtbl -> get_nodeName(This,p) )
    ( (This)->lpVtbl -> put_nodeValue(This,v) )
    ( (This)->lpVtbl -> get_nodeValue(This,p) )
    ( (This)->lpVtbl -> get_firstChild(This,p) )
    ( (This)->lpVtbl -> get_lastChild(This,p) )
    ( (This)->lpVtbl -> get_previousSibling(This,p) )
    ( (This)->lpVtbl -> get_nextSibling(This,p) )
EXTERN_C const IID IID_IHTMLDOMNode2;
    typedef struct IHTMLDOMNode2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMNode2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMNode2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMNode2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMNode2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMNode2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMNode2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMNode2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )(
            __RPC__in IHTMLDOMNode2 * This,
                                __RPC__deref_out_opt IDispatch **p);
        END_INTERFACE
    } IHTMLDOMNode2Vtbl;
    interface IHTMLDOMNode2
    {
        CONST_VTBL struct IHTMLDOMNode2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_ownerDocument(This,p) )
EXTERN_C const IID IID_IHTMLDOMNode3;
    typedef struct IHTMLDOMNode3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMNode3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMNode3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMNode3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMNode3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMNode3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_prefix )(
            __RPC__in IHTMLDOMNode3 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_prefix )(
            __RPC__in IHTMLDOMNode3 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_localName )(
            __RPC__in IHTMLDOMNode3 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )(
            __RPC__in IHTMLDOMNode3 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_textContent )(
            __RPC__in IHTMLDOMNode3 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_textContent )(
            __RPC__in IHTMLDOMNode3 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *isEqualNode )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in_opt IHTMLDOMNode3 *otherNode,
                                __RPC__out VARIANT_BOOL *isEqual);
                   HRESULT ( STDMETHODCALLTYPE *lookupNamespaceURI )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in VARIANT *pvarPrefix,
                                __RPC__out VARIANT *pvarNamespaceURI);
                   HRESULT ( STDMETHODCALLTYPE *lookupPrefix )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in VARIANT *pvarNamespaceURI,
                                __RPC__out VARIANT *pvarPrefix);
                   HRESULT ( STDMETHODCALLTYPE *isDefaultNamespace )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in VARIANT *pvarNamespace,
                                __RPC__out VARIANT_BOOL *pfDefaultNamespace);
                   HRESULT ( STDMETHODCALLTYPE *appendChild )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in_opt IHTMLDOMNode *newChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                   HRESULT ( STDMETHODCALLTYPE *insertBefore )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in_opt IHTMLDOMNode *newChild,
                                 VARIANT refChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                   HRESULT ( STDMETHODCALLTYPE *removeChild )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in_opt IHTMLDOMNode *oldChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                   HRESULT ( STDMETHODCALLTYPE *replaceChild )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in_opt IHTMLDOMNode *newChild,
                       __RPC__in_opt IHTMLDOMNode *oldChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                   HRESULT ( STDMETHODCALLTYPE *isSameNode )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in_opt IHTMLDOMNode3 *otherNode,
                                __RPC__out VARIANT_BOOL *isSame);
                   HRESULT ( STDMETHODCALLTYPE *compareDocumentPosition )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in_opt IHTMLDOMNode *otherNode,
                                __RPC__out USHORT *flags);
                   HRESULT ( STDMETHODCALLTYPE *isSupported )(
            __RPC__in IHTMLDOMNode3 * This,
                       __RPC__in BSTR feature,
                       VARIANT version,
                                __RPC__out VARIANT_BOOL *pfisSupported);
        END_INTERFACE
    } IHTMLDOMNode3Vtbl;
    interface IHTMLDOMNode3
    {
        CONST_VTBL struct IHTMLDOMNode3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_prefix(This,v) )
    ( (This)->lpVtbl -> get_prefix(This,p) )
    ( (This)->lpVtbl -> get_localName(This,p) )
    ( (This)->lpVtbl -> get_namespaceURI(This,p) )
    ( (This)->lpVtbl -> put_textContent(This,v) )
    ( (This)->lpVtbl -> get_textContent(This,p) )
    ( (This)->lpVtbl -> isEqualNode(This,otherNode,isEqual) )
    ( (This)->lpVtbl -> lookupNamespaceURI(This,pvarPrefix,pvarNamespaceURI) )
    ( (This)->lpVtbl -> lookupPrefix(This,pvarNamespaceURI,pvarPrefix) )
    ( (This)->lpVtbl -> isDefaultNamespace(This,pvarNamespace,pfDefaultNamespace) )
    ( (This)->lpVtbl -> appendChild(This,newChild,node) )
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,node) )
    ( (This)->lpVtbl -> removeChild(This,oldChild,node) )
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,node) )
    ( (This)->lpVtbl -> isSameNode(This,otherNode,isSame) )
    ( (This)->lpVtbl -> compareDocumentPosition(This,otherNode,flags) )
    ( (This)->lpVtbl -> isSupported(This,feature,version,pfisSupported) )
EXTERN_C const IID IID_IHTMLDOMAttribute;
    typedef struct IHTMLDOMAttributeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMAttribute * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMAttribute * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMAttribute * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMAttribute * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMAttribute * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMAttribute * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMAttribute * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_nodeName )(
            __RPC__in IHTMLDOMAttribute * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_nodeValue )(
            __RPC__in IHTMLDOMAttribute * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_nodeValue )(
            __RPC__in IHTMLDOMAttribute * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_specified )(
            __RPC__in IHTMLDOMAttribute * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLDOMAttributeVtbl;
    interface IHTMLDOMAttribute
    {
        CONST_VTBL struct IHTMLDOMAttributeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_nodeName(This,p) )
    ( (This)->lpVtbl -> put_nodeValue(This,v) )
    ( (This)->lpVtbl -> get_nodeValue(This,p) )
    ( (This)->lpVtbl -> get_specified(This,p) )
EXTERN_C const IID IID_IHTMLDOMAttribute2;
    typedef struct IHTMLDOMAttribute2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMAttribute2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMAttribute2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMAttribute2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMAttribute2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMAttribute2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMAttribute2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMAttribute2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLDOMAttribute2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_expando )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_nodeType )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_parentNode )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_childNodes )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_firstChild )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_lastChild )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_previousSibling )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_nextSibling )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_attributes )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__deref_out_opt IDispatch **p);
                   HRESULT ( STDMETHODCALLTYPE *insertBefore )(
            __RPC__in IHTMLDOMAttribute2 * This,
                       __RPC__in_opt IHTMLDOMNode *newChild,
                                 VARIANT refChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                   HRESULT ( STDMETHODCALLTYPE *replaceChild )(
            __RPC__in IHTMLDOMAttribute2 * This,
                       __RPC__in_opt IHTMLDOMNode *newChild,
                       __RPC__in_opt IHTMLDOMNode *oldChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                   HRESULT ( STDMETHODCALLTYPE *removeChild )(
            __RPC__in IHTMLDOMAttribute2 * This,
                       __RPC__in_opt IHTMLDOMNode *oldChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                   HRESULT ( STDMETHODCALLTYPE *appendChild )(
            __RPC__in IHTMLDOMAttribute2 * This,
                       __RPC__in_opt IHTMLDOMNode *newChild,
                                __RPC__deref_out_opt IHTMLDOMNode **node);
                   HRESULT ( STDMETHODCALLTYPE *hasChildNodes )(
            __RPC__in IHTMLDOMAttribute2 * This,
                                __RPC__out VARIANT_BOOL *fChildren);
                   HRESULT ( STDMETHODCALLTYPE *cloneNode )(
            __RPC__in IHTMLDOMAttribute2 * This,
                       VARIANT_BOOL fDeep,
                                __RPC__deref_out_opt IHTMLDOMAttribute **clonedNode);
        END_INTERFACE
    } IHTMLDOMAttribute2Vtbl;
    interface IHTMLDOMAttribute2
    {
        CONST_VTBL struct IHTMLDOMAttribute2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> get_expando(This,p) )
    ( (This)->lpVtbl -> get_nodeType(This,p) )
    ( (This)->lpVtbl -> get_parentNode(This,p) )
    ( (This)->lpVtbl -> get_childNodes(This,p) )
    ( (This)->lpVtbl -> get_firstChild(This,p) )
    ( (This)->lpVtbl -> get_lastChild(This,p) )
    ( (This)->lpVtbl -> get_previousSibling(This,p) )
    ( (This)->lpVtbl -> get_nextSibling(This,p) )
    ( (This)->lpVtbl -> get_attributes(This,p) )
    ( (This)->lpVtbl -> get_ownerDocument(This,p) )
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,node) )
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,node) )
    ( (This)->lpVtbl -> removeChild(This,oldChild,node) )
    ( (This)->lpVtbl -> appendChild(This,newChild,node) )
    ( (This)->lpVtbl -> hasChildNodes(This,fChildren) )
    ( (This)->lpVtbl -> cloneNode(This,fDeep,clonedNode) )
EXTERN_C const IID IID_IHTMLDOMAttribute3;
    typedef struct IHTMLDOMAttribute3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMAttribute3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMAttribute3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMAttribute3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMAttribute3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMAttribute3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMAttribute3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMAttribute3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_nodeValue )(
            __RPC__in IHTMLDOMAttribute3 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_nodeValue )(
            __RPC__in IHTMLDOMAttribute3 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLDOMAttribute3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLDOMAttribute3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_specified )(
            __RPC__in IHTMLDOMAttribute3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_ownerElement )(
            __RPC__in IHTMLDOMAttribute3 * This,
                                __RPC__deref_out_opt IHTMLElement2 **p);
        END_INTERFACE
    } IHTMLDOMAttribute3Vtbl;
    interface IHTMLDOMAttribute3
    {
        CONST_VTBL struct IHTMLDOMAttribute3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_nodeValue(This,v) )
    ( (This)->lpVtbl -> get_nodeValue(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> get_specified(This,p) )
    ( (This)->lpVtbl -> get_ownerElement(This,p) )
EXTERN_C const IID IID_IHTMLDOMAttribute4;
    typedef struct IHTMLDOMAttribute4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMAttribute4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMAttribute4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMAttribute4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMAttribute4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMAttribute4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMAttribute4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMAttribute4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_nodeValue )(
            __RPC__in IHTMLDOMAttribute4 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_nodeValue )(
            __RPC__in IHTMLDOMAttribute4 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_nodeName )(
            __RPC__in IHTMLDOMAttribute4 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLDOMAttribute4 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLDOMAttribute4 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLDOMAttribute4 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_firstChild )(
            __RPC__in IHTMLDOMAttribute4 * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_lastChild )(
            __RPC__in IHTMLDOMAttribute4 * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_childNodes )(
            __RPC__in IHTMLDOMAttribute4 * This,
                                __RPC__deref_out_opt IDispatch **p);
                   HRESULT ( STDMETHODCALLTYPE *hasAttributes )(
            __RPC__in IHTMLDOMAttribute4 * This,
                                __RPC__out VARIANT_BOOL *pfHasAttributes);
                   HRESULT ( STDMETHODCALLTYPE *hasChildNodes )(
            __RPC__in IHTMLDOMAttribute4 * This,
                                __RPC__out VARIANT_BOOL *fChildren);
                   HRESULT ( STDMETHODCALLTYPE *normalize )(
            __RPC__in IHTMLDOMAttribute4 * This);
                            HRESULT ( STDMETHODCALLTYPE *get_specified )(
            __RPC__in IHTMLDOMAttribute4 * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLDOMAttribute4Vtbl;
    interface IHTMLDOMAttribute4
    {
        CONST_VTBL struct IHTMLDOMAttribute4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_nodeValue(This,v) )
    ( (This)->lpVtbl -> get_nodeValue(This,p) )
    ( (This)->lpVtbl -> get_nodeName(This,p) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> get_firstChild(This,p) )
    ( (This)->lpVtbl -> get_lastChild(This,p) )
    ( (This)->lpVtbl -> get_childNodes(This,p) )
    ( (This)->lpVtbl -> hasAttributes(This,pfHasAttributes) )
    ( (This)->lpVtbl -> hasChildNodes(This,fChildren) )
    ( (This)->lpVtbl -> normalize(This) )
    ( (This)->lpVtbl -> get_specified(This,p) )
EXTERN_C const IID IID_IHTMLDOMTextNode;
    typedef struct IHTMLDOMTextNodeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMTextNode * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMTextNode * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMTextNode * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMTextNode * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMTextNode * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMTextNode * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMTextNode * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_data )(
            __RPC__in IHTMLDOMTextNode * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_data )(
            __RPC__in IHTMLDOMTextNode * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLDOMTextNode * This,
                                __RPC__deref_out_opt BSTR *String);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLDOMTextNode * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *splitText )(
            __RPC__in IHTMLDOMTextNode * This,
                       long offset,
                                __RPC__deref_out_opt IHTMLDOMNode **pRetNode);
        END_INTERFACE
    } IHTMLDOMTextNodeVtbl;
    interface IHTMLDOMTextNode
    {
        CONST_VTBL struct IHTMLDOMTextNodeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_data(This,v) )
    ( (This)->lpVtbl -> get_data(This,p) )
    ( (This)->lpVtbl -> toString(This,String) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> splitText(This,offset,pRetNode) )
EXTERN_C const IID IID_IHTMLDOMTextNode2;
    typedef struct IHTMLDOMTextNode2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMTextNode2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMTextNode2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMTextNode2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMTextNode2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMTextNode2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMTextNode2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMTextNode2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *substringData )(
            __RPC__in IHTMLDOMTextNode2 * This,
                       long offset,
                       long Count,
                                __RPC__deref_out_opt BSTR *pbstrsubString);
                   HRESULT ( STDMETHODCALLTYPE *appendData )(
            __RPC__in IHTMLDOMTextNode2 * This,
                       __RPC__in BSTR bstrstring);
                   HRESULT ( STDMETHODCALLTYPE *insertData )(
            __RPC__in IHTMLDOMTextNode2 * This,
                       long offset,
                       __RPC__in BSTR bstrstring);
                   HRESULT ( STDMETHODCALLTYPE *deleteData )(
            __RPC__in IHTMLDOMTextNode2 * This,
                       long offset,
                       long Count);
                   HRESULT ( STDMETHODCALLTYPE *replaceData )(
            __RPC__in IHTMLDOMTextNode2 * This,
                       long offset,
                       long Count,
                       __RPC__in BSTR bstrstring);
        END_INTERFACE
    } IHTMLDOMTextNode2Vtbl;
    interface IHTMLDOMTextNode2
    {
        CONST_VTBL struct IHTMLDOMTextNode2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> substringData(This,offset,Count,pbstrsubString) )
    ( (This)->lpVtbl -> appendData(This,bstrstring) )
    ( (This)->lpVtbl -> insertData(This,offset,bstrstring) )
    ( (This)->lpVtbl -> deleteData(This,offset,Count) )
    ( (This)->lpVtbl -> replaceData(This,offset,Count,bstrstring) )
EXTERN_C const IID IID_IHTMLDOMTextNode3;
    typedef struct IHTMLDOMTextNode3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMTextNode3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMTextNode3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMTextNode3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMTextNode3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMTextNode3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMTextNode3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMTextNode3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *substringData )(
            __RPC__in IHTMLDOMTextNode3 * This,
                       long offset,
                       long Count,
                                __RPC__deref_out_opt BSTR *pbstrsubString);
                   HRESULT ( STDMETHODCALLTYPE *insertData )(
            __RPC__in IHTMLDOMTextNode3 * This,
                       long offset,
                       __RPC__in BSTR bstrstring);
                   HRESULT ( STDMETHODCALLTYPE *deleteData )(
            __RPC__in IHTMLDOMTextNode3 * This,
                       long offset,
                       long Count);
                   HRESULT ( STDMETHODCALLTYPE *replaceData )(
            __RPC__in IHTMLDOMTextNode3 * This,
                       long offset,
                       long Count,
                       __RPC__in BSTR bstrstring);
                   HRESULT ( STDMETHODCALLTYPE *splitText )(
            __RPC__in IHTMLDOMTextNode3 * This,
                       long offset,
                                __RPC__deref_out_opt IHTMLDOMNode **pRetNode);
                            HRESULT ( STDMETHODCALLTYPE *get_wholeText )(
            __RPC__in IHTMLDOMTextNode3 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *replaceWholeText )(
            __RPC__in IHTMLDOMTextNode3 * This,
                       __RPC__in BSTR bstrText,
                                __RPC__deref_out_opt IHTMLDOMNode **ppRetNode);
                   HRESULT ( STDMETHODCALLTYPE *hasAttributes )(
            __RPC__in IHTMLDOMTextNode3 * This,
                                __RPC__out VARIANT_BOOL *pfHasAttributes);
                   HRESULT ( STDMETHODCALLTYPE *normalize )(
            __RPC__in IHTMLDOMTextNode3 * This);
        END_INTERFACE
    } IHTMLDOMTextNode3Vtbl;
    interface IHTMLDOMTextNode3
    {
        CONST_VTBL struct IHTMLDOMTextNode3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> substringData(This,offset,Count,pbstrsubString) )
    ( (This)->lpVtbl -> insertData(This,offset,bstrstring) )
    ( (This)->lpVtbl -> deleteData(This,offset,Count) )
    ( (This)->lpVtbl -> replaceData(This,offset,Count,bstrstring) )
    ( (This)->lpVtbl -> splitText(This,offset,pRetNode) )
    ( (This)->lpVtbl -> get_wholeText(This,p) )
    ( (This)->lpVtbl -> replaceWholeText(This,bstrText,ppRetNode) )
    ( (This)->lpVtbl -> hasAttributes(This,pfHasAttributes) )
    ( (This)->lpVtbl -> normalize(This) )
EXTERN_C const IID IID_IHTMLDOMImplementation;
    typedef struct IHTMLDOMImplementationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMImplementation * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMImplementation * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMImplementation * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMImplementation * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMImplementation * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMImplementation * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMImplementation * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *hasFeature )(
            __RPC__in IHTMLDOMImplementation * This,
                       __RPC__in BSTR bstrfeature,
                                 VARIANT version,
                                __RPC__out VARIANT_BOOL *pfHasFeature);
        END_INTERFACE
    } IHTMLDOMImplementationVtbl;
    interface IHTMLDOMImplementation
    {
        CONST_VTBL struct IHTMLDOMImplementationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> hasFeature(This,bstrfeature,version,pfHasFeature) )
EXTERN_C const IID IID_IHTMLDOMImplementation2;
    typedef struct IHTMLDOMImplementation2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMImplementation2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMImplementation2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMImplementation2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMImplementation2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMImplementation2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMImplementation2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMImplementation2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *createDocumentType )(
            __RPC__in IHTMLDOMImplementation2 * This,
                       __RPC__in BSTR bstrQualifiedName,
                       __RPC__in VARIANT *pvarPublicId,
                       __RPC__in VARIANT *pvarSystemId,
                                __RPC__deref_out_opt IDOMDocumentType **newDocumentType);
                   HRESULT ( STDMETHODCALLTYPE *createDocument )(
            __RPC__in IHTMLDOMImplementation2 * This,
                       __RPC__in VARIANT *pvarNS,
                       __RPC__in VARIANT *pvarTagName,
                       __RPC__in_opt IDOMDocumentType *pDocumentType,
                                __RPC__deref_out_opt IHTMLDocument7 **ppnewDocument);
                   HRESULT ( STDMETHODCALLTYPE *createHTMLDocument )(
            __RPC__in IHTMLDOMImplementation2 * This,
                       __RPC__in BSTR bstrTitle,
                                __RPC__deref_out_opt IHTMLDocument7 **ppnewDocument);
                   HRESULT ( STDMETHODCALLTYPE *hasFeature )(
            __RPC__in IHTMLDOMImplementation2 * This,
                       __RPC__in BSTR bstrfeature,
                                 VARIANT version,
                                __RPC__out VARIANT_BOOL *pfHasFeature);
        END_INTERFACE
    } IHTMLDOMImplementation2Vtbl;
    interface IHTMLDOMImplementation2
    {
        CONST_VTBL struct IHTMLDOMImplementation2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> createDocumentType(This,bstrQualifiedName,pvarPublicId,pvarSystemId,newDocumentType) )
    ( (This)->lpVtbl -> createDocument(This,pvarNS,pvarTagName,pDocumentType,ppnewDocument) )
    ( (This)->lpVtbl -> createHTMLDocument(This,bstrTitle,ppnewDocument) )
    ( (This)->lpVtbl -> hasFeature(This,bstrfeature,version,pfHasFeature) )
EXTERN_C const IID DIID_DispHTMLDOMAttribute;
    typedef struct DispHTMLDOMAttributeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDOMAttribute * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDOMAttribute * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDOMAttribute * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDOMAttribute * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDOMAttribute * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDOMAttribute * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDOMAttribute * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDOMAttributeVtbl;
    interface DispHTMLDOMAttribute
    {
        CONST_VTBL struct DispHTMLDOMAttributeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDOMAttribute;
class DECLSPEC_UUID("3050f4b2-98b5-11cf-bb82-00aa00bdce0b")
HTMLDOMAttribute;
EXTERN_C const IID DIID_DispHTMLDOMTextNode;
    typedef struct DispHTMLDOMTextNodeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDOMTextNode * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDOMTextNode * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDOMTextNode * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDOMTextNode * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDOMTextNode * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDOMTextNode * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDOMTextNode * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDOMTextNodeVtbl;
    interface DispHTMLDOMTextNode
    {
        CONST_VTBL struct DispHTMLDOMTextNodeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDOMTextNode;
class DECLSPEC_UUID("3050f4ba-98b5-11cf-bb82-00aa00bdce0b")
HTMLDOMTextNode;
EXTERN_C const IID DIID_DispHTMLDOMImplementation;
    typedef struct DispHTMLDOMImplementationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDOMImplementation * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDOMImplementation * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDOMImplementation * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDOMImplementation * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDOMImplementation * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDOMImplementation * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDOMImplementation * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDOMImplementationVtbl;
    interface DispHTMLDOMImplementation
    {
        CONST_VTBL struct DispHTMLDOMImplementationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDOMImplementation;
class DECLSPEC_UUID("3050f80e-98b5-11cf-bb82-00aa00bdce0b")
HTMLDOMImplementation;
EXTERN_C const IID IID_IHTMLAttributeCollection;
    typedef struct IHTMLAttributeCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAttributeCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAttributeCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAttributeCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAttributeCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAttributeCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAttributeCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAttributeCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLAttributeCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLAttributeCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLAttributeCollection * This,
                                 __RPC__in VARIANT *name,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLAttributeCollectionVtbl;
    interface IHTMLAttributeCollection
    {
        CONST_VTBL struct IHTMLAttributeCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,name,pdisp) )
EXTERN_C const IID IID_IHTMLAttributeCollection2;
    typedef struct IHTMLAttributeCollection2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAttributeCollection2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAttributeCollection2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAttributeCollection2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAttributeCollection2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAttributeCollection2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAttributeCollection2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAttributeCollection2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *getNamedItem )(
            __RPC__in IHTMLAttributeCollection2 * This,
                       __RPC__in BSTR bstrName,
                                __RPC__deref_out_opt IHTMLDOMAttribute **newretNode);
                   HRESULT ( STDMETHODCALLTYPE *setNamedItem )(
            __RPC__in IHTMLAttributeCollection2 * This,
                       __RPC__in_opt IHTMLDOMAttribute *ppNode,
                                __RPC__deref_out_opt IHTMLDOMAttribute **newretNode);
                   HRESULT ( STDMETHODCALLTYPE *removeNamedItem )(
            __RPC__in IHTMLAttributeCollection2 * This,
                       __RPC__in BSTR bstrName,
                                __RPC__deref_out_opt IHTMLDOMAttribute **newretNode);
        END_INTERFACE
    } IHTMLAttributeCollection2Vtbl;
    interface IHTMLAttributeCollection2
    {
        CONST_VTBL struct IHTMLAttributeCollection2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> getNamedItem(This,bstrName,newretNode) )
    ( (This)->lpVtbl -> setNamedItem(This,ppNode,newretNode) )
    ( (This)->lpVtbl -> removeNamedItem(This,bstrName,newretNode) )
EXTERN_C const IID IID_IHTMLAttributeCollection4;
    typedef struct IHTMLAttributeCollection4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAttributeCollection4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAttributeCollection4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAttributeCollection4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAttributeCollection4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAttributeCollection4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAttributeCollection4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAttributeCollection4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *getNamedItemNS )(
            __RPC__in IHTMLAttributeCollection4 * This,
                       __RPC__in VARIANT *pvarNS,
                       __RPC__in BSTR bstrName,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppNodeOut);
                   HRESULT ( STDMETHODCALLTYPE *setNamedItemNS )(
            __RPC__in IHTMLAttributeCollection4 * This,
                       __RPC__in_opt IHTMLDOMAttribute2 *pNodeIn,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppNodeOut);
                   HRESULT ( STDMETHODCALLTYPE *removeNamedItemNS )(
            __RPC__in IHTMLAttributeCollection4 * This,
                       __RPC__in VARIANT *pvarNS,
                       __RPC__in BSTR bstrName,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppNodeOut);
                   HRESULT ( STDMETHODCALLTYPE *getNamedItem )(
            __RPC__in IHTMLAttributeCollection4 * This,
                       __RPC__in BSTR bstrName,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppNodeOut);
                   HRESULT ( STDMETHODCALLTYPE *setNamedItem )(
            __RPC__in IHTMLAttributeCollection4 * This,
                       __RPC__in_opt IHTMLDOMAttribute2 *pNodeIn,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppNodeOut);
                   HRESULT ( STDMETHODCALLTYPE *removeNamedItem )(
            __RPC__in IHTMLAttributeCollection4 * This,
                       __RPC__in BSTR bstrName,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppNodeOut);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLAttributeCollection4 * This,
                       long index,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppNodeOut);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLAttributeCollection4 * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLAttributeCollection4Vtbl;
    interface IHTMLAttributeCollection4
    {
        CONST_VTBL struct IHTMLAttributeCollection4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> getNamedItemNS(This,pvarNS,bstrName,ppNodeOut) )
    ( (This)->lpVtbl -> setNamedItemNS(This,pNodeIn,ppNodeOut) )
    ( (This)->lpVtbl -> removeNamedItemNS(This,pvarNS,bstrName,ppNodeOut) )
    ( (This)->lpVtbl -> getNamedItem(This,bstrName,ppNodeOut) )
    ( (This)->lpVtbl -> setNamedItem(This,pNodeIn,ppNodeOut) )
    ( (This)->lpVtbl -> removeNamedItem(This,bstrName,ppNodeOut) )
    ( (This)->lpVtbl -> item(This,index,ppNodeOut) )
    ( (This)->lpVtbl -> get_length(This,p) )
EXTERN_C const IID IID_IHTMLDOMChildrenCollection;
    typedef struct IHTMLDOMChildrenCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMChildrenCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMChildrenCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMChildrenCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMChildrenCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMChildrenCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMChildrenCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMChildrenCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLDOMChildrenCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLDOMChildrenCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLDOMChildrenCollection * This,
                       long index,
                                __RPC__deref_out_opt IDispatch **ppItem);
        END_INTERFACE
    } IHTMLDOMChildrenCollectionVtbl;
    interface IHTMLDOMChildrenCollection
    {
        CONST_VTBL struct IHTMLDOMChildrenCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,index,ppItem) )
EXTERN_C const IID IID_IHTMLDOMChildrenCollection2;
    typedef struct IHTMLDOMChildrenCollection2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMChildrenCollection2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMChildrenCollection2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMChildrenCollection2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMChildrenCollection2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMChildrenCollection2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMChildrenCollection2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMChildrenCollection2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLDOMChildrenCollection2 * This,
                       long index,
                                __RPC__deref_out_opt IDispatch **ppItem);
        END_INTERFACE
    } IHTMLDOMChildrenCollection2Vtbl;
    interface IHTMLDOMChildrenCollection2
    {
        CONST_VTBL struct IHTMLDOMChildrenCollection2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> item(This,index,ppItem) )
EXTERN_C const IID DIID_DispHTMLAttributeCollection;
    typedef struct DispHTMLAttributeCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLAttributeCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLAttributeCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLAttributeCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLAttributeCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLAttributeCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLAttributeCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLAttributeCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLAttributeCollectionVtbl;
    interface DispHTMLAttributeCollection
    {
        CONST_VTBL struct DispHTMLAttributeCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLAttributeCollection;
class DECLSPEC_UUID("3050f4cc-98b5-11cf-bb82-00aa00bdce0b")
HTMLAttributeCollection;
EXTERN_C const IID DIID_DispStaticNodeList;
    typedef struct DispStaticNodeListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispStaticNodeList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispStaticNodeList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispStaticNodeList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispStaticNodeList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispStaticNodeList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispStaticNodeList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispStaticNodeList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispStaticNodeListVtbl;
    interface DispStaticNodeList
    {
        CONST_VTBL struct DispStaticNodeListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_StaticNodeList;
class DECLSPEC_UUID("30510467-98b5-11cf-bb82-00aa00bdce0b")
StaticNodeList;
EXTERN_C const IID DIID_DispDOMChildrenCollection;
    typedef struct DispDOMChildrenCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMChildrenCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMChildrenCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMChildrenCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMChildrenCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMChildrenCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMChildrenCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMChildrenCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMChildrenCollectionVtbl;
    interface DispDOMChildrenCollection
    {
        CONST_VTBL struct DispDOMChildrenCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMChildrenCollection;
class DECLSPEC_UUID("3050f5aa-98b5-11cf-bb82-00aa00bdce0b")
DOMChildrenCollection;
EXTERN_C const IID DIID_HTMLElementEvents4;
    typedef struct HTMLElementEvents4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLElementEvents4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLElementEvents4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLElementEvents4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLElementEvents4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLElementEvents4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLElementEvents4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLElementEvents4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLElementEvents4Vtbl;
    interface HTMLElementEvents4
    {
        CONST_VTBL struct HTMLElementEvents4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLElementEvents3;
    typedef struct HTMLElementEvents3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLElementEvents3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLElementEvents3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLElementEvents3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLElementEvents3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLElementEvents3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLElementEvents3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLElementEvents3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLElementEvents3Vtbl;
    interface HTMLElementEvents3
    {
        CONST_VTBL struct HTMLElementEvents3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLElementEvents2;
    typedef struct HTMLElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLElementEvents2Vtbl;
    interface HTMLElementEvents2
    {
        CONST_VTBL struct HTMLElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLElementEvents;
    typedef struct HTMLElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLElementEventsVtbl;
    interface HTMLElementEvents
    {
        CONST_VTBL struct HTMLElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IRulesAppliedCollection;
    typedef struct IRulesAppliedCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IRulesAppliedCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IRulesAppliedCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IRulesAppliedCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IRulesAppliedCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IRulesAppliedCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IRulesAppliedCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IRulesAppliedCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IRulesAppliedCollection * This,
                       long index,
                                __RPC__deref_out_opt IRulesApplied **ppRulesApplied);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IRulesAppliedCollection * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_element )(
            __RPC__in IRulesAppliedCollection * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                   HRESULT ( STDMETHODCALLTYPE *propertyInheritedFrom )(
            __RPC__in IRulesAppliedCollection * This,
                       __RPC__in BSTR name,
                                __RPC__deref_out_opt IRulesApplied **ppRulesApplied);
                            HRESULT ( STDMETHODCALLTYPE *get_propertyCount )(
            __RPC__in IRulesAppliedCollection * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *property )(
            __RPC__in IRulesAppliedCollection * This,
                       long index,
                                __RPC__deref_out_opt BSTR *pbstrProperty);
                   HRESULT ( STDMETHODCALLTYPE *propertyInheritedTrace )(
            __RPC__in IRulesAppliedCollection * This,
                       __RPC__in BSTR name,
                       long index,
                                __RPC__deref_out_opt IRulesApplied **ppRulesApplied);
                   HRESULT ( STDMETHODCALLTYPE *propertyInheritedTraceLength )(
            __RPC__in IRulesAppliedCollection * This,
                       __RPC__in BSTR name,
                                __RPC__out long *pLength);
        END_INTERFACE
    } IRulesAppliedCollectionVtbl;
    interface IRulesAppliedCollection
    {
        CONST_VTBL struct IRulesAppliedCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> item(This,index,ppRulesApplied) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get_element(This,p) )
    ( (This)->lpVtbl -> propertyInheritedFrom(This,name,ppRulesApplied) )
    ( (This)->lpVtbl -> get_propertyCount(This,p) )
    ( (This)->lpVtbl -> property(This,index,pbstrProperty) )
    ( (This)->lpVtbl -> propertyInheritedTrace(This,name,index,ppRulesApplied) )
    ( (This)->lpVtbl -> propertyInheritedTraceLength(This,name,pLength) )
EXTERN_C const IID IID_IHTMLElement3;
    typedef struct IHTMLElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *mergeAttributes )(
            __RPC__in IHTMLElement3 * This,
                       __RPC__in_opt IHTMLElement *mergeThis,
                                 __RPC__in VARIANT *pvarFlags);
                            HRESULT ( STDMETHODCALLTYPE *get_isMultiLine )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_canHaveHTML )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onlayoutcomplete )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onlayoutcomplete )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onpage )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onpage )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                                                              HRESULT ( STDMETHODCALLTYPE *put_inflateBlock )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT_BOOL v);
                                                              HRESULT ( STDMETHODCALLTYPE *get_inflateBlock )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforedeactivate )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforedeactivate )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *setActive )(
            __RPC__in IHTMLElement3 * This);
                                                   HRESULT ( STDMETHODCALLTYPE *put_contentEditable )(
            __RPC__in IHTMLElement3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_contentEditable )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_isContentEditable )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_hideFocus )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_hideFocus )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_isDisabled )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmove )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmove )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncontrolselect )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncontrolselect )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *fireEvent )(
            __RPC__in IHTMLElement3 * This,
                       __RPC__in BSTR bstrEventName,
                                 __RPC__in VARIANT *pvarEventObject,
                                __RPC__out VARIANT_BOOL *pfCancelled);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onresizestart )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onresizestart )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onresizeend )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onresizeend )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmovestart )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmovestart )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmoveend )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmoveend )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseenter )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseenter )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseleave )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseleave )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onactivate )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onactivate )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondeactivate )(
            __RPC__in IHTMLElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondeactivate )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *dragDrop )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out VARIANT_BOOL *pfRet);
                                                              HRESULT ( STDMETHODCALLTYPE *get_glyphMode )(
            __RPC__in IHTMLElement3 * This,
                                __RPC__out LONG *p);
        END_INTERFACE
    } IHTMLElement3Vtbl;
    interface IHTMLElement3
    {
        CONST_VTBL struct IHTMLElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> mergeAttributes(This,mergeThis,pvarFlags) )
    ( (This)->lpVtbl -> get_isMultiLine(This,p) )
    ( (This)->lpVtbl -> get_canHaveHTML(This,p) )
    ( (This)->lpVtbl -> put_onlayoutcomplete(This,v) )
    ( (This)->lpVtbl -> get_onlayoutcomplete(This,p) )
    ( (This)->lpVtbl -> put_onpage(This,v) )
    ( (This)->lpVtbl -> get_onpage(This,p) )
    ( (This)->lpVtbl -> put_inflateBlock(This,v) )
    ( (This)->lpVtbl -> get_inflateBlock(This,p) )
    ( (This)->lpVtbl -> put_onbeforedeactivate(This,v) )
    ( (This)->lpVtbl -> get_onbeforedeactivate(This,p) )
    ( (This)->lpVtbl -> setActive(This) )
    ( (This)->lpVtbl -> put_contentEditable(This,v) )
    ( (This)->lpVtbl -> get_contentEditable(This,p) )
    ( (This)->lpVtbl -> get_isContentEditable(This,p) )
    ( (This)->lpVtbl -> put_hideFocus(This,v) )
    ( (This)->lpVtbl -> get_hideFocus(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> get_isDisabled(This,p) )
    ( (This)->lpVtbl -> put_onmove(This,v) )
    ( (This)->lpVtbl -> get_onmove(This,p) )
    ( (This)->lpVtbl -> put_oncontrolselect(This,v) )
    ( (This)->lpVtbl -> get_oncontrolselect(This,p) )
    ( (This)->lpVtbl -> fireEvent(This,bstrEventName,pvarEventObject,pfCancelled) )
    ( (This)->lpVtbl -> put_onresizestart(This,v) )
    ( (This)->lpVtbl -> get_onresizestart(This,p) )
    ( (This)->lpVtbl -> put_onresizeend(This,v) )
    ( (This)->lpVtbl -> get_onresizeend(This,p) )
    ( (This)->lpVtbl -> put_onmovestart(This,v) )
    ( (This)->lpVtbl -> get_onmovestart(This,p) )
    ( (This)->lpVtbl -> put_onmoveend(This,v) )
    ( (This)->lpVtbl -> get_onmoveend(This,p) )
    ( (This)->lpVtbl -> put_onmouseenter(This,v) )
    ( (This)->lpVtbl -> get_onmouseenter(This,p) )
    ( (This)->lpVtbl -> put_onmouseleave(This,v) )
    ( (This)->lpVtbl -> get_onmouseleave(This,p) )
    ( (This)->lpVtbl -> put_onactivate(This,v) )
    ( (This)->lpVtbl -> get_onactivate(This,p) )
    ( (This)->lpVtbl -> put_ondeactivate(This,v) )
    ( (This)->lpVtbl -> get_ondeactivate(This,p) )
    ( (This)->lpVtbl -> dragDrop(This,pfRet) )
    ( (This)->lpVtbl -> get_glyphMode(This,p) )
EXTERN_C const IID IID_IHTMLElement4;
    typedef struct IHTMLElement4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElement4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElement4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElement4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElement4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElement4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElement4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElement4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmousewheel )(
            __RPC__in IHTMLElement4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmousewheel )(
            __RPC__in IHTMLElement4 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *normalize )(
            __RPC__in IHTMLElement4 * This);
                   HRESULT ( STDMETHODCALLTYPE *getAttributeNode )(
            __RPC__in IHTMLElement4 * This,
                       __RPC__in BSTR bstrname,
                                __RPC__deref_out_opt IHTMLDOMAttribute **ppAttribute);
                   HRESULT ( STDMETHODCALLTYPE *setAttributeNode )(
            __RPC__in IHTMLElement4 * This,
                       __RPC__in_opt IHTMLDOMAttribute *pattr,
                                __RPC__deref_out_opt IHTMLDOMAttribute **ppretAttribute);
                   HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )(
            __RPC__in IHTMLElement4 * This,
                       __RPC__in_opt IHTMLDOMAttribute *pattr,
                                __RPC__deref_out_opt IHTMLDOMAttribute **ppretAttribute);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeactivate )(
            __RPC__in IHTMLElement4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeactivate )(
            __RPC__in IHTMLElement4 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocusin )(
            __RPC__in IHTMLElement4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocusin )(
            __RPC__in IHTMLElement4 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocusout )(
            __RPC__in IHTMLElement4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocusout )(
            __RPC__in IHTMLElement4 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLElement4Vtbl;
    interface IHTMLElement4
    {
        CONST_VTBL struct IHTMLElement4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_onmousewheel(This,v) )
    ( (This)->lpVtbl -> get_onmousewheel(This,p) )
    ( (This)->lpVtbl -> normalize(This) )
    ( (This)->lpVtbl -> getAttributeNode(This,bstrname,ppAttribute) )
    ( (This)->lpVtbl -> setAttributeNode(This,pattr,ppretAttribute) )
    ( (This)->lpVtbl -> removeAttributeNode(This,pattr,ppretAttribute) )
    ( (This)->lpVtbl -> put_onbeforeactivate(This,v) )
    ( (This)->lpVtbl -> get_onbeforeactivate(This,p) )
    ( (This)->lpVtbl -> put_onfocusin(This,v) )
    ( (This)->lpVtbl -> get_onfocusin(This,p) )
    ( (This)->lpVtbl -> put_onfocusout(This,v) )
    ( (This)->lpVtbl -> get_onfocusout(This,p) )
EXTERN_C const IID IID_IElementSelector;
    typedef struct IElementSelectorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementSelector * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementSelector * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementSelector * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IElementSelector * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IElementSelector * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IElementSelector * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IElementSelector * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *querySelector )(
            __RPC__in IElementSelector * This,
                       __RPC__in BSTR v,
                                __RPC__deref_out_opt IHTMLElement **pel);
                   HRESULT ( STDMETHODCALLTYPE *querySelectorAll )(
            __RPC__in IElementSelector * This,
                       __RPC__in BSTR v,
                                __RPC__deref_out_opt IHTMLDOMChildrenCollection **pel);
        END_INTERFACE
    } IElementSelectorVtbl;
    interface IElementSelector
    {
        CONST_VTBL struct IElementSelectorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> querySelector(This,v,pel) )
    ( (This)->lpVtbl -> querySelectorAll(This,v,pel) )
EXTERN_C const IID IID_IHTMLElementRender;
    typedef struct IHTMLElementRenderVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElementRender * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElementRender * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElementRender * This);
        HRESULT ( STDMETHODCALLTYPE *DrawToDC )(
            __RPC__in IHTMLElementRender * This,
                       __RPC__in HDC hDC);
        HRESULT ( STDMETHODCALLTYPE *SetDocumentPrinter )(
            __RPC__in IHTMLElementRender * This,
                       __RPC__in BSTR bstrPrinterName,
                       __RPC__in HDC hDC);
        END_INTERFACE
    } IHTMLElementRenderVtbl;
    interface IHTMLElementRender
    {
        CONST_VTBL struct IHTMLElementRenderVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> DrawToDC(This,hDC) )
    ( (This)->lpVtbl -> SetDocumentPrinter(This,bstrPrinterName,hDC) )
EXTERN_C const IID IID_IHTMLUniqueName;
    typedef struct IHTMLUniqueNameVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLUniqueName * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLUniqueName * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLUniqueName * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLUniqueName * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLUniqueName * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLUniqueName * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLUniqueName * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *get_uniqueNumber )(
            __RPC__in IHTMLUniqueName * This,
                                __RPC__out long *p);
                                    HRESULT ( STDMETHODCALLTYPE *get_uniqueID )(
            __RPC__in IHTMLUniqueName * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLUniqueNameVtbl;
    interface IHTMLUniqueName
    {
        CONST_VTBL struct IHTMLUniqueNameVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_uniqueNumber(This,p) )
    ( (This)->lpVtbl -> get_uniqueID(This,p) )
EXTERN_C const IID IID_IHTMLElement5;
    typedef struct IHTMLElement5Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElement5 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElement5 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElement5 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElement5 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElement5 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *getAttributeNode )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR bstrname,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppretAttribute);
                   HRESULT ( STDMETHODCALLTYPE *setAttributeNode )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in_opt IHTMLDOMAttribute2 *pattr,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppretAttribute);
                   HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in_opt IHTMLDOMAttribute2 *pattr,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppretAttribute);
                   HRESULT ( STDMETHODCALLTYPE *hasAttribute )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR name,
                                __RPC__out VARIANT_BOOL *pfHasAttribute);
                                                   HRESULT ( STDMETHODCALLTYPE *put_role )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_role )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaBusy )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaBusy )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaChecked )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaChecked )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaDisabled )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaDisabled )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaExpanded )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaExpanded )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaHaspopup )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaHaspopup )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaHidden )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaHidden )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaInvalid )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaInvalid )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaMultiselectable )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaMultiselectable )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaPressed )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaPressed )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaReadonly )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaReadonly )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaRequired )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaRequired )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaSecret )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaSecret )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaSelected )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaSelected )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *getAttribute )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR strAttributeName,
                                __RPC__out VARIANT *AttributeValue);
                   HRESULT ( STDMETHODCALLTYPE *setAttribute )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR strAttributeName,
                       VARIANT AttributeValue);
                   HRESULT ( STDMETHODCALLTYPE *removeAttribute )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR strAttributeName,
                                __RPC__out VARIANT_BOOL *pfSuccess);
                            HRESULT ( STDMETHODCALLTYPE *get_attributes )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt IHTMLAttributeCollection3 **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaValuenow )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaValuenow )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaPosinset )(
            __RPC__in IHTMLElement5 * This,
                       short v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaPosinset )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__out short *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaSetsize )(
            __RPC__in IHTMLElement5 * This,
                       short v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaSetsize )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__out short *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaLevel )(
            __RPC__in IHTMLElement5 * This,
                       short v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaLevel )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__out short *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaValuemin )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaValuemin )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaValuemax )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaValuemax )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaControls )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaControls )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaDescribedby )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaDescribedby )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaFlowto )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaFlowto )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaLabelledby )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaLabelledby )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaActivedescendant )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaActivedescendant )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaOwns )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaOwns )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *hasAttributes )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__out VARIANT_BOOL *pfHasAttributes);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaLive )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaLive )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ariaRelevant )(
            __RPC__in IHTMLElement5 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ariaRelevant )(
            __RPC__in IHTMLElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLElement5Vtbl;
    interface IHTMLElement5
    {
        CONST_VTBL struct IHTMLElement5Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> getAttributeNode(This,bstrname,ppretAttribute) )
    ( (This)->lpVtbl -> setAttributeNode(This,pattr,ppretAttribute) )
    ( (This)->lpVtbl -> removeAttributeNode(This,pattr,ppretAttribute) )
    ( (This)->lpVtbl -> hasAttribute(This,name,pfHasAttribute) )
    ( (This)->lpVtbl -> put_role(This,v) )
    ( (This)->lpVtbl -> get_role(This,p) )
    ( (This)->lpVtbl -> put_ariaBusy(This,v) )
    ( (This)->lpVtbl -> get_ariaBusy(This,p) )
    ( (This)->lpVtbl -> put_ariaChecked(This,v) )
    ( (This)->lpVtbl -> get_ariaChecked(This,p) )
    ( (This)->lpVtbl -> put_ariaDisabled(This,v) )
    ( (This)->lpVtbl -> get_ariaDisabled(This,p) )
    ( (This)->lpVtbl -> put_ariaExpanded(This,v) )
    ( (This)->lpVtbl -> get_ariaExpanded(This,p) )
    ( (This)->lpVtbl -> put_ariaHaspopup(This,v) )
    ( (This)->lpVtbl -> get_ariaHaspopup(This,p) )
    ( (This)->lpVtbl -> put_ariaHidden(This,v) )
    ( (This)->lpVtbl -> get_ariaHidden(This,p) )
    ( (This)->lpVtbl -> put_ariaInvalid(This,v) )
    ( (This)->lpVtbl -> get_ariaInvalid(This,p) )
    ( (This)->lpVtbl -> put_ariaMultiselectable(This,v) )
    ( (This)->lpVtbl -> get_ariaMultiselectable(This,p) )
    ( (This)->lpVtbl -> put_ariaPressed(This,v) )
    ( (This)->lpVtbl -> get_ariaPressed(This,p) )
    ( (This)->lpVtbl -> put_ariaReadonly(This,v) )
    ( (This)->lpVtbl -> get_ariaReadonly(This,p) )
    ( (This)->lpVtbl -> put_ariaRequired(This,v) )
    ( (This)->lpVtbl -> get_ariaRequired(This,p) )
    ( (This)->lpVtbl -> put_ariaSecret(This,v) )
    ( (This)->lpVtbl -> get_ariaSecret(This,p) )
    ( (This)->lpVtbl -> put_ariaSelected(This,v) )
    ( (This)->lpVtbl -> get_ariaSelected(This,p) )
    ( (This)->lpVtbl -> getAttribute(This,strAttributeName,AttributeValue) )
    ( (This)->lpVtbl -> setAttribute(This,strAttributeName,AttributeValue) )
    ( (This)->lpVtbl -> removeAttribute(This,strAttributeName,pfSuccess) )
    ( (This)->lpVtbl -> get_attributes(This,p) )
    ( (This)->lpVtbl -> put_ariaValuenow(This,v) )
    ( (This)->lpVtbl -> get_ariaValuenow(This,p) )
    ( (This)->lpVtbl -> put_ariaPosinset(This,v) )
    ( (This)->lpVtbl -> get_ariaPosinset(This,p) )
    ( (This)->lpVtbl -> put_ariaSetsize(This,v) )
    ( (This)->lpVtbl -> get_ariaSetsize(This,p) )
    ( (This)->lpVtbl -> put_ariaLevel(This,v) )
    ( (This)->lpVtbl -> get_ariaLevel(This,p) )
    ( (This)->lpVtbl -> put_ariaValuemin(This,v) )
    ( (This)->lpVtbl -> get_ariaValuemin(This,p) )
    ( (This)->lpVtbl -> put_ariaValuemax(This,v) )
    ( (This)->lpVtbl -> get_ariaValuemax(This,p) )
    ( (This)->lpVtbl -> put_ariaControls(This,v) )
    ( (This)->lpVtbl -> get_ariaControls(This,p) )
    ( (This)->lpVtbl -> put_ariaDescribedby(This,v) )
    ( (This)->lpVtbl -> get_ariaDescribedby(This,p) )
    ( (This)->lpVtbl -> put_ariaFlowto(This,v) )
    ( (This)->lpVtbl -> get_ariaFlowto(This,p) )
    ( (This)->lpVtbl -> put_ariaLabelledby(This,v) )
    ( (This)->lpVtbl -> get_ariaLabelledby(This,p) )
    ( (This)->lpVtbl -> put_ariaActivedescendant(This,v) )
    ( (This)->lpVtbl -> get_ariaActivedescendant(This,p) )
    ( (This)->lpVtbl -> put_ariaOwns(This,v) )
    ( (This)->lpVtbl -> get_ariaOwns(This,p) )
    ( (This)->lpVtbl -> hasAttributes(This,pfHasAttributes) )
    ( (This)->lpVtbl -> put_ariaLive(This,v) )
    ( (This)->lpVtbl -> get_ariaLive(This,p) )
    ( (This)->lpVtbl -> put_ariaRelevant(This,v) )
    ( (This)->lpVtbl -> get_ariaRelevant(This,p) )
EXTERN_C const IID IID_IHTMLElement6;
    typedef struct IHTMLElement6Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElement6 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElement6 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElement6 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElement6 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElement6 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *getAttributeNS )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in VARIANT *pvarNS,
                       __RPC__in BSTR strAttributeName,
                                __RPC__out VARIANT *AttributeValue);
                   HRESULT ( STDMETHODCALLTYPE *setAttributeNS )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in VARIANT *pvarNS,
                       __RPC__in BSTR strAttributeName,
                       __RPC__in VARIANT *pvarAttributeValue);
                   HRESULT ( STDMETHODCALLTYPE *removeAttributeNS )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in VARIANT *pvarNS,
                       __RPC__in BSTR strAttributeName);
                   HRESULT ( STDMETHODCALLTYPE *getAttributeNodeNS )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in VARIANT *pvarNS,
                       __RPC__in BSTR bstrname,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppretAttribute);
                   HRESULT ( STDMETHODCALLTYPE *setAttributeNodeNS )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in_opt IHTMLDOMAttribute2 *pattr,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppretAttribute);
                   HRESULT ( STDMETHODCALLTYPE *hasAttributeNS )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in VARIANT *pvarNS,
                       __RPC__in BSTR name,
                                __RPC__out VARIANT_BOOL *pfHasAttribute);
                   HRESULT ( STDMETHODCALLTYPE *getAttribute )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in BSTR strAttributeName,
                                __RPC__out VARIANT *AttributeValue);
                   HRESULT ( STDMETHODCALLTYPE *setAttribute )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in BSTR strAttributeName,
                       __RPC__in VARIANT *pvarAttributeValue);
                   HRESULT ( STDMETHODCALLTYPE *removeAttribute )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in BSTR strAttributeName);
                   HRESULT ( STDMETHODCALLTYPE *getAttributeNode )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in BSTR strAttributeName,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppretAttribute);
                   HRESULT ( STDMETHODCALLTYPE *setAttributeNode )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in_opt IHTMLDOMAttribute2 *pattr,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppretAttribute);
                   HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in_opt IHTMLDOMAttribute2 *pattr,
                                __RPC__deref_out_opt IHTMLDOMAttribute2 **ppretAttribute);
                   HRESULT ( STDMETHODCALLTYPE *hasAttribute )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in BSTR name,
                                __RPC__out VARIANT_BOOL *pfHasAttribute);
                   HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in VARIANT *varNS,
                       __RPC__in BSTR bstrLocalName,
                                __RPC__deref_out_opt IHTMLElementCollection **pelColl);
                            HRESULT ( STDMETHODCALLTYPE *get_tagName )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_nodeName )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *getElementsByClassName )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in BSTR v,
                                __RPC__deref_out_opt IHTMLElementCollection **pel);
                   HRESULT ( STDMETHODCALLTYPE *msMatchesSelector )(
            __RPC__in IHTMLElement6 * This,
                       __RPC__in BSTR v,
                                __RPC__out VARIANT_BOOL *pfMatches);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onabort )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onabort )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_oncanplay )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_oncanplay )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_oncanplaythrough )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_oncanplaythrough )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onchange )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onchange )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_ondurationchange )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_ondurationchange )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onemptied )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onemptied )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onended )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onended )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_oninput )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_oninput )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onloadeddata )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onloadeddata )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onloadedmetadata )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onloadedmetadata )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onloadstart )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onloadstart )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onpause )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onpause )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onplay )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onplay )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onplaying )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onplaying )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onprogress )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onprogress )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onratechange )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onratechange )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreset )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreset )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onseeked )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onseeked )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onseeking )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onseeking )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onselect )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onselect )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onstalled )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onstalled )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onsubmit )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onsubmit )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onsuspend )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onsuspend )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_ontimeupdate )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_ontimeupdate )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onvolumechange )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onvolumechange )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onwaiting )(
            __RPC__in IHTMLElement6 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onwaiting )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *hasAttributes )(
            __RPC__in IHTMLElement6 * This,
                                __RPC__out VARIANT_BOOL *pfHasAttributes);
        END_INTERFACE
    } IHTMLElement6Vtbl;
    interface IHTMLElement6
    {
        CONST_VTBL struct IHTMLElement6Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> getAttributeNS(This,pvarNS,strAttributeName,AttributeValue) )
    ( (This)->lpVtbl -> setAttributeNS(This,pvarNS,strAttributeName,pvarAttributeValue) )
    ( (This)->lpVtbl -> removeAttributeNS(This,pvarNS,strAttributeName) )
    ( (This)->lpVtbl -> getAttributeNodeNS(This,pvarNS,bstrname,ppretAttribute) )
    ( (This)->lpVtbl -> setAttributeNodeNS(This,pattr,ppretAttribute) )
    ( (This)->lpVtbl -> hasAttributeNS(This,pvarNS,name,pfHasAttribute) )
    ( (This)->lpVtbl -> getAttribute(This,strAttributeName,AttributeValue) )
    ( (This)->lpVtbl -> setAttribute(This,strAttributeName,pvarAttributeValue) )
    ( (This)->lpVtbl -> removeAttribute(This,strAttributeName) )
    ( (This)->lpVtbl -> getAttributeNode(This,strAttributeName,ppretAttribute) )
    ( (This)->lpVtbl -> setAttributeNode(This,pattr,ppretAttribute) )
    ( (This)->lpVtbl -> removeAttributeNode(This,pattr,ppretAttribute) )
    ( (This)->lpVtbl -> hasAttribute(This,name,pfHasAttribute) )
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,varNS,bstrLocalName,pelColl) )
    ( (This)->lpVtbl -> get_tagName(This,p) )
    ( (This)->lpVtbl -> get_nodeName(This,p) )
    ( (This)->lpVtbl -> getElementsByClassName(This,v,pel) )
    ( (This)->lpVtbl -> msMatchesSelector(This,v,pfMatches) )
    ( (This)->lpVtbl -> put_onabort(This,v) )
    ( (This)->lpVtbl -> get_onabort(This,p) )
    ( (This)->lpVtbl -> put_oncanplay(This,v) )
    ( (This)->lpVtbl -> get_oncanplay(This,p) )
    ( (This)->lpVtbl -> put_oncanplaythrough(This,v) )
    ( (This)->lpVtbl -> get_oncanplaythrough(This,p) )
    ( (This)->lpVtbl -> put_onchange(This,v) )
    ( (This)->lpVtbl -> get_onchange(This,p) )
    ( (This)->lpVtbl -> put_ondurationchange(This,v) )
    ( (This)->lpVtbl -> get_ondurationchange(This,p) )
    ( (This)->lpVtbl -> put_onemptied(This,v) )
    ( (This)->lpVtbl -> get_onemptied(This,p) )
    ( (This)->lpVtbl -> put_onended(This,v) )
    ( (This)->lpVtbl -> get_onended(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> put_oninput(This,v) )
    ( (This)->lpVtbl -> get_oninput(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> put_onloadeddata(This,v) )
    ( (This)->lpVtbl -> get_onloadeddata(This,p) )
    ( (This)->lpVtbl -> put_onloadedmetadata(This,v) )
    ( (This)->lpVtbl -> get_onloadedmetadata(This,p) )
    ( (This)->lpVtbl -> put_onloadstart(This,v) )
    ( (This)->lpVtbl -> get_onloadstart(This,p) )
    ( (This)->lpVtbl -> put_onpause(This,v) )
    ( (This)->lpVtbl -> get_onpause(This,p) )
    ( (This)->lpVtbl -> put_onplay(This,v) )
    ( (This)->lpVtbl -> get_onplay(This,p) )
    ( (This)->lpVtbl -> put_onplaying(This,v) )
    ( (This)->lpVtbl -> get_onplaying(This,p) )
    ( (This)->lpVtbl -> put_onprogress(This,v) )
    ( (This)->lpVtbl -> get_onprogress(This,p) )
    ( (This)->lpVtbl -> put_onratechange(This,v) )
    ( (This)->lpVtbl -> get_onratechange(This,p) )
    ( (This)->lpVtbl -> put_onreset(This,v) )
    ( (This)->lpVtbl -> get_onreset(This,p) )
    ( (This)->lpVtbl -> put_onseeked(This,v) )
    ( (This)->lpVtbl -> get_onseeked(This,p) )
    ( (This)->lpVtbl -> put_onseeking(This,v) )
    ( (This)->lpVtbl -> get_onseeking(This,p) )
    ( (This)->lpVtbl -> put_onselect(This,v) )
    ( (This)->lpVtbl -> get_onselect(This,p) )
    ( (This)->lpVtbl -> put_onstalled(This,v) )
    ( (This)->lpVtbl -> get_onstalled(This,p) )
    ( (This)->lpVtbl -> put_onsubmit(This,v) )
    ( (This)->lpVtbl -> get_onsubmit(This,p) )
    ( (This)->lpVtbl -> put_onsuspend(This,v) )
    ( (This)->lpVtbl -> get_onsuspend(This,p) )
    ( (This)->lpVtbl -> put_ontimeupdate(This,v) )
    ( (This)->lpVtbl -> get_ontimeupdate(This,p) )
    ( (This)->lpVtbl -> put_onvolumechange(This,v) )
    ( (This)->lpVtbl -> get_onvolumechange(This,p) )
    ( (This)->lpVtbl -> put_onwaiting(This,v) )
    ( (This)->lpVtbl -> get_onwaiting(This,p) )
    ( (This)->lpVtbl -> hasAttributes(This,pfHasAttributes) )
EXTERN_C const IID IID_IHTMLElement7;
    typedef struct IHTMLElement7Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElement7 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElement7 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElement7 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElement7 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElement7 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElement7 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElement7 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmspointerdown )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmspointerdown )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmspointermove )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmspointermove )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmspointerup )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmspointerup )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmspointerover )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmspointerover )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmspointerout )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmspointerout )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmspointercancel )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmspointercancel )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmspointerhover )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmspointerhover )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmslostpointercapture )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmslostpointercapture )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsgotpointercapture )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsgotpointercapture )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsgesturestart )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsgesturestart )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsgesturechange )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsgesturechange )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsgestureend )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsgestureend )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsgesturehold )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsgesturehold )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsgesturetap )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsgesturetap )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsgesturedoubletap )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsgesturedoubletap )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsinertiastart )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsinertiastart )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *msSetPointerCapture )(
            __RPC__in IHTMLElement7 * This,
                       long pointerId);
                   HRESULT ( STDMETHODCALLTYPE *msReleasePointerCapture )(
            __RPC__in IHTMLElement7 * This,
                       long pointerId);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmstransitionstart )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmstransitionstart )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmstransitionend )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmstransitionend )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsanimationstart )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsanimationstart )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsanimationend )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsanimationend )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsanimationiteration )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsanimationiteration )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_oninvalid )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_oninvalid )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_xmsAcceleratorKey )(
            __RPC__in IHTMLElement7 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_xmsAcceleratorKey )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_spellcheck )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_spellcheck )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_onmsmanipulationstatechanged )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_onmsmanipulationstatechanged )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_oncuechange )(
            __RPC__in IHTMLElement7 * This,
                       VARIANT v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_oncuechange )(
            __RPC__in IHTMLElement7 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLElement7Vtbl;
    interface IHTMLElement7
    {
        CONST_VTBL struct IHTMLElement7Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_onmspointerdown(This,v) )
    ( (This)->lpVtbl -> get_onmspointerdown(This,p) )
    ( (This)->lpVtbl -> put_onmspointermove(This,v) )
    ( (This)->lpVtbl -> get_onmspointermove(This,p) )
    ( (This)->lpVtbl -> put_onmspointerup(This,v) )
    ( (This)->lpVtbl -> get_onmspointerup(This,p) )
    ( (This)->lpVtbl -> put_onmspointerover(This,v) )
    ( (This)->lpVtbl -> get_onmspointerover(This,p) )
    ( (This)->lpVtbl -> put_onmspointerout(This,v) )
    ( (This)->lpVtbl -> get_onmspointerout(This,p) )
    ( (This)->lpVtbl -> put_onmspointercancel(This,v) )
    ( (This)->lpVtbl -> get_onmspointercancel(This,p) )
    ( (This)->lpVtbl -> put_onmspointerhover(This,v) )
    ( (This)->lpVtbl -> get_onmspointerhover(This,p) )
    ( (This)->lpVtbl -> put_onmslostpointercapture(This,v) )
    ( (This)->lpVtbl -> get_onmslostpointercapture(This,p) )
    ( (This)->lpVtbl -> put_onmsgotpointercapture(This,v) )
    ( (This)->lpVtbl -> get_onmsgotpointercapture(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturestart(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturestart(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturechange(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturechange(This,p) )
    ( (This)->lpVtbl -> put_onmsgestureend(This,v) )
    ( (This)->lpVtbl -> get_onmsgestureend(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturehold(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturehold(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturetap(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturetap(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturedoubletap(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturedoubletap(This,p) )
    ( (This)->lpVtbl -> put_onmsinertiastart(This,v) )
    ( (This)->lpVtbl -> get_onmsinertiastart(This,p) )
    ( (This)->lpVtbl -> msSetPointerCapture(This,pointerId) )
    ( (This)->lpVtbl -> msReleasePointerCapture(This,pointerId) )
    ( (This)->lpVtbl -> put_onmstransitionstart(This,v) )
    ( (This)->lpVtbl -> get_onmstransitionstart(This,p) )
    ( (This)->lpVtbl -> put_onmstransitionend(This,v) )
    ( (This)->lpVtbl -> get_onmstransitionend(This,p) )
    ( (This)->lpVtbl -> put_onmsanimationstart(This,v) )
    ( (This)->lpVtbl -> get_onmsanimationstart(This,p) )
    ( (This)->lpVtbl -> put_onmsanimationend(This,v) )
    ( (This)->lpVtbl -> get_onmsanimationend(This,p) )
    ( (This)->lpVtbl -> put_onmsanimationiteration(This,v) )
    ( (This)->lpVtbl -> get_onmsanimationiteration(This,p) )
    ( (This)->lpVtbl -> put_oninvalid(This,v) )
    ( (This)->lpVtbl -> get_oninvalid(This,p) )
    ( (This)->lpVtbl -> put_xmsAcceleratorKey(This,v) )
    ( (This)->lpVtbl -> get_xmsAcceleratorKey(This,p) )
    ( (This)->lpVtbl -> put_spellcheck(This,v) )
    ( (This)->lpVtbl -> get_spellcheck(This,p) )
    ( (This)->lpVtbl -> put_onmsmanipulationstatechanged(This,v) )
    ( (This)->lpVtbl -> get_onmsmanipulationstatechanged(This,p) )
    ( (This)->lpVtbl -> put_oncuechange(This,v) )
    ( (This)->lpVtbl -> get_oncuechange(This,p) )
EXTERN_C const IID IID_IHTMLElementAppliedStyles;
    typedef struct IHTMLElementAppliedStylesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElementAppliedStyles * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElementAppliedStyles * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElementAppliedStyles * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElementAppliedStyles * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElementAppliedStyles * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElementAppliedStyles * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElementAppliedStyles * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *msGetRulesApplied )(
            __RPC__in IHTMLElementAppliedStyles * This,
                                __RPC__deref_out_opt IRulesAppliedCollection **ppRulesAppliedCollection);
                   HRESULT ( STDMETHODCALLTYPE *msGetRulesAppliedWithAncestor )(
            __RPC__in IHTMLElementAppliedStyles * This,
                                 VARIANT varContext,
                                __RPC__deref_out_opt IRulesAppliedCollection **ppRulesAppliedCollection);
        END_INTERFACE
    } IHTMLElementAppliedStylesVtbl;
    interface IHTMLElementAppliedStyles
    {
        CONST_VTBL struct IHTMLElementAppliedStylesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> msGetRulesApplied(This,ppRulesAppliedCollection) )
    ( (This)->lpVtbl -> msGetRulesAppliedWithAncestor(This,varContext,ppRulesAppliedCollection) )
EXTERN_C const IID IID_IElementTraversal;
    typedef struct IElementTraversalVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementTraversal * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementTraversal * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementTraversal * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IElementTraversal * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IElementTraversal * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IElementTraversal * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IElementTraversal * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_firstElementChild )(
            __RPC__in IElementTraversal * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_lastElementChild )(
            __RPC__in IElementTraversal * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_previousElementSibling )(
            __RPC__in IElementTraversal * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_nextElementSibling )(
            __RPC__in IElementTraversal * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_childElementCount )(
            __RPC__in IElementTraversal * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IElementTraversalVtbl;
    interface IElementTraversal
    {
        CONST_VTBL struct IElementTraversalVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_firstElementChild(This,p) )
    ( (This)->lpVtbl -> get_lastElementChild(This,p) )
    ( (This)->lpVtbl -> get_previousElementSibling(This,p) )
    ( (This)->lpVtbl -> get_nextElementSibling(This,p) )
    ( (This)->lpVtbl -> get_childElementCount(This,p) )
EXTERN_C const IID IID_IHTMLDatabinding;
    typedef struct IHTMLDatabindingVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDatabinding * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDatabinding * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDatabinding * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDatabinding * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDatabinding * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDatabinding * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDatabinding * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_dataFld )(
            __RPC__in IHTMLDatabinding * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_dataFld )(
            __RPC__in IHTMLDatabinding * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_dataSrc )(
            __RPC__in IHTMLDatabinding * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_dataSrc )(
            __RPC__in IHTMLDatabinding * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_dataFormatAs )(
            __RPC__in IHTMLDatabinding * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_dataFormatAs )(
            __RPC__in IHTMLDatabinding * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLDatabindingVtbl;
    interface IHTMLDatabinding
    {
        CONST_VTBL struct IHTMLDatabindingVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_dataFld(This,v) )
    ( (This)->lpVtbl -> get_dataFld(This,p) )
    ( (This)->lpVtbl -> put_dataSrc(This,v) )
    ( (This)->lpVtbl -> get_dataSrc(This,p) )
    ( (This)->lpVtbl -> put_dataFormatAs(This,v) )
    ( (This)->lpVtbl -> get_dataFormatAs(This,p) )
EXTERN_C const IID IID_IHTMLDocument;
    typedef struct IHTMLDocumentVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDocument * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDocument * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDocument * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDocument * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDocument * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDocument * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDocument * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                  HRESULT ( STDMETHODCALLTYPE *get_Script )(
            __RPC__in IHTMLDocument * This,
                                __RPC__deref_out_opt IDispatch **p);
        END_INTERFACE
    } IHTMLDocumentVtbl;
    interface IHTMLDocument
    {
        CONST_VTBL struct IHTMLDocumentVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_Script(This,p) )
EXTERN_C const IID IID_IHTMLElementDefaults;
    typedef struct IHTMLElementDefaultsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElementDefaults * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElementDefaults * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElementDefaults * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElementDefaults * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElementDefaults * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElementDefaults * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElementDefaults * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                          HRESULT ( STDMETHODCALLTYPE *get_style )(
            __RPC__in IHTMLElementDefaults * This,
                                __RPC__deref_out_opt IHTMLStyle **p);
                            HRESULT ( STDMETHODCALLTYPE *put_tabStop )(
            __RPC__in IHTMLElementDefaults * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_tabStop )(
            __RPC__in IHTMLElementDefaults * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_viewInheritStyle )(
            __RPC__in IHTMLElementDefaults * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_viewInheritStyle )(
            __RPC__in IHTMLElementDefaults * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_viewMasterTab )(
            __RPC__in IHTMLElementDefaults * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_viewMasterTab )(
            __RPC__in IHTMLElementDefaults * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollSegmentX )(
            __RPC__in IHTMLElementDefaults * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollSegmentX )(
            __RPC__in IHTMLElementDefaults * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollSegmentY )(
            __RPC__in IHTMLElementDefaults * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollSegmentY )(
            __RPC__in IHTMLElementDefaults * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_isMultiLine )(
            __RPC__in IHTMLElementDefaults * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_isMultiLine )(
            __RPC__in IHTMLElementDefaults * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_contentEditable )(
            __RPC__in IHTMLElementDefaults * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_contentEditable )(
            __RPC__in IHTMLElementDefaults * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_canHaveHTML )(
            __RPC__in IHTMLElementDefaults * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_canHaveHTML )(
            __RPC__in IHTMLElementDefaults * This,
                                __RPC__out VARIANT_BOOL *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_viewLink )(
            __RPC__in IHTMLElementDefaults * This,
                       __RPC__in_opt IHTMLDocument *v);
                            HRESULT ( STDMETHODCALLTYPE *get_viewLink )(
            __RPC__in IHTMLElementDefaults * This,
                                __RPC__deref_out_opt IHTMLDocument **p);
                            HRESULT ( STDMETHODCALLTYPE *put_frozen )(
            __RPC__in IHTMLElementDefaults * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_frozen )(
            __RPC__in IHTMLElementDefaults * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLElementDefaultsVtbl;
    interface IHTMLElementDefaults
    {
        CONST_VTBL struct IHTMLElementDefaultsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_style(This,p) )
    ( (This)->lpVtbl -> put_tabStop(This,v) )
    ( (This)->lpVtbl -> get_tabStop(This,p) )
    ( (This)->lpVtbl -> put_viewInheritStyle(This,v) )
    ( (This)->lpVtbl -> get_viewInheritStyle(This,p) )
    ( (This)->lpVtbl -> put_viewMasterTab(This,v) )
    ( (This)->lpVtbl -> get_viewMasterTab(This,p) )
    ( (This)->lpVtbl -> put_scrollSegmentX(This,v) )
    ( (This)->lpVtbl -> get_scrollSegmentX(This,p) )
    ( (This)->lpVtbl -> put_scrollSegmentY(This,v) )
    ( (This)->lpVtbl -> get_scrollSegmentY(This,p) )
    ( (This)->lpVtbl -> put_isMultiLine(This,v) )
    ( (This)->lpVtbl -> get_isMultiLine(This,p) )
    ( (This)->lpVtbl -> put_contentEditable(This,v) )
    ( (This)->lpVtbl -> get_contentEditable(This,p) )
    ( (This)->lpVtbl -> put_canHaveHTML(This,v) )
    ( (This)->lpVtbl -> get_canHaveHTML(This,p) )
    ( (This)->lpVtbl -> putref_viewLink(This,v) )
    ( (This)->lpVtbl -> get_viewLink(This,p) )
    ( (This)->lpVtbl -> put_frozen(This,v) )
    ( (This)->lpVtbl -> get_frozen(This,p) )
EXTERN_C const IID DIID_DispHTMLDefaults;
    typedef struct DispHTMLDefaultsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDefaults * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDefaults * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDefaults * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDefaults * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDefaults * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDefaults * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDefaults * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDefaultsVtbl;
    interface DispHTMLDefaults
    {
        CONST_VTBL struct DispHTMLDefaultsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDefaults;
class DECLSPEC_UUID("3050f6c8-98b5-11cf-bb82-00aa00bdce0b")
HTMLDefaults;
EXTERN_C const IID IID_IHTCDefaultDispatch;
    typedef struct IHTCDefaultDispatchVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTCDefaultDispatch * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTCDefaultDispatch * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTCDefaultDispatch * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTCDefaultDispatch * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTCDefaultDispatch * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTCDefaultDispatch * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTCDefaultDispatch * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_element )(
            __RPC__in IHTCDefaultDispatch * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                   HRESULT ( STDMETHODCALLTYPE *createEventObject )(
            __RPC__in IHTCDefaultDispatch * This,
                                __RPC__deref_out_opt IHTMLEventObj **eventObj);
                            HRESULT ( STDMETHODCALLTYPE *get_defaults )(
            __RPC__in IHTCDefaultDispatch * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_document )(
            __RPC__in IHTCDefaultDispatch * This,
                                __RPC__deref_out_opt IDispatch **p);
        END_INTERFACE
    } IHTCDefaultDispatchVtbl;
    interface IHTCDefaultDispatch
    {
        CONST_VTBL struct IHTCDefaultDispatchVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_element(This,p) )
    ( (This)->lpVtbl -> createEventObject(This,eventObj) )
    ( (This)->lpVtbl -> get_defaults(This,p) )
    ( (This)->lpVtbl -> get_document(This,p) )
EXTERN_C const IID IID_IHTCPropertyBehavior;
    typedef struct IHTCPropertyBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTCPropertyBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTCPropertyBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTCPropertyBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTCPropertyBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTCPropertyBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTCPropertyBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTCPropertyBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *fireChange )(
            __RPC__in IHTCPropertyBehavior * This);
                            HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTCPropertyBehavior * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTCPropertyBehavior * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTCPropertyBehaviorVtbl;
    interface IHTCPropertyBehavior
    {
        CONST_VTBL struct IHTCPropertyBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> fireChange(This) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
EXTERN_C const IID IID_IHTCMethodBehavior;
    typedef struct IHTCMethodBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTCMethodBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTCMethodBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTCMethodBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTCMethodBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTCMethodBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTCMethodBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTCMethodBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } IHTCMethodBehaviorVtbl;
    interface IHTCMethodBehavior
    {
        CONST_VTBL struct IHTCMethodBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTCEventBehavior;
    typedef struct IHTCEventBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTCEventBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTCEventBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTCEventBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTCEventBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTCEventBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTCEventBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTCEventBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *fire )(
            __RPC__in IHTCEventBehavior * This,
                       __RPC__in_opt IHTMLEventObj *pvar);
        END_INTERFACE
    } IHTCEventBehaviorVtbl;
    interface IHTCEventBehavior
    {
        CONST_VTBL struct IHTCEventBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> fire(This,pvar) )
EXTERN_C const IID IID_IHTCAttachBehavior;
    typedef struct IHTCAttachBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTCAttachBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTCAttachBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTCAttachBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTCAttachBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTCAttachBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTCAttachBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTCAttachBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *fireEvent )(
            __RPC__in IHTCAttachBehavior * This,
                       __RPC__in_opt IDispatch *evt);
                   HRESULT ( STDMETHODCALLTYPE *detachEvent )(
            __RPC__in IHTCAttachBehavior * This);
        END_INTERFACE
    } IHTCAttachBehaviorVtbl;
    interface IHTCAttachBehavior
    {
        CONST_VTBL struct IHTCAttachBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> fireEvent(This,evt) )
    ( (This)->lpVtbl -> detachEvent(This) )
EXTERN_C const IID IID_IHTCAttachBehavior2;
    typedef struct IHTCAttachBehavior2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTCAttachBehavior2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTCAttachBehavior2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTCAttachBehavior2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTCAttachBehavior2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTCAttachBehavior2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTCAttachBehavior2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTCAttachBehavior2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *fireEvent )(
            __RPC__in IHTCAttachBehavior2 * This,
                       VARIANT evt);
        END_INTERFACE
    } IHTCAttachBehavior2Vtbl;
    interface IHTCAttachBehavior2
    {
        CONST_VTBL struct IHTCAttachBehavior2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> fireEvent(This,evt) )
EXTERN_C const IID IID_IHTCDescBehavior;
    typedef struct IHTCDescBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTCDescBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTCDescBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTCDescBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTCDescBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTCDescBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTCDescBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTCDescBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                      HRESULT ( STDMETHODCALLTYPE *get_urn )(
            __RPC__in IHTCDescBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                                      HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTCDescBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTCDescBehaviorVtbl;
    interface IHTCDescBehavior
    {
        CONST_VTBL struct IHTCDescBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_urn(This,p) )
    ( (This)->lpVtbl -> get_name(This,p) )
EXTERN_C const IID DIID_DispHTCDefaultDispatch;
    typedef struct DispHTCDefaultDispatchVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTCDefaultDispatch * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTCDefaultDispatch * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTCDefaultDispatch * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTCDefaultDispatch * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTCDefaultDispatch * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTCDefaultDispatch * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTCDefaultDispatch * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTCDefaultDispatchVtbl;
    interface DispHTCDefaultDispatch
    {
        CONST_VTBL struct DispHTCDefaultDispatchVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTCDefaultDispatch;
class DECLSPEC_UUID("3050f4fc-98b5-11cf-bb82-00aa00bdce0b")
HTCDefaultDispatch;
EXTERN_C const IID DIID_DispHTCPropertyBehavior;
    typedef struct DispHTCPropertyBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTCPropertyBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTCPropertyBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTCPropertyBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTCPropertyBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTCPropertyBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTCPropertyBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTCPropertyBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTCPropertyBehaviorVtbl;
    interface DispHTCPropertyBehavior
    {
        CONST_VTBL struct DispHTCPropertyBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTCPropertyBehavior;
class DECLSPEC_UUID("3050f5de-98b5-11cf-bb82-00aa00bdce0b")
HTCPropertyBehavior;
EXTERN_C const IID DIID_DispHTCMethodBehavior;
    typedef struct DispHTCMethodBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTCMethodBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTCMethodBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTCMethodBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTCMethodBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTCMethodBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTCMethodBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTCMethodBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTCMethodBehaviorVtbl;
    interface DispHTCMethodBehavior
    {
        CONST_VTBL struct DispHTCMethodBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTCMethodBehavior;
class DECLSPEC_UUID("3050f630-98b5-11cf-bb82-00aa00bdce0b")
HTCMethodBehavior;
EXTERN_C const IID DIID_DispHTCEventBehavior;
    typedef struct DispHTCEventBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTCEventBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTCEventBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTCEventBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTCEventBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTCEventBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTCEventBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTCEventBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTCEventBehaviorVtbl;
    interface DispHTCEventBehavior
    {
        CONST_VTBL struct DispHTCEventBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTCEventBehavior;
class DECLSPEC_UUID("3050f4fe-98b5-11cf-bb82-00aa00bdce0b")
HTCEventBehavior;
EXTERN_C const IID DIID_DispHTCAttachBehavior;
    typedef struct DispHTCAttachBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTCAttachBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTCAttachBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTCAttachBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTCAttachBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTCAttachBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTCAttachBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTCAttachBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTCAttachBehaviorVtbl;
    interface DispHTCAttachBehavior
    {
        CONST_VTBL struct DispHTCAttachBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTCAttachBehavior;
class DECLSPEC_UUID("3050f5f5-98b5-11cf-bb82-00aa00bdce0b")
HTCAttachBehavior;
EXTERN_C const IID DIID_DispHTCDescBehavior;
    typedef struct DispHTCDescBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTCDescBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTCDescBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTCDescBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTCDescBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTCDescBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTCDescBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTCDescBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTCDescBehaviorVtbl;
    interface DispHTCDescBehavior
    {
        CONST_VTBL struct DispHTCDescBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTCDescBehavior;
class DECLSPEC_UUID("3050f5dd-98b5-11cf-bb82-00aa00bdce0b")
HTCDescBehavior;
EXTERN_C const IID IID_IHTMLUrnCollection;
    typedef struct IHTMLUrnCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLUrnCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLUrnCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLUrnCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLUrnCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLUrnCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLUrnCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLUrnCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLUrnCollection * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLUrnCollection * This,
                       long index,
                                __RPC__deref_out_opt BSTR *ppUrn);
        END_INTERFACE
    } IHTMLUrnCollectionVtbl;
    interface IHTMLUrnCollection
    {
        CONST_VTBL struct IHTMLUrnCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> item(This,index,ppUrn) )
EXTERN_C const IID DIID_DispHTMLUrnCollection;
    typedef struct DispHTMLUrnCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLUrnCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLUrnCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLUrnCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLUrnCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLUrnCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLUrnCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLUrnCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLUrnCollectionVtbl;
    interface DispHTMLUrnCollection
    {
        CONST_VTBL struct DispHTMLUrnCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLUrnCollection;
class DECLSPEC_UUID("3050f580-98b5-11cf-bb82-00aa00bdce0b")
HTMLUrnCollection;
EXTERN_C const IID IID_IHTMLGenericElement;
    typedef struct IHTMLGenericElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLGenericElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLGenericElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLGenericElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLGenericElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLGenericElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLGenericElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLGenericElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *get_recordset )(
            __RPC__in IHTMLGenericElement * This,
                                __RPC__deref_out_opt IDispatch **p);
                   HRESULT ( STDMETHODCALLTYPE *namedRecordset )(
            __RPC__in IHTMLGenericElement * This,
                       __RPC__in BSTR dataMember,
                                 __RPC__in VARIANT *hierarchy,
                                __RPC__deref_out_opt IDispatch **ppRecordset);
        END_INTERFACE
    } IHTMLGenericElementVtbl;
    interface IHTMLGenericElement
    {
        CONST_VTBL struct IHTMLGenericElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_recordset(This,p) )
    ( (This)->lpVtbl -> namedRecordset(This,dataMember,hierarchy,ppRecordset) )
EXTERN_C const IID DIID_DispHTMLGenericElement;
    typedef struct DispHTMLGenericElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLGenericElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLGenericElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLGenericElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLGenericElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLGenericElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLGenericElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLGenericElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLGenericElementVtbl;
    interface DispHTMLGenericElement
    {
        CONST_VTBL struct DispHTMLGenericElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLGenericElement;
class DECLSPEC_UUID("3050f4b8-98b5-11cf-bb82-00aa00bdce0b")
HTMLGenericElement;
EXTERN_C const IID IID_IHTMLStyleSheetRuleApplied;
    typedef struct IHTMLStyleSheetRuleAppliedVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheetRuleApplied * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheetRuleApplied * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheetRuleApplied * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheetRuleApplied * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheetRuleApplied * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheetRuleApplied * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheetRuleApplied * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                        HRESULT ( STDMETHODCALLTYPE *get_msSpecificity )(
            __RPC__in IHTMLStyleSheetRuleApplied * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *msGetSpecificity )(
            __RPC__in IHTMLStyleSheetRuleApplied * This,
                       long index,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLStyleSheetRuleAppliedVtbl;
    interface IHTMLStyleSheetRuleApplied
    {
        CONST_VTBL struct IHTMLStyleSheetRuleAppliedVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_msSpecificity(This,p) )
    ( (This)->lpVtbl -> msGetSpecificity(This,index,p) )
EXTERN_C const IID IID_IHTMLStyleSheetRule2;
    typedef struct IHTMLStyleSheetRule2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheetRule2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheetRule2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheetRule2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheetRule2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheetRule2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheetRule2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheetRule2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_selectorText )(
            __RPC__in IHTMLStyleSheetRule2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectorText )(
            __RPC__in IHTMLStyleSheetRule2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLStyleSheetRule2Vtbl;
    interface IHTMLStyleSheetRule2
    {
        CONST_VTBL struct IHTMLStyleSheetRule2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_selectorText(This,v) )
    ( (This)->lpVtbl -> get_selectorText(This,p) )
EXTERN_C const IID IID_IHTMLStyleSheetRulesCollection2;
    typedef struct IHTMLStyleSheetRulesCollection2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheetRulesCollection2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheetRulesCollection2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheetRulesCollection2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheetRulesCollection2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheetRulesCollection2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheetRulesCollection2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheetRulesCollection2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLStyleSheetRulesCollection2 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLStyleSheetRulesCollection2 * This,
                       long index,
                                __RPC__deref_out_opt IHTMLCSSRule **ppHTMLCSSRule);
        END_INTERFACE
    } IHTMLStyleSheetRulesCollection2Vtbl;
    interface IHTMLStyleSheetRulesCollection2
    {
        CONST_VTBL struct IHTMLStyleSheetRulesCollection2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> item(This,index,ppHTMLCSSRule) )
EXTERN_C const IID DIID_DispHTMLStyleSheetRule;
    typedef struct DispHTMLStyleSheetRuleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStyleSheetRule * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStyleSheetRule * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStyleSheetRule * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStyleSheetRule * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStyleSheetRule * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStyleSheetRule * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStyleSheetRule * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStyleSheetRuleVtbl;
    interface DispHTMLStyleSheetRule
    {
        CONST_VTBL struct DispHTMLStyleSheetRuleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStyleSheetRule;
class DECLSPEC_UUID("3050f3ce-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheetRule;
EXTERN_C const IID DIID_DispHTMLStyleSheetRulesCollection;
    typedef struct DispHTMLStyleSheetRulesCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStyleSheetRulesCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStyleSheetRulesCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStyleSheetRulesCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStyleSheetRulesCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStyleSheetRulesCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStyleSheetRulesCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStyleSheetRulesCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStyleSheetRulesCollectionVtbl;
    interface DispHTMLStyleSheetRulesCollection
    {
        CONST_VTBL struct DispHTMLStyleSheetRulesCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStyleSheetRulesCollection;
class DECLSPEC_UUID("3050f3cd-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheetRulesCollection;
EXTERN_C const IID IID_IHTMLStyleSheetPage;
    typedef struct IHTMLStyleSheetPageVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheetPage * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheetPage * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheetPage * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheetPage * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheetPage * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheetPage * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheetPage * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_selector )(
            __RPC__in IHTMLStyleSheetPage * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pseudoClass )(
            __RPC__in IHTMLStyleSheetPage * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLStyleSheetPageVtbl;
    interface IHTMLStyleSheetPage
    {
        CONST_VTBL struct IHTMLStyleSheetPageVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_selector(This,p) )
    ( (This)->lpVtbl -> get_pseudoClass(This,p) )
EXTERN_C const IID IID_IHTMLStyleSheetPage2;
    typedef struct IHTMLStyleSheetPage2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheetPage2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheetPage2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheetPage2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheetPage2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheetPage2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheetPage2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheetPage2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_selectorText )(
            __RPC__in IHTMLStyleSheetPage2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectorText )(
            __RPC__in IHTMLStyleSheetPage2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                          HRESULT ( STDMETHODCALLTYPE *get_style )(
            __RPC__in IHTMLStyleSheetPage2 * This,
                                __RPC__deref_out_opt IHTMLRuleStyle **p);
        END_INTERFACE
    } IHTMLStyleSheetPage2Vtbl;
    interface IHTMLStyleSheetPage2
    {
        CONST_VTBL struct IHTMLStyleSheetPage2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_selectorText(This,v) )
    ( (This)->lpVtbl -> get_selectorText(This,p) )
    ( (This)->lpVtbl -> get_style(This,p) )
EXTERN_C const IID IID_IHTMLStyleSheetPagesCollection;
    typedef struct IHTMLStyleSheetPagesCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheetPagesCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheetPagesCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheetPagesCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheetPagesCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheetPagesCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheetPagesCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheetPagesCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLStyleSheetPagesCollection * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLStyleSheetPagesCollection * This,
                       long index,
                                __RPC__deref_out_opt IHTMLStyleSheetPage **ppHTMLStyleSheetPage);
        END_INTERFACE
    } IHTMLStyleSheetPagesCollectionVtbl;
    interface IHTMLStyleSheetPagesCollection
    {
        CONST_VTBL struct IHTMLStyleSheetPagesCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> item(This,index,ppHTMLStyleSheetPage) )
EXTERN_C const IID DIID_DispHTMLStyleSheetPage;
    typedef struct DispHTMLStyleSheetPageVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStyleSheetPage * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStyleSheetPage * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStyleSheetPage * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStyleSheetPage * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStyleSheetPage * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStyleSheetPage * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStyleSheetPage * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStyleSheetPageVtbl;
    interface DispHTMLStyleSheetPage
    {
        CONST_VTBL struct DispHTMLStyleSheetPageVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStyleSheetPage;
class DECLSPEC_UUID("3050f7ef-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheetPage;
EXTERN_C const IID DIID_DispHTMLStyleSheetPagesCollection;
    typedef struct DispHTMLStyleSheetPagesCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStyleSheetPagesCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStyleSheetPagesCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStyleSheetPagesCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStyleSheetPagesCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStyleSheetPagesCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStyleSheetPagesCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStyleSheetPagesCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStyleSheetPagesCollectionVtbl;
    interface DispHTMLStyleSheetPagesCollection
    {
        CONST_VTBL struct DispHTMLStyleSheetPagesCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStyleSheetPagesCollection;
class DECLSPEC_UUID("3050f7f1-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheetPagesCollection;
EXTERN_C const IID IID_IHTMLStyleSheetsCollection;
    typedef struct IHTMLStyleSheetsCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheetsCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheetsCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheetsCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheetsCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheetsCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheetsCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheetsCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLStyleSheetsCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLStyleSheetsCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLStyleSheetsCollection * This,
                       __RPC__in VARIANT *pvarIndex,
                                __RPC__out VARIANT *pvarResult);
        END_INTERFACE
    } IHTMLStyleSheetsCollectionVtbl;
    interface IHTMLStyleSheetsCollection
    {
        CONST_VTBL struct IHTMLStyleSheetsCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,pvarIndex,pvarResult) )
EXTERN_C const IID IID_IHTMLStyleSheet2;
    typedef struct IHTMLStyleSheet2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheet2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheet2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheet2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheet2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheet2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheet2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheet2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_pages )(
            __RPC__in IHTMLStyleSheet2 * This,
                                __RPC__deref_out_opt IHTMLStyleSheetPagesCollection **p);
                   HRESULT ( STDMETHODCALLTYPE *addPageRule )(
            __RPC__in IHTMLStyleSheet2 * This,
                       __RPC__in BSTR bstrSelector,
                       __RPC__in BSTR bstrStyle,
                                     long lIndex,
                                __RPC__out long *plNewIndex);
        END_INTERFACE
    } IHTMLStyleSheet2Vtbl;
    interface IHTMLStyleSheet2
    {
        CONST_VTBL struct IHTMLStyleSheet2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_pages(This,p) )
    ( (This)->lpVtbl -> addPageRule(This,bstrSelector,bstrStyle,lIndex,plNewIndex) )
EXTERN_C const IID IID_IHTMLStyleSheet3;
    typedef struct IHTMLStyleSheet3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheet3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheet3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheet3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheet3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheet3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheet3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheet3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_href )(
            __RPC__in IHTMLStyleSheet3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLStyleSheet3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_isAlternate )(
            __RPC__in IHTMLStyleSheet3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_isPrefAlternate )(
            __RPC__in IHTMLStyleSheet3 * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLStyleSheet3Vtbl;
    interface IHTMLStyleSheet3
    {
        CONST_VTBL struct IHTMLStyleSheet3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_href(This,v) )
    ( (This)->lpVtbl -> get_href(This,p) )
    ( (This)->lpVtbl -> get_isAlternate(This,p) )
    ( (This)->lpVtbl -> get_isPrefAlternate(This,p) )
EXTERN_C const IID IID_IHTMLStyleSheet4;
    typedef struct IHTMLStyleSheet4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheet4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheet4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheet4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheet4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheet4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheet4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheet4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLStyleSheet4 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLStyleSheet4 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_title )(
            __RPC__in IHTMLStyleSheet4 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_ownerNode )(
            __RPC__in IHTMLStyleSheet4 * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_ownerRule )(
            __RPC__in IHTMLStyleSheet4 * This,
                                __RPC__deref_out_opt IHTMLCSSRule **p);
                            HRESULT ( STDMETHODCALLTYPE *get_cssRules )(
            __RPC__in IHTMLStyleSheet4 * This,
                                __RPC__deref_out_opt IHTMLStyleSheetRulesCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_media )(
            __RPC__in IHTMLStyleSheet4 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *insertRule )(
            __RPC__in IHTMLStyleSheet4 * This,
                       __RPC__in BSTR bstrRule,
                                     long lIndex,
                                __RPC__out long *plNewIndex);
                   HRESULT ( STDMETHODCALLTYPE *deleteRule )(
            __RPC__in IHTMLStyleSheet4 * This,
                                     long lIndex);
        END_INTERFACE
    } IHTMLStyleSheet4Vtbl;
    interface IHTMLStyleSheet4
    {
        CONST_VTBL struct IHTMLStyleSheet4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> get_href(This,p) )
    ( (This)->lpVtbl -> get_title(This,p) )
    ( (This)->lpVtbl -> get_ownerNode(This,p) )
    ( (This)->lpVtbl -> get_ownerRule(This,p) )
    ( (This)->lpVtbl -> get_cssRules(This,p) )
    ( (This)->lpVtbl -> get_media(This,p) )
    ( (This)->lpVtbl -> insertRule(This,bstrRule,lIndex,plNewIndex) )
    ( (This)->lpVtbl -> deleteRule(This,lIndex) )
EXTERN_C const IID DIID_DispHTMLStyleSheet;
    typedef struct DispHTMLStyleSheetVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStyleSheet * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStyleSheet * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStyleSheet * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStyleSheet * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStyleSheet * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStyleSheet * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStyleSheet * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStyleSheetVtbl;
    interface DispHTMLStyleSheet
    {
        CONST_VTBL struct DispHTMLStyleSheetVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStyleSheet;
class DECLSPEC_UUID("3050f2e4-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheet;
EXTERN_C const IID IID_IHTMLStyleSheetsCollection2;
    typedef struct IHTMLStyleSheetsCollection2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheetsCollection2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheetsCollection2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheetsCollection2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheetsCollection2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheetsCollection2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheetsCollection2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheetsCollection2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLStyleSheetsCollection2 * This,
                       long index,
                                __RPC__out VARIANT *pvarResult);
        END_INTERFACE
    } IHTMLStyleSheetsCollection2Vtbl;
    interface IHTMLStyleSheetsCollection2
    {
        CONST_VTBL struct IHTMLStyleSheetsCollection2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> item(This,index,pvarResult) )
EXTERN_C const IID DIID_DispHTMLStyleSheetsCollection;
    typedef struct DispHTMLStyleSheetsCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStyleSheetsCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStyleSheetsCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStyleSheetsCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStyleSheetsCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStyleSheetsCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStyleSheetsCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStyleSheetsCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStyleSheetsCollectionVtbl;
    interface DispHTMLStyleSheetsCollection
    {
        CONST_VTBL struct DispHTMLStyleSheetsCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStyleSheetsCollection;
class DECLSPEC_UUID("3050f37f-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleSheetsCollection;
EXTERN_C const IID DIID_HTMLLinkElementEvents2;
    typedef struct HTMLLinkElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLLinkElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLLinkElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLLinkElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLLinkElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLLinkElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLLinkElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLLinkElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLLinkElementEvents2Vtbl;
    interface HTMLLinkElementEvents2
    {
        CONST_VTBL struct HTMLLinkElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLLinkElementEvents;
    typedef struct HTMLLinkElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLLinkElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLLinkElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLLinkElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLLinkElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLLinkElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLLinkElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLLinkElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLLinkElementEventsVtbl;
    interface HTMLLinkElementEvents
    {
        CONST_VTBL struct HTMLLinkElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLLinkElement;
    typedef struct IHTMLLinkElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLLinkElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLLinkElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLLinkElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLLinkElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLLinkElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLLinkElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLLinkElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_href )(
            __RPC__in IHTMLLinkElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLLinkElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rel )(
            __RPC__in IHTMLLinkElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rel )(
            __RPC__in IHTMLLinkElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rev )(
            __RPC__in IHTMLLinkElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rev )(
            __RPC__in IHTMLLinkElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLLinkElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLLinkElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLLinkElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )(
            __RPC__in IHTMLLinkElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )(
            __RPC__in IHTMLLinkElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLLinkElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLLinkElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLLinkElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLLinkElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_styleSheet )(
            __RPC__in IHTMLLinkElement * This,
                                __RPC__deref_out_opt IHTMLStyleSheet **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLLinkElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLLinkElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_media )(
            __RPC__in IHTMLLinkElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_media )(
            __RPC__in IHTMLLinkElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLLinkElementVtbl;
    interface IHTMLLinkElement
    {
        CONST_VTBL struct IHTMLLinkElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_href(This,v) )
    ( (This)->lpVtbl -> get_href(This,p) )
    ( (This)->lpVtbl -> put_rel(This,v) )
    ( (This)->lpVtbl -> get_rel(This,p) )
    ( (This)->lpVtbl -> put_rev(This,v) )
    ( (This)->lpVtbl -> get_rev(This,p) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> put_onreadystatechange(This,v) )
    ( (This)->lpVtbl -> get_onreadystatechange(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> get_styleSheet(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> put_media(This,v) )
    ( (This)->lpVtbl -> get_media(This,p) )
EXTERN_C const IID IID_IHTMLLinkElement2;
    typedef struct IHTMLLinkElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLLinkElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLLinkElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLLinkElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLLinkElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLLinkElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLLinkElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLLinkElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_target )(
            __RPC__in IHTMLLinkElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_target )(
            __RPC__in IHTMLLinkElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLLinkElement2Vtbl;
    interface IHTMLLinkElement2
    {
        CONST_VTBL struct IHTMLLinkElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_target(This,v) )
    ( (This)->lpVtbl -> get_target(This,p) )
EXTERN_C const IID IID_IHTMLLinkElement3;
    typedef struct IHTMLLinkElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLLinkElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLLinkElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLLinkElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLLinkElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLLinkElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLLinkElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLLinkElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_charset )(
            __RPC__in IHTMLLinkElement3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_charset )(
            __RPC__in IHTMLLinkElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_hreflang )(
            __RPC__in IHTMLLinkElement3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_hreflang )(
            __RPC__in IHTMLLinkElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLLinkElement3Vtbl;
    interface IHTMLLinkElement3
    {
        CONST_VTBL struct IHTMLLinkElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_charset(This,v) )
    ( (This)->lpVtbl -> get_charset(This,p) )
    ( (This)->lpVtbl -> put_hreflang(This,v) )
    ( (This)->lpVtbl -> get_hreflang(This,p) )
EXTERN_C const IID IID_IHTMLLinkElement4;
    typedef struct IHTMLLinkElement4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLLinkElement4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLLinkElement4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLLinkElement4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLLinkElement4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLLinkElement4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLLinkElement4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLLinkElement4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_href )(
            __RPC__in IHTMLLinkElement4 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLLinkElement4 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLLinkElement4Vtbl;
    interface IHTMLLinkElement4
    {
        CONST_VTBL struct IHTMLLinkElement4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_href(This,v) )
    ( (This)->lpVtbl -> get_href(This,p) )
EXTERN_C const IID IID_IHTMLLinkElement5;
    typedef struct IHTMLLinkElement5Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLLinkElement5 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLLinkElement5 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLLinkElement5 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLLinkElement5 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLLinkElement5 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLLinkElement5 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLLinkElement5 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_sheet )(
            __RPC__in IHTMLLinkElement5 * This,
                                __RPC__deref_out_opt IHTMLStyleSheet **p);
        END_INTERFACE
    } IHTMLLinkElement5Vtbl;
    interface IHTMLLinkElement5
    {
        CONST_VTBL struct IHTMLLinkElement5Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_sheet(This,p) )
EXTERN_C const IID DIID_DispHTMLLinkElement;
    typedef struct DispHTMLLinkElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLLinkElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLLinkElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLLinkElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLLinkElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLLinkElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLLinkElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLLinkElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLLinkElementVtbl;
    interface DispHTMLLinkElement
    {
        CONST_VTBL struct DispHTMLLinkElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLLinkElement;
class DECLSPEC_UUID("3050f277-98b5-11cf-bb82-00aa00bdce0b")
HTMLLinkElement;
EXTERN_C const IID IID_IHTMLTxtRange;
    typedef struct IHTMLTxtRangeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTxtRange * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTxtRange * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTxtRange * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTxtRange * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTxtRange * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_htmlText )(
            __RPC__in IHTMLTxtRange * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_text )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_text )(
            __RPC__in IHTMLTxtRange * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *parentElement )(
            __RPC__in IHTMLTxtRange * This,
                                __RPC__deref_out_opt IHTMLElement **parent);
                   HRESULT ( STDMETHODCALLTYPE *duplicate )(
            __RPC__in IHTMLTxtRange * This,
                                __RPC__deref_out_opt IHTMLTxtRange **Duplicate);
                   HRESULT ( STDMETHODCALLTYPE *inRange )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in_opt IHTMLTxtRange *Range,
                                __RPC__out VARIANT_BOOL *InRange);
                   HRESULT ( STDMETHODCALLTYPE *isEqual )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in_opt IHTMLTxtRange *Range,
                                __RPC__out VARIANT_BOOL *IsEqual);
                   HRESULT ( STDMETHODCALLTYPE *scrollIntoView )(
            __RPC__in IHTMLTxtRange * This,
                                     VARIANT_BOOL fStart);
                   HRESULT ( STDMETHODCALLTYPE *collapse )(
            __RPC__in IHTMLTxtRange * This,
                                     VARIANT_BOOL Start);
                   HRESULT ( STDMETHODCALLTYPE *expand )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR Unit,
                                __RPC__out VARIANT_BOOL *Success);
                   HRESULT ( STDMETHODCALLTYPE *move )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR Unit,
                                     long Count,
                                __RPC__out long *ActualCount);
                   HRESULT ( STDMETHODCALLTYPE *moveStart )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR Unit,
                                     long Count,
                                __RPC__out long *ActualCount);
                   HRESULT ( STDMETHODCALLTYPE *moveEnd )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR Unit,
                                     long Count,
                                __RPC__out long *ActualCount);
                   HRESULT ( STDMETHODCALLTYPE *select )(
            __RPC__in IHTMLTxtRange * This);
                   HRESULT ( STDMETHODCALLTYPE *pasteHTML )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR html);
                   HRESULT ( STDMETHODCALLTYPE *moveToElementText )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in_opt IHTMLElement *element);
                   HRESULT ( STDMETHODCALLTYPE *setEndPoint )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR how,
                       __RPC__in_opt IHTMLTxtRange *SourceRange);
                   HRESULT ( STDMETHODCALLTYPE *compareEndPoints )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR how,
                       __RPC__in_opt IHTMLTxtRange *SourceRange,
                                __RPC__out long *ret);
                   HRESULT ( STDMETHODCALLTYPE *findText )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR String,
                                     long count,
                                     long Flags,
                                __RPC__out VARIANT_BOOL *Success);
                   HRESULT ( STDMETHODCALLTYPE *moveToPoint )(
            __RPC__in IHTMLTxtRange * This,
                       long x,
                       long y);
                   HRESULT ( STDMETHODCALLTYPE *getBookmark )(
            __RPC__in IHTMLTxtRange * This,
                                __RPC__deref_out_opt BSTR *Boolmark);
                   HRESULT ( STDMETHODCALLTYPE *moveToBookmark )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR Bookmark,
                                __RPC__out VARIANT_BOOL *Success);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandSupported )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandEnabled )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandState )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandIndeterm )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandText )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__deref_out_opt BSTR *pcmdText);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandValue )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT *pcmdValue);
                   HRESULT ( STDMETHODCALLTYPE *execCommand )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR cmdID,
                                     VARIANT_BOOL showUI,
                                 VARIANT value,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *execCommandShowHelp )(
            __RPC__in IHTMLTxtRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
        END_INTERFACE
    } IHTMLTxtRangeVtbl;
    interface IHTMLTxtRange
    {
        CONST_VTBL struct IHTMLTxtRangeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_htmlText(This,p) )
    ( (This)->lpVtbl -> put_text(This,v) )
    ( (This)->lpVtbl -> get_text(This,p) )
    ( (This)->lpVtbl -> parentElement(This,parent) )
    ( (This)->lpVtbl -> duplicate(This,Duplicate) )
    ( (This)->lpVtbl -> inRange(This,Range,InRange) )
    ( (This)->lpVtbl -> isEqual(This,Range,IsEqual) )
    ( (This)->lpVtbl -> scrollIntoView(This,fStart) )
    ( (This)->lpVtbl -> collapse(This,Start) )
    ( (This)->lpVtbl -> expand(This,Unit,Success) )
    ( (This)->lpVtbl -> move(This,Unit,Count,ActualCount) )
    ( (This)->lpVtbl -> moveStart(This,Unit,Count,ActualCount) )
    ( (This)->lpVtbl -> moveEnd(This,Unit,Count,ActualCount) )
    ( (This)->lpVtbl -> select(This) )
    ( (This)->lpVtbl -> pasteHTML(This,html) )
    ( (This)->lpVtbl -> moveToElementText(This,element) )
    ( (This)->lpVtbl -> setEndPoint(This,how,SourceRange) )
    ( (This)->lpVtbl -> compareEndPoints(This,how,SourceRange,ret) )
    ( (This)->lpVtbl -> findText(This,String,count,Flags,Success) )
    ( (This)->lpVtbl -> moveToPoint(This,x,y) )
    ( (This)->lpVtbl -> getBookmark(This,Boolmark) )
    ( (This)->lpVtbl -> moveToBookmark(This,Bookmark,Success) )
    ( (This)->lpVtbl -> queryCommandSupported(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandEnabled(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandState(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandIndeterm(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandText(This,cmdID,pcmdText) )
    ( (This)->lpVtbl -> queryCommandValue(This,cmdID,pcmdValue) )
    ( (This)->lpVtbl -> execCommand(This,cmdID,showUI,value,pfRet) )
    ( (This)->lpVtbl -> execCommandShowHelp(This,cmdID,pfRet) )
EXTERN_C const IID IID_IHTMLTextRangeMetrics;
    typedef struct IHTMLTextRangeMetricsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTextRangeMetrics * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTextRangeMetrics * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTextRangeMetrics * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTextRangeMetrics * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTextRangeMetrics * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTextRangeMetrics * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTextRangeMetrics * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetTop )(
            __RPC__in IHTMLTextRangeMetrics * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetLeft )(
            __RPC__in IHTMLTextRangeMetrics * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_boundingTop )(
            __RPC__in IHTMLTextRangeMetrics * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_boundingLeft )(
            __RPC__in IHTMLTextRangeMetrics * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_boundingWidth )(
            __RPC__in IHTMLTextRangeMetrics * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_boundingHeight )(
            __RPC__in IHTMLTextRangeMetrics * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLTextRangeMetricsVtbl;
    interface IHTMLTextRangeMetrics
    {
        CONST_VTBL struct IHTMLTextRangeMetricsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_offsetTop(This,p) )
    ( (This)->lpVtbl -> get_offsetLeft(This,p) )
    ( (This)->lpVtbl -> get_boundingTop(This,p) )
    ( (This)->lpVtbl -> get_boundingLeft(This,p) )
    ( (This)->lpVtbl -> get_boundingWidth(This,p) )
    ( (This)->lpVtbl -> get_boundingHeight(This,p) )
EXTERN_C const IID IID_IHTMLTextRangeMetrics2;
    typedef struct IHTMLTextRangeMetrics2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTextRangeMetrics2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTextRangeMetrics2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTextRangeMetrics2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTextRangeMetrics2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTextRangeMetrics2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTextRangeMetrics2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTextRangeMetrics2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *getClientRects )(
            __RPC__in IHTMLTextRangeMetrics2 * This,
                                __RPC__deref_out_opt IHTMLRectCollection **pRectCol);
                   HRESULT ( STDMETHODCALLTYPE *getBoundingClientRect )(
            __RPC__in IHTMLTextRangeMetrics2 * This,
                                __RPC__deref_out_opt IHTMLRect **pRect);
        END_INTERFACE
    } IHTMLTextRangeMetrics2Vtbl;
    interface IHTMLTextRangeMetrics2
    {
        CONST_VTBL struct IHTMLTextRangeMetrics2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> getClientRects(This,pRectCol) )
    ( (This)->lpVtbl -> getBoundingClientRect(This,pRect) )
EXTERN_C const IID IID_IHTMLTxtRangeCollection;
    typedef struct IHTMLTxtRangeCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTxtRangeCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTxtRangeCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTxtRangeCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTxtRangeCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTxtRangeCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTxtRangeCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTxtRangeCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLTxtRangeCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLTxtRangeCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLTxtRangeCollection * This,
                       __RPC__in VARIANT *pvarIndex,
                                __RPC__out VARIANT *pvarResult);
        END_INTERFACE
    } IHTMLTxtRangeCollectionVtbl;
    interface IHTMLTxtRangeCollection
    {
        CONST_VTBL struct IHTMLTxtRangeCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,pvarIndex,pvarResult) )
EXTERN_C const IID IID_IHTMLDOMRange;
    typedef struct IHTMLDOMRangeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMRange * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMRange * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMRange * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMRange * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMRange * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_startContainer )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_startOffset )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_endContainer )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_endOffset )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_collapsed )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_commonAncestorContainer )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                   HRESULT ( STDMETHODCALLTYPE *setStart )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in_opt IDispatch *refNode,
                       long offset);
                   HRESULT ( STDMETHODCALLTYPE *setEnd )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in_opt IDispatch *refNode,
                       long offset);
                   HRESULT ( STDMETHODCALLTYPE *setStartBefore )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in_opt IDispatch *refNode);
                   HRESULT ( STDMETHODCALLTYPE *setStartAfter )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in_opt IDispatch *refNode);
                   HRESULT ( STDMETHODCALLTYPE *setEndBefore )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in_opt IDispatch *refNode);
                   HRESULT ( STDMETHODCALLTYPE *setEndAfter )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in_opt IDispatch *refNode);
                   HRESULT ( STDMETHODCALLTYPE *collapse )(
            __RPC__in IHTMLDOMRange * This,
                       VARIANT_BOOL toStart);
                   HRESULT ( STDMETHODCALLTYPE *selectNode )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in_opt IDispatch *refNode);
                   HRESULT ( STDMETHODCALLTYPE *selectNodeContents )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in_opt IDispatch *refNode);
                   HRESULT ( STDMETHODCALLTYPE *compareBoundaryPoints )(
            __RPC__in IHTMLDOMRange * This,
                       short how,
                       __RPC__in_opt IDispatch *sourceRange,
                                __RPC__out long *compareResult);
                   HRESULT ( STDMETHODCALLTYPE *deleteContents )(
            __RPC__in IHTMLDOMRange * This);
                   HRESULT ( STDMETHODCALLTYPE *extractContents )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__deref_out_opt IDispatch **ppDocumentFragment);
                   HRESULT ( STDMETHODCALLTYPE *cloneContents )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__deref_out_opt IDispatch **ppDocumentFragment);
                   HRESULT ( STDMETHODCALLTYPE *insertNode )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in_opt IDispatch *newNode);
                   HRESULT ( STDMETHODCALLTYPE *surroundContents )(
            __RPC__in IHTMLDOMRange * This,
                       __RPC__in_opt IDispatch *newParent);
                   HRESULT ( STDMETHODCALLTYPE *cloneRange )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__deref_out_opt IHTMLDOMRange **ppClonedRange);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__deref_out_opt BSTR *pRangeString);
                   HRESULT ( STDMETHODCALLTYPE *detach )(
            __RPC__in IHTMLDOMRange * This);
                   HRESULT ( STDMETHODCALLTYPE *getClientRects )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__deref_out_opt IHTMLRectCollection **ppRectCol);
                   HRESULT ( STDMETHODCALLTYPE *getBoundingClientRect )(
            __RPC__in IHTMLDOMRange * This,
                                __RPC__deref_out_opt IHTMLRect **ppRect);
        END_INTERFACE
    } IHTMLDOMRangeVtbl;
    interface IHTMLDOMRange
    {
        CONST_VTBL struct IHTMLDOMRangeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_startContainer(This,p) )
    ( (This)->lpVtbl -> get_startOffset(This,p) )
    ( (This)->lpVtbl -> get_endContainer(This,p) )
    ( (This)->lpVtbl -> get_endOffset(This,p) )
    ( (This)->lpVtbl -> get_collapsed(This,p) )
    ( (This)->lpVtbl -> get_commonAncestorContainer(This,p) )
    ( (This)->lpVtbl -> setStart(This,refNode,offset) )
    ( (This)->lpVtbl -> setEnd(This,refNode,offset) )
    ( (This)->lpVtbl -> setStartBefore(This,refNode) )
    ( (This)->lpVtbl -> setStartAfter(This,refNode) )
    ( (This)->lpVtbl -> setEndBefore(This,refNode) )
    ( (This)->lpVtbl -> setEndAfter(This,refNode) )
    ( (This)->lpVtbl -> collapse(This,toStart) )
    ( (This)->lpVtbl -> selectNode(This,refNode) )
    ( (This)->lpVtbl -> selectNodeContents(This,refNode) )
    ( (This)->lpVtbl -> compareBoundaryPoints(This,how,sourceRange,compareResult) )
    ( (This)->lpVtbl -> deleteContents(This) )
    ( (This)->lpVtbl -> extractContents(This,ppDocumentFragment) )
    ( (This)->lpVtbl -> cloneContents(This,ppDocumentFragment) )
    ( (This)->lpVtbl -> insertNode(This,newNode) )
    ( (This)->lpVtbl -> surroundContents(This,newParent) )
    ( (This)->lpVtbl -> cloneRange(This,ppClonedRange) )
    ( (This)->lpVtbl -> toString(This,pRangeString) )
    ( (This)->lpVtbl -> detach(This) )
    ( (This)->lpVtbl -> getClientRects(This,ppRectCol) )
    ( (This)->lpVtbl -> getBoundingClientRect(This,ppRect) )
EXTERN_C const IID DIID_DispHTMLDOMRange;
    typedef struct DispHTMLDOMRangeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDOMRange * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDOMRange * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDOMRange * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDOMRange * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDOMRange * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDOMRange * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDOMRange * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDOMRangeVtbl;
    interface DispHTMLDOMRange
    {
        CONST_VTBL struct DispHTMLDOMRangeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDOMRange;
class DECLSPEC_UUID("305106C3-98b5-11cf-bb82-00aa00bdce0b")
HTMLDOMRange;
EXTERN_C const IID DIID_HTMLFormElementEvents2;
    typedef struct HTMLFormElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLFormElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLFormElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLFormElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLFormElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLFormElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLFormElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLFormElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLFormElementEvents2Vtbl;
    interface HTMLFormElementEvents2
    {
        CONST_VTBL struct HTMLFormElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLFormElementEvents;
    typedef struct HTMLFormElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLFormElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLFormElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLFormElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLFormElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLFormElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLFormElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLFormElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLFormElementEventsVtbl;
    interface HTMLFormElementEvents
    {
        CONST_VTBL struct HTMLFormElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLFormElement;
    typedef struct IHTMLFormElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFormElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFormElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFormElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFormElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFormElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFormElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFormElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_action )(
            __RPC__in IHTMLFormElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_action )(
            __RPC__in IHTMLFormElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_dir )(
            __RPC__in IHTMLFormElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_dir )(
            __RPC__in IHTMLFormElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_encoding )(
            __RPC__in IHTMLFormElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_encoding )(
            __RPC__in IHTMLFormElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_method )(
            __RPC__in IHTMLFormElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_method )(
            __RPC__in IHTMLFormElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_elements )(
            __RPC__in IHTMLFormElement * This,
                                __RPC__deref_out_opt IDispatch **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_target )(
            __RPC__in IHTMLFormElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_target )(
            __RPC__in IHTMLFormElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLFormElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLFormElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onsubmit )(
            __RPC__in IHTMLFormElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onsubmit )(
            __RPC__in IHTMLFormElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreset )(
            __RPC__in IHTMLFormElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreset )(
            __RPC__in IHTMLFormElement * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *submit )(
            __RPC__in IHTMLFormElement * This);
                   HRESULT ( STDMETHODCALLTYPE *reset )(
            __RPC__in IHTMLFormElement * This);
                            HRESULT ( STDMETHODCALLTYPE *put_length )(
            __RPC__in IHTMLFormElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLFormElement * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLFormElement * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLFormElement * This,
                                 VARIANT name,
                                 VARIANT index,
                                __RPC__deref_out_opt IDispatch **pdisp);
                   HRESULT ( STDMETHODCALLTYPE *tags )(
            __RPC__in IHTMLFormElement * This,
                       VARIANT tagName,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLFormElementVtbl;
    interface IHTMLFormElement
    {
        CONST_VTBL struct IHTMLFormElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_action(This,v) )
    ( (This)->lpVtbl -> get_action(This,p) )
    ( (This)->lpVtbl -> put_dir(This,v) )
    ( (This)->lpVtbl -> get_dir(This,p) )
    ( (This)->lpVtbl -> put_encoding(This,v) )
    ( (This)->lpVtbl -> get_encoding(This,p) )
    ( (This)->lpVtbl -> put_method(This,v) )
    ( (This)->lpVtbl -> get_method(This,p) )
    ( (This)->lpVtbl -> get_elements(This,p) )
    ( (This)->lpVtbl -> put_target(This,v) )
    ( (This)->lpVtbl -> get_target(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_onsubmit(This,v) )
    ( (This)->lpVtbl -> get_onsubmit(This,p) )
    ( (This)->lpVtbl -> put_onreset(This,v) )
    ( (This)->lpVtbl -> get_onreset(This,p) )
    ( (This)->lpVtbl -> submit(This) )
    ( (This)->lpVtbl -> reset(This) )
    ( (This)->lpVtbl -> put_length(This,v) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,name,index,pdisp) )
    ( (This)->lpVtbl -> tags(This,tagName,pdisp) )
EXTERN_C const IID IID_IHTMLFormElement2;
    typedef struct IHTMLFormElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFormElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFormElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFormElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFormElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFormElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFormElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFormElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_acceptCharset )(
            __RPC__in IHTMLFormElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_acceptCharset )(
            __RPC__in IHTMLFormElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *urns )(
            __RPC__in IHTMLFormElement2 * This,
                       VARIANT urn,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLFormElement2Vtbl;
    interface IHTMLFormElement2
    {
        CONST_VTBL struct IHTMLFormElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_acceptCharset(This,v) )
    ( (This)->lpVtbl -> get_acceptCharset(This,p) )
    ( (This)->lpVtbl -> urns(This,urn,pdisp) )
EXTERN_C const IID IID_IHTMLFormElement3;
    typedef struct IHTMLFormElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFormElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFormElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFormElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFormElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFormElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFormElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFormElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *namedItem )(
            __RPC__in IHTMLFormElement3 * This,
                       __RPC__in BSTR name,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLFormElement3Vtbl;
    interface IHTMLFormElement3
    {
        CONST_VTBL struct IHTMLFormElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> namedItem(This,name,pdisp) )
EXTERN_C const IID IID_IHTMLSubmitData;
    typedef struct IHTMLSubmitDataVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSubmitData * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSubmitData * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSubmitData * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSubmitData * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSubmitData * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSubmitData * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSubmitData * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *appendNameValuePair )(
            __RPC__in IHTMLSubmitData * This,
                                     __RPC__in BSTR name,
                                     __RPC__in BSTR value);
                   HRESULT ( STDMETHODCALLTYPE *appendNameFilePair )(
            __RPC__in IHTMLSubmitData * This,
                                     __RPC__in BSTR name,
                                     __RPC__in BSTR filename);
                   HRESULT ( STDMETHODCALLTYPE *appendItemSeparator )(
            __RPC__in IHTMLSubmitData * This);
        END_INTERFACE
    } IHTMLSubmitDataVtbl;
    interface IHTMLSubmitData
    {
        CONST_VTBL struct IHTMLSubmitDataVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> appendNameValuePair(This,name,value) )
    ( (This)->lpVtbl -> appendNameFilePair(This,name,filename) )
    ( (This)->lpVtbl -> appendItemSeparator(This) )
EXTERN_C const IID IID_IHTMLFormElement4;
    typedef struct IHTMLFormElement4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFormElement4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFormElement4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFormElement4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFormElement4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFormElement4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFormElement4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFormElement4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_action )(
            __RPC__in IHTMLFormElement4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_action )(
            __RPC__in IHTMLFormElement4 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLFormElement4Vtbl;
    interface IHTMLFormElement4
    {
        CONST_VTBL struct IHTMLFormElement4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_action(This,v) )
    ( (This)->lpVtbl -> get_action(This,p) )
EXTERN_C const IID DIID_DispHTMLFormElement;
    typedef struct DispHTMLFormElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLFormElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLFormElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLFormElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLFormElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLFormElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLFormElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLFormElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLFormElementVtbl;
    interface DispHTMLFormElement
    {
        CONST_VTBL struct DispHTMLFormElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLFormElement;
class DECLSPEC_UUID("3050f251-98b5-11cf-bb82-00aa00bdce0b")
HTMLFormElement;
EXTERN_C const IID DIID_HTMLControlElementEvents2;
    typedef struct HTMLControlElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLControlElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLControlElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLControlElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLControlElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLControlElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLControlElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLControlElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLControlElementEvents2Vtbl;
    interface HTMLControlElementEvents2
    {
        CONST_VTBL struct HTMLControlElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLControlElementEvents;
    typedef struct HTMLControlElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLControlElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLControlElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLControlElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLControlElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLControlElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLControlElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLControlElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLControlElementEventsVtbl;
    interface HTMLControlElementEvents
    {
        CONST_VTBL struct HTMLControlElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLControlElement;
    typedef struct IHTMLControlElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLControlElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLControlElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLControlElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLControlElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLControlElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLControlElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLControlElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_tabIndex )(
            __RPC__in IHTMLControlElement * This,
                       short v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_tabIndex )(
            __RPC__in IHTMLControlElement * This,
                                __RPC__out short *p);
                   HRESULT ( STDMETHODCALLTYPE *focus )(
            __RPC__in IHTMLControlElement * This);
                                                   HRESULT ( STDMETHODCALLTYPE *put_accessKey )(
            __RPC__in IHTMLControlElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_accessKey )(
            __RPC__in IHTMLControlElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onblur )(
            __RPC__in IHTMLControlElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onblur )(
            __RPC__in IHTMLControlElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocus )(
            __RPC__in IHTMLControlElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocus )(
            __RPC__in IHTMLControlElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onresize )(
            __RPC__in IHTMLControlElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onresize )(
            __RPC__in IHTMLControlElement * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *blur )(
            __RPC__in IHTMLControlElement * This);
                   HRESULT ( STDMETHODCALLTYPE *addFilter )(
            __RPC__in IHTMLControlElement * This,
                       __RPC__in_opt IUnknown *pUnk);
                   HRESULT ( STDMETHODCALLTYPE *removeFilter )(
            __RPC__in IHTMLControlElement * This,
                       __RPC__in_opt IUnknown *pUnk);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientHeight )(
            __RPC__in IHTMLControlElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientWidth )(
            __RPC__in IHTMLControlElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientTop )(
            __RPC__in IHTMLControlElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientLeft )(
            __RPC__in IHTMLControlElement * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLControlElementVtbl;
    interface IHTMLControlElement
    {
        CONST_VTBL struct IHTMLControlElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_tabIndex(This,v) )
    ( (This)->lpVtbl -> get_tabIndex(This,p) )
    ( (This)->lpVtbl -> focus(This) )
    ( (This)->lpVtbl -> put_accessKey(This,v) )
    ( (This)->lpVtbl -> get_accessKey(This,p) )
    ( (This)->lpVtbl -> put_onblur(This,v) )
    ( (This)->lpVtbl -> get_onblur(This,p) )
    ( (This)->lpVtbl -> put_onfocus(This,v) )
    ( (This)->lpVtbl -> get_onfocus(This,p) )
    ( (This)->lpVtbl -> put_onresize(This,v) )
    ( (This)->lpVtbl -> get_onresize(This,p) )
    ( (This)->lpVtbl -> blur(This) )
    ( (This)->lpVtbl -> addFilter(This,pUnk) )
    ( (This)->lpVtbl -> removeFilter(This,pUnk) )
    ( (This)->lpVtbl -> get_clientHeight(This,p) )
    ( (This)->lpVtbl -> get_clientWidth(This,p) )
    ( (This)->lpVtbl -> get_clientTop(This,p) )
    ( (This)->lpVtbl -> get_clientLeft(This,p) )
EXTERN_C const IID IID_IHTMLTextElement;
    typedef struct IHTMLTextElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTextElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTextElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTextElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTextElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTextElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTextElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTextElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } IHTMLTextElementVtbl;
    interface IHTMLTextElement
    {
        CONST_VTBL struct IHTMLTextElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispHTMLTextElement;
    typedef struct DispHTMLTextElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLTextElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLTextElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLTextElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLTextElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLTextElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLTextElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLTextElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLTextElementVtbl;
    interface DispHTMLTextElement
    {
        CONST_VTBL struct DispHTMLTextElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLTextElement;
class DECLSPEC_UUID("3050f26a-98b5-11cf-bb82-00aa00bdce0b")
HTMLTextElement;
EXTERN_C const IID DIID_HTMLTextContainerEvents2;
    typedef struct HTMLTextContainerEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLTextContainerEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLTextContainerEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLTextContainerEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLTextContainerEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLTextContainerEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLTextContainerEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLTextContainerEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLTextContainerEvents2Vtbl;
    interface HTMLTextContainerEvents2
    {
        CONST_VTBL struct HTMLTextContainerEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLTextContainerEvents;
    typedef struct HTMLTextContainerEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLTextContainerEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLTextContainerEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLTextContainerEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLTextContainerEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLTextContainerEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLTextContainerEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLTextContainerEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLTextContainerEventsVtbl;
    interface HTMLTextContainerEvents
    {
        CONST_VTBL struct HTMLTextContainerEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLTextContainer;
    typedef struct IHTMLTextContainerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTextContainer * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTextContainer * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTextContainer * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTextContainer * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTextContainer * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTextContainer * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTextContainer * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *createControlRange )(
            __RPC__in IHTMLTextContainer * This,
                                __RPC__deref_out_opt IDispatch **range);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollHeight )(
            __RPC__in IHTMLTextContainer * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollWidth )(
            __RPC__in IHTMLTextContainer * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollTop )(
            __RPC__in IHTMLTextContainer * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollTop )(
            __RPC__in IHTMLTextContainer * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scrollLeft )(
            __RPC__in IHTMLTextContainer * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scrollLeft )(
            __RPC__in IHTMLTextContainer * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onscroll )(
            __RPC__in IHTMLTextContainer * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onscroll )(
            __RPC__in IHTMLTextContainer * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLTextContainerVtbl;
    interface IHTMLTextContainer
    {
        CONST_VTBL struct IHTMLTextContainerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> createControlRange(This,range) )
    ( (This)->lpVtbl -> get_scrollHeight(This,p) )
    ( (This)->lpVtbl -> get_scrollWidth(This,p) )
    ( (This)->lpVtbl -> put_scrollTop(This,v) )
    ( (This)->lpVtbl -> get_scrollTop(This,p) )
    ( (This)->lpVtbl -> put_scrollLeft(This,v) )
    ( (This)->lpVtbl -> get_scrollLeft(This,p) )
    ( (This)->lpVtbl -> put_onscroll(This,v) )
    ( (This)->lpVtbl -> get_onscroll(This,p) )
EXTERN_C const IID IID_IHTMLControlRange;
    typedef struct IHTMLControlRangeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLControlRange * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLControlRange * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLControlRange * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLControlRange * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLControlRange * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLControlRange * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLControlRange * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *select )(
            __RPC__in IHTMLControlRange * This);
                   HRESULT ( STDMETHODCALLTYPE *add )(
            __RPC__in IHTMLControlRange * This,
                       __RPC__in_opt IHTMLControlElement *item);
                   HRESULT ( STDMETHODCALLTYPE *remove )(
            __RPC__in IHTMLControlRange * This,
                       long index);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLControlRange * This,
                       long index,
                                __RPC__deref_out_opt IHTMLElement **pdisp);
                   HRESULT ( STDMETHODCALLTYPE *scrollIntoView )(
            __RPC__in IHTMLControlRange * This,
                                 VARIANT varargStart);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandSupported )(
            __RPC__in IHTMLControlRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandEnabled )(
            __RPC__in IHTMLControlRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandState )(
            __RPC__in IHTMLControlRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandIndeterm )(
            __RPC__in IHTMLControlRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandText )(
            __RPC__in IHTMLControlRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__deref_out_opt BSTR *pcmdText);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandValue )(
            __RPC__in IHTMLControlRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT *pcmdValue);
                   HRESULT ( STDMETHODCALLTYPE *execCommand )(
            __RPC__in IHTMLControlRange * This,
                       __RPC__in BSTR cmdID,
                                     VARIANT_BOOL showUI,
                                 VARIANT value,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *execCommandShowHelp )(
            __RPC__in IHTMLControlRange * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *commonParentElement )(
            __RPC__in IHTMLControlRange * This,
                                __RPC__deref_out_opt IHTMLElement **parent);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLControlRange * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLControlRangeVtbl;
    interface IHTMLControlRange
    {
        CONST_VTBL struct IHTMLControlRangeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> select(This) )
    ( (This)->lpVtbl -> add(This,item) )
    ( (This)->lpVtbl -> remove(This,index) )
    ( (This)->lpVtbl -> item(This,index,pdisp) )
    ( (This)->lpVtbl -> scrollIntoView(This,varargStart) )
    ( (This)->lpVtbl -> queryCommandSupported(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandEnabled(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandState(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandIndeterm(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandText(This,cmdID,pcmdText) )
    ( (This)->lpVtbl -> queryCommandValue(This,cmdID,pcmdValue) )
    ( (This)->lpVtbl -> execCommand(This,cmdID,showUI,value,pfRet) )
    ( (This)->lpVtbl -> execCommandShowHelp(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> commonParentElement(This,parent) )
    ( (This)->lpVtbl -> get_length(This,p) )
EXTERN_C const IID IID_IHTMLControlRange2;
    typedef struct IHTMLControlRange2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLControlRange2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLControlRange2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLControlRange2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLControlRange2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLControlRange2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLControlRange2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLControlRange2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *addElement )(
            __RPC__in IHTMLControlRange2 * This,
                       __RPC__in_opt IHTMLElement *item);
        END_INTERFACE
    } IHTMLControlRange2Vtbl;
    interface IHTMLControlRange2
    {
        CONST_VTBL struct IHTMLControlRange2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> addElement(This,item) )
EXTERN_C const IID DIID_HTMLImgEvents2;
    typedef struct HTMLImgEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLImgEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLImgEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLImgEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLImgEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLImgEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLImgEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLImgEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLImgEvents2Vtbl;
    interface HTMLImgEvents2
    {
        CONST_VTBL struct HTMLImgEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLImgEvents;
    typedef struct HTMLImgEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLImgEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLImgEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLImgEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLImgEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLImgEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLImgEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLImgEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLImgEventsVtbl;
    interface HTMLImgEvents
    {
        CONST_VTBL struct HTMLImgEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLImgElement;
    typedef struct IHTMLImgElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLImgElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLImgElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLImgElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLImgElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLImgElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLImgElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLImgElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_isMap )(
            __RPC__in IHTMLImgElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_isMap )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_useMap )(
            __RPC__in IHTMLImgElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_useMap )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_mimeType )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fileSize )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fileCreatedDate )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fileModifiedDate )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fileUpdatedDate )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_protocol )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_nameProp )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_border )(
            __RPC__in IHTMLImgElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_border )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_vspace )(
            __RPC__in IHTMLImgElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_vspace )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_hspace )(
            __RPC__in IHTMLImgElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_hspace )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_alt )(
            __RPC__in IHTMLImgElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_alt )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLImgElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_lowsrc )(
            __RPC__in IHTMLImgElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lowsrc )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_vrml )(
            __RPC__in IHTMLImgElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_vrml )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_dynsrc )(
            __RPC__in IHTMLImgElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_dynsrc )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_complete )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_loop )(
            __RPC__in IHTMLImgElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_loop )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLImgElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLImgElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLImgElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onabort )(
            __RPC__in IHTMLImgElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onabort )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLImgElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLImgElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLImgElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_start )(
            __RPC__in IHTMLImgElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_start )(
            __RPC__in IHTMLImgElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLImgElementVtbl;
    interface IHTMLImgElement
    {
        CONST_VTBL struct IHTMLImgElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_isMap(This,v) )
    ( (This)->lpVtbl -> get_isMap(This,p) )
    ( (This)->lpVtbl -> put_useMap(This,v) )
    ( (This)->lpVtbl -> get_useMap(This,p) )
    ( (This)->lpVtbl -> get_mimeType(This,p) )
    ( (This)->lpVtbl -> get_fileSize(This,p) )
    ( (This)->lpVtbl -> get_fileCreatedDate(This,p) )
    ( (This)->lpVtbl -> get_fileModifiedDate(This,p) )
    ( (This)->lpVtbl -> get_fileUpdatedDate(This,p) )
    ( (This)->lpVtbl -> get_protocol(This,p) )
    ( (This)->lpVtbl -> get_href(This,p) )
    ( (This)->lpVtbl -> get_nameProp(This,p) )
    ( (This)->lpVtbl -> put_border(This,v) )
    ( (This)->lpVtbl -> get_border(This,p) )
    ( (This)->lpVtbl -> put_vspace(This,v) )
    ( (This)->lpVtbl -> get_vspace(This,p) )
    ( (This)->lpVtbl -> put_hspace(This,v) )
    ( (This)->lpVtbl -> get_hspace(This,p) )
    ( (This)->lpVtbl -> put_alt(This,v) )
    ( (This)->lpVtbl -> get_alt(This,p) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> put_lowsrc(This,v) )
    ( (This)->lpVtbl -> get_lowsrc(This,p) )
    ( (This)->lpVtbl -> put_vrml(This,v) )
    ( (This)->lpVtbl -> get_vrml(This,p) )
    ( (This)->lpVtbl -> put_dynsrc(This,v) )
    ( (This)->lpVtbl -> get_dynsrc(This,p) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> get_complete(This,p) )
    ( (This)->lpVtbl -> put_loop(This,v) )
    ( (This)->lpVtbl -> get_loop(This,p) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> put_onabort(This,v) )
    ( (This)->lpVtbl -> get_onabort(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_start(This,v) )
    ( (This)->lpVtbl -> get_start(This,p) )
EXTERN_C const IID IID_IHTMLImgElement2;
    typedef struct IHTMLImgElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLImgElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLImgElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLImgElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLImgElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLImgElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLImgElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLImgElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_longDesc )(
            __RPC__in IHTMLImgElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_longDesc )(
            __RPC__in IHTMLImgElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLImgElement2Vtbl;
    interface IHTMLImgElement2
    {
        CONST_VTBL struct IHTMLImgElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_longDesc(This,v) )
    ( (This)->lpVtbl -> get_longDesc(This,p) )
EXTERN_C const IID IID_IHTMLImgElement3;
    typedef struct IHTMLImgElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLImgElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLImgElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLImgElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLImgElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLImgElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLImgElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLImgElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_longDesc )(
            __RPC__in IHTMLImgElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_longDesc )(
            __RPC__in IHTMLImgElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_vrml )(
            __RPC__in IHTMLImgElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_vrml )(
            __RPC__in IHTMLImgElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_lowsrc )(
            __RPC__in IHTMLImgElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_lowsrc )(
            __RPC__in IHTMLImgElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_dynsrc )(
            __RPC__in IHTMLImgElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_dynsrc )(
            __RPC__in IHTMLImgElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLImgElement3Vtbl;
    interface IHTMLImgElement3
    {
        CONST_VTBL struct IHTMLImgElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_longDesc(This,v) )
    ( (This)->lpVtbl -> get_longDesc(This,p) )
    ( (This)->lpVtbl -> put_vrml(This,v) )
    ( (This)->lpVtbl -> get_vrml(This,p) )
    ( (This)->lpVtbl -> put_lowsrc(This,v) )
    ( (This)->lpVtbl -> get_lowsrc(This,p) )
    ( (This)->lpVtbl -> put_dynsrc(This,v) )
    ( (This)->lpVtbl -> get_dynsrc(This,p) )
EXTERN_C const IID IID_IHTMLImgElement4;
    typedef struct IHTMLImgElement4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLImgElement4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLImgElement4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLImgElement4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLImgElement4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLImgElement4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLImgElement4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLImgElement4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_naturalWidth )(
            __RPC__in IHTMLImgElement4 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_naturalHeight )(
            __RPC__in IHTMLImgElement4 * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLImgElement4Vtbl;
    interface IHTMLImgElement4
    {
        CONST_VTBL struct IHTMLImgElement4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_naturalWidth(This,p) )
    ( (This)->lpVtbl -> get_naturalHeight(This,p) )
EXTERN_C const IID IID_IHTMLMSImgElement;
    typedef struct IHTMLMSImgElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMSImgElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMSImgElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMSImgElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMSImgElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMSImgElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMSImgElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMSImgElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msPlayToDisabled )(
            __RPC__in IHTMLMSImgElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msPlayToDisabled )(
            __RPC__in IHTMLMSImgElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msPlayToPrimary )(
            __RPC__in IHTMLMSImgElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msPlayToPrimary )(
            __RPC__in IHTMLMSImgElement * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLMSImgElementVtbl;
    interface IHTMLMSImgElement
    {
        CONST_VTBL struct IHTMLMSImgElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_msPlayToDisabled(This,v) )
    ( (This)->lpVtbl -> get_msPlayToDisabled(This,p) )
    ( (This)->lpVtbl -> put_msPlayToPrimary(This,v) )
    ( (This)->lpVtbl -> get_msPlayToPrimary(This,p) )
EXTERN_C const IID IID_IHTMLImageElementFactory;
    typedef struct IHTMLImageElementFactoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLImageElementFactory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLImageElementFactory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLImageElementFactory * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLImageElementFactory * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLImageElementFactory * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLImageElementFactory * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLImageElementFactory * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *create )(
            __RPC__in IHTMLImageElementFactory * This,
                                 VARIANT width,
                                 VARIANT height,
                                __RPC__deref_out_opt IHTMLImgElement **__MIDL__IHTMLImageElementFactory0000);
        END_INTERFACE
    } IHTMLImageElementFactoryVtbl;
    interface IHTMLImageElementFactory
    {
        CONST_VTBL struct IHTMLImageElementFactoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> create(This,width,height,__MIDL__IHTMLImageElementFactory0000) )
EXTERN_C const IID DIID_DispHTMLImg;
    typedef struct DispHTMLImgVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLImg * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLImg * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLImg * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLImg * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLImg * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLImg * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLImg * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLImgVtbl;
    interface DispHTMLImg
    {
        CONST_VTBL struct DispHTMLImgVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLImg;
class DECLSPEC_UUID("3050f241-98b5-11cf-bb82-00aa00bdce0b")
HTMLImg;
EXTERN_C const CLSID CLSID_HTMLImageElementFactory;
class DECLSPEC_UUID("3050f38f-98b5-11cf-bb82-00aa00bdce0b")
HTMLImageElementFactory;
EXTERN_C const IID IID_IHTMLBodyElement;
    typedef struct IHTMLBodyElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBodyElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBodyElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBodyElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBodyElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBodyElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBodyElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBodyElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_background )(
            __RPC__in IHTMLBodyElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_background )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_bgProperties )(
            __RPC__in IHTMLBodyElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_bgProperties )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_leftMargin )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_leftMargin )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_topMargin )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_topMargin )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rightMargin )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rightMargin )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_bottomMargin )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_bottomMargin )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_noWrap )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_noWrap )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_bgColor )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_bgColor )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_text )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_text )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_link )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_link )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_vLink )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_vLink )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_aLink )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_aLink )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onunload )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onunload )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scroll )(
            __RPC__in IHTMLBodyElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scroll )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onselect )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onselect )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeunload )(
            __RPC__in IHTMLBodyElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeunload )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *createTextRange )(
            __RPC__in IHTMLBodyElement * This,
                                __RPC__deref_out_opt IHTMLTxtRange **range);
        END_INTERFACE
    } IHTMLBodyElementVtbl;
    interface IHTMLBodyElement
    {
        CONST_VTBL struct IHTMLBodyElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_background(This,v) )
    ( (This)->lpVtbl -> get_background(This,p) )
    ( (This)->lpVtbl -> put_bgProperties(This,v) )
    ( (This)->lpVtbl -> get_bgProperties(This,p) )
    ( (This)->lpVtbl -> put_leftMargin(This,v) )
    ( (This)->lpVtbl -> get_leftMargin(This,p) )
    ( (This)->lpVtbl -> put_topMargin(This,v) )
    ( (This)->lpVtbl -> get_topMargin(This,p) )
    ( (This)->lpVtbl -> put_rightMargin(This,v) )
    ( (This)->lpVtbl -> get_rightMargin(This,p) )
    ( (This)->lpVtbl -> put_bottomMargin(This,v) )
    ( (This)->lpVtbl -> get_bottomMargin(This,p) )
    ( (This)->lpVtbl -> put_noWrap(This,v) )
    ( (This)->lpVtbl -> get_noWrap(This,p) )
    ( (This)->lpVtbl -> put_bgColor(This,v) )
    ( (This)->lpVtbl -> get_bgColor(This,p) )
    ( (This)->lpVtbl -> put_text(This,v) )
    ( (This)->lpVtbl -> get_text(This,p) )
    ( (This)->lpVtbl -> put_link(This,v) )
    ( (This)->lpVtbl -> get_link(This,p) )
    ( (This)->lpVtbl -> put_vLink(This,v) )
    ( (This)->lpVtbl -> get_vLink(This,p) )
    ( (This)->lpVtbl -> put_aLink(This,v) )
    ( (This)->lpVtbl -> get_aLink(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> put_onunload(This,v) )
    ( (This)->lpVtbl -> get_onunload(This,p) )
    ( (This)->lpVtbl -> put_scroll(This,v) )
    ( (This)->lpVtbl -> get_scroll(This,p) )
    ( (This)->lpVtbl -> put_onselect(This,v) )
    ( (This)->lpVtbl -> get_onselect(This,p) )
    ( (This)->lpVtbl -> put_onbeforeunload(This,v) )
    ( (This)->lpVtbl -> get_onbeforeunload(This,p) )
    ( (This)->lpVtbl -> createTextRange(This,range) )
EXTERN_C const IID IID_IHTMLBodyElement2;
    typedef struct IHTMLBodyElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBodyElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBodyElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBodyElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBodyElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBodyElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBodyElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBodyElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeprint )(
            __RPC__in IHTMLBodyElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeprint )(
            __RPC__in IHTMLBodyElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onafterprint )(
            __RPC__in IHTMLBodyElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onafterprint )(
            __RPC__in IHTMLBodyElement2 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLBodyElement2Vtbl;
    interface IHTMLBodyElement2
    {
        CONST_VTBL struct IHTMLBodyElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_onbeforeprint(This,v) )
    ( (This)->lpVtbl -> get_onbeforeprint(This,p) )
    ( (This)->lpVtbl -> put_onafterprint(This,v) )
    ( (This)->lpVtbl -> get_onafterprint(This,p) )
EXTERN_C const IID IID_IHTMLBodyElement3;
    typedef struct IHTMLBodyElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBodyElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBodyElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBodyElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBodyElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBodyElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBodyElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBodyElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_background )(
            __RPC__in IHTMLBodyElement3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_background )(
            __RPC__in IHTMLBodyElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ononline )(
            __RPC__in IHTMLBodyElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ononline )(
            __RPC__in IHTMLBodyElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onoffline )(
            __RPC__in IHTMLBodyElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onoffline )(
            __RPC__in IHTMLBodyElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onhashchange )(
            __RPC__in IHTMLBodyElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onhashchange )(
            __RPC__in IHTMLBodyElement3 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLBodyElement3Vtbl;
    interface IHTMLBodyElement3
    {
        CONST_VTBL struct IHTMLBodyElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_background(This,v) )
    ( (This)->lpVtbl -> get_background(This,p) )
    ( (This)->lpVtbl -> put_ononline(This,v) )
    ( (This)->lpVtbl -> get_ononline(This,p) )
    ( (This)->lpVtbl -> put_onoffline(This,v) )
    ( (This)->lpVtbl -> get_onoffline(This,p) )
    ( (This)->lpVtbl -> put_onhashchange(This,v) )
    ( (This)->lpVtbl -> get_onhashchange(This,p) )
EXTERN_C const IID IID_IHTMLBodyElement4;
    typedef struct IHTMLBodyElement4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBodyElement4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBodyElement4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBodyElement4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBodyElement4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBodyElement4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBodyElement4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBodyElement4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmessage )(
            __RPC__in IHTMLBodyElement4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmessage )(
            __RPC__in IHTMLBodyElement4 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onstorage )(
            __RPC__in IHTMLBodyElement4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onstorage )(
            __RPC__in IHTMLBodyElement4 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLBodyElement4Vtbl;
    interface IHTMLBodyElement4
    {
        CONST_VTBL struct IHTMLBodyElement4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_onmessage(This,v) )
    ( (This)->lpVtbl -> get_onmessage(This,p) )
    ( (This)->lpVtbl -> put_onstorage(This,v) )
    ( (This)->lpVtbl -> get_onstorage(This,p) )
EXTERN_C const IID IID_IHTMLBodyElement5;
    typedef struct IHTMLBodyElement5Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBodyElement5 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBodyElement5 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBodyElement5 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBodyElement5 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBodyElement5 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBodyElement5 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBodyElement5 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onpopstate )(
            __RPC__in IHTMLBodyElement5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onpopstate )(
            __RPC__in IHTMLBodyElement5 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLBodyElement5Vtbl;
    interface IHTMLBodyElement5
    {
        CONST_VTBL struct IHTMLBodyElement5Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_onpopstate(This,v) )
    ( (This)->lpVtbl -> get_onpopstate(This,p) )
EXTERN_C const IID DIID_DispHTMLBody;
    typedef struct DispHTMLBodyVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLBody * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLBody * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLBody * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLBody * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLBody * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLBody * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLBody * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLBodyVtbl;
    interface DispHTMLBody
    {
        CONST_VTBL struct DispHTMLBodyVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLBody;
class DECLSPEC_UUID("3050f24a-98b5-11cf-bb82-00aa00bdce0b")
HTMLBody;
EXTERN_C const IID IID_IHTMLFontElement;
    typedef struct IHTMLFontElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFontElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFontElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFontElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFontElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFontElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFontElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFontElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_color )(
            __RPC__in IHTMLFontElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_color )(
            __RPC__in IHTMLFontElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_face )(
            __RPC__in IHTMLFontElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_face )(
            __RPC__in IHTMLFontElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_size )(
            __RPC__in IHTMLFontElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_size )(
            __RPC__in IHTMLFontElement * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLFontElementVtbl;
    interface IHTMLFontElement
    {
        CONST_VTBL struct IHTMLFontElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_color(This,v) )
    ( (This)->lpVtbl -> get_color(This,p) )
    ( (This)->lpVtbl -> put_face(This,v) )
    ( (This)->lpVtbl -> get_face(This,p) )
    ( (This)->lpVtbl -> put_size(This,v) )
    ( (This)->lpVtbl -> get_size(This,p) )
EXTERN_C const IID DIID_DispHTMLFontElement;
    typedef struct DispHTMLFontElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLFontElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLFontElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLFontElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLFontElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLFontElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLFontElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLFontElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLFontElementVtbl;
    interface DispHTMLFontElement
    {
        CONST_VTBL struct DispHTMLFontElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLFontElement;
class DECLSPEC_UUID("3050f27b-98b5-11cf-bb82-00aa00bdce0b")
HTMLFontElement;
EXTERN_C const IID DIID_HTMLAnchorEvents2;
    typedef struct HTMLAnchorEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLAnchorEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLAnchorEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLAnchorEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLAnchorEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLAnchorEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLAnchorEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLAnchorEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLAnchorEvents2Vtbl;
    interface HTMLAnchorEvents2
    {
        CONST_VTBL struct HTMLAnchorEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLAnchorEvents;
    typedef struct HTMLAnchorEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLAnchorEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLAnchorEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLAnchorEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLAnchorEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLAnchorEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLAnchorEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLAnchorEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLAnchorEventsVtbl;
    interface HTMLAnchorEvents
    {
        CONST_VTBL struct HTMLAnchorEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLAnchorElement;
    typedef struct IHTMLAnchorElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAnchorElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAnchorElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAnchorElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAnchorElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAnchorElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_href )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_target )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_target )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rel )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rel )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rev )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rev )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_urn )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_urn )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_Methods )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_Methods )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_host )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_host )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_hostname )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_hostname )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_pathname )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_pathname )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_port )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_port )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_protocol )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_protocol )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_search )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_search )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_hash )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_hash )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onblur )(
            __RPC__in IHTMLAnchorElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onblur )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocus )(
            __RPC__in IHTMLAnchorElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocus )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_accessKey )(
            __RPC__in IHTMLAnchorElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_accessKey )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_protocolLong )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_mimeType )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_nameProp )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_tabIndex )(
            __RPC__in IHTMLAnchorElement * This,
                       short v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_tabIndex )(
            __RPC__in IHTMLAnchorElement * This,
                                __RPC__out short *p);
                   HRESULT ( STDMETHODCALLTYPE *focus )(
            __RPC__in IHTMLAnchorElement * This);
                   HRESULT ( STDMETHODCALLTYPE *blur )(
            __RPC__in IHTMLAnchorElement * This);
        END_INTERFACE
    } IHTMLAnchorElementVtbl;
    interface IHTMLAnchorElement
    {
        CONST_VTBL struct IHTMLAnchorElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_href(This,v) )
    ( (This)->lpVtbl -> get_href(This,p) )
    ( (This)->lpVtbl -> put_target(This,v) )
    ( (This)->lpVtbl -> get_target(This,p) )
    ( (This)->lpVtbl -> put_rel(This,v) )
    ( (This)->lpVtbl -> get_rel(This,p) )
    ( (This)->lpVtbl -> put_rev(This,v) )
    ( (This)->lpVtbl -> get_rev(This,p) )
    ( (This)->lpVtbl -> put_urn(This,v) )
    ( (This)->lpVtbl -> get_urn(This,p) )
    ( (This)->lpVtbl -> put_Methods(This,v) )
    ( (This)->lpVtbl -> get_Methods(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_host(This,v) )
    ( (This)->lpVtbl -> get_host(This,p) )
    ( (This)->lpVtbl -> put_hostname(This,v) )
    ( (This)->lpVtbl -> get_hostname(This,p) )
    ( (This)->lpVtbl -> put_pathname(This,v) )
    ( (This)->lpVtbl -> get_pathname(This,p) )
    ( (This)->lpVtbl -> put_port(This,v) )
    ( (This)->lpVtbl -> get_port(This,p) )
    ( (This)->lpVtbl -> put_protocol(This,v) )
    ( (This)->lpVtbl -> get_protocol(This,p) )
    ( (This)->lpVtbl -> put_search(This,v) )
    ( (This)->lpVtbl -> get_search(This,p) )
    ( (This)->lpVtbl -> put_hash(This,v) )
    ( (This)->lpVtbl -> get_hash(This,p) )
    ( (This)->lpVtbl -> put_onblur(This,v) )
    ( (This)->lpVtbl -> get_onblur(This,p) )
    ( (This)->lpVtbl -> put_onfocus(This,v) )
    ( (This)->lpVtbl -> get_onfocus(This,p) )
    ( (This)->lpVtbl -> put_accessKey(This,v) )
    ( (This)->lpVtbl -> get_accessKey(This,p) )
    ( (This)->lpVtbl -> get_protocolLong(This,p) )
    ( (This)->lpVtbl -> get_mimeType(This,p) )
    ( (This)->lpVtbl -> get_nameProp(This,p) )
    ( (This)->lpVtbl -> put_tabIndex(This,v) )
    ( (This)->lpVtbl -> get_tabIndex(This,p) )
    ( (This)->lpVtbl -> focus(This) )
    ( (This)->lpVtbl -> blur(This) )
EXTERN_C const IID IID_IHTMLAnchorElement2;
    typedef struct IHTMLAnchorElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAnchorElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAnchorElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAnchorElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAnchorElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAnchorElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAnchorElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAnchorElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_charset )(
            __RPC__in IHTMLAnchorElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_charset )(
            __RPC__in IHTMLAnchorElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_coords )(
            __RPC__in IHTMLAnchorElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_coords )(
            __RPC__in IHTMLAnchorElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_hreflang )(
            __RPC__in IHTMLAnchorElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_hreflang )(
            __RPC__in IHTMLAnchorElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_shape )(
            __RPC__in IHTMLAnchorElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_shape )(
            __RPC__in IHTMLAnchorElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLAnchorElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLAnchorElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLAnchorElement2Vtbl;
    interface IHTMLAnchorElement2
    {
        CONST_VTBL struct IHTMLAnchorElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_charset(This,v) )
    ( (This)->lpVtbl -> get_charset(This,p) )
    ( (This)->lpVtbl -> put_coords(This,v) )
    ( (This)->lpVtbl -> get_coords(This,p) )
    ( (This)->lpVtbl -> put_hreflang(This,v) )
    ( (This)->lpVtbl -> get_hreflang(This,p) )
    ( (This)->lpVtbl -> put_shape(This,v) )
    ( (This)->lpVtbl -> get_shape(This,p) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
EXTERN_C const IID IID_IHTMLAnchorElement3;
    typedef struct IHTMLAnchorElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAnchorElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAnchorElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAnchorElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAnchorElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAnchorElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAnchorElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAnchorElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_shape )(
            __RPC__in IHTMLAnchorElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_shape )(
            __RPC__in IHTMLAnchorElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_coords )(
            __RPC__in IHTMLAnchorElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_coords )(
            __RPC__in IHTMLAnchorElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_href )(
            __RPC__in IHTMLAnchorElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLAnchorElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLAnchorElement3Vtbl;
    interface IHTMLAnchorElement3
    {
        CONST_VTBL struct IHTMLAnchorElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_shape(This,v) )
    ( (This)->lpVtbl -> get_shape(This,p) )
    ( (This)->lpVtbl -> put_coords(This,v) )
    ( (This)->lpVtbl -> get_coords(This,p) )
    ( (This)->lpVtbl -> put_href(This,v) )
    ( (This)->lpVtbl -> get_href(This,p) )
EXTERN_C const IID DIID_DispHTMLAnchorElement;
    typedef struct DispHTMLAnchorElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLAnchorElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLAnchorElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLAnchorElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLAnchorElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLAnchorElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLAnchorElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLAnchorElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLAnchorElementVtbl;
    interface DispHTMLAnchorElement
    {
        CONST_VTBL struct DispHTMLAnchorElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLAnchorElement;
class DECLSPEC_UUID("3050f248-98b5-11cf-bb82-00aa00bdce0b")
HTMLAnchorElement;
EXTERN_C const IID DIID_HTMLLabelEvents2;
    typedef struct HTMLLabelEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLLabelEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLLabelEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLLabelEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLLabelEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLLabelEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLLabelEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLLabelEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLLabelEvents2Vtbl;
    interface HTMLLabelEvents2
    {
        CONST_VTBL struct HTMLLabelEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLLabelEvents;
    typedef struct HTMLLabelEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLLabelEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLLabelEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLLabelEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLLabelEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLLabelEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLLabelEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLLabelEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLLabelEventsVtbl;
    interface HTMLLabelEvents
    {
        CONST_VTBL struct HTMLLabelEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLLabelElement;
    typedef struct IHTMLLabelElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLLabelElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLLabelElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLLabelElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLLabelElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLLabelElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLLabelElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLLabelElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_htmlFor )(
            __RPC__in IHTMLLabelElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_htmlFor )(
            __RPC__in IHTMLLabelElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_accessKey )(
            __RPC__in IHTMLLabelElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_accessKey )(
            __RPC__in IHTMLLabelElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLLabelElementVtbl;
    interface IHTMLLabelElement
    {
        CONST_VTBL struct IHTMLLabelElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_htmlFor(This,v) )
    ( (This)->lpVtbl -> get_htmlFor(This,p) )
    ( (This)->lpVtbl -> put_accessKey(This,v) )
    ( (This)->lpVtbl -> get_accessKey(This,p) )
EXTERN_C const IID IID_IHTMLLabelElement2;
    typedef struct IHTMLLabelElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLLabelElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLLabelElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLLabelElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLLabelElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLLabelElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLLabelElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLLabelElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLLabelElement2 * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
        END_INTERFACE
    } IHTMLLabelElement2Vtbl;
    interface IHTMLLabelElement2
    {
        CONST_VTBL struct IHTMLLabelElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_form(This,p) )
EXTERN_C const IID DIID_DispHTMLLabelElement;
    typedef struct DispHTMLLabelElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLLabelElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLLabelElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLLabelElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLLabelElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLLabelElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLLabelElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLLabelElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLLabelElementVtbl;
    interface DispHTMLLabelElement
    {
        CONST_VTBL struct DispHTMLLabelElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLLabelElement;
class DECLSPEC_UUID("3050f32b-98b5-11cf-bb82-00aa00bdce0b")
HTMLLabelElement;
EXTERN_C const IID IID_IHTMLListElement;
    typedef struct IHTMLListElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLListElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLListElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLListElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLListElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLListElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLListElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLListElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } IHTMLListElementVtbl;
    interface IHTMLListElement
    {
        CONST_VTBL struct IHTMLListElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLListElement2;
    typedef struct IHTMLListElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLListElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLListElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLListElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLListElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLListElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLListElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLListElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                      HRESULT ( STDMETHODCALLTYPE *put_compact )(
            __RPC__in IHTMLListElement2 * This,
                       VARIANT_BOOL v);
                                      HRESULT ( STDMETHODCALLTYPE *get_compact )(
            __RPC__in IHTMLListElement2 * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLListElement2Vtbl;
    interface IHTMLListElement2
    {
        CONST_VTBL struct IHTMLListElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_compact(This,v) )
    ( (This)->lpVtbl -> get_compact(This,p) )
EXTERN_C const IID DIID_DispHTMLListElement;
    typedef struct DispHTMLListElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLListElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLListElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLListElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLListElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLListElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLListElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLListElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLListElementVtbl;
    interface DispHTMLListElement
    {
        CONST_VTBL struct DispHTMLListElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLListElement;
class DECLSPEC_UUID("3050f272-98b5-11cf-bb82-00aa00bdce0b")
HTMLListElement;
EXTERN_C const IID IID_IHTMLUListElement;
    typedef struct IHTMLUListElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLUListElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLUListElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLUListElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLUListElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLUListElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLUListElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLUListElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_compact )(
            __RPC__in IHTMLUListElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_compact )(
            __RPC__in IHTMLUListElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLUListElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLUListElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLUListElementVtbl;
    interface IHTMLUListElement
    {
        CONST_VTBL struct IHTMLUListElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_compact(This,v) )
    ( (This)->lpVtbl -> get_compact(This,p) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
EXTERN_C const IID DIID_DispHTMLUListElement;
    typedef struct DispHTMLUListElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLUListElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLUListElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLUListElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLUListElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLUListElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLUListElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLUListElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLUListElementVtbl;
    interface DispHTMLUListElement
    {
        CONST_VTBL struct DispHTMLUListElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLUListElement;
class DECLSPEC_UUID("3050f269-98b5-11cf-bb82-00aa00bdce0b")
HTMLUListElement;
EXTERN_C const IID IID_IHTMLOListElement;
    typedef struct IHTMLOListElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLOListElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLOListElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLOListElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLOListElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLOListElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLOListElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLOListElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_compact )(
            __RPC__in IHTMLOListElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_compact )(
            __RPC__in IHTMLOListElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_start )(
            __RPC__in IHTMLOListElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_start )(
            __RPC__in IHTMLOListElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLOListElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLOListElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLOListElementVtbl;
    interface IHTMLOListElement
    {
        CONST_VTBL struct IHTMLOListElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_compact(This,v) )
    ( (This)->lpVtbl -> get_compact(This,p) )
    ( (This)->lpVtbl -> put_start(This,v) )
    ( (This)->lpVtbl -> get_start(This,p) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
EXTERN_C const IID DIID_DispHTMLOListElement;
    typedef struct DispHTMLOListElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLOListElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLOListElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLOListElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLOListElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLOListElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLOListElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLOListElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLOListElementVtbl;
    interface DispHTMLOListElement
    {
        CONST_VTBL struct DispHTMLOListElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLOListElement;
class DECLSPEC_UUID("3050f270-98b5-11cf-bb82-00aa00bdce0b")
HTMLOListElement;
EXTERN_C const IID IID_IHTMLLIElement;
    typedef struct IHTMLLIElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLLIElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLLIElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLLIElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLLIElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLLIElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLLIElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLLIElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLLIElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLLIElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLLIElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLLIElement * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLLIElementVtbl;
    interface IHTMLLIElement
    {
        CONST_VTBL struct IHTMLLIElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
EXTERN_C const IID DIID_DispHTMLLIElement;
    typedef struct DispHTMLLIElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLLIElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLLIElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLLIElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLLIElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLLIElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLLIElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLLIElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLLIElementVtbl;
    interface DispHTMLLIElement
    {
        CONST_VTBL struct DispHTMLLIElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLLIElement;
class DECLSPEC_UUID("3050f273-98b5-11cf-bb82-00aa00bdce0b")
HTMLLIElement;
EXTERN_C const IID IID_IHTMLBlockElement;
    typedef struct IHTMLBlockElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBlockElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBlockElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBlockElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBlockElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBlockElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBlockElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBlockElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_clear )(
            __RPC__in IHTMLBlockElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clear )(
            __RPC__in IHTMLBlockElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLBlockElementVtbl;
    interface IHTMLBlockElement
    {
        CONST_VTBL struct IHTMLBlockElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_clear(This,v) )
    ( (This)->lpVtbl -> get_clear(This,p) )
EXTERN_C const IID IID_IHTMLBlockElement2;
    typedef struct IHTMLBlockElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBlockElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBlockElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBlockElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBlockElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBlockElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBlockElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBlockElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_cite )(
            __RPC__in IHTMLBlockElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_cite )(
            __RPC__in IHTMLBlockElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLBlockElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLBlockElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLBlockElement2Vtbl;
    interface IHTMLBlockElement2
    {
        CONST_VTBL struct IHTMLBlockElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_cite(This,v) )
    ( (This)->lpVtbl -> get_cite(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
EXTERN_C const IID IID_IHTMLBlockElement3;
    typedef struct IHTMLBlockElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBlockElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBlockElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBlockElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBlockElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBlockElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBlockElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBlockElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_cite )(
            __RPC__in IHTMLBlockElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_cite )(
            __RPC__in IHTMLBlockElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLBlockElement3Vtbl;
    interface IHTMLBlockElement3
    {
        CONST_VTBL struct IHTMLBlockElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_cite(This,v) )
    ( (This)->lpVtbl -> get_cite(This,p) )
EXTERN_C const IID DIID_DispHTMLBlockElement;
    typedef struct DispHTMLBlockElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLBlockElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLBlockElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLBlockElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLBlockElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLBlockElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLBlockElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLBlockElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLBlockElementVtbl;
    interface DispHTMLBlockElement
    {
        CONST_VTBL struct DispHTMLBlockElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLBlockElement;
class DECLSPEC_UUID("3050f281-98b5-11cf-bb82-00aa00bdce0b")
HTMLBlockElement;
EXTERN_C const IID IID_IHTMLDivElement;
    typedef struct IHTMLDivElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDivElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDivElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDivElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDivElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDivElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDivElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDivElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLDivElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLDivElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_noWrap )(
            __RPC__in IHTMLDivElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_noWrap )(
            __RPC__in IHTMLDivElement * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLDivElementVtbl;
    interface IHTMLDivElement
    {
        CONST_VTBL struct IHTMLDivElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_noWrap(This,v) )
    ( (This)->lpVtbl -> get_noWrap(This,p) )
EXTERN_C const IID DIID_DispHTMLDivElement;
    typedef struct DispHTMLDivElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDivElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDivElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDivElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDivElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDivElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDivElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDivElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDivElementVtbl;
    interface DispHTMLDivElement
    {
        CONST_VTBL struct DispHTMLDivElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDivElement;
class DECLSPEC_UUID("3050f27e-98b5-11cf-bb82-00aa00bdce0b")
HTMLDivElement;
EXTERN_C const IID IID_IHTMLDDElement;
    typedef struct IHTMLDDElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDDElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDDElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDDElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDDElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDDElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDDElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDDElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_noWrap )(
            __RPC__in IHTMLDDElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_noWrap )(
            __RPC__in IHTMLDDElement * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLDDElementVtbl;
    interface IHTMLDDElement
    {
        CONST_VTBL struct IHTMLDDElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_noWrap(This,v) )
    ( (This)->lpVtbl -> get_noWrap(This,p) )
EXTERN_C const IID DIID_DispHTMLDDElement;
    typedef struct DispHTMLDDElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDDElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDDElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDDElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDDElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDDElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDDElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDDElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDDElementVtbl;
    interface DispHTMLDDElement
    {
        CONST_VTBL struct DispHTMLDDElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDDElement;
class DECLSPEC_UUID("3050f27f-98b5-11cf-bb82-00aa00bdce0b")
HTMLDDElement;
EXTERN_C const IID IID_IHTMLDTElement;
    typedef struct IHTMLDTElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDTElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDTElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDTElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDTElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDTElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDTElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDTElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_noWrap )(
            __RPC__in IHTMLDTElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_noWrap )(
            __RPC__in IHTMLDTElement * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLDTElementVtbl;
    interface IHTMLDTElement
    {
        CONST_VTBL struct IHTMLDTElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_noWrap(This,v) )
    ( (This)->lpVtbl -> get_noWrap(This,p) )
EXTERN_C const IID DIID_DispHTMLDTElement;
    typedef struct DispHTMLDTElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDTElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDTElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDTElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDTElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDTElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDTElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDTElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDTElementVtbl;
    interface DispHTMLDTElement
    {
        CONST_VTBL struct DispHTMLDTElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDTElement;
class DECLSPEC_UUID("3050f27c-98b5-11cf-bb82-00aa00bdce0b")
HTMLDTElement;
EXTERN_C const IID IID_IHTMLBRElement;
    typedef struct IHTMLBRElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBRElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBRElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBRElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBRElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBRElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBRElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBRElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_clear )(
            __RPC__in IHTMLBRElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clear )(
            __RPC__in IHTMLBRElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLBRElementVtbl;
    interface IHTMLBRElement
    {
        CONST_VTBL struct IHTMLBRElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_clear(This,v) )
    ( (This)->lpVtbl -> get_clear(This,p) )
EXTERN_C const IID DIID_DispHTMLBRElement;
    typedef struct DispHTMLBRElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLBRElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLBRElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLBRElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLBRElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLBRElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLBRElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLBRElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLBRElementVtbl;
    interface DispHTMLBRElement
    {
        CONST_VTBL struct DispHTMLBRElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLBRElement;
class DECLSPEC_UUID("3050f280-98b5-11cf-bb82-00aa00bdce0b")
HTMLBRElement;
EXTERN_C const IID IID_IHTMLDListElement;
    typedef struct IHTMLDListElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDListElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDListElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDListElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDListElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDListElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDListElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDListElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                      HRESULT ( STDMETHODCALLTYPE *put_compact )(
            __RPC__in IHTMLDListElement * This,
                       VARIANT_BOOL v);
                                      HRESULT ( STDMETHODCALLTYPE *get_compact )(
            __RPC__in IHTMLDListElement * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLDListElementVtbl;
    interface IHTMLDListElement
    {
        CONST_VTBL struct IHTMLDListElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_compact(This,v) )
    ( (This)->lpVtbl -> get_compact(This,p) )
EXTERN_C const IID DIID_DispHTMLDListElement;
    typedef struct DispHTMLDListElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDListElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDListElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDListElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDListElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDListElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDListElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDListElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDListElementVtbl;
    interface DispHTMLDListElement
    {
        CONST_VTBL struct DispHTMLDListElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDListElement;
class DECLSPEC_UUID("3050f27d-98b5-11cf-bb82-00aa00bdce0b")
HTMLDListElement;
EXTERN_C const IID IID_IHTMLHRElement;
    typedef struct IHTMLHRElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLHRElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLHRElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLHRElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLHRElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLHRElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLHRElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLHRElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLHRElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLHRElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_color )(
            __RPC__in IHTMLHRElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_color )(
            __RPC__in IHTMLHRElement * This,
                                __RPC__out VARIANT *p);
                                      HRESULT ( STDMETHODCALLTYPE *put_noShade )(
            __RPC__in IHTMLHRElement * This,
                       VARIANT_BOOL v);
                                      HRESULT ( STDMETHODCALLTYPE *get_noShade )(
            __RPC__in IHTMLHRElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLHRElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLHRElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_size )(
            __RPC__in IHTMLHRElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_size )(
            __RPC__in IHTMLHRElement * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLHRElementVtbl;
    interface IHTMLHRElement
    {
        CONST_VTBL struct IHTMLHRElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_color(This,v) )
    ( (This)->lpVtbl -> get_color(This,p) )
    ( (This)->lpVtbl -> put_noShade(This,v) )
    ( (This)->lpVtbl -> get_noShade(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_size(This,v) )
    ( (This)->lpVtbl -> get_size(This,p) )
EXTERN_C const IID DIID_DispHTMLHRElement;
    typedef struct DispHTMLHRElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLHRElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLHRElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLHRElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLHRElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLHRElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLHRElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLHRElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLHRElementVtbl;
    interface DispHTMLHRElement
    {
        CONST_VTBL struct DispHTMLHRElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLHRElement;
class DECLSPEC_UUID("3050f252-98b5-11cf-bb82-00aa00bdce0b")
HTMLHRElement;
EXTERN_C const IID IID_IHTMLParaElement;
    typedef struct IHTMLParaElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLParaElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLParaElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLParaElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLParaElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLParaElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLParaElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLParaElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                      HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLParaElement * This,
                       __RPC__in BSTR v);
                                      HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLParaElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLParaElementVtbl;
    interface IHTMLParaElement
    {
        CONST_VTBL struct IHTMLParaElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
EXTERN_C const IID DIID_DispHTMLParaElement;
    typedef struct DispHTMLParaElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLParaElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLParaElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLParaElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLParaElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLParaElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLParaElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLParaElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLParaElementVtbl;
    interface DispHTMLParaElement
    {
        CONST_VTBL struct DispHTMLParaElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLParaElement;
class DECLSPEC_UUID("3050f26f-98b5-11cf-bb82-00aa00bdce0b")
HTMLParaElement;
EXTERN_C const IID IID_IHTMLElementCollection2;
    typedef struct IHTMLElementCollection2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElementCollection2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElementCollection2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElementCollection2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElementCollection2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElementCollection2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElementCollection2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElementCollection2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *urns )(
            __RPC__in IHTMLElementCollection2 * This,
                       VARIANT urn,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLElementCollection2Vtbl;
    interface IHTMLElementCollection2
    {
        CONST_VTBL struct IHTMLElementCollection2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> urns(This,urn,pdisp) )
EXTERN_C const IID IID_IHTMLElementCollection3;
    typedef struct IHTMLElementCollection3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElementCollection3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElementCollection3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElementCollection3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElementCollection3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElementCollection3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElementCollection3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElementCollection3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *namedItem )(
            __RPC__in IHTMLElementCollection3 * This,
                       __RPC__in BSTR name,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLElementCollection3Vtbl;
    interface IHTMLElementCollection3
    {
        CONST_VTBL struct IHTMLElementCollection3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> namedItem(This,name,pdisp) )
EXTERN_C const IID IID_IHTMLElementCollection4;
    typedef struct IHTMLElementCollection4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLElementCollection4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLElementCollection4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLElementCollection4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLElementCollection4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLElementCollection4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLElementCollection4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLElementCollection4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLElementCollection4 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLElementCollection4 * This,
                       long index,
                                __RPC__deref_out_opt IHTMLElement2 **pNode);
                   HRESULT ( STDMETHODCALLTYPE *namedItem )(
            __RPC__in IHTMLElementCollection4 * This,
                       __RPC__in BSTR name,
                                __RPC__deref_out_opt IHTMLElement2 **pNode);
        END_INTERFACE
    } IHTMLElementCollection4Vtbl;
    interface IHTMLElementCollection4
    {
        CONST_VTBL struct IHTMLElementCollection4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> item(This,index,pNode) )
    ( (This)->lpVtbl -> namedItem(This,name,pNode) )
EXTERN_C const IID DIID_DispHTMLElementCollection;
    typedef struct DispHTMLElementCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLElementCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLElementCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLElementCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLElementCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLElementCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLElementCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLElementCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLElementCollectionVtbl;
    interface DispHTMLElementCollection
    {
        CONST_VTBL struct DispHTMLElementCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLElementCollection;
class DECLSPEC_UUID("3050f4cb-98b5-11cf-bb82-00aa00bdce0b")
HTMLElementCollection;
EXTERN_C const IID IID_IHTMLHeaderElement;
    typedef struct IHTMLHeaderElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLHeaderElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLHeaderElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLHeaderElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLHeaderElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLHeaderElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLHeaderElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLHeaderElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                      HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLHeaderElement * This,
                       __RPC__in BSTR v);
                                      HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLHeaderElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLHeaderElementVtbl;
    interface IHTMLHeaderElement
    {
        CONST_VTBL struct IHTMLHeaderElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
EXTERN_C const IID DIID_DispHTMLHeaderElement;
    typedef struct DispHTMLHeaderElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLHeaderElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLHeaderElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLHeaderElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLHeaderElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLHeaderElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLHeaderElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLHeaderElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLHeaderElementVtbl;
    interface DispHTMLHeaderElement
    {
        CONST_VTBL struct DispHTMLHeaderElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLHeaderElement;
class DECLSPEC_UUID("3050f27a-98b5-11cf-bb82-00aa00bdce0b")
HTMLHeaderElement;
EXTERN_C const IID DIID_HTMLSelectElementEvents2;
    typedef struct HTMLSelectElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLSelectElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLSelectElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLSelectElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLSelectElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLSelectElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLSelectElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLSelectElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLSelectElementEvents2Vtbl;
    interface HTMLSelectElementEvents2
    {
        CONST_VTBL struct HTMLSelectElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLSelectElementEvents;
    typedef struct HTMLSelectElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLSelectElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLSelectElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLSelectElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLSelectElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLSelectElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLSelectElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLSelectElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLSelectElementEventsVtbl;
    interface HTMLSelectElementEvents
    {
        CONST_VTBL struct HTMLSelectElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLOptionElement;
    typedef struct IHTMLOptionElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLOptionElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLOptionElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLOptionElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLOptionElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLOptionElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLOptionElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLOptionElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_selected )(
            __RPC__in IHTMLOptionElement * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_selected )(
            __RPC__in IHTMLOptionElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLOptionElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLOptionElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_defaultSelected )(
            __RPC__in IHTMLOptionElement * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_defaultSelected )(
            __RPC__in IHTMLOptionElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_index )(
            __RPC__in IHTMLOptionElement * This,
                       LONG v);
                            HRESULT ( STDMETHODCALLTYPE *get_index )(
            __RPC__in IHTMLOptionElement * This,
                                __RPC__out LONG *p);
                            HRESULT ( STDMETHODCALLTYPE *put_text )(
            __RPC__in IHTMLOptionElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_text )(
            __RPC__in IHTMLOptionElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLOptionElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
        END_INTERFACE
    } IHTMLOptionElementVtbl;
    interface IHTMLOptionElement
    {
        CONST_VTBL struct IHTMLOptionElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_selected(This,v) )
    ( (This)->lpVtbl -> get_selected(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_defaultSelected(This,v) )
    ( (This)->lpVtbl -> get_defaultSelected(This,p) )
    ( (This)->lpVtbl -> put_index(This,v) )
    ( (This)->lpVtbl -> get_index(This,p) )
    ( (This)->lpVtbl -> put_text(This,v) )
    ( (This)->lpVtbl -> get_text(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
EXTERN_C const IID IID_IHTMLSelectElementEx;
    typedef struct IHTMLSelectElementExVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSelectElementEx * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSelectElementEx * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSelectElementEx * This);
        HRESULT ( STDMETHODCALLTYPE *ShowDropdown )(
            __RPC__in IHTMLSelectElementEx * This,
                       BOOL fShow);
        HRESULT ( STDMETHODCALLTYPE *SetSelectExFlags )(
            __RPC__in IHTMLSelectElementEx * This,
                       DWORD lFlags);
        HRESULT ( STDMETHODCALLTYPE *GetSelectExFlags )(
            __RPC__in IHTMLSelectElementEx * This,
                                __RPC__out DWORD *pFlags);
        HRESULT ( STDMETHODCALLTYPE *GetDropdownOpen )(
            __RPC__in IHTMLSelectElementEx * This,
                                __RPC__out BOOL *pfOpen);
        END_INTERFACE
    } IHTMLSelectElementExVtbl;
    interface IHTMLSelectElementEx
    {
        CONST_VTBL struct IHTMLSelectElementExVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> ShowDropdown(This,fShow) )
    ( (This)->lpVtbl -> SetSelectExFlags(This,lFlags) )
    ( (This)->lpVtbl -> GetSelectExFlags(This,pFlags) )
    ( (This)->lpVtbl -> GetDropdownOpen(This,pfOpen) )
EXTERN_C const IID IID_IHTMLSelectElement;
    typedef struct IHTMLSelectElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSelectElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSelectElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSelectElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSelectElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSelectElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSelectElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSelectElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_size )(
            __RPC__in IHTMLSelectElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_size )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_multiple )(
            __RPC__in IHTMLSelectElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_multiple )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLSelectElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_options )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__deref_out_opt IDispatch **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onchange )(
            __RPC__in IHTMLSelectElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onchange )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selectedIndex )(
            __RPC__in IHTMLSelectElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectedIndex )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLSelectElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLSelectElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
                   HRESULT ( STDMETHODCALLTYPE *add )(
            __RPC__in IHTMLSelectElement * This,
                       __RPC__in_opt IHTMLElement *element,
                                 VARIANT before);
                   HRESULT ( STDMETHODCALLTYPE *remove )(
            __RPC__in IHTMLSelectElement * This,
                                     long index);
                            HRESULT ( STDMETHODCALLTYPE *put_length )(
            __RPC__in IHTMLSelectElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLSelectElement * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLSelectElement * This,
                                 VARIANT name,
                                 VARIANT index,
                                __RPC__deref_out_opt IDispatch **pdisp);
                   HRESULT ( STDMETHODCALLTYPE *tags )(
            __RPC__in IHTMLSelectElement * This,
                       VARIANT tagName,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLSelectElementVtbl;
    interface IHTMLSelectElement
    {
        CONST_VTBL struct IHTMLSelectElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_size(This,v) )
    ( (This)->lpVtbl -> get_size(This,p) )
    ( (This)->lpVtbl -> put_multiple(This,v) )
    ( (This)->lpVtbl -> get_multiple(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> get_options(This,p) )
    ( (This)->lpVtbl -> put_onchange(This,v) )
    ( (This)->lpVtbl -> get_onchange(This,p) )
    ( (This)->lpVtbl -> put_selectedIndex(This,v) )
    ( (This)->lpVtbl -> get_selectedIndex(This,p) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
    ( (This)->lpVtbl -> add(This,element,before) )
    ( (This)->lpVtbl -> remove(This,index) )
    ( (This)->lpVtbl -> put_length(This,v) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,name,index,pdisp) )
    ( (This)->lpVtbl -> tags(This,tagName,pdisp) )
EXTERN_C const IID IID_IHTMLSelectElement2;
    typedef struct IHTMLSelectElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSelectElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSelectElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSelectElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSelectElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSelectElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSelectElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSelectElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *urns )(
            __RPC__in IHTMLSelectElement2 * This,
                       VARIANT urn,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLSelectElement2Vtbl;
    interface IHTMLSelectElement2
    {
        CONST_VTBL struct IHTMLSelectElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> urns(This,urn,pdisp) )
EXTERN_C const IID IID_IHTMLSelectElement4;
    typedef struct IHTMLSelectElement4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSelectElement4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSelectElement4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSelectElement4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSelectElement4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSelectElement4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSelectElement4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSelectElement4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *namedItem )(
            __RPC__in IHTMLSelectElement4 * This,
                       __RPC__in BSTR name,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLSelectElement4Vtbl;
    interface IHTMLSelectElement4
    {
        CONST_VTBL struct IHTMLSelectElement4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> namedItem(This,name,pdisp) )
EXTERN_C const IID IID_IHTMLSelectElement5;
    typedef struct IHTMLSelectElement5Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSelectElement5 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSelectElement5 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSelectElement5 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSelectElement5 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSelectElement5 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSelectElement5 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSelectElement5 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *add )(
            __RPC__in IHTMLSelectElement5 * This,
                       __RPC__in_opt IHTMLOptionElement *pElem,
                       __RPC__in VARIANT *pvarBefore);
        END_INTERFACE
    } IHTMLSelectElement5Vtbl;
    interface IHTMLSelectElement5
    {
        CONST_VTBL struct IHTMLSelectElement5Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> add(This,pElem,pvarBefore) )
EXTERN_C const IID IID_IHTMLSelectElement6;
    typedef struct IHTMLSelectElement6Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSelectElement6 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSelectElement6 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSelectElement6 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSelectElement6 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSelectElement6 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSelectElement6 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSelectElement6 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *add )(
            __RPC__in IHTMLSelectElement6 * This,
                       __RPC__in_opt IHTMLOptionElement *pElem,
                       __RPC__in VARIANT *pvarBefore);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLSelectElement6 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLSelectElement6 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLSelectElement6Vtbl;
    interface IHTMLSelectElement6
    {
        CONST_VTBL struct IHTMLSelectElement6Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> add(This,pElem,pvarBefore) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
EXTERN_C const IID DIID_DispHTMLSelectElement;
    typedef struct DispHTMLSelectElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLSelectElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLSelectElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLSelectElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLSelectElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLSelectElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLSelectElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLSelectElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLSelectElementVtbl;
    interface DispHTMLSelectElement
    {
        CONST_VTBL struct DispHTMLSelectElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLSelectElement;
class DECLSPEC_UUID("3050f245-98b5-11cf-bb82-00aa00bdce0b")
HTMLSelectElement;
EXTERN_C const IID DIID_DispHTMLWndSelectElement;
    typedef struct DispHTMLWndSelectElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLWndSelectElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLWndSelectElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLWndSelectElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLWndSelectElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLWndSelectElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLWndSelectElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLWndSelectElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLWndSelectElementVtbl;
    interface DispHTMLWndSelectElement
    {
        CONST_VTBL struct DispHTMLWndSelectElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLWndSelectElement;
class DECLSPEC_UUID("3050f2cf-98b5-11cf-bb82-00aa00bdce0b")
HTMLWndSelectElement;
EXTERN_C const IID IID_IHTMLSelectionObject;
    typedef struct IHTMLSelectionObjectVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSelectionObject * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSelectionObject * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSelectionObject * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSelectionObject * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSelectionObject * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSelectionObject * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSelectionObject * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *createRange )(
            __RPC__in IHTMLSelectionObject * This,
                                __RPC__deref_out_opt IDispatch **range);
                   HRESULT ( STDMETHODCALLTYPE *empty )(
            __RPC__in IHTMLSelectionObject * This);
                   HRESULT ( STDMETHODCALLTYPE *clear )(
            __RPC__in IHTMLSelectionObject * This);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLSelectionObject * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLSelectionObjectVtbl;
    interface IHTMLSelectionObject
    {
        CONST_VTBL struct IHTMLSelectionObjectVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> createRange(This,range) )
    ( (This)->lpVtbl -> empty(This) )
    ( (This)->lpVtbl -> clear(This) )
    ( (This)->lpVtbl -> get_type(This,p) )
EXTERN_C const IID IID_IHTMLSelectionObject2;
    typedef struct IHTMLSelectionObject2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSelectionObject2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSelectionObject2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSelectionObject2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSelectionObject2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSelectionObject2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSelectionObject2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSelectionObject2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *createRangeCollection )(
            __RPC__in IHTMLSelectionObject2 * This,
                                __RPC__deref_out_opt IDispatch **rangeCollection);
                            HRESULT ( STDMETHODCALLTYPE *get_typeDetail )(
            __RPC__in IHTMLSelectionObject2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLSelectionObject2Vtbl;
    interface IHTMLSelectionObject2
    {
        CONST_VTBL struct IHTMLSelectionObject2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> createRangeCollection(This,rangeCollection) )
    ( (This)->lpVtbl -> get_typeDetail(This,p) )
EXTERN_C const IID IID_IHTMLSelection;
    typedef struct IHTMLSelectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSelection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSelection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSelection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSelection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSelection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSelection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSelection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_anchorNode )(
            __RPC__in IHTMLSelection * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_anchorOffset )(
            __RPC__in IHTMLSelection * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_focusNode )(
            __RPC__in IHTMLSelection * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_focusOffset )(
            __RPC__in IHTMLSelection * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_isCollapsed )(
            __RPC__in IHTMLSelection * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *collapse )(
            __RPC__in IHTMLSelection * This,
                       __RPC__in_opt IDispatch *parentNode,
                       long offfset);
                   HRESULT ( STDMETHODCALLTYPE *collapseToStart )(
            __RPC__in IHTMLSelection * This);
                   HRESULT ( STDMETHODCALLTYPE *collapseToEnd )(
            __RPC__in IHTMLSelection * This);
                   HRESULT ( STDMETHODCALLTYPE *selectAllChildren )(
            __RPC__in IHTMLSelection * This,
                       __RPC__in_opt IDispatch *parentNode);
                   HRESULT ( STDMETHODCALLTYPE *deleteFromDocument )(
            __RPC__in IHTMLSelection * This);
                            HRESULT ( STDMETHODCALLTYPE *get_rangeCount )(
            __RPC__in IHTMLSelection * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *getRangeAt )(
            __RPC__in IHTMLSelection * This,
                       long index,
                                __RPC__deref_out_opt IHTMLDOMRange **ppRange);
                   HRESULT ( STDMETHODCALLTYPE *addRange )(
            __RPC__in IHTMLSelection * This,
                       __RPC__in_opt IDispatch *range);
                   HRESULT ( STDMETHODCALLTYPE *removeRange )(
            __RPC__in IHTMLSelection * This,
                       __RPC__in_opt IDispatch *range);
                   HRESULT ( STDMETHODCALLTYPE *removeAllRanges )(
            __RPC__in IHTMLSelection * This);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLSelection * This,
                                __RPC__deref_out_opt BSTR *pSelectionString);
        END_INTERFACE
    } IHTMLSelectionVtbl;
    interface IHTMLSelection
    {
        CONST_VTBL struct IHTMLSelectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_anchorNode(This,p) )
    ( (This)->lpVtbl -> get_anchorOffset(This,p) )
    ( (This)->lpVtbl -> get_focusNode(This,p) )
    ( (This)->lpVtbl -> get_focusOffset(This,p) )
    ( (This)->lpVtbl -> get_isCollapsed(This,p) )
    ( (This)->lpVtbl -> collapse(This,parentNode,offfset) )
    ( (This)->lpVtbl -> collapseToStart(This) )
    ( (This)->lpVtbl -> collapseToEnd(This) )
    ( (This)->lpVtbl -> selectAllChildren(This,parentNode) )
    ( (This)->lpVtbl -> deleteFromDocument(This) )
    ( (This)->lpVtbl -> get_rangeCount(This,p) )
    ( (This)->lpVtbl -> getRangeAt(This,index,ppRange) )
    ( (This)->lpVtbl -> addRange(This,range) )
    ( (This)->lpVtbl -> removeRange(This,range) )
    ( (This)->lpVtbl -> removeAllRanges(This) )
    ( (This)->lpVtbl -> toString(This,pSelectionString) )
EXTERN_C const IID IID_IHTMLOptionElement3;
    typedef struct IHTMLOptionElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLOptionElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLOptionElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLOptionElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLOptionElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLOptionElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLOptionElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLOptionElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_label )(
            __RPC__in IHTMLOptionElement3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_label )(
            __RPC__in IHTMLOptionElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLOptionElement3Vtbl;
    interface IHTMLOptionElement3
    {
        CONST_VTBL struct IHTMLOptionElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_label(This,v) )
    ( (This)->lpVtbl -> get_label(This,p) )
EXTERN_C const IID IID_IHTMLOptionElement4;
    typedef struct IHTMLOptionElement4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLOptionElement4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLOptionElement4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLOptionElement4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLOptionElement4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLOptionElement4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLOptionElement4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLOptionElement4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLOptionElement4 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLOptionElement4 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLOptionElement4Vtbl;
    interface IHTMLOptionElement4
    {
        CONST_VTBL struct IHTMLOptionElement4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
EXTERN_C const IID IID_IHTMLOptionElementFactory;
    typedef struct IHTMLOptionElementFactoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLOptionElementFactory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLOptionElementFactory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLOptionElementFactory * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLOptionElementFactory * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLOptionElementFactory * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLOptionElementFactory * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLOptionElementFactory * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *create )(
            __RPC__in IHTMLOptionElementFactory * This,
                                 VARIANT text,
                                 VARIANT value,
                                 VARIANT defaultselected,
                                 VARIANT selected,
                                __RPC__deref_out_opt IHTMLOptionElement **__MIDL__IHTMLOptionElementFactory0000);
        END_INTERFACE
    } IHTMLOptionElementFactoryVtbl;
    interface IHTMLOptionElementFactory
    {
        CONST_VTBL struct IHTMLOptionElementFactoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> create(This,text,value,defaultselected,selected,__MIDL__IHTMLOptionElementFactory0000) )
EXTERN_C const IID DIID_DispHTMLOptionElement;
    typedef struct DispHTMLOptionElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLOptionElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLOptionElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLOptionElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLOptionElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLOptionElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLOptionElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLOptionElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLOptionElementVtbl;
    interface DispHTMLOptionElement
    {
        CONST_VTBL struct DispHTMLOptionElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLOptionElement;
class DECLSPEC_UUID("3050f24d-98b5-11cf-bb82-00aa00bdce0b")
HTMLOptionElement;
EXTERN_C const CLSID CLSID_HTMLOptionElementFactory;
class DECLSPEC_UUID("3050f38d-98b5-11cf-bb82-00aa00bdce0b")
HTMLOptionElementFactory;
EXTERN_C const IID DIID_DispHTMLWndOptionElement;
    typedef struct DispHTMLWndOptionElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLWndOptionElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLWndOptionElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLWndOptionElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLWndOptionElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLWndOptionElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLWndOptionElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLWndOptionElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLWndOptionElementVtbl;
    interface DispHTMLWndOptionElement
    {
        CONST_VTBL struct DispHTMLWndOptionElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLWndOptionElement;
class DECLSPEC_UUID("3050f2d0-98b5-11cf-bb82-00aa00bdce0b")
HTMLWndOptionElement;
EXTERN_C const IID DIID_HTMLButtonElementEvents2;
    typedef struct HTMLButtonElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLButtonElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLButtonElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLButtonElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLButtonElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLButtonElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLButtonElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLButtonElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLButtonElementEvents2Vtbl;
    interface HTMLButtonElementEvents2
    {
        CONST_VTBL struct HTMLButtonElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLButtonElementEvents;
    typedef struct HTMLButtonElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLButtonElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLButtonElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLButtonElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLButtonElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLButtonElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLButtonElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLButtonElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLButtonElementEventsVtbl;
    interface HTMLButtonElementEvents
    {
        CONST_VTBL struct HTMLButtonElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLInputTextElementEvents2;
    typedef struct HTMLInputTextElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLInputTextElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLInputTextElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLInputTextElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLInputTextElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLInputTextElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLInputTextElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLInputTextElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLInputTextElementEvents2Vtbl;
    interface HTMLInputTextElementEvents2
    {
        CONST_VTBL struct HTMLInputTextElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLOptionButtonElementEvents2;
    typedef struct HTMLOptionButtonElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLOptionButtonElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLOptionButtonElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLOptionButtonElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLOptionButtonElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLOptionButtonElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLOptionButtonElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLOptionButtonElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLOptionButtonElementEvents2Vtbl;
    interface HTMLOptionButtonElementEvents2
    {
        CONST_VTBL struct HTMLOptionButtonElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLInputFileElementEvents2;
    typedef struct HTMLInputFileElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLInputFileElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLInputFileElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLInputFileElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLInputFileElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLInputFileElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLInputFileElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLInputFileElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLInputFileElementEvents2Vtbl;
    interface HTMLInputFileElementEvents2
    {
        CONST_VTBL struct HTMLInputFileElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLInputImageEvents2;
    typedef struct HTMLInputImageEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLInputImageEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLInputImageEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLInputImageEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLInputImageEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLInputImageEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLInputImageEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLInputImageEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLInputImageEvents2Vtbl;
    interface HTMLInputImageEvents2
    {
        CONST_VTBL struct HTMLInputImageEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLInputTextElementEvents;
    typedef struct HTMLInputTextElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLInputTextElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLInputTextElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLInputTextElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLInputTextElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLInputTextElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLInputTextElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLInputTextElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLInputTextElementEventsVtbl;
    interface HTMLInputTextElementEvents
    {
        CONST_VTBL struct HTMLInputTextElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLOptionButtonElementEvents;
    typedef struct HTMLOptionButtonElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLOptionButtonElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLOptionButtonElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLOptionButtonElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLOptionButtonElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLOptionButtonElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLOptionButtonElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLOptionButtonElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLOptionButtonElementEventsVtbl;
    interface HTMLOptionButtonElementEvents
    {
        CONST_VTBL struct HTMLOptionButtonElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLInputFileElementEvents;
    typedef struct HTMLInputFileElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLInputFileElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLInputFileElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLInputFileElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLInputFileElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLInputFileElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLInputFileElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLInputFileElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLInputFileElementEventsVtbl;
    interface HTMLInputFileElementEvents
    {
        CONST_VTBL struct HTMLInputFileElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLInputImageEvents;
    typedef struct HTMLInputImageEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLInputImageEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLInputImageEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLInputImageEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLInputImageEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLInputImageEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLInputImageEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLInputImageEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLInputImageEventsVtbl;
    interface HTMLInputImageEvents
    {
        CONST_VTBL struct HTMLInputImageEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLInputElement;
    typedef struct IHTMLInputElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLInputElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLInputElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLInputElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLInputElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLInputElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_status )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_size )(
            __RPC__in IHTMLInputElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_size )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_maxLength )(
            __RPC__in IHTMLInputElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_maxLength )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *select )(
            __RPC__in IHTMLInputElement * This);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onchange )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onchange )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onselect )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onselect )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT *p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_defaultValue )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in BSTR v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_defaultValue )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_readOnly )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_readOnly )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *createTextRange )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt IHTMLTxtRange **range);
                                      HRESULT ( STDMETHODCALLTYPE *put_indeterminate )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT_BOOL v);
                                      HRESULT ( STDMETHODCALLTYPE *get_indeterminate )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                      HRESULT ( STDMETHODCALLTYPE *put_defaultChecked )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT_BOOL v);
                                      HRESULT ( STDMETHODCALLTYPE *get_defaultChecked )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                      HRESULT ( STDMETHODCALLTYPE *put_checked )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT_BOOL v);
                                      HRESULT ( STDMETHODCALLTYPE *get_checked )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_border )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_border )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_vspace )(
            __RPC__in IHTMLInputElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_vspace )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_hspace )(
            __RPC__in IHTMLInputElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_hspace )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_alt )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_alt )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_lowsrc )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lowsrc )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_vrml )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_vrml )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_dynsrc )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_dynsrc )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_complete )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_loop )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_loop )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onabort )(
            __RPC__in IHTMLInputElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onabort )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLInputElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLInputElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_start )(
            __RPC__in IHTMLInputElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_start )(
            __RPC__in IHTMLInputElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLInputElementVtbl;
    interface IHTMLInputElement
    {
        CONST_VTBL struct IHTMLInputElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_status(This,v) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
    ( (This)->lpVtbl -> put_size(This,v) )
    ( (This)->lpVtbl -> get_size(This,p) )
    ( (This)->lpVtbl -> put_maxLength(This,v) )
    ( (This)->lpVtbl -> get_maxLength(This,p) )
    ( (This)->lpVtbl -> select(This) )
    ( (This)->lpVtbl -> put_onchange(This,v) )
    ( (This)->lpVtbl -> get_onchange(This,p) )
    ( (This)->lpVtbl -> put_onselect(This,v) )
    ( (This)->lpVtbl -> get_onselect(This,p) )
    ( (This)->lpVtbl -> put_defaultValue(This,v) )
    ( (This)->lpVtbl -> get_defaultValue(This,p) )
    ( (This)->lpVtbl -> put_readOnly(This,v) )
    ( (This)->lpVtbl -> get_readOnly(This,p) )
    ( (This)->lpVtbl -> createTextRange(This,range) )
    ( (This)->lpVtbl -> put_indeterminate(This,v) )
    ( (This)->lpVtbl -> get_indeterminate(This,p) )
    ( (This)->lpVtbl -> put_defaultChecked(This,v) )
    ( (This)->lpVtbl -> get_defaultChecked(This,p) )
    ( (This)->lpVtbl -> put_checked(This,v) )
    ( (This)->lpVtbl -> get_checked(This,p) )
    ( (This)->lpVtbl -> put_border(This,v) )
    ( (This)->lpVtbl -> get_border(This,p) )
    ( (This)->lpVtbl -> put_vspace(This,v) )
    ( (This)->lpVtbl -> get_vspace(This,p) )
    ( (This)->lpVtbl -> put_hspace(This,v) )
    ( (This)->lpVtbl -> get_hspace(This,p) )
    ( (This)->lpVtbl -> put_alt(This,v) )
    ( (This)->lpVtbl -> get_alt(This,p) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> put_lowsrc(This,v) )
    ( (This)->lpVtbl -> get_lowsrc(This,p) )
    ( (This)->lpVtbl -> put_vrml(This,v) )
    ( (This)->lpVtbl -> get_vrml(This,p) )
    ( (This)->lpVtbl -> put_dynsrc(This,v) )
    ( (This)->lpVtbl -> get_dynsrc(This,p) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> get_complete(This,p) )
    ( (This)->lpVtbl -> put_loop(This,v) )
    ( (This)->lpVtbl -> get_loop(This,p) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> put_onabort(This,v) )
    ( (This)->lpVtbl -> get_onabort(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_start(This,v) )
    ( (This)->lpVtbl -> get_start(This,p) )
EXTERN_C const IID IID_IHTMLInputElement2;
    typedef struct IHTMLInputElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLInputElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLInputElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLInputElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLInputElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLInputElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLInputElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLInputElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_accept )(
            __RPC__in IHTMLInputElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_accept )(
            __RPC__in IHTMLInputElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_useMap )(
            __RPC__in IHTMLInputElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_useMap )(
            __RPC__in IHTMLInputElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLInputElement2Vtbl;
    interface IHTMLInputElement2
    {
        CONST_VTBL struct IHTMLInputElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_accept(This,v) )
    ( (This)->lpVtbl -> get_accept(This,p) )
    ( (This)->lpVtbl -> put_useMap(This,v) )
    ( (This)->lpVtbl -> get_useMap(This,p) )
EXTERN_C const IID IID_IHTMLInputElement3;
    typedef struct IHTMLInputElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLInputElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLInputElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLInputElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLInputElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLInputElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLInputElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLInputElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLInputElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLInputElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_lowsrc )(
            __RPC__in IHTMLInputElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_lowsrc )(
            __RPC__in IHTMLInputElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_vrml )(
            __RPC__in IHTMLInputElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_vrml )(
            __RPC__in IHTMLInputElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_dynsrc )(
            __RPC__in IHTMLInputElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_dynsrc )(
            __RPC__in IHTMLInputElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLInputElement3Vtbl;
    interface IHTMLInputElement3
    {
        CONST_VTBL struct IHTMLInputElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> put_lowsrc(This,v) )
    ( (This)->lpVtbl -> get_lowsrc(This,p) )
    ( (This)->lpVtbl -> put_vrml(This,v) )
    ( (This)->lpVtbl -> get_vrml(This,p) )
    ( (This)->lpVtbl -> put_dynsrc(This,v) )
    ( (This)->lpVtbl -> get_dynsrc(This,p) )
EXTERN_C const IID IID_IHTMLInputButtonElement;
    typedef struct IHTMLInputButtonElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLInputButtonElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLInputButtonElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLInputButtonElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLInputButtonElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLInputButtonElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLInputButtonElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLInputButtonElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLInputButtonElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLInputButtonElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLInputButtonElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLInputButtonElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLInputButtonElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_status )(
            __RPC__in IHTMLInputButtonElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLInputButtonElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLInputButtonElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLInputButtonElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLInputButtonElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
                   HRESULT ( STDMETHODCALLTYPE *createTextRange )(
            __RPC__in IHTMLInputButtonElement * This,
                                __RPC__deref_out_opt IHTMLTxtRange **range);
        END_INTERFACE
    } IHTMLInputButtonElementVtbl;
    interface IHTMLInputButtonElement
    {
        CONST_VTBL struct IHTMLInputButtonElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_status(This,v) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
    ( (This)->lpVtbl -> createTextRange(This,range) )
EXTERN_C const IID IID_IHTMLInputHiddenElement;
    typedef struct IHTMLInputHiddenElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLInputHiddenElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLInputHiddenElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLInputHiddenElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLInputHiddenElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLInputHiddenElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLInputHiddenElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLInputHiddenElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLInputHiddenElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLInputHiddenElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLInputHiddenElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLInputHiddenElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLInputHiddenElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_status )(
            __RPC__in IHTMLInputHiddenElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLInputHiddenElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLInputHiddenElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLInputHiddenElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLInputHiddenElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
                   HRESULT ( STDMETHODCALLTYPE *createTextRange )(
            __RPC__in IHTMLInputHiddenElement * This,
                                __RPC__deref_out_opt IHTMLTxtRange **range);
        END_INTERFACE
    } IHTMLInputHiddenElementVtbl;
    interface IHTMLInputHiddenElement
    {
        CONST_VTBL struct IHTMLInputHiddenElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_status(This,v) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
    ( (This)->lpVtbl -> createTextRange(This,range) )
EXTERN_C const IID IID_IHTMLInputTextElement;
    typedef struct IHTMLInputTextElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLInputTextElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLInputTextElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLInputTextElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLInputTextElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLInputTextElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLInputTextElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLInputTextElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLInputTextElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLInputTextElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_status )(
            __RPC__in IHTMLInputTextElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLInputTextElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_defaultValue )(
            __RPC__in IHTMLInputTextElement * This,
                       __RPC__in BSTR v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_defaultValue )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_size )(
            __RPC__in IHTMLInputTextElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_size )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_maxLength )(
            __RPC__in IHTMLInputTextElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_maxLength )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *select )(
            __RPC__in IHTMLInputTextElement * This);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onchange )(
            __RPC__in IHTMLInputTextElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onchange )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onselect )(
            __RPC__in IHTMLInputTextElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onselect )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_readOnly )(
            __RPC__in IHTMLInputTextElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_readOnly )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *createTextRange )(
            __RPC__in IHTMLInputTextElement * This,
                                __RPC__deref_out_opt IHTMLTxtRange **range);
        END_INTERFACE
    } IHTMLInputTextElementVtbl;
    interface IHTMLInputTextElement
    {
        CONST_VTBL struct IHTMLInputTextElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_status(This,v) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
    ( (This)->lpVtbl -> put_defaultValue(This,v) )
    ( (This)->lpVtbl -> get_defaultValue(This,p) )
    ( (This)->lpVtbl -> put_size(This,v) )
    ( (This)->lpVtbl -> get_size(This,p) )
    ( (This)->lpVtbl -> put_maxLength(This,v) )
    ( (This)->lpVtbl -> get_maxLength(This,p) )
    ( (This)->lpVtbl -> select(This) )
    ( (This)->lpVtbl -> put_onchange(This,v) )
    ( (This)->lpVtbl -> get_onchange(This,p) )
    ( (This)->lpVtbl -> put_onselect(This,v) )
    ( (This)->lpVtbl -> get_onselect(This,p) )
    ( (This)->lpVtbl -> put_readOnly(This,v) )
    ( (This)->lpVtbl -> get_readOnly(This,p) )
    ( (This)->lpVtbl -> createTextRange(This,range) )
EXTERN_C const IID IID_IHTMLInputTextElement2;
    typedef struct IHTMLInputTextElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLInputTextElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLInputTextElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLInputTextElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLInputTextElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLInputTextElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLInputTextElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLInputTextElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_selectionStart )(
            __RPC__in IHTMLInputTextElement2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectionStart )(
            __RPC__in IHTMLInputTextElement2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selectionEnd )(
            __RPC__in IHTMLInputTextElement2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectionEnd )(
            __RPC__in IHTMLInputTextElement2 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *setSelectionRange )(
            __RPC__in IHTMLInputTextElement2 * This,
                       long start,
                       long end);
        END_INTERFACE
    } IHTMLInputTextElement2Vtbl;
    interface IHTMLInputTextElement2
    {
        CONST_VTBL struct IHTMLInputTextElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_selectionStart(This,v) )
    ( (This)->lpVtbl -> get_selectionStart(This,p) )
    ( (This)->lpVtbl -> put_selectionEnd(This,v) )
    ( (This)->lpVtbl -> get_selectionEnd(This,p) )
    ( (This)->lpVtbl -> setSelectionRange(This,start,end) )
EXTERN_C const IID IID_IHTMLInputFileElement;
    typedef struct IHTMLInputFileElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLInputFileElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLInputFileElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLInputFileElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLInputFileElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLInputFileElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLInputFileElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLInputFileElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLInputFileElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLInputFileElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLInputFileElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_status )(
            __RPC__in IHTMLInputFileElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLInputFileElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLInputFileElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLInputFileElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLInputFileElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_size )(
            __RPC__in IHTMLInputFileElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_size )(
            __RPC__in IHTMLInputFileElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_maxLength )(
            __RPC__in IHTMLInputFileElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_maxLength )(
            __RPC__in IHTMLInputFileElement * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *select )(
            __RPC__in IHTMLInputFileElement * This);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onchange )(
            __RPC__in IHTMLInputFileElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onchange )(
            __RPC__in IHTMLInputFileElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onselect )(
            __RPC__in IHTMLInputFileElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onselect )(
            __RPC__in IHTMLInputFileElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLInputFileElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLInputFileElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLInputFileElementVtbl;
    interface IHTMLInputFileElement
    {
        CONST_VTBL struct IHTMLInputFileElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_status(This,v) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
    ( (This)->lpVtbl -> put_size(This,v) )
    ( (This)->lpVtbl -> get_size(This,p) )
    ( (This)->lpVtbl -> put_maxLength(This,v) )
    ( (This)->lpVtbl -> get_maxLength(This,p) )
    ( (This)->lpVtbl -> select(This) )
    ( (This)->lpVtbl -> put_onchange(This,v) )
    ( (This)->lpVtbl -> get_onchange(This,p) )
    ( (This)->lpVtbl -> put_onselect(This,v) )
    ( (This)->lpVtbl -> get_onselect(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
EXTERN_C const IID IID_IHTMLOptionButtonElement;
    typedef struct IHTMLOptionButtonElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLOptionButtonElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLOptionButtonElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLOptionButtonElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLOptionButtonElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLOptionButtonElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLOptionButtonElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLOptionButtonElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLOptionButtonElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLOptionButtonElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLOptionButtonElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLOptionButtonElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLOptionButtonElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                      HRESULT ( STDMETHODCALLTYPE *put_checked )(
            __RPC__in IHTMLOptionButtonElement * This,
                       VARIANT_BOOL v);
                                      HRESULT ( STDMETHODCALLTYPE *get_checked )(
            __RPC__in IHTMLOptionButtonElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                      HRESULT ( STDMETHODCALLTYPE *put_defaultChecked )(
            __RPC__in IHTMLOptionButtonElement * This,
                       VARIANT_BOOL v);
                                      HRESULT ( STDMETHODCALLTYPE *get_defaultChecked )(
            __RPC__in IHTMLOptionButtonElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onchange )(
            __RPC__in IHTMLOptionButtonElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onchange )(
            __RPC__in IHTMLOptionButtonElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLOptionButtonElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLOptionButtonElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_status )(
            __RPC__in IHTMLOptionButtonElement * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLOptionButtonElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                      HRESULT ( STDMETHODCALLTYPE *put_indeterminate )(
            __RPC__in IHTMLOptionButtonElement * This,
                       VARIANT_BOOL v);
                                      HRESULT ( STDMETHODCALLTYPE *get_indeterminate )(
            __RPC__in IHTMLOptionButtonElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLOptionButtonElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
        END_INTERFACE
    } IHTMLOptionButtonElementVtbl;
    interface IHTMLOptionButtonElement
    {
        CONST_VTBL struct IHTMLOptionButtonElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_checked(This,v) )
    ( (This)->lpVtbl -> get_checked(This,p) )
    ( (This)->lpVtbl -> put_defaultChecked(This,v) )
    ( (This)->lpVtbl -> get_defaultChecked(This,p) )
    ( (This)->lpVtbl -> put_onchange(This,v) )
    ( (This)->lpVtbl -> get_onchange(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> put_status(This,v) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> put_indeterminate(This,v) )
    ( (This)->lpVtbl -> get_indeterminate(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
EXTERN_C const IID IID_IHTMLInputImage;
    typedef struct IHTMLInputImageVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLInputImage * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLInputImage * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLInputImage * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLInputImage * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLInputImage * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLInputImage * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLInputImage * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLInputImage * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_border )(
            __RPC__in IHTMLInputImage * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_border )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_vspace )(
            __RPC__in IHTMLInputImage * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_vspace )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_hspace )(
            __RPC__in IHTMLInputImage * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_hspace )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_alt )(
            __RPC__in IHTMLInputImage * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_alt )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLInputImage * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_lowsrc )(
            __RPC__in IHTMLInputImage * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_lowsrc )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_vrml )(
            __RPC__in IHTMLInputImage * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_vrml )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_dynsrc )(
            __RPC__in IHTMLInputImage * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_dynsrc )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_complete )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_loop )(
            __RPC__in IHTMLInputImage * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_loop )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLInputImage * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLInputImage * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLInputImage * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onabort )(
            __RPC__in IHTMLInputImage * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onabort )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLInputImage * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLInputImage * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLInputImage * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_start )(
            __RPC__in IHTMLInputImage * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_start )(
            __RPC__in IHTMLInputImage * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLInputImageVtbl;
    interface IHTMLInputImage
    {
        CONST_VTBL struct IHTMLInputImageVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> put_border(This,v) )
    ( (This)->lpVtbl -> get_border(This,p) )
    ( (This)->lpVtbl -> put_vspace(This,v) )
    ( (This)->lpVtbl -> get_vspace(This,p) )
    ( (This)->lpVtbl -> put_hspace(This,v) )
    ( (This)->lpVtbl -> get_hspace(This,p) )
    ( (This)->lpVtbl -> put_alt(This,v) )
    ( (This)->lpVtbl -> get_alt(This,p) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> put_lowsrc(This,v) )
    ( (This)->lpVtbl -> get_lowsrc(This,p) )
    ( (This)->lpVtbl -> put_vrml(This,v) )
    ( (This)->lpVtbl -> get_vrml(This,p) )
    ( (This)->lpVtbl -> put_dynsrc(This,v) )
    ( (This)->lpVtbl -> get_dynsrc(This,p) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> get_complete(This,p) )
    ( (This)->lpVtbl -> put_loop(This,v) )
    ( (This)->lpVtbl -> get_loop(This,p) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> put_onabort(This,v) )
    ( (This)->lpVtbl -> get_onabort(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_start(This,v) )
    ( (This)->lpVtbl -> get_start(This,p) )
EXTERN_C const IID IID_IHTMLInputRangeElement;
    typedef struct IHTMLInputRangeElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLInputRangeElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLInputRangeElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLInputRangeElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLInputRangeElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLInputRangeElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLInputRangeElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLInputRangeElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLInputRangeElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLInputRangeElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLInputRangeElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_alt )(
            __RPC__in IHTMLInputRangeElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_alt )(
            __RPC__in IHTMLInputRangeElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLInputRangeElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLInputRangeElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLInputRangeElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLInputRangeElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_min )(
            __RPC__in IHTMLInputRangeElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_min )(
            __RPC__in IHTMLInputRangeElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_max )(
            __RPC__in IHTMLInputRangeElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_max )(
            __RPC__in IHTMLInputRangeElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_step )(
            __RPC__in IHTMLInputRangeElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_step )(
            __RPC__in IHTMLInputRangeElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_valueAsNumber )(
            __RPC__in IHTMLInputRangeElement * This,
                       double v);
                            HRESULT ( STDMETHODCALLTYPE *get_valueAsNumber )(
            __RPC__in IHTMLInputRangeElement * This,
                                __RPC__out double *p);
                   HRESULT ( STDMETHODCALLTYPE *stepUp )(
            __RPC__in IHTMLInputRangeElement * This,
                                     long n);
                   HRESULT ( STDMETHODCALLTYPE *stepDown )(
            __RPC__in IHTMLInputRangeElement * This,
                                     long n);
        END_INTERFACE
    } IHTMLInputRangeElementVtbl;
    interface IHTMLInputRangeElement
    {
        CONST_VTBL struct IHTMLInputRangeElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_alt(This,v) )
    ( (This)->lpVtbl -> get_alt(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_min(This,v) )
    ( (This)->lpVtbl -> get_min(This,p) )
    ( (This)->lpVtbl -> put_max(This,v) )
    ( (This)->lpVtbl -> get_max(This,p) )
    ( (This)->lpVtbl -> put_step(This,v) )
    ( (This)->lpVtbl -> get_step(This,p) )
    ( (This)->lpVtbl -> put_valueAsNumber(This,v) )
    ( (This)->lpVtbl -> get_valueAsNumber(This,p) )
    ( (This)->lpVtbl -> stepUp(This,n) )
    ( (This)->lpVtbl -> stepDown(This,n) )
EXTERN_C const IID DIID_DispHTMLInputElement;
    typedef struct DispHTMLInputElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLInputElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLInputElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLInputElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLInputElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLInputElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLInputElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLInputElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLInputElementVtbl;
    interface DispHTMLInputElement
    {
        CONST_VTBL struct DispHTMLInputElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLInputElement;
class DECLSPEC_UUID("3050f5d8-98b5-11cf-bb82-00aa00bdce0b")
HTMLInputElement;
EXTERN_C const IID IID_IHTMLTextAreaElement;
    typedef struct IHTMLTextAreaElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTextAreaElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTextAreaElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTextAreaElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTextAreaElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTextAreaElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTextAreaElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTextAreaElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLTextAreaElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLTextAreaElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_status )(
            __RPC__in IHTMLTextAreaElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLTextAreaElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
                                                           HRESULT ( STDMETHODCALLTYPE *put_defaultValue )(
            __RPC__in IHTMLTextAreaElement * This,
                       __RPC__in BSTR v);
                                                           HRESULT ( STDMETHODCALLTYPE *get_defaultValue )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *select )(
            __RPC__in IHTMLTextAreaElement * This);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onchange )(
            __RPC__in IHTMLTextAreaElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onchange )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onselect )(
            __RPC__in IHTMLTextAreaElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onselect )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_readOnly )(
            __RPC__in IHTMLTextAreaElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_readOnly )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rows )(
            __RPC__in IHTMLTextAreaElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rows )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_cols )(
            __RPC__in IHTMLTextAreaElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_cols )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_wrap )(
            __RPC__in IHTMLTextAreaElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_wrap )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *createTextRange )(
            __RPC__in IHTMLTextAreaElement * This,
                                __RPC__deref_out_opt IHTMLTxtRange **range);
        END_INTERFACE
    } IHTMLTextAreaElementVtbl;
    interface IHTMLTextAreaElement
    {
        CONST_VTBL struct IHTMLTextAreaElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_status(This,v) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
    ( (This)->lpVtbl -> put_defaultValue(This,v) )
    ( (This)->lpVtbl -> get_defaultValue(This,p) )
    ( (This)->lpVtbl -> select(This) )
    ( (This)->lpVtbl -> put_onchange(This,v) )
    ( (This)->lpVtbl -> get_onchange(This,p) )
    ( (This)->lpVtbl -> put_onselect(This,v) )
    ( (This)->lpVtbl -> get_onselect(This,p) )
    ( (This)->lpVtbl -> put_readOnly(This,v) )
    ( (This)->lpVtbl -> get_readOnly(This,p) )
    ( (This)->lpVtbl -> put_rows(This,v) )
    ( (This)->lpVtbl -> get_rows(This,p) )
    ( (This)->lpVtbl -> put_cols(This,v) )
    ( (This)->lpVtbl -> get_cols(This,p) )
    ( (This)->lpVtbl -> put_wrap(This,v) )
    ( (This)->lpVtbl -> get_wrap(This,p) )
    ( (This)->lpVtbl -> createTextRange(This,range) )
EXTERN_C const IID IID_IHTMLTextAreaElement2;
    typedef struct IHTMLTextAreaElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTextAreaElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTextAreaElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTextAreaElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTextAreaElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTextAreaElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTextAreaElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTextAreaElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_selectionStart )(
            __RPC__in IHTMLTextAreaElement2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectionStart )(
            __RPC__in IHTMLTextAreaElement2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selectionEnd )(
            __RPC__in IHTMLTextAreaElement2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectionEnd )(
            __RPC__in IHTMLTextAreaElement2 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *setSelectionRange )(
            __RPC__in IHTMLTextAreaElement2 * This,
                       long start,
                       long end);
        END_INTERFACE
    } IHTMLTextAreaElement2Vtbl;
    interface IHTMLTextAreaElement2
    {
        CONST_VTBL struct IHTMLTextAreaElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_selectionStart(This,v) )
    ( (This)->lpVtbl -> get_selectionStart(This,p) )
    ( (This)->lpVtbl -> put_selectionEnd(This,v) )
    ( (This)->lpVtbl -> get_selectionEnd(This,p) )
    ( (This)->lpVtbl -> setSelectionRange(This,start,end) )
EXTERN_C const IID DIID_DispHTMLTextAreaElement;
    typedef struct DispHTMLTextAreaElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLTextAreaElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLTextAreaElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLTextAreaElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLTextAreaElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLTextAreaElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLTextAreaElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLTextAreaElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLTextAreaElementVtbl;
    interface DispHTMLTextAreaElement
    {
        CONST_VTBL struct DispHTMLTextAreaElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLTextAreaElement;
class DECLSPEC_UUID("3050f2ac-98b5-11cf-bb82-00aa00bdce0b")
HTMLTextAreaElement;
EXTERN_C const IID DIID_DispHTMLRichtextElement;
    typedef struct DispHTMLRichtextElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLRichtextElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLRichtextElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLRichtextElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLRichtextElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLRichtextElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLRichtextElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLRichtextElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLRichtextElementVtbl;
    interface DispHTMLRichtextElement
    {
        CONST_VTBL struct DispHTMLRichtextElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLRichtextElement;
class DECLSPEC_UUID("3050f2df-98b5-11cf-bb82-00aa00bdce0b")
HTMLRichtextElement;
EXTERN_C const IID IID_IHTMLButtonElement;
    typedef struct IHTMLButtonElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLButtonElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLButtonElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLButtonElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLButtonElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLButtonElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLButtonElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLButtonElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLButtonElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLButtonElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLButtonElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLButtonElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLButtonElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_status )(
            __RPC__in IHTMLButtonElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLButtonElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLButtonElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLButtonElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLButtonElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
                   HRESULT ( STDMETHODCALLTYPE *createTextRange )(
            __RPC__in IHTMLButtonElement * This,
                                __RPC__deref_out_opt IHTMLTxtRange **range);
        END_INTERFACE
    } IHTMLButtonElementVtbl;
    interface IHTMLButtonElement
    {
        CONST_VTBL struct IHTMLButtonElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_status(This,v) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
    ( (This)->lpVtbl -> createTextRange(This,range) )
EXTERN_C const IID IID_IHTMLButtonElement2;
    typedef struct IHTMLButtonElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLButtonElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLButtonElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLButtonElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLButtonElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLButtonElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLButtonElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLButtonElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLButtonElement2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLButtonElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLButtonElement2Vtbl;
    interface IHTMLButtonElement2
    {
        CONST_VTBL struct IHTMLButtonElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
EXTERN_C const IID DIID_DispHTMLButtonElement;
    typedef struct DispHTMLButtonElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLButtonElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLButtonElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLButtonElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLButtonElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLButtonElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLButtonElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLButtonElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLButtonElementVtbl;
    interface DispHTMLButtonElement
    {
        CONST_VTBL struct DispHTMLButtonElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLButtonElement;
class DECLSPEC_UUID("3050f2c6-98b5-11cf-bb82-00aa00bdce0b")
HTMLButtonElement;
EXTERN_C const IID DIID_HTMLMarqueeElementEvents2;
    typedef struct HTMLMarqueeElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLMarqueeElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLMarqueeElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLMarqueeElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLMarqueeElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLMarqueeElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLMarqueeElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLMarqueeElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLMarqueeElementEvents2Vtbl;
    interface HTMLMarqueeElementEvents2
    {
        CONST_VTBL struct HTMLMarqueeElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLMarqueeElementEvents;
    typedef struct HTMLMarqueeElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLMarqueeElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLMarqueeElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLMarqueeElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLMarqueeElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLMarqueeElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLMarqueeElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLMarqueeElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLMarqueeElementEventsVtbl;
    interface HTMLMarqueeElementEvents
    {
        CONST_VTBL struct HTMLMarqueeElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLMarqueeElement;
    typedef struct IHTMLMarqueeElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMarqueeElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMarqueeElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMarqueeElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMarqueeElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMarqueeElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMarqueeElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMarqueeElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_bgColor )(
            __RPC__in IHTMLMarqueeElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_bgColor )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_scrollDelay )(
            __RPC__in IHTMLMarqueeElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_scrollDelay )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_direction )(
            __RPC__in IHTMLMarqueeElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_direction )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_behavior )(
            __RPC__in IHTMLMarqueeElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_behavior )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_scrollAmount )(
            __RPC__in IHTMLMarqueeElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_scrollAmount )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_loop )(
            __RPC__in IHTMLMarqueeElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_loop )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_vspace )(
            __RPC__in IHTMLMarqueeElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_vspace )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_hspace )(
            __RPC__in IHTMLMarqueeElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_hspace )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfinish )(
            __RPC__in IHTMLMarqueeElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfinish )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onstart )(
            __RPC__in IHTMLMarqueeElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onstart )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbounce )(
            __RPC__in IHTMLMarqueeElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbounce )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLMarqueeElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLMarqueeElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_trueSpeed )(
            __RPC__in IHTMLMarqueeElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_trueSpeed )(
            __RPC__in IHTMLMarqueeElement * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *start )(
            __RPC__in IHTMLMarqueeElement * This);
                   HRESULT ( STDMETHODCALLTYPE *stop )(
            __RPC__in IHTMLMarqueeElement * This);
        END_INTERFACE
    } IHTMLMarqueeElementVtbl;
    interface IHTMLMarqueeElement
    {
        CONST_VTBL struct IHTMLMarqueeElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_bgColor(This,v) )
    ( (This)->lpVtbl -> get_bgColor(This,p) )
    ( (This)->lpVtbl -> put_scrollDelay(This,v) )
    ( (This)->lpVtbl -> get_scrollDelay(This,p) )
    ( (This)->lpVtbl -> put_direction(This,v) )
    ( (This)->lpVtbl -> get_direction(This,p) )
    ( (This)->lpVtbl -> put_behavior(This,v) )
    ( (This)->lpVtbl -> get_behavior(This,p) )
    ( (This)->lpVtbl -> put_scrollAmount(This,v) )
    ( (This)->lpVtbl -> get_scrollAmount(This,p) )
    ( (This)->lpVtbl -> put_loop(This,v) )
    ( (This)->lpVtbl -> get_loop(This,p) )
    ( (This)->lpVtbl -> put_vspace(This,v) )
    ( (This)->lpVtbl -> get_vspace(This,p) )
    ( (This)->lpVtbl -> put_hspace(This,v) )
    ( (This)->lpVtbl -> get_hspace(This,p) )
    ( (This)->lpVtbl -> put_onfinish(This,v) )
    ( (This)->lpVtbl -> get_onfinish(This,p) )
    ( (This)->lpVtbl -> put_onstart(This,v) )
    ( (This)->lpVtbl -> get_onstart(This,p) )
    ( (This)->lpVtbl -> put_onbounce(This,v) )
    ( (This)->lpVtbl -> get_onbounce(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_trueSpeed(This,v) )
    ( (This)->lpVtbl -> get_trueSpeed(This,p) )
    ( (This)->lpVtbl -> start(This) )
    ( (This)->lpVtbl -> stop(This) )
EXTERN_C const IID DIID_DispHTMLMarqueeElement;
    typedef struct DispHTMLMarqueeElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLMarqueeElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLMarqueeElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLMarqueeElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLMarqueeElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLMarqueeElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLMarqueeElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLMarqueeElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLMarqueeElementVtbl;
    interface DispHTMLMarqueeElement
    {
        CONST_VTBL struct DispHTMLMarqueeElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLMarqueeElement;
class DECLSPEC_UUID("3050f2b9-98b5-11cf-bb82-00aa00bdce0b")
HTMLMarqueeElement;
EXTERN_C const IID IID_IHTMLHtmlElement;
    typedef struct IHTMLHtmlElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLHtmlElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLHtmlElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLHtmlElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLHtmlElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLHtmlElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLHtmlElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLHtmlElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_version )(
            __RPC__in IHTMLHtmlElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_version )(
            __RPC__in IHTMLHtmlElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLHtmlElementVtbl;
    interface IHTMLHtmlElement
    {
        CONST_VTBL struct IHTMLHtmlElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_version(This,v) )
    ( (This)->lpVtbl -> get_version(This,p) )
EXTERN_C const IID IID_IHTMLHeadElement;
    typedef struct IHTMLHeadElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLHeadElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLHeadElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLHeadElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLHeadElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLHeadElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLHeadElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLHeadElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_profile )(
            __RPC__in IHTMLHeadElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_profile )(
            __RPC__in IHTMLHeadElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLHeadElementVtbl;
    interface IHTMLHeadElement
    {
        CONST_VTBL struct IHTMLHeadElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_profile(This,v) )
    ( (This)->lpVtbl -> get_profile(This,p) )
EXTERN_C const IID IID_IHTMLHeadElement2;
    typedef struct IHTMLHeadElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLHeadElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLHeadElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLHeadElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLHeadElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLHeadElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLHeadElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLHeadElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_profile )(
            __RPC__in IHTMLHeadElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_profile )(
            __RPC__in IHTMLHeadElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLHeadElement2Vtbl;
    interface IHTMLHeadElement2
    {
        CONST_VTBL struct IHTMLHeadElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_profile(This,v) )
    ( (This)->lpVtbl -> get_profile(This,p) )
EXTERN_C const IID IID_IHTMLTitleElement;
    typedef struct IHTMLTitleElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTitleElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTitleElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTitleElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTitleElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTitleElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTitleElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTitleElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                      HRESULT ( STDMETHODCALLTYPE *put_text )(
            __RPC__in IHTMLTitleElement * This,
                       __RPC__in BSTR v);
                                      HRESULT ( STDMETHODCALLTYPE *get_text )(
            __RPC__in IHTMLTitleElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLTitleElementVtbl;
    interface IHTMLTitleElement
    {
        CONST_VTBL struct IHTMLTitleElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_text(This,v) )
    ( (This)->lpVtbl -> get_text(This,p) )
EXTERN_C const IID IID_IHTMLMetaElement;
    typedef struct IHTMLMetaElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMetaElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMetaElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMetaElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMetaElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMetaElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMetaElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMetaElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_httpEquiv )(
            __RPC__in IHTMLMetaElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_httpEquiv )(
            __RPC__in IHTMLMetaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_content )(
            __RPC__in IHTMLMetaElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_content )(
            __RPC__in IHTMLMetaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLMetaElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLMetaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_url )(
            __RPC__in IHTMLMetaElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_url )(
            __RPC__in IHTMLMetaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_charset )(
            __RPC__in IHTMLMetaElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_charset )(
            __RPC__in IHTMLMetaElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLMetaElementVtbl;
    interface IHTMLMetaElement
    {
        CONST_VTBL struct IHTMLMetaElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_httpEquiv(This,v) )
    ( (This)->lpVtbl -> get_httpEquiv(This,p) )
    ( (This)->lpVtbl -> put_content(This,v) )
    ( (This)->lpVtbl -> get_content(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_url(This,v) )
    ( (This)->lpVtbl -> get_url(This,p) )
    ( (This)->lpVtbl -> put_charset(This,v) )
    ( (This)->lpVtbl -> get_charset(This,p) )
EXTERN_C const IID IID_IHTMLMetaElement2;
    typedef struct IHTMLMetaElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMetaElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMetaElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMetaElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMetaElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMetaElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMetaElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMetaElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scheme )(
            __RPC__in IHTMLMetaElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scheme )(
            __RPC__in IHTMLMetaElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLMetaElement2Vtbl;
    interface IHTMLMetaElement2
    {
        CONST_VTBL struct IHTMLMetaElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_scheme(This,v) )
    ( (This)->lpVtbl -> get_scheme(This,p) )
EXTERN_C const IID IID_IHTMLMetaElement3;
    typedef struct IHTMLMetaElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMetaElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMetaElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMetaElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMetaElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMetaElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMetaElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMetaElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_url )(
            __RPC__in IHTMLMetaElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_url )(
            __RPC__in IHTMLMetaElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLMetaElement3Vtbl;
    interface IHTMLMetaElement3
    {
        CONST_VTBL struct IHTMLMetaElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_url(This,v) )
    ( (This)->lpVtbl -> get_url(This,p) )
EXTERN_C const IID IID_IHTMLBaseElement;
    typedef struct IHTMLBaseElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBaseElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBaseElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBaseElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBaseElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBaseElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBaseElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBaseElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_href )(
            __RPC__in IHTMLBaseElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLBaseElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_target )(
            __RPC__in IHTMLBaseElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_target )(
            __RPC__in IHTMLBaseElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLBaseElementVtbl;
    interface IHTMLBaseElement
    {
        CONST_VTBL struct IHTMLBaseElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_href(This,v) )
    ( (This)->lpVtbl -> get_href(This,p) )
    ( (This)->lpVtbl -> put_target(This,v) )
    ( (This)->lpVtbl -> get_target(This,p) )
EXTERN_C const IID IID_IHTMLBaseElement2;
    typedef struct IHTMLBaseElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBaseElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBaseElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBaseElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBaseElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBaseElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBaseElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBaseElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_href )(
            __RPC__in IHTMLBaseElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLBaseElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLBaseElement2Vtbl;
    interface IHTMLBaseElement2
    {
        CONST_VTBL struct IHTMLBaseElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_href(This,v) )
    ( (This)->lpVtbl -> get_href(This,p) )
EXTERN_C const IID DIID_DispHTMLHtmlElement;
    typedef struct DispHTMLHtmlElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLHtmlElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLHtmlElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLHtmlElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLHtmlElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLHtmlElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLHtmlElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLHtmlElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLHtmlElementVtbl;
    interface DispHTMLHtmlElement
    {
        CONST_VTBL struct DispHTMLHtmlElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLHtmlElement;
class DECLSPEC_UUID("3050f491-98b5-11cf-bb82-00aa00bdce0b")
HTMLHtmlElement;
EXTERN_C const IID DIID_DispHTMLHeadElement;
    typedef struct DispHTMLHeadElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLHeadElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLHeadElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLHeadElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLHeadElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLHeadElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLHeadElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLHeadElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLHeadElementVtbl;
    interface DispHTMLHeadElement
    {
        CONST_VTBL struct DispHTMLHeadElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLHeadElement;
class DECLSPEC_UUID("3050f493-98b5-11cf-bb82-00aa00bdce0b")
HTMLHeadElement;
EXTERN_C const IID DIID_DispHTMLTitleElement;
    typedef struct DispHTMLTitleElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLTitleElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLTitleElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLTitleElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLTitleElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLTitleElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLTitleElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLTitleElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLTitleElementVtbl;
    interface DispHTMLTitleElement
    {
        CONST_VTBL struct DispHTMLTitleElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLTitleElement;
class DECLSPEC_UUID("3050f284-98b5-11cf-bb82-00aa00bdce0b")
HTMLTitleElement;
EXTERN_C const IID DIID_DispHTMLMetaElement;
    typedef struct DispHTMLMetaElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLMetaElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLMetaElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLMetaElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLMetaElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLMetaElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLMetaElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLMetaElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLMetaElementVtbl;
    interface DispHTMLMetaElement
    {
        CONST_VTBL struct DispHTMLMetaElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLMetaElement;
class DECLSPEC_UUID("3050f275-98b5-11cf-bb82-00aa00bdce0b")
HTMLMetaElement;
EXTERN_C const IID DIID_DispHTMLBaseElement;
    typedef struct DispHTMLBaseElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLBaseElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLBaseElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLBaseElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLBaseElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLBaseElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLBaseElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLBaseElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLBaseElementVtbl;
    interface DispHTMLBaseElement
    {
        CONST_VTBL struct DispHTMLBaseElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLBaseElement;
class DECLSPEC_UUID("3050f276-98b5-11cf-bb82-00aa00bdce0b")
HTMLBaseElement;
EXTERN_C const IID IID_IHTMLIsIndexElement;
    typedef struct IHTMLIsIndexElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLIsIndexElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLIsIndexElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLIsIndexElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLIsIndexElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLIsIndexElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLIsIndexElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLIsIndexElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_prompt )(
            __RPC__in IHTMLIsIndexElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_prompt )(
            __RPC__in IHTMLIsIndexElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_action )(
            __RPC__in IHTMLIsIndexElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_action )(
            __RPC__in IHTMLIsIndexElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLIsIndexElementVtbl;
    interface IHTMLIsIndexElement
    {
        CONST_VTBL struct IHTMLIsIndexElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_prompt(This,v) )
    ( (This)->lpVtbl -> get_prompt(This,p) )
    ( (This)->lpVtbl -> put_action(This,v) )
    ( (This)->lpVtbl -> get_action(This,p) )
EXTERN_C const IID IID_IHTMLIsIndexElement2;
    typedef struct IHTMLIsIndexElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLIsIndexElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLIsIndexElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLIsIndexElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLIsIndexElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLIsIndexElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLIsIndexElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLIsIndexElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLIsIndexElement2 * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
        END_INTERFACE
    } IHTMLIsIndexElement2Vtbl;
    interface IHTMLIsIndexElement2
    {
        CONST_VTBL struct IHTMLIsIndexElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_form(This,p) )
EXTERN_C const IID IID_IHTMLNextIdElement;
    typedef struct IHTMLNextIdElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLNextIdElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLNextIdElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLNextIdElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLNextIdElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLNextIdElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLNextIdElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLNextIdElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_n )(
            __RPC__in IHTMLNextIdElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_n )(
            __RPC__in IHTMLNextIdElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLNextIdElementVtbl;
    interface IHTMLNextIdElement
    {
        CONST_VTBL struct IHTMLNextIdElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_n(This,v) )
    ( (This)->lpVtbl -> get_n(This,p) )
EXTERN_C const IID DIID_DispHTMLIsIndexElement;
    typedef struct DispHTMLIsIndexElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLIsIndexElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLIsIndexElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLIsIndexElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLIsIndexElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLIsIndexElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLIsIndexElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLIsIndexElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLIsIndexElementVtbl;
    interface DispHTMLIsIndexElement
    {
        CONST_VTBL struct DispHTMLIsIndexElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLIsIndexElement;
class DECLSPEC_UUID("3050f278-98b5-11cf-bb82-00aa00bdce0b")
HTMLIsIndexElement;
EXTERN_C const IID DIID_DispHTMLNextIdElement;
    typedef struct DispHTMLNextIdElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLNextIdElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLNextIdElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLNextIdElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLNextIdElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLNextIdElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLNextIdElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLNextIdElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLNextIdElementVtbl;
    interface DispHTMLNextIdElement
    {
        CONST_VTBL struct DispHTMLNextIdElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLNextIdElement;
class DECLSPEC_UUID("3050f279-98b5-11cf-bb82-00aa00bdce0b")
HTMLNextIdElement;
EXTERN_C const IID IID_IHTMLBaseFontElement;
    typedef struct IHTMLBaseFontElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBaseFontElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBaseFontElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBaseFontElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBaseFontElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBaseFontElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBaseFontElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBaseFontElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_color )(
            __RPC__in IHTMLBaseFontElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_color )(
            __RPC__in IHTMLBaseFontElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_face )(
            __RPC__in IHTMLBaseFontElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_face )(
            __RPC__in IHTMLBaseFontElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_size )(
            __RPC__in IHTMLBaseFontElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_size )(
            __RPC__in IHTMLBaseFontElement * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLBaseFontElementVtbl;
    interface IHTMLBaseFontElement
    {
        CONST_VTBL struct IHTMLBaseFontElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_color(This,v) )
    ( (This)->lpVtbl -> get_color(This,p) )
    ( (This)->lpVtbl -> put_face(This,v) )
    ( (This)->lpVtbl -> get_face(This,p) )
    ( (This)->lpVtbl -> put_size(This,v) )
    ( (This)->lpVtbl -> get_size(This,p) )
EXTERN_C const IID DIID_DispHTMLBaseFontElement;
    typedef struct DispHTMLBaseFontElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLBaseFontElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLBaseFontElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLBaseFontElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLBaseFontElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLBaseFontElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLBaseFontElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLBaseFontElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLBaseFontElementVtbl;
    interface DispHTMLBaseFontElement
    {
        CONST_VTBL struct DispHTMLBaseFontElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLBaseFontElement;
class DECLSPEC_UUID("3050f282-98b5-11cf-bb82-00aa00bdce0b")
HTMLBaseFontElement;
EXTERN_C const IID IID_IHTMLUnknownElement;
    typedef struct IHTMLUnknownElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLUnknownElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLUnknownElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLUnknownElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLUnknownElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLUnknownElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLUnknownElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLUnknownElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } IHTMLUnknownElementVtbl;
    interface IHTMLUnknownElement
    {
        CONST_VTBL struct IHTMLUnknownElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispHTMLUnknownElement;
    typedef struct DispHTMLUnknownElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLUnknownElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLUnknownElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLUnknownElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLUnknownElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLUnknownElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLUnknownElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLUnknownElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLUnknownElementVtbl;
    interface DispHTMLUnknownElement
    {
        CONST_VTBL struct DispHTMLUnknownElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLUnknownElement;
class DECLSPEC_UUID("3050f268-98b5-11cf-bb82-00aa00bdce0b")
HTMLUnknownElement;
EXTERN_C const IID IID_IWebGeolocation;
    typedef struct IWebGeolocationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IWebGeolocation * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IWebGeolocation * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IWebGeolocation * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IWebGeolocation * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IWebGeolocation * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IWebGeolocation * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IWebGeolocation * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *getCurrentPosition )(
            __RPC__in IWebGeolocation * This,
                       __RPC__in_opt IDispatch *successCallback,
                                     __RPC__in_opt IDispatch *errorCallback,
                                     __RPC__in_opt IDispatch *options);
                   HRESULT ( STDMETHODCALLTYPE *watchPosition )(
            __RPC__in IWebGeolocation * This,
                       __RPC__in_opt IDispatch *successCallback,
                                     __RPC__in_opt IDispatch *errorCallback,
                                     __RPC__in_opt IDispatch *options,
                                __RPC__out long *watchId);
                   HRESULT ( STDMETHODCALLTYPE *clearWatch )(
            __RPC__in IWebGeolocation * This,
                       long watchId);
        END_INTERFACE
    } IWebGeolocationVtbl;
    interface IWebGeolocation
    {
        CONST_VTBL struct IWebGeolocationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> getCurrentPosition(This,successCallback,errorCallback,options) )
    ( (This)->lpVtbl -> watchPosition(This,successCallback,errorCallback,options,watchId) )
    ( (This)->lpVtbl -> clearWatch(This,watchId) )
EXTERN_C const IID IID_IHTMLMimeTypesCollection;
    typedef struct IHTMLMimeTypesCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMimeTypesCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMimeTypesCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMimeTypesCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMimeTypesCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMimeTypesCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMimeTypesCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMimeTypesCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLMimeTypesCollection * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLMimeTypesCollectionVtbl;
    interface IHTMLMimeTypesCollection
    {
        CONST_VTBL struct IHTMLMimeTypesCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
EXTERN_C const IID IID_IHTMLPluginsCollection;
    typedef struct IHTMLPluginsCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPluginsCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPluginsCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPluginsCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLPluginsCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLPluginsCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLPluginsCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLPluginsCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLPluginsCollection * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *refresh )(
            __RPC__in IHTMLPluginsCollection * This,
                                     VARIANT_BOOL reload);
        END_INTERFACE
    } IHTMLPluginsCollectionVtbl;
    interface IHTMLPluginsCollection
    {
        CONST_VTBL struct IHTMLPluginsCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> refresh(This,reload) )
EXTERN_C const IID IID_IOmHistory;
    typedef struct IOmHistoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IOmHistory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IOmHistory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IOmHistory * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IOmHistory * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IOmHistory * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IOmHistory * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IOmHistory * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IOmHistory * This,
                                __RPC__out short *p);
                   HRESULT ( STDMETHODCALLTYPE *back )(
            __RPC__in IOmHistory * This,
                                 __RPC__in VARIANT *pvargdistance);
                   HRESULT ( STDMETHODCALLTYPE *forward )(
            __RPC__in IOmHistory * This,
                                 __RPC__in VARIANT *pvargdistance);
                   HRESULT ( STDMETHODCALLTYPE *go )(
            __RPC__in IOmHistory * This,
                                 __RPC__in VARIANT *pvargdistance);
        END_INTERFACE
    } IOmHistoryVtbl;
    interface IOmHistory
    {
        CONST_VTBL struct IOmHistoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> back(This,pvargdistance) )
    ( (This)->lpVtbl -> forward(This,pvargdistance) )
    ( (This)->lpVtbl -> go(This,pvargdistance) )
EXTERN_C const IID IID_IHTMLOpsProfile;
    typedef struct IHTMLOpsProfileVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLOpsProfile * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLOpsProfile * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLOpsProfile * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLOpsProfile * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLOpsProfile * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLOpsProfile * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLOpsProfile * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *addRequest )(
            __RPC__in IHTMLOpsProfile * This,
                       __RPC__in BSTR name,
                                 VARIANT reserved,
                                __RPC__out VARIANT_BOOL *success);
                   HRESULT ( STDMETHODCALLTYPE *clearRequest )(
            __RPC__in IHTMLOpsProfile * This);
                   HRESULT ( STDMETHODCALLTYPE *doRequest )(
            __RPC__in IHTMLOpsProfile * This,
                       VARIANT usage,
                                 VARIANT fname,
                                 VARIANT domain,
                                 VARIANT path,
                                 VARIANT expire,
                                 VARIANT reserved);
                   HRESULT ( STDMETHODCALLTYPE *getAttribute )(
            __RPC__in IHTMLOpsProfile * This,
                       __RPC__in BSTR name,
                                __RPC__deref_out_opt BSTR *value);
                   HRESULT ( STDMETHODCALLTYPE *setAttribute )(
            __RPC__in IHTMLOpsProfile * This,
                       __RPC__in BSTR name,
                       __RPC__in BSTR value,
                                 VARIANT prefs,
                                __RPC__out VARIANT_BOOL *success);
                   HRESULT ( STDMETHODCALLTYPE *commitChanges )(
            __RPC__in IHTMLOpsProfile * This,
                                __RPC__out VARIANT_BOOL *success);
                   HRESULT ( STDMETHODCALLTYPE *addReadRequest )(
            __RPC__in IHTMLOpsProfile * This,
                       __RPC__in BSTR name,
                                 VARIANT reserved,
                                __RPC__out VARIANT_BOOL *success);
                   HRESULT ( STDMETHODCALLTYPE *doReadRequest )(
            __RPC__in IHTMLOpsProfile * This,
                       VARIANT usage,
                                 VARIANT fname,
                                 VARIANT domain,
                                 VARIANT path,
                                 VARIANT expire,
                                 VARIANT reserved);
                   HRESULT ( STDMETHODCALLTYPE *doWriteRequest )(
            __RPC__in IHTMLOpsProfile * This,
                                __RPC__out VARIANT_BOOL *success);
        END_INTERFACE
    } IHTMLOpsProfileVtbl;
    interface IHTMLOpsProfile
    {
        CONST_VTBL struct IHTMLOpsProfileVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> addRequest(This,name,reserved,success) )
    ( (This)->lpVtbl -> clearRequest(This) )
    ( (This)->lpVtbl -> doRequest(This,usage,fname,domain,path,expire,reserved) )
    ( (This)->lpVtbl -> getAttribute(This,name,value) )
    ( (This)->lpVtbl -> setAttribute(This,name,value,prefs,success) )
    ( (This)->lpVtbl -> commitChanges(This,success) )
    ( (This)->lpVtbl -> addReadRequest(This,name,reserved,success) )
    ( (This)->lpVtbl -> doReadRequest(This,usage,fname,domain,path,expire,reserved) )
    ( (This)->lpVtbl -> doWriteRequest(This,success) )
EXTERN_C const IID IID_IOmNavigator;
    typedef struct IOmNavigatorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IOmNavigator * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IOmNavigator * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IOmNavigator * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IOmNavigator * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IOmNavigator * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IOmNavigator * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IOmNavigator * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_appCodeName )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_appName )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_appVersion )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_userAgent )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *javaEnabled )(
            __RPC__in IOmNavigator * This,
                                __RPC__out VARIANT_BOOL *enabled);
                   HRESULT ( STDMETHODCALLTYPE *taintEnabled )(
            __RPC__in IOmNavigator * This,
                                __RPC__out VARIANT_BOOL *enabled);
                            HRESULT ( STDMETHODCALLTYPE *get_mimeTypes )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt IHTMLMimeTypesCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_plugins )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt IHTMLPluginsCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_cookieEnabled )(
            __RPC__in IOmNavigator * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_opsProfile )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt IHTMLOpsProfile **p);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt BSTR *string);
                            HRESULT ( STDMETHODCALLTYPE *get_cpuClass )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_systemLanguage )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt BSTR *p);
                                    HRESULT ( STDMETHODCALLTYPE *get_browserLanguage )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_userLanguage )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_platform )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_appMinorVersion )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt BSTR *p);
                                    HRESULT ( STDMETHODCALLTYPE *get_connectionSpeed )(
            __RPC__in IOmNavigator * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_onLine )(
            __RPC__in IOmNavigator * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_userProfile )(
            __RPC__in IOmNavigator * This,
                                __RPC__deref_out_opt IHTMLOpsProfile **p);
        END_INTERFACE
    } IOmNavigatorVtbl;
    interface IOmNavigator
    {
        CONST_VTBL struct IOmNavigatorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_appCodeName(This,p) )
    ( (This)->lpVtbl -> get_appName(This,p) )
    ( (This)->lpVtbl -> get_appVersion(This,p) )
    ( (This)->lpVtbl -> get_userAgent(This,p) )
    ( (This)->lpVtbl -> javaEnabled(This,enabled) )
    ( (This)->lpVtbl -> taintEnabled(This,enabled) )
    ( (This)->lpVtbl -> get_mimeTypes(This,p) )
    ( (This)->lpVtbl -> get_plugins(This,p) )
    ( (This)->lpVtbl -> get_cookieEnabled(This,p) )
    ( (This)->lpVtbl -> get_opsProfile(This,p) )
    ( (This)->lpVtbl -> toString(This,string) )
    ( (This)->lpVtbl -> get_cpuClass(This,p) )
    ( (This)->lpVtbl -> get_systemLanguage(This,p) )
    ( (This)->lpVtbl -> get_browserLanguage(This,p) )
    ( (This)->lpVtbl -> get_userLanguage(This,p) )
    ( (This)->lpVtbl -> get_platform(This,p) )
    ( (This)->lpVtbl -> get_appMinorVersion(This,p) )
    ( (This)->lpVtbl -> get_connectionSpeed(This,p) )
    ( (This)->lpVtbl -> get_onLine(This,p) )
    ( (This)->lpVtbl -> get_userProfile(This,p) )
EXTERN_C const IID IID_INavigatorGeolocation;
    typedef struct INavigatorGeolocationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in INavigatorGeolocation * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in INavigatorGeolocation * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in INavigatorGeolocation * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in INavigatorGeolocation * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in INavigatorGeolocation * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in INavigatorGeolocation * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            INavigatorGeolocation * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_geolocation )(
            __RPC__in INavigatorGeolocation * This,
                                __RPC__deref_out_opt IWebGeolocation **p);
        END_INTERFACE
    } INavigatorGeolocationVtbl;
    interface INavigatorGeolocation
    {
        CONST_VTBL struct INavigatorGeolocationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_geolocation(This,p) )
EXTERN_C const IID IID_INavigatorDoNotTrack;
    typedef struct INavigatorDoNotTrackVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in INavigatorDoNotTrack * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in INavigatorDoNotTrack * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in INavigatorDoNotTrack * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in INavigatorDoNotTrack * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in INavigatorDoNotTrack * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in INavigatorDoNotTrack * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            INavigatorDoNotTrack * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_msDoNotTrack )(
            __RPC__in INavigatorDoNotTrack * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } INavigatorDoNotTrackVtbl;
    interface INavigatorDoNotTrack
    {
        CONST_VTBL struct INavigatorDoNotTrackVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_msDoNotTrack(This,p) )
EXTERN_C const IID IID_IHTMLLocation;
    typedef struct IHTMLLocationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLLocation * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLLocation * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLLocation * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLLocation * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLLocation * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_href )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLLocation * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_protocol )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_protocol )(
            __RPC__in IHTMLLocation * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_host )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_host )(
            __RPC__in IHTMLLocation * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_hostname )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_hostname )(
            __RPC__in IHTMLLocation * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_port )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_port )(
            __RPC__in IHTMLLocation * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_pathname )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_pathname )(
            __RPC__in IHTMLLocation * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_search )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_search )(
            __RPC__in IHTMLLocation * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_hash )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_hash )(
            __RPC__in IHTMLLocation * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *reload )(
            __RPC__in IHTMLLocation * This,
                                     VARIANT_BOOL flag);
                   HRESULT ( STDMETHODCALLTYPE *replace )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in BSTR bstr);
                   HRESULT ( STDMETHODCALLTYPE *assign )(
            __RPC__in IHTMLLocation * This,
                       __RPC__in BSTR bstr);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLLocation * This,
                                __RPC__deref_out_opt BSTR *string);
        END_INTERFACE
    } IHTMLLocationVtbl;
    interface IHTMLLocation
    {
        CONST_VTBL struct IHTMLLocationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_href(This,v) )
    ( (This)->lpVtbl -> get_href(This,p) )
    ( (This)->lpVtbl -> put_protocol(This,v) )
    ( (This)->lpVtbl -> get_protocol(This,p) )
    ( (This)->lpVtbl -> put_host(This,v) )
    ( (This)->lpVtbl -> get_host(This,p) )
    ( (This)->lpVtbl -> put_hostname(This,v) )
    ( (This)->lpVtbl -> get_hostname(This,p) )
    ( (This)->lpVtbl -> put_port(This,v) )
    ( (This)->lpVtbl -> get_port(This,p) )
    ( (This)->lpVtbl -> put_pathname(This,v) )
    ( (This)->lpVtbl -> get_pathname(This,p) )
    ( (This)->lpVtbl -> put_search(This,v) )
    ( (This)->lpVtbl -> get_search(This,p) )
    ( (This)->lpVtbl -> put_hash(This,v) )
    ( (This)->lpVtbl -> get_hash(This,p) )
    ( (This)->lpVtbl -> reload(This,flag) )
    ( (This)->lpVtbl -> replace(This,bstr) )
    ( (This)->lpVtbl -> assign(This,bstr) )
    ( (This)->lpVtbl -> toString(This,string) )
EXTERN_C const IID DIID_DispHTMLHistory;
    typedef struct DispHTMLHistoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLHistory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLHistory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLHistory * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLHistory * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLHistory * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLHistory * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLHistory * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLHistoryVtbl;
    interface DispHTMLHistory
    {
        CONST_VTBL struct DispHTMLHistoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLHistory;
class DECLSPEC_UUID("FECEAAA3-8405-11cf-8BA1-00AA00476DA6")
HTMLHistory;
EXTERN_C const CLSID CLSID_COpsProfile;
class DECLSPEC_UUID("3050f402-98b5-11cf-bb82-00aa00bdce0b")
COpsProfile;
EXTERN_C const IID DIID_DispHTMLNavigator;
    typedef struct DispHTMLNavigatorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLNavigator * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLNavigator * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLNavigator * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLNavigator * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLNavigator * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLNavigator * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLNavigator * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLNavigatorVtbl;
    interface DispHTMLNavigator
    {
        CONST_VTBL struct DispHTMLNavigatorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLNavigator;
class DECLSPEC_UUID("FECEAAA6-8405-11cf-8BA1-00AA00476DA6")
HTMLNavigator;
EXTERN_C const IID DIID_DispHTMLLocation;
    typedef struct DispHTMLLocationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLLocation * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLLocation * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLLocation * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLLocation * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLLocation * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLLocation * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLLocation * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLLocationVtbl;
    interface DispHTMLLocation
    {
        CONST_VTBL struct DispHTMLLocationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLLocation;
class DECLSPEC_UUID("163BB1E1-6E00-11cf-837A-48DC04C10000")
HTMLLocation;
EXTERN_C const CLSID CLSID_CMimeTypes;
class DECLSPEC_UUID("3050f3fe-98b5-11cf-bb82-00aa00bdce0b")
CMimeTypes;
EXTERN_C const IID DIID_DispCPlugins;
    typedef struct DispCPluginsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispCPlugins * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispCPlugins * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispCPlugins * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispCPlugins * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispCPlugins * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispCPlugins * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispCPlugins * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispCPluginsVtbl;
    interface DispCPlugins
    {
        CONST_VTBL struct DispCPluginsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_CPlugins;
class DECLSPEC_UUID("3050f3ff-98b5-11cf-bb82-00aa00bdce0b")
CPlugins;
EXTERN_C const IID IID_IHTMLBookmarkCollection;
    typedef struct IHTMLBookmarkCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBookmarkCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBookmarkCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBookmarkCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBookmarkCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBookmarkCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBookmarkCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBookmarkCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLBookmarkCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLBookmarkCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLBookmarkCollection * This,
                       long index,
                                __RPC__out VARIANT *pVarBookmark);
        END_INTERFACE
    } IHTMLBookmarkCollectionVtbl;
    interface IHTMLBookmarkCollection
    {
        CONST_VTBL struct IHTMLBookmarkCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,index,pVarBookmark) )
EXTERN_C const IID IID_IHTMLDataTransfer;
    typedef struct IHTMLDataTransferVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDataTransfer * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDataTransfer * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDataTransfer * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDataTransfer * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDataTransfer * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDataTransfer * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDataTransfer * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *setData )(
            __RPC__in IHTMLDataTransfer * This,
                       __RPC__in BSTR format,
                       __RPC__in VARIANT *data,
                                __RPC__out VARIANT_BOOL *pret);
                   HRESULT ( STDMETHODCALLTYPE *getData )(
            __RPC__in IHTMLDataTransfer * This,
                       __RPC__in BSTR format,
                                __RPC__out VARIANT *pvarRet);
                   HRESULT ( STDMETHODCALLTYPE *clearData )(
            __RPC__in IHTMLDataTransfer * This,
                       __RPC__in BSTR format,
                                __RPC__out VARIANT_BOOL *pret);
                            HRESULT ( STDMETHODCALLTYPE *put_dropEffect )(
            __RPC__in IHTMLDataTransfer * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_dropEffect )(
            __RPC__in IHTMLDataTransfer * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_effectAllowed )(
            __RPC__in IHTMLDataTransfer * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_effectAllowed )(
            __RPC__in IHTMLDataTransfer * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLDataTransferVtbl;
    interface IHTMLDataTransfer
    {
        CONST_VTBL struct IHTMLDataTransferVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> setData(This,format,data,pret) )
    ( (This)->lpVtbl -> getData(This,format,pvarRet) )
    ( (This)->lpVtbl -> clearData(This,format,pret) )
    ( (This)->lpVtbl -> put_dropEffect(This,v) )
    ( (This)->lpVtbl -> get_dropEffect(This,p) )
    ( (This)->lpVtbl -> put_effectAllowed(This,v) )
    ( (This)->lpVtbl -> get_effectAllowed(This,p) )
EXTERN_C const IID IID_IHTMLEventObj2;
    typedef struct IHTMLEventObj2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEventObj2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEventObj2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLEventObj2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLEventObj2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLEventObj2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *setAttribute )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in BSTR strAttributeName,
                       VARIANT AttributeValue,
                                     LONG lFlags);
                   HRESULT ( STDMETHODCALLTYPE *getAttribute )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in BSTR strAttributeName,
                                     LONG lFlags,
                                __RPC__out VARIANT *AttributeValue);
                   HRESULT ( STDMETHODCALLTYPE *removeAttribute )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in BSTR strAttributeName,
                                     LONG lFlags,
                                __RPC__out VARIANT_BOOL *pfSuccess);
                            HRESULT ( STDMETHODCALLTYPE *put_propertyName )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_propertyName )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt BSTR *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_bookmarks )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in_opt IHTMLBookmarkCollection *v);
                            HRESULT ( STDMETHODCALLTYPE *get_bookmarks )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt IHTMLBookmarkCollection **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_recordset )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in_opt IDispatch *v);
                            HRESULT ( STDMETHODCALLTYPE *get_recordset )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *put_dataFld )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_dataFld )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt BSTR *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_boundElements )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in_opt IHTMLElementCollection *v);
                            HRESULT ( STDMETHODCALLTYPE *get_boundElements )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *put_repeat )(
            __RPC__in IHTMLEventObj2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_repeat )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_srcUrn )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_srcUrn )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt BSTR *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_srcElement )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in_opt IHTMLElement *v);
                            HRESULT ( STDMETHODCALLTYPE *get_srcElement )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *put_altKey )(
            __RPC__in IHTMLEventObj2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_altKey )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_ctrlKey )(
            __RPC__in IHTMLEventObj2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_ctrlKey )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_shiftKey )(
            __RPC__in IHTMLEventObj2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_shiftKey )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out VARIANT_BOOL *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_fromElement )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in_opt IHTMLElement *v);
                            HRESULT ( STDMETHODCALLTYPE *get_fromElement )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_toElement )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in_opt IHTMLElement *v);
                            HRESULT ( STDMETHODCALLTYPE *get_toElement )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *put_button )(
            __RPC__in IHTMLEventObj2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_button )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_qualifier )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_qualifier )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_reason )(
            __RPC__in IHTMLEventObj2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_reason )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in IHTMLEventObj2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in IHTMLEventObj2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_clientX )(
            __RPC__in IHTMLEventObj2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_clientX )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_clientY )(
            __RPC__in IHTMLEventObj2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_clientY )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_offsetX )(
            __RPC__in IHTMLEventObj2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetX )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_offsetY )(
            __RPC__in IHTMLEventObj2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetY )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_screenX )(
            __RPC__in IHTMLEventObj2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_screenX )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_screenY )(
            __RPC__in IHTMLEventObj2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_screenY )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__out long *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_srcFilter )(
            __RPC__in IHTMLEventObj2 * This,
                       __RPC__in_opt IDispatch *v);
                            HRESULT ( STDMETHODCALLTYPE *get_srcFilter )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_dataTransfer )(
            __RPC__in IHTMLEventObj2 * This,
                                __RPC__deref_out_opt IHTMLDataTransfer **p);
        END_INTERFACE
    } IHTMLEventObj2Vtbl;
    interface IHTMLEventObj2
    {
        CONST_VTBL struct IHTMLEventObj2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> setAttribute(This,strAttributeName,AttributeValue,lFlags) )
    ( (This)->lpVtbl -> getAttribute(This,strAttributeName,lFlags,AttributeValue) )
    ( (This)->lpVtbl -> removeAttribute(This,strAttributeName,lFlags,pfSuccess) )
    ( (This)->lpVtbl -> put_propertyName(This,v) )
    ( (This)->lpVtbl -> get_propertyName(This,p) )
    ( (This)->lpVtbl -> putref_bookmarks(This,v) )
    ( (This)->lpVtbl -> get_bookmarks(This,p) )
    ( (This)->lpVtbl -> putref_recordset(This,v) )
    ( (This)->lpVtbl -> get_recordset(This,p) )
    ( (This)->lpVtbl -> put_dataFld(This,v) )
    ( (This)->lpVtbl -> get_dataFld(This,p) )
    ( (This)->lpVtbl -> putref_boundElements(This,v) )
    ( (This)->lpVtbl -> get_boundElements(This,p) )
    ( (This)->lpVtbl -> put_repeat(This,v) )
    ( (This)->lpVtbl -> get_repeat(This,p) )
    ( (This)->lpVtbl -> put_srcUrn(This,v) )
    ( (This)->lpVtbl -> get_srcUrn(This,p) )
    ( (This)->lpVtbl -> putref_srcElement(This,v) )
    ( (This)->lpVtbl -> get_srcElement(This,p) )
    ( (This)->lpVtbl -> put_altKey(This,v) )
    ( (This)->lpVtbl -> get_altKey(This,p) )
    ( (This)->lpVtbl -> put_ctrlKey(This,v) )
    ( (This)->lpVtbl -> get_ctrlKey(This,p) )
    ( (This)->lpVtbl -> put_shiftKey(This,v) )
    ( (This)->lpVtbl -> get_shiftKey(This,p) )
    ( (This)->lpVtbl -> putref_fromElement(This,v) )
    ( (This)->lpVtbl -> get_fromElement(This,p) )
    ( (This)->lpVtbl -> putref_toElement(This,v) )
    ( (This)->lpVtbl -> get_toElement(This,p) )
    ( (This)->lpVtbl -> put_button(This,v) )
    ( (This)->lpVtbl -> get_button(This,p) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_qualifier(This,v) )
    ( (This)->lpVtbl -> get_qualifier(This,p) )
    ( (This)->lpVtbl -> put_reason(This,v) )
    ( (This)->lpVtbl -> get_reason(This,p) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> put_clientX(This,v) )
    ( (This)->lpVtbl -> get_clientX(This,p) )
    ( (This)->lpVtbl -> put_clientY(This,v) )
    ( (This)->lpVtbl -> get_clientY(This,p) )
    ( (This)->lpVtbl -> put_offsetX(This,v) )
    ( (This)->lpVtbl -> get_offsetX(This,p) )
    ( (This)->lpVtbl -> put_offsetY(This,v) )
    ( (This)->lpVtbl -> get_offsetY(This,p) )
    ( (This)->lpVtbl -> put_screenX(This,v) )
    ( (This)->lpVtbl -> get_screenX(This,p) )
    ( (This)->lpVtbl -> put_screenY(This,v) )
    ( (This)->lpVtbl -> get_screenY(This,p) )
    ( (This)->lpVtbl -> putref_srcFilter(This,v) )
    ( (This)->lpVtbl -> get_srcFilter(This,p) )
    ( (This)->lpVtbl -> get_dataTransfer(This,p) )
EXTERN_C const IID IID_IHTMLEventObj3;
    typedef struct IHTMLEventObj3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEventObj3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEventObj3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEventObj3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLEventObj3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLEventObj3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLEventObj3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLEventObj3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_contentOverflow )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_shiftLeft )(
            __RPC__in IHTMLEventObj3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_shiftLeft )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_altLeft )(
            __RPC__in IHTMLEventObj3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_altLeft )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_ctrlLeft )(
            __RPC__in IHTMLEventObj3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_ctrlLeft )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out VARIANT_BOOL *p);
                                                              HRESULT ( STDMETHODCALLTYPE *get_imeCompositionChange )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out LONG_PTR *p);
                                                              HRESULT ( STDMETHODCALLTYPE *get_imeNotifyCommand )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out LONG_PTR *p);
                                                              HRESULT ( STDMETHODCALLTYPE *get_imeNotifyData )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out LONG_PTR *p);
                                                              HRESULT ( STDMETHODCALLTYPE *get_imeRequest )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out LONG_PTR *p);
                                                              HRESULT ( STDMETHODCALLTYPE *get_imeRequestData )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out LONG_PTR *p);
                                                              HRESULT ( STDMETHODCALLTYPE *get_keyboardLayout )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out LONG_PTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_behaviorCookie )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_behaviorPart )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_nextPage )(
            __RPC__in IHTMLEventObj3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLEventObj3Vtbl;
    interface IHTMLEventObj3
    {
        CONST_VTBL struct IHTMLEventObj3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_contentOverflow(This,p) )
    ( (This)->lpVtbl -> put_shiftLeft(This,v) )
    ( (This)->lpVtbl -> get_shiftLeft(This,p) )
    ( (This)->lpVtbl -> put_altLeft(This,v) )
    ( (This)->lpVtbl -> get_altLeft(This,p) )
    ( (This)->lpVtbl -> put_ctrlLeft(This,v) )
    ( (This)->lpVtbl -> get_ctrlLeft(This,p) )
    ( (This)->lpVtbl -> get_imeCompositionChange(This,p) )
    ( (This)->lpVtbl -> get_imeNotifyCommand(This,p) )
    ( (This)->lpVtbl -> get_imeNotifyData(This,p) )
    ( (This)->lpVtbl -> get_imeRequest(This,p) )
    ( (This)->lpVtbl -> get_imeRequestData(This,p) )
    ( (This)->lpVtbl -> get_keyboardLayout(This,p) )
    ( (This)->lpVtbl -> get_behaviorCookie(This,p) )
    ( (This)->lpVtbl -> get_behaviorPart(This,p) )
    ( (This)->lpVtbl -> get_nextPage(This,p) )
EXTERN_C const IID IID_IHTMLEventObj4;
    typedef struct IHTMLEventObj4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEventObj4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEventObj4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEventObj4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLEventObj4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLEventObj4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLEventObj4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLEventObj4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_wheelDelta )(
            __RPC__in IHTMLEventObj4 * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLEventObj4Vtbl;
    interface IHTMLEventObj4
    {
        CONST_VTBL struct IHTMLEventObj4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_wheelDelta(This,p) )
EXTERN_C const IID IID_IHTMLEventObj5;
    typedef struct IHTMLEventObj5Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEventObj5 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEventObj5 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEventObj5 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLEventObj5 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLEventObj5 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLEventObj5 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLEventObj5 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_url )(
            __RPC__in IHTMLEventObj5 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_url )(
            __RPC__in IHTMLEventObj5 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_data )(
            __RPC__in IHTMLEventObj5 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_data )(
            __RPC__in IHTMLEventObj5 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_source )(
            __RPC__in IHTMLEventObj5 * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *put_origin )(
            __RPC__in IHTMLEventObj5 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_origin )(
            __RPC__in IHTMLEventObj5 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                              HRESULT ( STDMETHODCALLTYPE *put_issession )(
            __RPC__in IHTMLEventObj5 * This,
                       VARIANT_BOOL v);
                                                              HRESULT ( STDMETHODCALLTYPE *get_issession )(
            __RPC__in IHTMLEventObj5 * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLEventObj5Vtbl;
    interface IHTMLEventObj5
    {
        CONST_VTBL struct IHTMLEventObj5Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_url(This,v) )
    ( (This)->lpVtbl -> get_url(This,p) )
    ( (This)->lpVtbl -> put_data(This,v) )
    ( (This)->lpVtbl -> get_data(This,p) )
    ( (This)->lpVtbl -> get_source(This,p) )
    ( (This)->lpVtbl -> put_origin(This,v) )
    ( (This)->lpVtbl -> get_origin(This,p) )
    ( (This)->lpVtbl -> put_issession(This,v) )
    ( (This)->lpVtbl -> get_issession(This,p) )
EXTERN_C const IID IID_IHTMLEventObj6;
    typedef struct IHTMLEventObj6Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEventObj6 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEventObj6 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEventObj6 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLEventObj6 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLEventObj6 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLEventObj6 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLEventObj6 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_actionURL )(
            __RPC__in IHTMLEventObj6 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_buttonID )(
            __RPC__in IHTMLEventObj6 * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLEventObj6Vtbl;
    interface IHTMLEventObj6
    {
        CONST_VTBL struct IHTMLEventObj6Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_actionURL(This,p) )
    ( (This)->lpVtbl -> get_buttonID(This,p) )
EXTERN_C const IID DIID_DispCEventObj;
    typedef struct DispCEventObjVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispCEventObj * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispCEventObj * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispCEventObj * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispCEventObj * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispCEventObj * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispCEventObj * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispCEventObj * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispCEventObjVtbl;
    interface DispCEventObj
    {
        CONST_VTBL struct DispCEventObjVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_CEventObj;
class DECLSPEC_UUID("3050f48A-98b5-11cf-bb82-00aa00bdce0b")
CEventObj;
EXTERN_C const IID IID_IHTMLStyleMedia;
    typedef struct IHTMLStyleMediaVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleMedia * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleMedia * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleMedia * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleMedia * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleMedia * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleMedia * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleMedia * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLStyleMedia * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *matchMedium )(
            __RPC__in IHTMLStyleMedia * This,
                       __RPC__in BSTR mediaQuery,
                                __RPC__out VARIANT_BOOL *matches);
        END_INTERFACE
    } IHTMLStyleMediaVtbl;
    interface IHTMLStyleMedia
    {
        CONST_VTBL struct IHTMLStyleMediaVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> matchMedium(This,mediaQuery,matches) )
EXTERN_C const IID DIID_DispHTMLStyleMedia;
    typedef struct DispHTMLStyleMediaVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStyleMedia * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStyleMedia * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStyleMedia * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStyleMedia * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStyleMedia * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStyleMedia * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStyleMedia * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStyleMediaVtbl;
    interface DispHTMLStyleMedia
    {
        CONST_VTBL struct DispHTMLStyleMediaVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStyleMedia;
class DECLSPEC_UUID("3051074c-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleMedia;
EXTERN_C const IID IID_IHTMLFramesCollection2;
    typedef struct IHTMLFramesCollection2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFramesCollection2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFramesCollection2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFramesCollection2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFramesCollection2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFramesCollection2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFramesCollection2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFramesCollection2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLFramesCollection2 * This,
                       __RPC__in VARIANT *pvarIndex,
                                __RPC__out VARIANT *pvarResult);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLFramesCollection2 * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLFramesCollection2Vtbl;
    interface IHTMLFramesCollection2
    {
        CONST_VTBL struct IHTMLFramesCollection2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> item(This,pvarIndex,pvarResult) )
    ( (This)->lpVtbl -> get_length(This,p) )
EXTERN_C const CLSID CLSID_FramesCollection;
class DECLSPEC_UUID("3050f7f6-98b5-11cf-bb82-00aa00bdce0b")
FramesCollection;
EXTERN_C const IID DIID_HTMLWindowEvents3;
    typedef struct HTMLWindowEvents3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLWindowEvents3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLWindowEvents3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLWindowEvents3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLWindowEvents3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLWindowEvents3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLWindowEvents3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLWindowEvents3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLWindowEvents3Vtbl;
    interface HTMLWindowEvents3
    {
        CONST_VTBL struct HTMLWindowEvents3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLWindowEvents2;
    typedef struct HTMLWindowEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLWindowEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLWindowEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLWindowEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLWindowEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLWindowEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLWindowEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLWindowEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLWindowEvents2Vtbl;
    interface HTMLWindowEvents2
    {
        CONST_VTBL struct HTMLWindowEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLWindowEvents;
    typedef struct HTMLWindowEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLWindowEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLWindowEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLWindowEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLWindowEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLWindowEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLWindowEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLWindowEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLWindowEventsVtbl;
    interface HTMLWindowEvents
    {
        CONST_VTBL struct HTMLWindowEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLDocument2;
    typedef struct IHTMLDocument2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDocument2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDocument2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDocument2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDocument2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDocument2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                  HRESULT ( STDMETHODCALLTYPE *get_Script )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_all )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_body )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_activeElement )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_images )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_applets )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_links )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_forms )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_anchors )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *put_title )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_title )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_scripts )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                                    HRESULT ( STDMETHODCALLTYPE *put_designMode )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR v);
                                    HRESULT ( STDMETHODCALLTYPE *get_designMode )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_selection )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLSelectionObject **p);
                                      HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_frames )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLFramesCollection2 **p);
                            HRESULT ( STDMETHODCALLTYPE *get_embeds )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_plugins )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *put_alinkColor )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_alinkColor )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_bgColor )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_bgColor )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_fgColor )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_fgColor )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_linkColor )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_linkColor )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_vlinkColor )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_vlinkColor )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_referrer )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_location )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLLocation **p);
                            HRESULT ( STDMETHODCALLTYPE *get_lastModified )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_URL )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_URL )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_domain )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_domain )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_cookie )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_cookie )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                              HRESULT ( STDMETHODCALLTYPE *put_expando )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT_BOOL v);
                                              HRESULT ( STDMETHODCALLTYPE *get_expando )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT_BOOL *p);
                                    HRESULT ( STDMETHODCALLTYPE *put_charset )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR v);
                                    HRESULT ( STDMETHODCALLTYPE *get_charset )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_defaultCharset )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_defaultCharset )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_mimeType )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fileSize )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fileCreatedDate )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fileModifiedDate )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fileUpdatedDate )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_security )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_protocol )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_nameProp )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *p);
                           HRESULT ( STDMETHODCALLTYPE *write )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in SAFEARRAY * psarray);
                           HRESULT ( STDMETHODCALLTYPE *writeln )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in SAFEARRAY * psarray);
                   HRESULT ( STDMETHODCALLTYPE *open )(
            __RPC__in IHTMLDocument2 * This,
                                     __RPC__in BSTR url,
                                 VARIANT name,
                                 VARIANT features,
                                 VARIANT replace,
                                __RPC__deref_out_opt IDispatch **pomWindowResult);
                   HRESULT ( STDMETHODCALLTYPE *close )(
            __RPC__in IHTMLDocument2 * This);
                   HRESULT ( STDMETHODCALLTYPE *clear )(
            __RPC__in IHTMLDocument2 * This);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandSupported )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandEnabled )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandState )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandIndeterm )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandText )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR cmdID,
                                __RPC__deref_out_opt BSTR *pcmdText);
                   HRESULT ( STDMETHODCALLTYPE *queryCommandValue )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT *pcmdValue);
                   HRESULT ( STDMETHODCALLTYPE *execCommand )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR cmdID,
                                     VARIANT_BOOL showUI,
                                 VARIANT value,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *execCommandShowHelp )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR cmdID,
                                __RPC__out VARIANT_BOOL *pfRet);
                   HRESULT ( STDMETHODCALLTYPE *createElement )(
            __RPC__in IHTMLDocument2 * This,
                       __RPC__in BSTR eTag,
                                __RPC__deref_out_opt IHTMLElement **newElem);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onhelp )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onhelp )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onclick )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onclick )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondblclick )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondblclick )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onkeyup )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onkeyup )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onkeydown )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onkeydown )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onkeypress )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onkeypress )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseup )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseup )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmousedown )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmousedown )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmousemove )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmousemove )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseout )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseout )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseover )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseover )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onafterupdate )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onafterupdate )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onrowexit )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onrowexit )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onrowenter )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onrowenter )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragstart )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragstart )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onselectstart )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onselectstart )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *elementFromPoint )(
            __RPC__in IHTMLDocument2 * This,
                       long x,
                       long y,
                                __RPC__deref_out_opt IHTMLElement **elementHit);
                            HRESULT ( STDMETHODCALLTYPE *get_parentWindow )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLWindow2 **p);
                            HRESULT ( STDMETHODCALLTYPE *get_styleSheets )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt IHTMLStyleSheetsCollection **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeupdate )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeupdate )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerrorupdate )(
            __RPC__in IHTMLDocument2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerrorupdate )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLDocument2 * This,
                                __RPC__deref_out_opt BSTR *String);
                   HRESULT ( STDMETHODCALLTYPE *createStyleSheet )(
            __RPC__in IHTMLDocument2 * This,
                                     __RPC__in BSTR bstrHref,
                                     long lIndex,
                                __RPC__deref_out_opt IHTMLStyleSheet **ppnewStyleSheet);
        END_INTERFACE
    } IHTMLDocument2Vtbl;
    interface IHTMLDocument2
    {
        CONST_VTBL struct IHTMLDocument2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_Script(This,p) )
    ( (This)->lpVtbl -> get_all(This,p) )
    ( (This)->lpVtbl -> get_body(This,p) )
    ( (This)->lpVtbl -> get_activeElement(This,p) )
    ( (This)->lpVtbl -> get_images(This,p) )
    ( (This)->lpVtbl -> get_applets(This,p) )
    ( (This)->lpVtbl -> get_links(This,p) )
    ( (This)->lpVtbl -> get_forms(This,p) )
    ( (This)->lpVtbl -> get_anchors(This,p) )
    ( (This)->lpVtbl -> put_title(This,v) )
    ( (This)->lpVtbl -> get_title(This,p) )
    ( (This)->lpVtbl -> get_scripts(This,p) )
    ( (This)->lpVtbl -> put_designMode(This,v) )
    ( (This)->lpVtbl -> get_designMode(This,p) )
    ( (This)->lpVtbl -> get_selection(This,p) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> get_frames(This,p) )
    ( (This)->lpVtbl -> get_embeds(This,p) )
    ( (This)->lpVtbl -> get_plugins(This,p) )
    ( (This)->lpVtbl -> put_alinkColor(This,v) )
    ( (This)->lpVtbl -> get_alinkColor(This,p) )
    ( (This)->lpVtbl -> put_bgColor(This,v) )
    ( (This)->lpVtbl -> get_bgColor(This,p) )
    ( (This)->lpVtbl -> put_fgColor(This,v) )
    ( (This)->lpVtbl -> get_fgColor(This,p) )
    ( (This)->lpVtbl -> put_linkColor(This,v) )
    ( (This)->lpVtbl -> get_linkColor(This,p) )
    ( (This)->lpVtbl -> put_vlinkColor(This,v) )
    ( (This)->lpVtbl -> get_vlinkColor(This,p) )
    ( (This)->lpVtbl -> get_referrer(This,p) )
    ( (This)->lpVtbl -> get_location(This,p) )
    ( (This)->lpVtbl -> get_lastModified(This,p) )
    ( (This)->lpVtbl -> put_URL(This,v) )
    ( (This)->lpVtbl -> get_URL(This,p) )
    ( (This)->lpVtbl -> put_domain(This,v) )
    ( (This)->lpVtbl -> get_domain(This,p) )
    ( (This)->lpVtbl -> put_cookie(This,v) )
    ( (This)->lpVtbl -> get_cookie(This,p) )
    ( (This)->lpVtbl -> put_expando(This,v) )
    ( (This)->lpVtbl -> get_expando(This,p) )
    ( (This)->lpVtbl -> put_charset(This,v) )
    ( (This)->lpVtbl -> get_charset(This,p) )
    ( (This)->lpVtbl -> put_defaultCharset(This,v) )
    ( (This)->lpVtbl -> get_defaultCharset(This,p) )
    ( (This)->lpVtbl -> get_mimeType(This,p) )
    ( (This)->lpVtbl -> get_fileSize(This,p) )
    ( (This)->lpVtbl -> get_fileCreatedDate(This,p) )
    ( (This)->lpVtbl -> get_fileModifiedDate(This,p) )
    ( (This)->lpVtbl -> get_fileUpdatedDate(This,p) )
    ( (This)->lpVtbl -> get_security(This,p) )
    ( (This)->lpVtbl -> get_protocol(This,p) )
    ( (This)->lpVtbl -> get_nameProp(This,p) )
    ( (This)->lpVtbl -> write(This,psarray) )
    ( (This)->lpVtbl -> writeln(This,psarray) )
    ( (This)->lpVtbl -> open(This,url,name,features,replace,pomWindowResult) )
    ( (This)->lpVtbl -> close(This) )
    ( (This)->lpVtbl -> clear(This) )
    ( (This)->lpVtbl -> queryCommandSupported(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandEnabled(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandState(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandIndeterm(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> queryCommandText(This,cmdID,pcmdText) )
    ( (This)->lpVtbl -> queryCommandValue(This,cmdID,pcmdValue) )
    ( (This)->lpVtbl -> execCommand(This,cmdID,showUI,value,pfRet) )
    ( (This)->lpVtbl -> execCommandShowHelp(This,cmdID,pfRet) )
    ( (This)->lpVtbl -> createElement(This,eTag,newElem) )
    ( (This)->lpVtbl -> put_onhelp(This,v) )
    ( (This)->lpVtbl -> get_onhelp(This,p) )
    ( (This)->lpVtbl -> put_onclick(This,v) )
    ( (This)->lpVtbl -> get_onclick(This,p) )
    ( (This)->lpVtbl -> put_ondblclick(This,v) )
    ( (This)->lpVtbl -> get_ondblclick(This,p) )
    ( (This)->lpVtbl -> put_onkeyup(This,v) )
    ( (This)->lpVtbl -> get_onkeyup(This,p) )
    ( (This)->lpVtbl -> put_onkeydown(This,v) )
    ( (This)->lpVtbl -> get_onkeydown(This,p) )
    ( (This)->lpVtbl -> put_onkeypress(This,v) )
    ( (This)->lpVtbl -> get_onkeypress(This,p) )
    ( (This)->lpVtbl -> put_onmouseup(This,v) )
    ( (This)->lpVtbl -> get_onmouseup(This,p) )
    ( (This)->lpVtbl -> put_onmousedown(This,v) )
    ( (This)->lpVtbl -> get_onmousedown(This,p) )
    ( (This)->lpVtbl -> put_onmousemove(This,v) )
    ( (This)->lpVtbl -> get_onmousemove(This,p) )
    ( (This)->lpVtbl -> put_onmouseout(This,v) )
    ( (This)->lpVtbl -> get_onmouseout(This,p) )
    ( (This)->lpVtbl -> put_onmouseover(This,v) )
    ( (This)->lpVtbl -> get_onmouseover(This,p) )
    ( (This)->lpVtbl -> put_onreadystatechange(This,v) )
    ( (This)->lpVtbl -> get_onreadystatechange(This,p) )
    ( (This)->lpVtbl -> put_onafterupdate(This,v) )
    ( (This)->lpVtbl -> get_onafterupdate(This,p) )
    ( (This)->lpVtbl -> put_onrowexit(This,v) )
    ( (This)->lpVtbl -> get_onrowexit(This,p) )
    ( (This)->lpVtbl -> put_onrowenter(This,v) )
    ( (This)->lpVtbl -> get_onrowenter(This,p) )
    ( (This)->lpVtbl -> put_ondragstart(This,v) )
    ( (This)->lpVtbl -> get_ondragstart(This,p) )
    ( (This)->lpVtbl -> put_onselectstart(This,v) )
    ( (This)->lpVtbl -> get_onselectstart(This,p) )
    ( (This)->lpVtbl -> elementFromPoint(This,x,y,elementHit) )
    ( (This)->lpVtbl -> get_parentWindow(This,p) )
    ( (This)->lpVtbl -> get_styleSheets(This,p) )
    ( (This)->lpVtbl -> put_onbeforeupdate(This,v) )
    ( (This)->lpVtbl -> get_onbeforeupdate(This,p) )
    ( (This)->lpVtbl -> put_onerrorupdate(This,v) )
    ( (This)->lpVtbl -> get_onerrorupdate(This,p) )
    ( (This)->lpVtbl -> toString(This,String) )
    ( (This)->lpVtbl -> createStyleSheet(This,bstrHref,lIndex,ppnewStyleSheet) )
EXTERN_C const IID IID_IHTMLWindow2;
    typedef struct IHTMLWindow2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLWindow2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLWindow2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLWindow2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLWindow2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLWindow2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in VARIANT *pvarIndex,
                                __RPC__out VARIANT *pvarResult);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_frames )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IHTMLFramesCollection2 **p);
                            HRESULT ( STDMETHODCALLTYPE *put_defaultStatus )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_defaultStatus )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_status )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *setTimeout )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in BSTR expression,
                       long msec,
                                 __RPC__in VARIANT *language,
                                __RPC__out long *timerID);
                   HRESULT ( STDMETHODCALLTYPE *clearTimeout )(
            __RPC__in IHTMLWindow2 * This,
                       long timerID);
                   HRESULT ( STDMETHODCALLTYPE *alert )(
            __RPC__in IHTMLWindow2 * This,
                                     __RPC__in BSTR message);
                   HRESULT ( STDMETHODCALLTYPE *confirm )(
            __RPC__in IHTMLWindow2 * This,
                                     __RPC__in BSTR message,
                                __RPC__out VARIANT_BOOL *confirmed);
                   HRESULT ( STDMETHODCALLTYPE *prompt )(
            __RPC__in IHTMLWindow2 * This,
                                     __RPC__in BSTR message,
                                     __RPC__in BSTR defstr,
                                __RPC__out VARIANT *textdata);
                            HRESULT ( STDMETHODCALLTYPE *get_Image )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IHTMLImageElementFactory **p);
                            HRESULT ( STDMETHODCALLTYPE *get_location )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IHTMLLocation **p);
                            HRESULT ( STDMETHODCALLTYPE *get_history )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IOmHistory **p);
                   HRESULT ( STDMETHODCALLTYPE *close )(
            __RPC__in IHTMLWindow2 * This);
                            HRESULT ( STDMETHODCALLTYPE *put_opener )(
            __RPC__in IHTMLWindow2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_opener )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_navigator )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IOmNavigator **p);
                            HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_parent )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IHTMLWindow2 **p);
                   HRESULT ( STDMETHODCALLTYPE *open )(
            __RPC__in IHTMLWindow2 * This,
                                     __RPC__in BSTR url,
                                     __RPC__in BSTR name,
                                     __RPC__in BSTR features,
                                     VARIANT_BOOL replace,
                                __RPC__deref_out_opt IHTMLWindow2 **pomWindowResult);
                            HRESULT ( STDMETHODCALLTYPE *get_self )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IHTMLWindow2 **p);
                            HRESULT ( STDMETHODCALLTYPE *get_top )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IHTMLWindow2 **p);
                            HRESULT ( STDMETHODCALLTYPE *get_window )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IHTMLWindow2 **p);
                   HRESULT ( STDMETHODCALLTYPE *navigate )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in BSTR url);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocus )(
            __RPC__in IHTMLWindow2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocus )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onblur )(
            __RPC__in IHTMLWindow2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onblur )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLWindow2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeunload )(
            __RPC__in IHTMLWindow2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeunload )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onunload )(
            __RPC__in IHTMLWindow2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onunload )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onhelp )(
            __RPC__in IHTMLWindow2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onhelp )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLWindow2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onresize )(
            __RPC__in IHTMLWindow2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onresize )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onscroll )(
            __RPC__in IHTMLWindow2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onscroll )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT *p);
                                    HRESULT ( STDMETHODCALLTYPE *get_document )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IHTMLDocument2 **p);
                            HRESULT ( STDMETHODCALLTYPE *get_event )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IHTMLEventObj **p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *showModalDialog )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in BSTR dialog,
                                 __RPC__in VARIANT *varArgIn,
                                 __RPC__in VARIANT *varOptions,
                                __RPC__out VARIANT *varArgOut);
                   HRESULT ( STDMETHODCALLTYPE *showHelp )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in BSTR helpURL,
                                 VARIANT helpArg,
                                     __RPC__in BSTR features);
                            HRESULT ( STDMETHODCALLTYPE *get_screen )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IHTMLScreen **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Option )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IHTMLOptionElementFactory **p);
                   HRESULT ( STDMETHODCALLTYPE *focus )(
            __RPC__in IHTMLWindow2 * This);
                            HRESULT ( STDMETHODCALLTYPE *get_closed )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *blur )(
            __RPC__in IHTMLWindow2 * This);
                   HRESULT ( STDMETHODCALLTYPE *scroll )(
            __RPC__in IHTMLWindow2 * This,
                       long x,
                       long y);
                            HRESULT ( STDMETHODCALLTYPE *get_clientInformation )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IOmNavigator **p);
                   HRESULT ( STDMETHODCALLTYPE *setInterval )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in BSTR expression,
                       long msec,
                                 __RPC__in VARIANT *language,
                                __RPC__out long *timerID);
                   HRESULT ( STDMETHODCALLTYPE *clearInterval )(
            __RPC__in IHTMLWindow2 * This,
                       long timerID);
                            HRESULT ( STDMETHODCALLTYPE *put_offscreenBuffering )(
            __RPC__in IHTMLWindow2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_offscreenBuffering )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *execScript )(
            __RPC__in IHTMLWindow2 * This,
                       __RPC__in BSTR code,
                                     __RPC__in BSTR language,
                                __RPC__out VARIANT *pvarRet);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt BSTR *String);
                   HRESULT ( STDMETHODCALLTYPE *scrollBy )(
            __RPC__in IHTMLWindow2 * This,
                       long x,
                       long y);
                   HRESULT ( STDMETHODCALLTYPE *scrollTo )(
            __RPC__in IHTMLWindow2 * This,
                       long x,
                       long y);
                   HRESULT ( STDMETHODCALLTYPE *moveTo )(
            __RPC__in IHTMLWindow2 * This,
                       long x,
                       long y);
                   HRESULT ( STDMETHODCALLTYPE *moveBy )(
            __RPC__in IHTMLWindow2 * This,
                       long x,
                       long y);
                   HRESULT ( STDMETHODCALLTYPE *resizeTo )(
            __RPC__in IHTMLWindow2 * This,
                       long x,
                       long y);
                   HRESULT ( STDMETHODCALLTYPE *resizeBy )(
            __RPC__in IHTMLWindow2 * This,
                       long x,
                       long y);
                            HRESULT ( STDMETHODCALLTYPE *get_external )(
            __RPC__in IHTMLWindow2 * This,
                                __RPC__deref_out_opt IDispatch **p);
        END_INTERFACE
    } IHTMLWindow2Vtbl;
    interface IHTMLWindow2
    {
        CONST_VTBL struct IHTMLWindow2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> item(This,pvarIndex,pvarResult) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get_frames(This,p) )
    ( (This)->lpVtbl -> put_defaultStatus(This,v) )
    ( (This)->lpVtbl -> get_defaultStatus(This,p) )
    ( (This)->lpVtbl -> put_status(This,v) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> setTimeout(This,expression,msec,language,timerID) )
    ( (This)->lpVtbl -> clearTimeout(This,timerID) )
    ( (This)->lpVtbl -> alert(This,message) )
    ( (This)->lpVtbl -> confirm(This,message,confirmed) )
    ( (This)->lpVtbl -> prompt(This,message,defstr,textdata) )
    ( (This)->lpVtbl -> get_Image(This,p) )
    ( (This)->lpVtbl -> get_location(This,p) )
    ( (This)->lpVtbl -> get_history(This,p) )
    ( (This)->lpVtbl -> close(This) )
    ( (This)->lpVtbl -> put_opener(This,v) )
    ( (This)->lpVtbl -> get_opener(This,p) )
    ( (This)->lpVtbl -> get_navigator(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> get_parent(This,p) )
    ( (This)->lpVtbl -> open(This,url,name,features,replace,pomWindowResult) )
    ( (This)->lpVtbl -> get_self(This,p) )
    ( (This)->lpVtbl -> get_top(This,p) )
    ( (This)->lpVtbl -> get_window(This,p) )
    ( (This)->lpVtbl -> navigate(This,url) )
    ( (This)->lpVtbl -> put_onfocus(This,v) )
    ( (This)->lpVtbl -> get_onfocus(This,p) )
    ( (This)->lpVtbl -> put_onblur(This,v) )
    ( (This)->lpVtbl -> get_onblur(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> put_onbeforeunload(This,v) )
    ( (This)->lpVtbl -> get_onbeforeunload(This,p) )
    ( (This)->lpVtbl -> put_onunload(This,v) )
    ( (This)->lpVtbl -> get_onunload(This,p) )
    ( (This)->lpVtbl -> put_onhelp(This,v) )
    ( (This)->lpVtbl -> get_onhelp(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> put_onresize(This,v) )
    ( (This)->lpVtbl -> get_onresize(This,p) )
    ( (This)->lpVtbl -> put_onscroll(This,v) )
    ( (This)->lpVtbl -> get_onscroll(This,p) )
    ( (This)->lpVtbl -> get_document(This,p) )
    ( (This)->lpVtbl -> get_event(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> showModalDialog(This,dialog,varArgIn,varOptions,varArgOut) )
    ( (This)->lpVtbl -> showHelp(This,helpURL,helpArg,features) )
    ( (This)->lpVtbl -> get_screen(This,p) )
    ( (This)->lpVtbl -> get_Option(This,p) )
    ( (This)->lpVtbl -> focus(This) )
    ( (This)->lpVtbl -> get_closed(This,p) )
    ( (This)->lpVtbl -> blur(This) )
    ( (This)->lpVtbl -> scroll(This,x,y) )
    ( (This)->lpVtbl -> get_clientInformation(This,p) )
    ( (This)->lpVtbl -> setInterval(This,expression,msec,language,timerID) )
    ( (This)->lpVtbl -> clearInterval(This,timerID) )
    ( (This)->lpVtbl -> put_offscreenBuffering(This,v) )
    ( (This)->lpVtbl -> get_offscreenBuffering(This,p) )
    ( (This)->lpVtbl -> execScript(This,code,language,pvarRet) )
    ( (This)->lpVtbl -> toString(This,String) )
    ( (This)->lpVtbl -> scrollBy(This,x,y) )
    ( (This)->lpVtbl -> scrollTo(This,x,y) )
    ( (This)->lpVtbl -> moveTo(This,x,y) )
    ( (This)->lpVtbl -> moveBy(This,x,y) )
    ( (This)->lpVtbl -> resizeTo(This,x,y) )
    ( (This)->lpVtbl -> resizeBy(This,x,y) )
    ( (This)->lpVtbl -> get_external(This,p) )
EXTERN_C const IID IID_IHTMLWindow3;
    typedef struct IHTMLWindow3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLWindow3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLWindow3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLWindow3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLWindow3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLWindow3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLWindow3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLWindow3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_screenLeft )(
            __RPC__in IHTMLWindow3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_screenTop )(
            __RPC__in IHTMLWindow3 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *attachEvent )(
            __RPC__in IHTMLWindow3 * This,
                       __RPC__in BSTR event,
                       __RPC__in_opt IDispatch *pDisp,
                                __RPC__out VARIANT_BOOL *pfResult);
                   HRESULT ( STDMETHODCALLTYPE *detachEvent )(
            __RPC__in IHTMLWindow3 * This,
                       __RPC__in BSTR event,
                       __RPC__in_opt IDispatch *pDisp);
                   HRESULT ( STDMETHODCALLTYPE *setTimeout )(
            __RPC__in IHTMLWindow3 * This,
                       __RPC__in VARIANT *expression,
                       long msec,
                                 __RPC__in VARIANT *language,
                                __RPC__out long *timerID);
                   HRESULT ( STDMETHODCALLTYPE *setInterval )(
            __RPC__in IHTMLWindow3 * This,
                       __RPC__in VARIANT *expression,
                       long msec,
                                 __RPC__in VARIANT *language,
                                __RPC__out long *timerID);
                   HRESULT ( STDMETHODCALLTYPE *print )(
            __RPC__in IHTMLWindow3 * This);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeprint )(
            __RPC__in IHTMLWindow3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeprint )(
            __RPC__in IHTMLWindow3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onafterprint )(
            __RPC__in IHTMLWindow3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onafterprint )(
            __RPC__in IHTMLWindow3 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_clipboardData )(
            __RPC__in IHTMLWindow3 * This,
                                __RPC__deref_out_opt IHTMLDataTransfer **p);
                   HRESULT ( STDMETHODCALLTYPE *showModelessDialog )(
            __RPC__in IHTMLWindow3 * This,
                                     __RPC__in BSTR url,
                                 __RPC__in VARIANT *varArgIn,
                                 __RPC__in VARIANT *options,
                                __RPC__deref_out_opt IHTMLWindow2 **pDialog);
        END_INTERFACE
    } IHTMLWindow3Vtbl;
    interface IHTMLWindow3
    {
        CONST_VTBL struct IHTMLWindow3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_screenLeft(This,p) )
    ( (This)->lpVtbl -> get_screenTop(This,p) )
    ( (This)->lpVtbl -> attachEvent(This,event,pDisp,pfResult) )
    ( (This)->lpVtbl -> detachEvent(This,event,pDisp) )
    ( (This)->lpVtbl -> setTimeout(This,expression,msec,language,timerID) )
    ( (This)->lpVtbl -> setInterval(This,expression,msec,language,timerID) )
    ( (This)->lpVtbl -> print(This) )
    ( (This)->lpVtbl -> put_onbeforeprint(This,v) )
    ( (This)->lpVtbl -> get_onbeforeprint(This,p) )
    ( (This)->lpVtbl -> put_onafterprint(This,v) )
    ( (This)->lpVtbl -> get_onafterprint(This,p) )
    ( (This)->lpVtbl -> get_clipboardData(This,p) )
    ( (This)->lpVtbl -> showModelessDialog(This,url,varArgIn,options,pDialog) )
EXTERN_C const IID IID_IHTMLFrameBase;
    typedef struct IHTMLFrameBaseVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFrameBase * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFrameBase * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFrameBase * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFrameBase * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFrameBase * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFrameBase * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFrameBase * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLFrameBase * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLFrameBase * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLFrameBase * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLFrameBase * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_border )(
            __RPC__in IHTMLFrameBase * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_border )(
            __RPC__in IHTMLFrameBase * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameBorder )(
            __RPC__in IHTMLFrameBase * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameBorder )(
            __RPC__in IHTMLFrameBase * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameSpacing )(
            __RPC__in IHTMLFrameBase * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameSpacing )(
            __RPC__in IHTMLFrameBase * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginWidth )(
            __RPC__in IHTMLFrameBase * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginWidth )(
            __RPC__in IHTMLFrameBase * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginHeight )(
            __RPC__in IHTMLFrameBase * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginHeight )(
            __RPC__in IHTMLFrameBase * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_noResize )(
            __RPC__in IHTMLFrameBase * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_noResize )(
            __RPC__in IHTMLFrameBase * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_scrolling )(
            __RPC__in IHTMLFrameBase * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_scrolling )(
            __RPC__in IHTMLFrameBase * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLFrameBaseVtbl;
    interface IHTMLFrameBase
    {
        CONST_VTBL struct IHTMLFrameBaseVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_border(This,v) )
    ( (This)->lpVtbl -> get_border(This,p) )
    ( (This)->lpVtbl -> put_frameBorder(This,v) )
    ( (This)->lpVtbl -> get_frameBorder(This,p) )
    ( (This)->lpVtbl -> put_frameSpacing(This,v) )
    ( (This)->lpVtbl -> get_frameSpacing(This,p) )
    ( (This)->lpVtbl -> put_marginWidth(This,v) )
    ( (This)->lpVtbl -> get_marginWidth(This,p) )
    ( (This)->lpVtbl -> put_marginHeight(This,v) )
    ( (This)->lpVtbl -> get_marginHeight(This,p) )
    ( (This)->lpVtbl -> put_noResize(This,v) )
    ( (This)->lpVtbl -> get_noResize(This,p) )
    ( (This)->lpVtbl -> put_scrolling(This,v) )
    ( (This)->lpVtbl -> get_scrolling(This,p) )
EXTERN_C const IID IID_IHTMLStorage;
    typedef struct IHTMLStorageVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStorage * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStorage * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStorage * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStorage * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStorage * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStorage * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStorage * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLStorage * This,
                                __RPC__out long *p);
                                    HRESULT ( STDMETHODCALLTYPE *get_remainingSpace )(
            __RPC__in IHTMLStorage * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *key )(
            __RPC__in IHTMLStorage * This,
                       long lIndex,
                                __RPC__deref_out_opt BSTR *__MIDL__IHTMLStorage0000);
                   HRESULT ( STDMETHODCALLTYPE *getItem )(
            __RPC__in IHTMLStorage * This,
                       __RPC__in BSTR bstrKey,
                                __RPC__out VARIANT *__MIDL__IHTMLStorage0001);
                   HRESULT ( STDMETHODCALLTYPE *setItem )(
            __RPC__in IHTMLStorage * This,
                       __RPC__in BSTR bstrKey,
                       __RPC__in BSTR bstrValue);
                   HRESULT ( STDMETHODCALLTYPE *removeItem )(
            __RPC__in IHTMLStorage * This,
                       __RPC__in BSTR bstrKey);
                   HRESULT ( STDMETHODCALLTYPE *clear )(
            __RPC__in IHTMLStorage * This);
        END_INTERFACE
    } IHTMLStorageVtbl;
    interface IHTMLStorage
    {
        CONST_VTBL struct IHTMLStorageVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get_remainingSpace(This,p) )
    ( (This)->lpVtbl -> key(This,lIndex,__MIDL__IHTMLStorage0000) )
    ( (This)->lpVtbl -> getItem(This,bstrKey,__MIDL__IHTMLStorage0001) )
    ( (This)->lpVtbl -> setItem(This,bstrKey,bstrValue) )
    ( (This)->lpVtbl -> removeItem(This,bstrKey) )
    ( (This)->lpVtbl -> clear(This) )
EXTERN_C const IID IID_IHTMLPerformance;
    typedef struct IHTMLPerformanceVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPerformance * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPerformance * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPerformance * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLPerformance * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLPerformance * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLPerformance * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLPerformance * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_navigation )(
            __RPC__in IHTMLPerformance * This,
                                __RPC__deref_out_opt IHTMLPerformanceNavigation **p);
                            HRESULT ( STDMETHODCALLTYPE *get_timing )(
            __RPC__in IHTMLPerformance * This,
                                __RPC__deref_out_opt IHTMLPerformanceTiming **p);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLPerformance * This,
                                __RPC__deref_out_opt BSTR *string);
                   HRESULT ( STDMETHODCALLTYPE *toJSON )(
            __RPC__in IHTMLPerformance * This,
                                __RPC__out VARIANT *pVar);
        END_INTERFACE
    } IHTMLPerformanceVtbl;
    interface IHTMLPerformance
    {
        CONST_VTBL struct IHTMLPerformanceVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_navigation(This,p) )
    ( (This)->lpVtbl -> get_timing(This,p) )
    ( (This)->lpVtbl -> toString(This,string) )
    ( (This)->lpVtbl -> toJSON(This,pVar) )
EXTERN_C const IID IID_IHTMLApplicationCache;
    typedef struct IHTMLApplicationCacheVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLApplicationCache * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLApplicationCache * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLApplicationCache * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLApplicationCache * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLApplicationCache * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLApplicationCache * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLApplicationCache * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLApplicationCache * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_onchecking )(
            __RPC__in IHTMLApplicationCache * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_onchecking )(
            __RPC__in IHTMLApplicationCache * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLApplicationCache * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLApplicationCache * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_onnoupdate )(
            __RPC__in IHTMLApplicationCache * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_onnoupdate )(
            __RPC__in IHTMLApplicationCache * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_ondownloading )(
            __RPC__in IHTMLApplicationCache * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_ondownloading )(
            __RPC__in IHTMLApplicationCache * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_onprogress )(
            __RPC__in IHTMLApplicationCache * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_onprogress )(
            __RPC__in IHTMLApplicationCache * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_onupdateready )(
            __RPC__in IHTMLApplicationCache * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_onupdateready )(
            __RPC__in IHTMLApplicationCache * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_oncached )(
            __RPC__in IHTMLApplicationCache * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_oncached )(
            __RPC__in IHTMLApplicationCache * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_onobsolete )(
            __RPC__in IHTMLApplicationCache * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_onobsolete )(
            __RPC__in IHTMLApplicationCache * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *update )(
            __RPC__in IHTMLApplicationCache * This);
                   HRESULT ( STDMETHODCALLTYPE *swapCache )(
            __RPC__in IHTMLApplicationCache * This);
                   HRESULT ( STDMETHODCALLTYPE *abort )(
            __RPC__in IHTMLApplicationCache * This);
        END_INTERFACE
    } IHTMLApplicationCacheVtbl;
    interface IHTMLApplicationCache
    {
        CONST_VTBL struct IHTMLApplicationCacheVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> put_onchecking(This,v) )
    ( (This)->lpVtbl -> get_onchecking(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> put_onnoupdate(This,v) )
    ( (This)->lpVtbl -> get_onnoupdate(This,p) )
    ( (This)->lpVtbl -> put_ondownloading(This,v) )
    ( (This)->lpVtbl -> get_ondownloading(This,p) )
    ( (This)->lpVtbl -> put_onprogress(This,v) )
    ( (This)->lpVtbl -> get_onprogress(This,p) )
    ( (This)->lpVtbl -> put_onupdateready(This,v) )
    ( (This)->lpVtbl -> get_onupdateready(This,p) )
    ( (This)->lpVtbl -> put_oncached(This,v) )
    ( (This)->lpVtbl -> get_oncached(This,p) )
    ( (This)->lpVtbl -> put_onobsolete(This,v) )
    ( (This)->lpVtbl -> get_onobsolete(This,p) )
    ( (This)->lpVtbl -> update(This) )
    ( (This)->lpVtbl -> swapCache(This) )
    ( (This)->lpVtbl -> abort(This) )
EXTERN_C const IID IID_IHTMLScreen;
    typedef struct IHTMLScreenVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLScreen * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLScreen * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLScreen * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLScreen * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLScreen * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLScreen * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLScreen * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_colorDepth )(
            __RPC__in IHTMLScreen * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_bufferDepth )(
            __RPC__in IHTMLScreen * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_bufferDepth )(
            __RPC__in IHTMLScreen * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLScreen * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLScreen * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_updateInterval )(
            __RPC__in IHTMLScreen * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_updateInterval )(
            __RPC__in IHTMLScreen * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_availHeight )(
            __RPC__in IHTMLScreen * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_availWidth )(
            __RPC__in IHTMLScreen * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fontSmoothingEnabled )(
            __RPC__in IHTMLScreen * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLScreenVtbl;
    interface IHTMLScreen
    {
        CONST_VTBL struct IHTMLScreenVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_colorDepth(This,p) )
    ( (This)->lpVtbl -> put_bufferDepth(This,v) )
    ( (This)->lpVtbl -> get_bufferDepth(This,p) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_updateInterval(This,v) )
    ( (This)->lpVtbl -> get_updateInterval(This,p) )
    ( (This)->lpVtbl -> get_availHeight(This,p) )
    ( (This)->lpVtbl -> get_availWidth(This,p) )
    ( (This)->lpVtbl -> get_fontSmoothingEnabled(This,p) )
EXTERN_C const IID IID_IHTMLScreen2;
    typedef struct IHTMLScreen2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLScreen2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLScreen2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLScreen2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLScreen2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLScreen2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLScreen2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLScreen2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_logicalXDPI )(
            __RPC__in IHTMLScreen2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_logicalYDPI )(
            __RPC__in IHTMLScreen2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_deviceXDPI )(
            __RPC__in IHTMLScreen2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_deviceYDPI )(
            __RPC__in IHTMLScreen2 * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLScreen2Vtbl;
    interface IHTMLScreen2
    {
        CONST_VTBL struct IHTMLScreen2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_logicalXDPI(This,p) )
    ( (This)->lpVtbl -> get_logicalYDPI(This,p) )
    ( (This)->lpVtbl -> get_deviceXDPI(This,p) )
    ( (This)->lpVtbl -> get_deviceYDPI(This,p) )
EXTERN_C const IID IID_IHTMLScreen3;
    typedef struct IHTMLScreen3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLScreen3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLScreen3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLScreen3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLScreen3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLScreen3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLScreen3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLScreen3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_systemXDPI )(
            __RPC__in IHTMLScreen3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_systemYDPI )(
            __RPC__in IHTMLScreen3 * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLScreen3Vtbl;
    interface IHTMLScreen3
    {
        CONST_VTBL struct IHTMLScreen3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_systemXDPI(This,p) )
    ( (This)->lpVtbl -> get_systemYDPI(This,p) )
EXTERN_C const IID IID_IHTMLScreen4;
    typedef struct IHTMLScreen4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLScreen4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLScreen4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLScreen4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLScreen4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLScreen4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLScreen4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLScreen4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_pixelDepth )(
            __RPC__in IHTMLScreen4 * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLScreen4Vtbl;
    interface IHTMLScreen4
    {
        CONST_VTBL struct IHTMLScreen4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_pixelDepth(This,p) )
EXTERN_C const IID IID_IHTMLWindow4;
    typedef struct IHTMLWindow4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLWindow4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLWindow4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLWindow4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLWindow4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLWindow4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLWindow4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLWindow4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *createPopup )(
            __RPC__in IHTMLWindow4 * This,
                                 __RPC__in VARIANT *varArgIn,
                                __RPC__deref_out_opt IDispatch **ppPopup);
                            HRESULT ( STDMETHODCALLTYPE *get_frameElement )(
            __RPC__in IHTMLWindow4 * This,
                                __RPC__deref_out_opt IHTMLFrameBase **p);
        END_INTERFACE
    } IHTMLWindow4Vtbl;
    interface IHTMLWindow4
    {
        CONST_VTBL struct IHTMLWindow4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> createPopup(This,varArgIn,ppPopup) )
    ( (This)->lpVtbl -> get_frameElement(This,p) )
EXTERN_C const IID IID_IHTMLWindow5;
    typedef struct IHTMLWindow5Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLWindow5 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLWindow5 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLWindow5 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLWindow5 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLWindow5 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLWindow5 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLWindow5 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_XMLHttpRequest )(
            __RPC__in IHTMLWindow5 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_XMLHttpRequest )(
            __RPC__in IHTMLWindow5 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLWindow5Vtbl;
    interface IHTMLWindow5
    {
        CONST_VTBL struct IHTMLWindow5Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_XMLHttpRequest(This,v) )
    ( (This)->lpVtbl -> get_XMLHttpRequest(This,p) )
EXTERN_C const IID IID_IHTMLWindow6;
    typedef struct IHTMLWindow6Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLWindow6 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLWindow6 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLWindow6 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLWindow6 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLWindow6 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLWindow6 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLWindow6 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_XDomainRequest )(
            __RPC__in IHTMLWindow6 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_XDomainRequest )(
            __RPC__in IHTMLWindow6 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_sessionStorage )(
            __RPC__in IHTMLWindow6 * This,
                                __RPC__deref_out_opt IHTMLStorage **p);
                            HRESULT ( STDMETHODCALLTYPE *get_localStorage )(
            __RPC__in IHTMLWindow6 * This,
                                __RPC__deref_out_opt IHTMLStorage **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onhashchange )(
            __RPC__in IHTMLWindow6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onhashchange )(
            __RPC__in IHTMLWindow6 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_maxConnectionsPerServer )(
            __RPC__in IHTMLWindow6 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *postMessage )(
            __RPC__in IHTMLWindow6 * This,
                       __RPC__in BSTR msg,
                                 VARIANT targetOrigin);
                   HRESULT ( STDMETHODCALLTYPE *toStaticHTML )(
            __RPC__in IHTMLWindow6 * This,
                       __RPC__in BSTR bstrHTML,
                                __RPC__deref_out_opt BSTR *pbstrStaticHTML);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmessage )(
            __RPC__in IHTMLWindow6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmessage )(
            __RPC__in IHTMLWindow6 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *msWriteProfilerMark )(
            __RPC__in IHTMLWindow6 * This,
                       __RPC__in BSTR bstrProfilerMarkName);
        END_INTERFACE
    } IHTMLWindow6Vtbl;
    interface IHTMLWindow6
    {
        CONST_VTBL struct IHTMLWindow6Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_XDomainRequest(This,v) )
    ( (This)->lpVtbl -> get_XDomainRequest(This,p) )
    ( (This)->lpVtbl -> get_sessionStorage(This,p) )
    ( (This)->lpVtbl -> get_localStorage(This,p) )
    ( (This)->lpVtbl -> put_onhashchange(This,v) )
    ( (This)->lpVtbl -> get_onhashchange(This,p) )
    ( (This)->lpVtbl -> get_maxConnectionsPerServer(This,p) )
    ( (This)->lpVtbl -> postMessage(This,msg,targetOrigin) )
    ( (This)->lpVtbl -> toStaticHTML(This,bstrHTML,pbstrStaticHTML) )
    ( (This)->lpVtbl -> put_onmessage(This,v) )
    ( (This)->lpVtbl -> get_onmessage(This,p) )
    ( (This)->lpVtbl -> msWriteProfilerMark(This,bstrProfilerMarkName) )
EXTERN_C const IID IID_IHTMLWindow7;
    typedef struct IHTMLWindow7Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLWindow7 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLWindow7 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLWindow7 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLWindow7 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLWindow7 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLWindow7 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLWindow7 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *getSelection )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__deref_out_opt IHTMLSelection **ppIHTMLSelection);
                   HRESULT ( STDMETHODCALLTYPE *getComputedStyle )(
            __RPC__in IHTMLWindow7 * This,
                       __RPC__in_opt IHTMLDOMNode *varArgIn,
                                     __RPC__in BSTR bstrPseudoElt,
                                __RPC__deref_out_opt IHTMLCSSStyleDeclaration **ppComputedStyle);
                            HRESULT ( STDMETHODCALLTYPE *get_styleMedia )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__deref_out_opt IHTMLStyleMedia **p);
                            HRESULT ( STDMETHODCALLTYPE *put_performance )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_performance )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_innerWidth )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_innerHeight )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pageXOffset )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pageYOffset )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_screenX )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_screenY )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_outerWidth )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_outerHeight )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onabort )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onabort )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncanplay )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncanplay )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncanplaythrough )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncanplaythrough )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onchange )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onchange )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onclick )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onclick )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncontextmenu )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncontextmenu )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondblclick )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondblclick )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondrag )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondrag )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragend )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragend )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragenter )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragenter )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragleave )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragleave )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragover )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragover )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondragstart )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondragstart )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondrop )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondrop )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondurationchange )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondurationchange )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocusin )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocusin )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocusout )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocusout )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oninput )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oninput )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onemptied )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onemptied )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onended )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onended )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onkeydown )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onkeydown )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onkeypress )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onkeypress )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onkeyup )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onkeyup )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onloadeddata )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onloadeddata )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onloadedmetadata )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onloadedmetadata )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onloadstart )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onloadstart )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmousedown )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmousedown )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseenter )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseenter )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseleave )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseleave )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmousemove )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmousemove )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseout )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseout )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseover )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseover )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmouseup )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmouseup )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmousewheel )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmousewheel )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onoffline )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onoffline )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ononline )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ononline )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onprogress )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onprogress )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onratechange )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onratechange )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreset )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreset )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onseeked )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onseeked )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onseeking )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onseeking )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onselect )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onselect )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onstalled )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onstalled )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onstorage )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onstorage )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onsubmit )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onsubmit )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onsuspend )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onsuspend )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ontimeupdate )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ontimeupdate )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onpause )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onpause )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onplay )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onplay )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onplaying )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onplaying )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onvolumechange )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onvolumechange )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onwaiting )(
            __RPC__in IHTMLWindow7 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onwaiting )(
            __RPC__in IHTMLWindow7 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLWindow7Vtbl;
    interface IHTMLWindow7
    {
        CONST_VTBL struct IHTMLWindow7Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> getSelection(This,ppIHTMLSelection) )
    ( (This)->lpVtbl -> getComputedStyle(This,varArgIn,bstrPseudoElt,ppComputedStyle) )
    ( (This)->lpVtbl -> get_styleMedia(This,p) )
    ( (This)->lpVtbl -> put_performance(This,v) )
    ( (This)->lpVtbl -> get_performance(This,p) )
    ( (This)->lpVtbl -> get_innerWidth(This,p) )
    ( (This)->lpVtbl -> get_innerHeight(This,p) )
    ( (This)->lpVtbl -> get_pageXOffset(This,p) )
    ( (This)->lpVtbl -> get_pageYOffset(This,p) )
    ( (This)->lpVtbl -> get_screenX(This,p) )
    ( (This)->lpVtbl -> get_screenY(This,p) )
    ( (This)->lpVtbl -> get_outerWidth(This,p) )
    ( (This)->lpVtbl -> get_outerHeight(This,p) )
    ( (This)->lpVtbl -> put_onabort(This,v) )
    ( (This)->lpVtbl -> get_onabort(This,p) )
    ( (This)->lpVtbl -> put_oncanplay(This,v) )
    ( (This)->lpVtbl -> get_oncanplay(This,p) )
    ( (This)->lpVtbl -> put_oncanplaythrough(This,v) )
    ( (This)->lpVtbl -> get_oncanplaythrough(This,p) )
    ( (This)->lpVtbl -> put_onchange(This,v) )
    ( (This)->lpVtbl -> get_onchange(This,p) )
    ( (This)->lpVtbl -> put_onclick(This,v) )
    ( (This)->lpVtbl -> get_onclick(This,p) )
    ( (This)->lpVtbl -> put_oncontextmenu(This,v) )
    ( (This)->lpVtbl -> get_oncontextmenu(This,p) )
    ( (This)->lpVtbl -> put_ondblclick(This,v) )
    ( (This)->lpVtbl -> get_ondblclick(This,p) )
    ( (This)->lpVtbl -> put_ondrag(This,v) )
    ( (This)->lpVtbl -> get_ondrag(This,p) )
    ( (This)->lpVtbl -> put_ondragend(This,v) )
    ( (This)->lpVtbl -> get_ondragend(This,p) )
    ( (This)->lpVtbl -> put_ondragenter(This,v) )
    ( (This)->lpVtbl -> get_ondragenter(This,p) )
    ( (This)->lpVtbl -> put_ondragleave(This,v) )
    ( (This)->lpVtbl -> get_ondragleave(This,p) )
    ( (This)->lpVtbl -> put_ondragover(This,v) )
    ( (This)->lpVtbl -> get_ondragover(This,p) )
    ( (This)->lpVtbl -> put_ondragstart(This,v) )
    ( (This)->lpVtbl -> get_ondragstart(This,p) )
    ( (This)->lpVtbl -> put_ondrop(This,v) )
    ( (This)->lpVtbl -> get_ondrop(This,p) )
    ( (This)->lpVtbl -> put_ondurationchange(This,v) )
    ( (This)->lpVtbl -> get_ondurationchange(This,p) )
    ( (This)->lpVtbl -> put_onfocusin(This,v) )
    ( (This)->lpVtbl -> get_onfocusin(This,p) )
    ( (This)->lpVtbl -> put_onfocusout(This,v) )
    ( (This)->lpVtbl -> get_onfocusout(This,p) )
    ( (This)->lpVtbl -> put_oninput(This,v) )
    ( (This)->lpVtbl -> get_oninput(This,p) )
    ( (This)->lpVtbl -> put_onemptied(This,v) )
    ( (This)->lpVtbl -> get_onemptied(This,p) )
    ( (This)->lpVtbl -> put_onended(This,v) )
    ( (This)->lpVtbl -> get_onended(This,p) )
    ( (This)->lpVtbl -> put_onkeydown(This,v) )
    ( (This)->lpVtbl -> get_onkeydown(This,p) )
    ( (This)->lpVtbl -> put_onkeypress(This,v) )
    ( (This)->lpVtbl -> get_onkeypress(This,p) )
    ( (This)->lpVtbl -> put_onkeyup(This,v) )
    ( (This)->lpVtbl -> get_onkeyup(This,p) )
    ( (This)->lpVtbl -> put_onloadeddata(This,v) )
    ( (This)->lpVtbl -> get_onloadeddata(This,p) )
    ( (This)->lpVtbl -> put_onloadedmetadata(This,v) )
    ( (This)->lpVtbl -> get_onloadedmetadata(This,p) )
    ( (This)->lpVtbl -> put_onloadstart(This,v) )
    ( (This)->lpVtbl -> get_onloadstart(This,p) )
    ( (This)->lpVtbl -> put_onmousedown(This,v) )
    ( (This)->lpVtbl -> get_onmousedown(This,p) )
    ( (This)->lpVtbl -> put_onmouseenter(This,v) )
    ( (This)->lpVtbl -> get_onmouseenter(This,p) )
    ( (This)->lpVtbl -> put_onmouseleave(This,v) )
    ( (This)->lpVtbl -> get_onmouseleave(This,p) )
    ( (This)->lpVtbl -> put_onmousemove(This,v) )
    ( (This)->lpVtbl -> get_onmousemove(This,p) )
    ( (This)->lpVtbl -> put_onmouseout(This,v) )
    ( (This)->lpVtbl -> get_onmouseout(This,p) )
    ( (This)->lpVtbl -> put_onmouseover(This,v) )
    ( (This)->lpVtbl -> get_onmouseover(This,p) )
    ( (This)->lpVtbl -> put_onmouseup(This,v) )
    ( (This)->lpVtbl -> get_onmouseup(This,p) )
    ( (This)->lpVtbl -> put_onmousewheel(This,v) )
    ( (This)->lpVtbl -> get_onmousewheel(This,p) )
    ( (This)->lpVtbl -> put_onoffline(This,v) )
    ( (This)->lpVtbl -> get_onoffline(This,p) )
    ( (This)->lpVtbl -> put_ononline(This,v) )
    ( (This)->lpVtbl -> get_ononline(This,p) )
    ( (This)->lpVtbl -> put_onprogress(This,v) )
    ( (This)->lpVtbl -> get_onprogress(This,p) )
    ( (This)->lpVtbl -> put_onratechange(This,v) )
    ( (This)->lpVtbl -> get_onratechange(This,p) )
    ( (This)->lpVtbl -> put_onreadystatechange(This,v) )
    ( (This)->lpVtbl -> get_onreadystatechange(This,p) )
    ( (This)->lpVtbl -> put_onreset(This,v) )
    ( (This)->lpVtbl -> get_onreset(This,p) )
    ( (This)->lpVtbl -> put_onseeked(This,v) )
    ( (This)->lpVtbl -> get_onseeked(This,p) )
    ( (This)->lpVtbl -> put_onseeking(This,v) )
    ( (This)->lpVtbl -> get_onseeking(This,p) )
    ( (This)->lpVtbl -> put_onselect(This,v) )
    ( (This)->lpVtbl -> get_onselect(This,p) )
    ( (This)->lpVtbl -> put_onstalled(This,v) )
    ( (This)->lpVtbl -> get_onstalled(This,p) )
    ( (This)->lpVtbl -> put_onstorage(This,v) )
    ( (This)->lpVtbl -> get_onstorage(This,p) )
    ( (This)->lpVtbl -> put_onsubmit(This,v) )
    ( (This)->lpVtbl -> get_onsubmit(This,p) )
    ( (This)->lpVtbl -> put_onsuspend(This,v) )
    ( (This)->lpVtbl -> get_onsuspend(This,p) )
    ( (This)->lpVtbl -> put_ontimeupdate(This,v) )
    ( (This)->lpVtbl -> get_ontimeupdate(This,p) )
    ( (This)->lpVtbl -> put_onpause(This,v) )
    ( (This)->lpVtbl -> get_onpause(This,p) )
    ( (This)->lpVtbl -> put_onplay(This,v) )
    ( (This)->lpVtbl -> get_onplay(This,p) )
    ( (This)->lpVtbl -> put_onplaying(This,v) )
    ( (This)->lpVtbl -> get_onplaying(This,p) )
    ( (This)->lpVtbl -> put_onvolumechange(This,v) )
    ( (This)->lpVtbl -> get_onvolumechange(This,p) )
    ( (This)->lpVtbl -> put_onwaiting(This,v) )
    ( (This)->lpVtbl -> get_onwaiting(This,p) )
EXTERN_C const IID IID_IHTMLWindow8;
    typedef struct IHTMLWindow8Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLWindow8 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLWindow8 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLWindow8 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLWindow8 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLWindow8 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLWindow8 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLWindow8 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointerdown )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointerdown )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointermove )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointermove )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointerup )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointerup )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointerover )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointerover )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointerout )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointerout )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointercancel )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointercancel )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointerhover )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointerhover )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgesturestart )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgesturestart )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgesturechange )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgesturechange )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgestureend )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgestureend )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgesturehold )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgesturehold )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgesturetap )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgesturetap )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgesturedoubletap )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgesturedoubletap )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsinertiastart )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsinertiastart )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_applicationCache )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__deref_out_opt IHTMLApplicationCache **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onpopstate )(
            __RPC__in IHTMLWindow8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onpopstate )(
            __RPC__in IHTMLWindow8 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLWindow8Vtbl;
    interface IHTMLWindow8
    {
        CONST_VTBL struct IHTMLWindow8Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_onmspointerdown(This,v) )
    ( (This)->lpVtbl -> get_onmspointerdown(This,p) )
    ( (This)->lpVtbl -> put_onmspointermove(This,v) )
    ( (This)->lpVtbl -> get_onmspointermove(This,p) )
    ( (This)->lpVtbl -> put_onmspointerup(This,v) )
    ( (This)->lpVtbl -> get_onmspointerup(This,p) )
    ( (This)->lpVtbl -> put_onmspointerover(This,v) )
    ( (This)->lpVtbl -> get_onmspointerover(This,p) )
    ( (This)->lpVtbl -> put_onmspointerout(This,v) )
    ( (This)->lpVtbl -> get_onmspointerout(This,p) )
    ( (This)->lpVtbl -> put_onmspointercancel(This,v) )
    ( (This)->lpVtbl -> get_onmspointercancel(This,p) )
    ( (This)->lpVtbl -> put_onmspointerhover(This,v) )
    ( (This)->lpVtbl -> get_onmspointerhover(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturestart(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturestart(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturechange(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturechange(This,p) )
    ( (This)->lpVtbl -> put_onmsgestureend(This,v) )
    ( (This)->lpVtbl -> get_onmsgestureend(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturehold(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturehold(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturetap(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturetap(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturedoubletap(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturedoubletap(This,p) )
    ( (This)->lpVtbl -> put_onmsinertiastart(This,v) )
    ( (This)->lpVtbl -> get_onmsinertiastart(This,p) )
    ( (This)->lpVtbl -> get_applicationCache(This,p) )
    ( (This)->lpVtbl -> put_onpopstate(This,v) )
    ( (This)->lpVtbl -> get_onpopstate(This,p) )
EXTERN_C const IID DIID_DispHTMLScreen;
    typedef struct DispHTMLScreenVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLScreen * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLScreen * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLScreen * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLScreen * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLScreen * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLScreen * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLScreen * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLScreenVtbl;
    interface DispHTMLScreen
    {
        CONST_VTBL struct DispHTMLScreenVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLScreen;
class DECLSPEC_UUID("3050f35d-98b5-11cf-bb82-00aa00bdce0b")
HTMLScreen;
EXTERN_C const IID DIID_DispHTMLWindow2;
    typedef struct DispHTMLWindow2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLWindow2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLWindow2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLWindow2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLWindow2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLWindow2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLWindow2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLWindow2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLWindow2Vtbl;
    interface DispHTMLWindow2
    {
        CONST_VTBL struct DispHTMLWindow2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLWindow2;
class DECLSPEC_UUID("D48A6EC6-6A4A-11cf-94A7-444553540000")
HTMLWindow2;
EXTERN_C const IID DIID_DispHTMLWindowProxy;
    typedef struct DispHTMLWindowProxyVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLWindowProxy * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLWindowProxy * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLWindowProxy * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLWindowProxy * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLWindowProxy * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLWindowProxy * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLWindowProxy * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLWindowProxyVtbl;
    interface DispHTMLWindowProxy
    {
        CONST_VTBL struct DispHTMLWindowProxyVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLWindowProxy;
class DECLSPEC_UUID("3050f391-98b5-11cf-bb82-00aa00bdce0b")
HTMLWindowProxy;
EXTERN_C const IID IID_IHTMLDocumentCompatibleInfo;
    typedef struct IHTMLDocumentCompatibleInfoVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDocumentCompatibleInfo * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDocumentCompatibleInfo * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDocumentCompatibleInfo * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDocumentCompatibleInfo * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDocumentCompatibleInfo * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDocumentCompatibleInfo * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDocumentCompatibleInfo * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_userAgent )(
            __RPC__in IHTMLDocumentCompatibleInfo * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_version )(
            __RPC__in IHTMLDocumentCompatibleInfo * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLDocumentCompatibleInfoVtbl;
    interface IHTMLDocumentCompatibleInfo
    {
        CONST_VTBL struct IHTMLDocumentCompatibleInfoVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_userAgent(This,p) )
    ( (This)->lpVtbl -> get_version(This,p) )
EXTERN_C const IID IID_IHTMLDocumentCompatibleInfoCollection;
    typedef struct IHTMLDocumentCompatibleInfoCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDocumentCompatibleInfoCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDocumentCompatibleInfoCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDocumentCompatibleInfoCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDocumentCompatibleInfoCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDocumentCompatibleInfoCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDocumentCompatibleInfoCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDocumentCompatibleInfoCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLDocumentCompatibleInfoCollection * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLDocumentCompatibleInfoCollection * This,
                       long index,
                                __RPC__deref_out_opt IHTMLDocumentCompatibleInfo **compatibleInfo);
        END_INTERFACE
    } IHTMLDocumentCompatibleInfoCollectionVtbl;
    interface IHTMLDocumentCompatibleInfoCollection
    {
        CONST_VTBL struct IHTMLDocumentCompatibleInfoCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> item(This,index,compatibleInfo) )
EXTERN_C const IID DIID_DispHTMLDocumentCompatibleInfo;
    typedef struct DispHTMLDocumentCompatibleInfoVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDocumentCompatibleInfo * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDocumentCompatibleInfo * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDocumentCompatibleInfo * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDocumentCompatibleInfo * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDocumentCompatibleInfo * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDocumentCompatibleInfo * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDocumentCompatibleInfo * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDocumentCompatibleInfoVtbl;
    interface DispHTMLDocumentCompatibleInfo
    {
        CONST_VTBL struct DispHTMLDocumentCompatibleInfoVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDocumentCompatibleInfo;
class DECLSPEC_UUID("3051041b-98b5-11cf-bb82-00aa00bdce0b")
HTMLDocumentCompatibleInfo;
EXTERN_C const IID DIID_DispHTMLDocumentCompatibleInfoCollection;
    typedef struct DispHTMLDocumentCompatibleInfoCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDocumentCompatibleInfoCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDocumentCompatibleInfoCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDocumentCompatibleInfoCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDocumentCompatibleInfoCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDocumentCompatibleInfoCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDocumentCompatibleInfoCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDocumentCompatibleInfoCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDocumentCompatibleInfoCollectionVtbl;
    interface DispHTMLDocumentCompatibleInfoCollection
    {
        CONST_VTBL struct DispHTMLDocumentCompatibleInfoCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDocumentCompatibleInfoCollection;
class DECLSPEC_UUID("30510419-98b5-11cf-bb82-00aa00bdce0b")
HTMLDocumentCompatibleInfoCollection;
EXTERN_C const IID DIID_HTMLDocumentEvents4;
    typedef struct HTMLDocumentEvents4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLDocumentEvents4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLDocumentEvents4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLDocumentEvents4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLDocumentEvents4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLDocumentEvents4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLDocumentEvents4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLDocumentEvents4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLDocumentEvents4Vtbl;
    interface HTMLDocumentEvents4
    {
        CONST_VTBL struct HTMLDocumentEvents4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLDocumentEvents3;
    typedef struct HTMLDocumentEvents3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLDocumentEvents3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLDocumentEvents3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLDocumentEvents3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLDocumentEvents3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLDocumentEvents3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLDocumentEvents3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLDocumentEvents3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLDocumentEvents3Vtbl;
    interface HTMLDocumentEvents3
    {
        CONST_VTBL struct HTMLDocumentEvents3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLDocumentEvents2;
    typedef struct HTMLDocumentEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLDocumentEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLDocumentEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLDocumentEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLDocumentEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLDocumentEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLDocumentEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLDocumentEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLDocumentEvents2Vtbl;
    interface HTMLDocumentEvents2
    {
        CONST_VTBL struct HTMLDocumentEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLDocumentEvents;
    typedef struct HTMLDocumentEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLDocumentEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLDocumentEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLDocumentEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLDocumentEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLDocumentEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLDocumentEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLDocumentEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLDocumentEventsVtbl;
    interface HTMLDocumentEvents
    {
        CONST_VTBL struct HTMLDocumentEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_ISVGSVGElement;
    typedef struct ISVGSVGElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGSVGElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGSVGElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGSVGElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGSVGElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGSVGElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_x )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_y )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_width )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_height )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                            HRESULT ( STDMETHODCALLTYPE *put_contentScriptType )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_contentScriptType )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_contentStyleType )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_contentStyleType )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt BSTR *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_viewport )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGRect *v);
                            HRESULT ( STDMETHODCALLTYPE *get_viewport )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGRect **p);
                            HRESULT ( STDMETHODCALLTYPE *put_pixelUnitToMillimeterX )(
            __RPC__in ISVGSVGElement * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_pixelUnitToMillimeterX )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_pixelUnitToMillimeterY )(
            __RPC__in ISVGSVGElement * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_pixelUnitToMillimeterY )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_screenPixelToMillimeterX )(
            __RPC__in ISVGSVGElement * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_screenPixelToMillimeterX )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_screenPixelToMillimeterY )(
            __RPC__in ISVGSVGElement * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_screenPixelToMillimeterY )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_useCurrentView )(
            __RPC__in ISVGSVGElement * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_useCurrentView )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__out VARIANT_BOOL *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_currentView )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGViewSpec *v);
                            HRESULT ( STDMETHODCALLTYPE *get_currentView )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGViewSpec **p);
                            HRESULT ( STDMETHODCALLTYPE *put_currentScale )(
            __RPC__in ISVGSVGElement * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_currentScale )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__out float *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_currentTranslate )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGPoint *v);
                            HRESULT ( STDMETHODCALLTYPE *get_currentTranslate )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGPoint **p);
                   HRESULT ( STDMETHODCALLTYPE *suspendRedraw )(
            __RPC__in ISVGSVGElement * This,
                       ULONG maxWaitMilliseconds,
                                __RPC__out ULONG *pResult);
                   HRESULT ( STDMETHODCALLTYPE *unsuspendRedraw )(
            __RPC__in ISVGSVGElement * This,
                       ULONG suspendHandeID);
                   HRESULT ( STDMETHODCALLTYPE *unsuspendRedrawAll )(
            __RPC__in ISVGSVGElement * This);
                   HRESULT ( STDMETHODCALLTYPE *forceRedraw )(
            __RPC__in ISVGSVGElement * This);
                   HRESULT ( STDMETHODCALLTYPE *pauseAnimations )(
            __RPC__in ISVGSVGElement * This);
                   HRESULT ( STDMETHODCALLTYPE *unpauseAnimations )(
            __RPC__in ISVGSVGElement * This);
                   HRESULT ( STDMETHODCALLTYPE *animationsPaused )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__out VARIANT_BOOL *pResult);
                   HRESULT ( STDMETHODCALLTYPE *getCurrentTime )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__out float *pResult);
                   HRESULT ( STDMETHODCALLTYPE *setCurrentTime )(
            __RPC__in ISVGSVGElement * This,
                       float seconds);
                   HRESULT ( STDMETHODCALLTYPE *getIntersectionList )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGRect *rect,
                       __RPC__in_opt ISVGElement *referenceElement,
                                __RPC__out VARIANT *pResult);
                   HRESULT ( STDMETHODCALLTYPE *getEnclosureList )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGRect *rect,
                       __RPC__in_opt ISVGElement *referenceElement,
                                __RPC__out VARIANT *pResult);
                   HRESULT ( STDMETHODCALLTYPE *checkIntersection )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGElement *element,
                       __RPC__in_opt ISVGRect *rect,
                                __RPC__out VARIANT_BOOL *pResult);
                   HRESULT ( STDMETHODCALLTYPE *checkEnclosure )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGElement *element,
                       __RPC__in_opt ISVGRect *rect,
                                __RPC__out VARIANT_BOOL *pResult);
                   HRESULT ( STDMETHODCALLTYPE *deselectAll )(
            __RPC__in ISVGSVGElement * This);
                   HRESULT ( STDMETHODCALLTYPE *createSVGNumber )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGNumber **pResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGLength )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGLength **pResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGAngle )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGAngle **pResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPoint )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGPoint **pResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGMatrix )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGMatrix **pResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGRect )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGRect **pResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGTransform )(
            __RPC__in ISVGSVGElement * This,
                                __RPC__deref_out_opt ISVGTransform **pResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGTransformFromMatrix )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in_opt ISVGMatrix *matrix,
                                __RPC__deref_out_opt ISVGTransform **pResult);
                   HRESULT ( STDMETHODCALLTYPE *getElementById )(
            __RPC__in ISVGSVGElement * This,
                       __RPC__in BSTR elementId,
                                __RPC__deref_out_opt IHTMLElement **pResult);
        END_INTERFACE
    } ISVGSVGElementVtbl;
    interface ISVGSVGElement
    {
        CONST_VTBL struct ISVGSVGElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> putref_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> putref_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> putref_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_contentScriptType(This,v) )
    ( (This)->lpVtbl -> get_contentScriptType(This,p) )
    ( (This)->lpVtbl -> put_contentStyleType(This,v) )
    ( (This)->lpVtbl -> get_contentStyleType(This,p) )
    ( (This)->lpVtbl -> putref_viewport(This,v) )
    ( (This)->lpVtbl -> get_viewport(This,p) )
    ( (This)->lpVtbl -> put_pixelUnitToMillimeterX(This,v) )
    ( (This)->lpVtbl -> get_pixelUnitToMillimeterX(This,p) )
    ( (This)->lpVtbl -> put_pixelUnitToMillimeterY(This,v) )
    ( (This)->lpVtbl -> get_pixelUnitToMillimeterY(This,p) )
    ( (This)->lpVtbl -> put_screenPixelToMillimeterX(This,v) )
    ( (This)->lpVtbl -> get_screenPixelToMillimeterX(This,p) )
    ( (This)->lpVtbl -> put_screenPixelToMillimeterY(This,v) )
    ( (This)->lpVtbl -> get_screenPixelToMillimeterY(This,p) )
    ( (This)->lpVtbl -> put_useCurrentView(This,v) )
    ( (This)->lpVtbl -> get_useCurrentView(This,p) )
    ( (This)->lpVtbl -> putref_currentView(This,v) )
    ( (This)->lpVtbl -> get_currentView(This,p) )
    ( (This)->lpVtbl -> put_currentScale(This,v) )
    ( (This)->lpVtbl -> get_currentScale(This,p) )
    ( (This)->lpVtbl -> putref_currentTranslate(This,v) )
    ( (This)->lpVtbl -> get_currentTranslate(This,p) )
    ( (This)->lpVtbl -> suspendRedraw(This,maxWaitMilliseconds,pResult) )
    ( (This)->lpVtbl -> unsuspendRedraw(This,suspendHandeID) )
    ( (This)->lpVtbl -> unsuspendRedrawAll(This) )
    ( (This)->lpVtbl -> forceRedraw(This) )
    ( (This)->lpVtbl -> pauseAnimations(This) )
    ( (This)->lpVtbl -> unpauseAnimations(This) )
    ( (This)->lpVtbl -> animationsPaused(This,pResult) )
    ( (This)->lpVtbl -> getCurrentTime(This,pResult) )
    ( (This)->lpVtbl -> setCurrentTime(This,seconds) )
    ( (This)->lpVtbl -> getIntersectionList(This,rect,referenceElement,pResult) )
    ( (This)->lpVtbl -> getEnclosureList(This,rect,referenceElement,pResult) )
    ( (This)->lpVtbl -> checkIntersection(This,element,rect,pResult) )
    ( (This)->lpVtbl -> checkEnclosure(This,element,rect,pResult) )
    ( (This)->lpVtbl -> deselectAll(This) )
    ( (This)->lpVtbl -> createSVGNumber(This,pResult) )
    ( (This)->lpVtbl -> createSVGLength(This,pResult) )
    ( (This)->lpVtbl -> createSVGAngle(This,pResult) )
    ( (This)->lpVtbl -> createSVGPoint(This,pResult) )
    ( (This)->lpVtbl -> createSVGMatrix(This,pResult) )
    ( (This)->lpVtbl -> createSVGRect(This,pResult) )
    ( (This)->lpVtbl -> createSVGTransform(This,pResult) )
    ( (This)->lpVtbl -> createSVGTransformFromMatrix(This,matrix,pResult) )
    ( (This)->lpVtbl -> getElementById(This,elementId,pResult) )
EXTERN_C const IID IID_IDOMNodeIterator;
    typedef struct IDOMNodeIteratorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMNodeIterator * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMNodeIterator * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMNodeIterator * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMNodeIterator * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMNodeIterator * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMNodeIterator * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMNodeIterator * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_root )(
            __RPC__in IDOMNodeIterator * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_whatToShow )(
            __RPC__in IDOMNodeIterator * This,
                                __RPC__out ULONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_filter )(
            __RPC__in IDOMNodeIterator * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_expandEntityReferences )(
            __RPC__in IDOMNodeIterator * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *nextNode )(
            __RPC__in IDOMNodeIterator * This,
                                __RPC__deref_out_opt IDispatch **ppRetNode);
                   HRESULT ( STDMETHODCALLTYPE *previousNode )(
            __RPC__in IDOMNodeIterator * This,
                                __RPC__deref_out_opt IDispatch **ppRetNode);
                   HRESULT ( STDMETHODCALLTYPE *detach )(
            __RPC__in IDOMNodeIterator * This);
        END_INTERFACE
    } IDOMNodeIteratorVtbl;
    interface IDOMNodeIterator
    {
        CONST_VTBL struct IDOMNodeIteratorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_root(This,p) )
    ( (This)->lpVtbl -> get_whatToShow(This,p) )
    ( (This)->lpVtbl -> get_filter(This,p) )
    ( (This)->lpVtbl -> get_expandEntityReferences(This,p) )
    ( (This)->lpVtbl -> nextNode(This,ppRetNode) )
    ( (This)->lpVtbl -> previousNode(This,ppRetNode) )
    ( (This)->lpVtbl -> detach(This) )
EXTERN_C const IID IID_IDOMTreeWalker;
    typedef struct IDOMTreeWalkerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMTreeWalker * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMTreeWalker * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMTreeWalker * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMTreeWalker * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMTreeWalker * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMTreeWalker * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMTreeWalker * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_root )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_whatToShow )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__out ULONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_filter )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_expandEntityReferences )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__out VARIANT_BOOL *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_currentNode )(
            __RPC__in IDOMTreeWalker * This,
                       __RPC__in_opt IDispatch *v);
                            HRESULT ( STDMETHODCALLTYPE *get_currentNode )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__deref_out_opt IDispatch **p);
                   HRESULT ( STDMETHODCALLTYPE *parentNode )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__deref_out_opt IDispatch **ppRetNode);
                   HRESULT ( STDMETHODCALLTYPE *firstChild )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__deref_out_opt IDispatch **ppRetNode);
                   HRESULT ( STDMETHODCALLTYPE *lastChild )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__deref_out_opt IDispatch **ppRetNode);
                   HRESULT ( STDMETHODCALLTYPE *previousSibling )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__deref_out_opt IDispatch **ppRetNode);
                   HRESULT ( STDMETHODCALLTYPE *nextSibling )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__deref_out_opt IDispatch **ppRetNode);
                   HRESULT ( STDMETHODCALLTYPE *previousNode )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__deref_out_opt IDispatch **ppRetNode);
                   HRESULT ( STDMETHODCALLTYPE *nextNode )(
            __RPC__in IDOMTreeWalker * This,
                                __RPC__deref_out_opt IDispatch **ppRetNode);
        END_INTERFACE
    } IDOMTreeWalkerVtbl;
    interface IDOMTreeWalker
    {
        CONST_VTBL struct IDOMTreeWalkerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_root(This,p) )
    ( (This)->lpVtbl -> get_whatToShow(This,p) )
    ( (This)->lpVtbl -> get_filter(This,p) )
    ( (This)->lpVtbl -> get_expandEntityReferences(This,p) )
    ( (This)->lpVtbl -> putref_currentNode(This,v) )
    ( (This)->lpVtbl -> get_currentNode(This,p) )
    ( (This)->lpVtbl -> parentNode(This,ppRetNode) )
    ( (This)->lpVtbl -> firstChild(This,ppRetNode) )
    ( (This)->lpVtbl -> lastChild(This,ppRetNode) )
    ( (This)->lpVtbl -> previousSibling(This,ppRetNode) )
    ( (This)->lpVtbl -> nextSibling(This,ppRetNode) )
    ( (This)->lpVtbl -> previousNode(This,ppRetNode) )
    ( (This)->lpVtbl -> nextNode(This,ppRetNode) )
EXTERN_C const IID IID_IDOMProcessingInstruction;
    typedef struct IDOMProcessingInstructionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMProcessingInstruction * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMProcessingInstruction * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMProcessingInstruction * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMProcessingInstruction * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMProcessingInstruction * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMProcessingInstruction * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMProcessingInstruction * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_target )(
            __RPC__in IDOMProcessingInstruction * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_data )(
            __RPC__in IDOMProcessingInstruction * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_data )(
            __RPC__in IDOMProcessingInstruction * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IDOMProcessingInstructionVtbl;
    interface IDOMProcessingInstruction
    {
        CONST_VTBL struct IDOMProcessingInstructionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_target(This,p) )
    ( (This)->lpVtbl -> put_data(This,v) )
    ( (This)->lpVtbl -> get_data(This,p) )
EXTERN_C const IID IID_IHTMLDocument3;
    typedef struct IHTMLDocument3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDocument3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDocument3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDocument3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDocument3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDocument3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDocument3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDocument3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *releaseCapture )(
            __RPC__in IHTMLDocument3 * This);
                   HRESULT ( STDMETHODCALLTYPE *recalc )(
            __RPC__in IHTMLDocument3 * This,
                                     VARIANT_BOOL fForce);
                   HRESULT ( STDMETHODCALLTYPE *createTextNode )(
            __RPC__in IHTMLDocument3 * This,
                       __RPC__in BSTR text,
                                __RPC__deref_out_opt IHTMLDOMNode **newTextNode);
                            HRESULT ( STDMETHODCALLTYPE *get_documentElement )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                                    HRESULT ( STDMETHODCALLTYPE *get_uniqueID )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *attachEvent )(
            __RPC__in IHTMLDocument3 * This,
                       __RPC__in BSTR event,
                       __RPC__in_opt IDispatch *pDisp,
                                __RPC__out VARIANT_BOOL *pfResult);
                   HRESULT ( STDMETHODCALLTYPE *detachEvent )(
            __RPC__in IHTMLDocument3 * This,
                       __RPC__in BSTR event,
                       __RPC__in_opt IDispatch *pDisp);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onrowsdelete )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onrowsdelete )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onrowsinserted )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onrowsinserted )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncellchange )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncellchange )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondatasetchanged )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondatasetchanged )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondataavailable )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondataavailable )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondatasetcomplete )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondatasetcomplete )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onpropertychange )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onpropertychange )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_dir )(
            __RPC__in IHTMLDocument3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_dir )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncontextmenu )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncontextmenu )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onstop )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onstop )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *createDocumentFragment )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__deref_out_opt IHTMLDocument2 **pNewDoc);
                                                HRESULT ( STDMETHODCALLTYPE *get_parentDocument )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__deref_out_opt IHTMLDocument2 **p);
                                                HRESULT ( STDMETHODCALLTYPE *put_enableDownload )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT_BOOL v);
                                                HRESULT ( STDMETHODCALLTYPE *get_enableDownload )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT_BOOL *p);
                                                HRESULT ( STDMETHODCALLTYPE *put_baseUrl )(
            __RPC__in IHTMLDocument3 * This,
                       __RPC__in BSTR v);
                                                HRESULT ( STDMETHODCALLTYPE *get_baseUrl )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_childNodes )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__deref_out_opt IDispatch **p);
                                                HRESULT ( STDMETHODCALLTYPE *put_inheritStyleSheets )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT_BOOL v);
                                                HRESULT ( STDMETHODCALLTYPE *get_inheritStyleSheets )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeeditfocus )(
            __RPC__in IHTMLDocument3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeeditfocus )(
            __RPC__in IHTMLDocument3 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *getElementsByName )(
            __RPC__in IHTMLDocument3 * This,
                       __RPC__in BSTR v,
                                __RPC__deref_out_opt IHTMLElementCollection **pelColl);
                   HRESULT ( STDMETHODCALLTYPE *getElementById )(
            __RPC__in IHTMLDocument3 * This,
                       __RPC__in BSTR v,
                                __RPC__deref_out_opt IHTMLElement **pel);
                   HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )(
            __RPC__in IHTMLDocument3 * This,
                       __RPC__in BSTR v,
                                __RPC__deref_out_opt IHTMLElementCollection **pelColl);
        END_INTERFACE
    } IHTMLDocument3Vtbl;
    interface IHTMLDocument3
    {
        CONST_VTBL struct IHTMLDocument3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> releaseCapture(This) )
    ( (This)->lpVtbl -> recalc(This,fForce) )
    ( (This)->lpVtbl -> createTextNode(This,text,newTextNode) )
    ( (This)->lpVtbl -> get_documentElement(This,p) )
    ( (This)->lpVtbl -> get_uniqueID(This,p) )
    ( (This)->lpVtbl -> attachEvent(This,event,pDisp,pfResult) )
    ( (This)->lpVtbl -> detachEvent(This,event,pDisp) )
    ( (This)->lpVtbl -> put_onrowsdelete(This,v) )
    ( (This)->lpVtbl -> get_onrowsdelete(This,p) )
    ( (This)->lpVtbl -> put_onrowsinserted(This,v) )
    ( (This)->lpVtbl -> get_onrowsinserted(This,p) )
    ( (This)->lpVtbl -> put_oncellchange(This,v) )
    ( (This)->lpVtbl -> get_oncellchange(This,p) )
    ( (This)->lpVtbl -> put_ondatasetchanged(This,v) )
    ( (This)->lpVtbl -> get_ondatasetchanged(This,p) )
    ( (This)->lpVtbl -> put_ondataavailable(This,v) )
    ( (This)->lpVtbl -> get_ondataavailable(This,p) )
    ( (This)->lpVtbl -> put_ondatasetcomplete(This,v) )
    ( (This)->lpVtbl -> get_ondatasetcomplete(This,p) )
    ( (This)->lpVtbl -> put_onpropertychange(This,v) )
    ( (This)->lpVtbl -> get_onpropertychange(This,p) )
    ( (This)->lpVtbl -> put_dir(This,v) )
    ( (This)->lpVtbl -> get_dir(This,p) )
    ( (This)->lpVtbl -> put_oncontextmenu(This,v) )
    ( (This)->lpVtbl -> get_oncontextmenu(This,p) )
    ( (This)->lpVtbl -> put_onstop(This,v) )
    ( (This)->lpVtbl -> get_onstop(This,p) )
    ( (This)->lpVtbl -> createDocumentFragment(This,pNewDoc) )
    ( (This)->lpVtbl -> get_parentDocument(This,p) )
    ( (This)->lpVtbl -> put_enableDownload(This,v) )
    ( (This)->lpVtbl -> get_enableDownload(This,p) )
    ( (This)->lpVtbl -> put_baseUrl(This,v) )
    ( (This)->lpVtbl -> get_baseUrl(This,p) )
    ( (This)->lpVtbl -> get_childNodes(This,p) )
    ( (This)->lpVtbl -> put_inheritStyleSheets(This,v) )
    ( (This)->lpVtbl -> get_inheritStyleSheets(This,p) )
    ( (This)->lpVtbl -> put_onbeforeeditfocus(This,v) )
    ( (This)->lpVtbl -> get_onbeforeeditfocus(This,p) )
    ( (This)->lpVtbl -> getElementsByName(This,v,pelColl) )
    ( (This)->lpVtbl -> getElementById(This,v,pel) )
    ( (This)->lpVtbl -> getElementsByTagName(This,v,pelColl) )
EXTERN_C const IID IID_IHTMLDocument4;
    typedef struct IHTMLDocument4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDocument4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDocument4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDocument4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDocument4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDocument4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDocument4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDocument4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *focus )(
            __RPC__in IHTMLDocument4 * This);
                   HRESULT ( STDMETHODCALLTYPE *hasFocus )(
            __RPC__in IHTMLDocument4 * This,
                                __RPC__out VARIANT_BOOL *pfFocus);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onselectionchange )(
            __RPC__in IHTMLDocument4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onselectionchange )(
            __RPC__in IHTMLDocument4 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_namespaces )(
            __RPC__in IHTMLDocument4 * This,
                                __RPC__deref_out_opt IDispatch **p);
                   HRESULT ( STDMETHODCALLTYPE *createDocumentFromUrl )(
            __RPC__in IHTMLDocument4 * This,
                       __RPC__in BSTR bstrUrl,
                       __RPC__in BSTR bstrOptions,
                                __RPC__deref_out_opt IHTMLDocument2 **newDoc);
                            HRESULT ( STDMETHODCALLTYPE *put_media )(
            __RPC__in IHTMLDocument4 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_media )(
            __RPC__in IHTMLDocument4 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *createEventObject )(
            __RPC__in IHTMLDocument4 * This,
                                 __RPC__in VARIANT *pvarEventObject,
                                __RPC__deref_out_opt IHTMLEventObj **ppEventObj);
                   HRESULT ( STDMETHODCALLTYPE *fireEvent )(
            __RPC__in IHTMLDocument4 * This,
                       __RPC__in BSTR bstrEventName,
                                 __RPC__in VARIANT *pvarEventObject,
                                __RPC__out VARIANT_BOOL *pfCancelled);
                   HRESULT ( STDMETHODCALLTYPE *createRenderStyle )(
            __RPC__in IHTMLDocument4 * This,
                       __RPC__in BSTR v,
                                __RPC__deref_out_opt IHTMLRenderStyle **ppIHTMLRenderStyle);
                                                   HRESULT ( STDMETHODCALLTYPE *put_oncontrolselect )(
            __RPC__in IHTMLDocument4 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_oncontrolselect )(
            __RPC__in IHTMLDocument4 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_URLUnencoded )(
            __RPC__in IHTMLDocument4 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLDocument4Vtbl;
    interface IHTMLDocument4
    {
        CONST_VTBL struct IHTMLDocument4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> focus(This) )
    ( (This)->lpVtbl -> hasFocus(This,pfFocus) )
    ( (This)->lpVtbl -> put_onselectionchange(This,v) )
    ( (This)->lpVtbl -> get_onselectionchange(This,p) )
    ( (This)->lpVtbl -> get_namespaces(This,p) )
    ( (This)->lpVtbl -> createDocumentFromUrl(This,bstrUrl,bstrOptions,newDoc) )
    ( (This)->lpVtbl -> put_media(This,v) )
    ( (This)->lpVtbl -> get_media(This,p) )
    ( (This)->lpVtbl -> createEventObject(This,pvarEventObject,ppEventObj) )
    ( (This)->lpVtbl -> fireEvent(This,bstrEventName,pvarEventObject,pfCancelled) )
    ( (This)->lpVtbl -> createRenderStyle(This,v,ppIHTMLRenderStyle) )
    ( (This)->lpVtbl -> put_oncontrolselect(This,v) )
    ( (This)->lpVtbl -> get_oncontrolselect(This,p) )
    ( (This)->lpVtbl -> get_URLUnencoded(This,p) )
EXTERN_C const IID IID_IHTMLDocument5;
    typedef struct IHTMLDocument5Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDocument5 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDocument5 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDocument5 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDocument5 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDocument5 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDocument5 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDocument5 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmousewheel )(
            __RPC__in IHTMLDocument5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmousewheel )(
            __RPC__in IHTMLDocument5 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_doctype )(
            __RPC__in IHTMLDocument5 * This,
                                __RPC__deref_out_opt IHTMLDOMNode **p);
                            HRESULT ( STDMETHODCALLTYPE *get_implementation )(
            __RPC__in IHTMLDocument5 * This,
                                __RPC__deref_out_opt IHTMLDOMImplementation **p);
                   HRESULT ( STDMETHODCALLTYPE *createAttribute )(
            __RPC__in IHTMLDocument5 * This,
                       __RPC__in BSTR bstrattrName,
                                __RPC__deref_out_opt IHTMLDOMAttribute **ppattribute);
                   HRESULT ( STDMETHODCALLTYPE *createComment )(
            __RPC__in IHTMLDocument5 * This,
                       __RPC__in BSTR bstrdata,
                                __RPC__deref_out_opt IHTMLDOMNode **ppRetNode);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocusin )(
            __RPC__in IHTMLDocument5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocusin )(
            __RPC__in IHTMLDocument5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocusout )(
            __RPC__in IHTMLDocument5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocusout )(
            __RPC__in IHTMLDocument5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onactivate )(
            __RPC__in IHTMLDocument5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onactivate )(
            __RPC__in IHTMLDocument5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ondeactivate )(
            __RPC__in IHTMLDocument5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ondeactivate )(
            __RPC__in IHTMLDocument5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeactivate )(
            __RPC__in IHTMLDocument5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeactivate )(
            __RPC__in IHTMLDocument5 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforedeactivate )(
            __RPC__in IHTMLDocument5 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforedeactivate )(
            __RPC__in IHTMLDocument5 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_compatMode )(
            __RPC__in IHTMLDocument5 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLDocument5Vtbl;
    interface IHTMLDocument5
    {
        CONST_VTBL struct IHTMLDocument5Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_onmousewheel(This,v) )
    ( (This)->lpVtbl -> get_onmousewheel(This,p) )
    ( (This)->lpVtbl -> get_doctype(This,p) )
    ( (This)->lpVtbl -> get_implementation(This,p) )
    ( (This)->lpVtbl -> createAttribute(This,bstrattrName,ppattribute) )
    ( (This)->lpVtbl -> createComment(This,bstrdata,ppRetNode) )
    ( (This)->lpVtbl -> put_onfocusin(This,v) )
    ( (This)->lpVtbl -> get_onfocusin(This,p) )
    ( (This)->lpVtbl -> put_onfocusout(This,v) )
    ( (This)->lpVtbl -> get_onfocusout(This,p) )
    ( (This)->lpVtbl -> put_onactivate(This,v) )
    ( (This)->lpVtbl -> get_onactivate(This,p) )
    ( (This)->lpVtbl -> put_ondeactivate(This,v) )
    ( (This)->lpVtbl -> get_ondeactivate(This,p) )
    ( (This)->lpVtbl -> put_onbeforeactivate(This,v) )
    ( (This)->lpVtbl -> get_onbeforeactivate(This,p) )
    ( (This)->lpVtbl -> put_onbeforedeactivate(This,v) )
    ( (This)->lpVtbl -> get_onbeforedeactivate(This,p) )
    ( (This)->lpVtbl -> get_compatMode(This,p) )
EXTERN_C const IID IID_IHTMLDocument6;
    typedef struct IHTMLDocument6Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDocument6 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDocument6 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDocument6 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDocument6 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDocument6 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDocument6 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDocument6 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_compatible )(
            __RPC__in IHTMLDocument6 * This,
                                __RPC__deref_out_opt IHTMLDocumentCompatibleInfoCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_documentMode )(
            __RPC__in IHTMLDocument6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onstorage )(
            __RPC__in IHTMLDocument6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onstorage )(
            __RPC__in IHTMLDocument6 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onstoragecommit )(
            __RPC__in IHTMLDocument6 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onstoragecommit )(
            __RPC__in IHTMLDocument6 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *getElementById )(
            __RPC__in IHTMLDocument6 * This,
                       __RPC__in BSTR bstrId,
                                __RPC__deref_out_opt IHTMLElement2 **ppRetElement);
                   HRESULT ( STDMETHODCALLTYPE *updateSettings )(
            __RPC__in IHTMLDocument6 * This);
        END_INTERFACE
    } IHTMLDocument6Vtbl;
    interface IHTMLDocument6
    {
        CONST_VTBL struct IHTMLDocument6Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_compatible(This,p) )
    ( (This)->lpVtbl -> get_documentMode(This,p) )
    ( (This)->lpVtbl -> put_onstorage(This,v) )
    ( (This)->lpVtbl -> get_onstorage(This,p) )
    ( (This)->lpVtbl -> put_onstoragecommit(This,v) )
    ( (This)->lpVtbl -> get_onstoragecommit(This,p) )
    ( (This)->lpVtbl -> getElementById(This,bstrId,ppRetElement) )
    ( (This)->lpVtbl -> updateSettings(This) )
EXTERN_C const IID IID_IHTMLDocument8;
    typedef struct IHTMLDocument8Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDocument8 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDocument8 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDocument8 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDocument8 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDocument8 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDocument8 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDocument8 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmscontentzoom )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmscontentzoom )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointerdown )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointerdown )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointermove )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointermove )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointerup )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointerup )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointerover )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointerover )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointerout )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointerout )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointercancel )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointercancel )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmspointerhover )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmspointerhover )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgesturestart )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgesturestart )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgesturechange )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgesturechange )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgestureend )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgestureend )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgesturehold )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgesturehold )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgesturetap )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgesturetap )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsgesturedoubletap )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsgesturedoubletap )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsinertiastart )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsinertiastart )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *elementsFromPoint )(
            __RPC__in IHTMLDocument8 * This,
                       float x,
                       float y,
                                __RPC__deref_out_opt IHTMLDOMChildrenCollection **elementsHit);
                   HRESULT ( STDMETHODCALLTYPE *elementsFromRect )(
            __RPC__in IHTMLDocument8 * This,
                       float left,
                       float top,
                       float width,
                       float height,
                                __RPC__deref_out_opt IHTMLDOMChildrenCollection **elementsHit);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmsmanipulationstatechanged )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmsmanipulationstatechanged )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_msCapsLockWarningOff )(
            __RPC__in IHTMLDocument8 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_msCapsLockWarningOff )(
            __RPC__in IHTMLDocument8 * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLDocument8Vtbl;
    interface IHTMLDocument8
    {
        CONST_VTBL struct IHTMLDocument8Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_onmscontentzoom(This,v) )
    ( (This)->lpVtbl -> get_onmscontentzoom(This,p) )
    ( (This)->lpVtbl -> put_onmspointerdown(This,v) )
    ( (This)->lpVtbl -> get_onmspointerdown(This,p) )
    ( (This)->lpVtbl -> put_onmspointermove(This,v) )
    ( (This)->lpVtbl -> get_onmspointermove(This,p) )
    ( (This)->lpVtbl -> put_onmspointerup(This,v) )
    ( (This)->lpVtbl -> get_onmspointerup(This,p) )
    ( (This)->lpVtbl -> put_onmspointerover(This,v) )
    ( (This)->lpVtbl -> get_onmspointerover(This,p) )
    ( (This)->lpVtbl -> put_onmspointerout(This,v) )
    ( (This)->lpVtbl -> get_onmspointerout(This,p) )
    ( (This)->lpVtbl -> put_onmspointercancel(This,v) )
    ( (This)->lpVtbl -> get_onmspointercancel(This,p) )
    ( (This)->lpVtbl -> put_onmspointerhover(This,v) )
    ( (This)->lpVtbl -> get_onmspointerhover(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturestart(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturestart(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturechange(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturechange(This,p) )
    ( (This)->lpVtbl -> put_onmsgestureend(This,v) )
    ( (This)->lpVtbl -> get_onmsgestureend(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturehold(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturehold(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturetap(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturetap(This,p) )
    ( (This)->lpVtbl -> put_onmsgesturedoubletap(This,v) )
    ( (This)->lpVtbl -> get_onmsgesturedoubletap(This,p) )
    ( (This)->lpVtbl -> put_onmsinertiastart(This,v) )
    ( (This)->lpVtbl -> get_onmsinertiastart(This,p) )
    ( (This)->lpVtbl -> elementsFromPoint(This,x,y,elementsHit) )
    ( (This)->lpVtbl -> elementsFromRect(This,left,top,width,height,elementsHit) )
    ( (This)->lpVtbl -> put_onmsmanipulationstatechanged(This,v) )
    ( (This)->lpVtbl -> get_onmsmanipulationstatechanged(This,p) )
    ( (This)->lpVtbl -> put_msCapsLockWarningOff(This,v) )
    ( (This)->lpVtbl -> get_msCapsLockWarningOff(This,p) )
EXTERN_C const IID IID_IDocumentEvent;
    typedef struct IDocumentEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDocumentEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDocumentEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDocumentEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDocumentEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDocumentEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDocumentEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDocumentEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *createEvent )(
            __RPC__in IDocumentEvent * This,
                       __RPC__in BSTR eventType,
                                __RPC__deref_out_opt IDOMEvent **ppEvent);
        END_INTERFACE
    } IDocumentEventVtbl;
    interface IDocumentEvent
    {
        CONST_VTBL struct IDocumentEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> createEvent(This,eventType,ppEvent) )
EXTERN_C const IID IID_IDocumentRange;
    typedef struct IDocumentRangeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDocumentRange * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDocumentRange * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDocumentRange * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDocumentRange * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDocumentRange * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDocumentRange * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDocumentRange * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *createRange )(
            __RPC__in IDocumentRange * This,
                                __RPC__deref_out_opt IHTMLDOMRange **ppIHTMLDOMRange);
        END_INTERFACE
    } IDocumentRangeVtbl;
    interface IDocumentRange
    {
        CONST_VTBL struct IDocumentRangeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> createRange(This,ppIHTMLDOMRange) )
EXTERN_C const IID IID_IDocumentSelector;
    typedef struct IDocumentSelectorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDocumentSelector * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDocumentSelector * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDocumentSelector * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDocumentSelector * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDocumentSelector * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDocumentSelector * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDocumentSelector * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *querySelector )(
            __RPC__in IDocumentSelector * This,
                       __RPC__in BSTR v,
                                __RPC__deref_out_opt IHTMLElement **pel);
                   HRESULT ( STDMETHODCALLTYPE *querySelectorAll )(
            __RPC__in IDocumentSelector * This,
                       __RPC__in BSTR v,
                                __RPC__deref_out_opt IHTMLDOMChildrenCollection **pel);
        END_INTERFACE
    } IDocumentSelectorVtbl;
    interface IDocumentSelector
    {
        CONST_VTBL struct IDocumentSelectorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> querySelector(This,v,pel) )
    ( (This)->lpVtbl -> querySelectorAll(This,v,pel) )
EXTERN_C const IID IID_IDocumentTraversal;
    typedef struct IDocumentTraversalVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDocumentTraversal * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDocumentTraversal * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDocumentTraversal * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDocumentTraversal * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDocumentTraversal * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDocumentTraversal * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDocumentTraversal * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *createNodeIterator )(
            __RPC__in IDocumentTraversal * This,
                       __RPC__in_opt IDispatch *pRootNode,
                       long ulWhatToShow,
                       __RPC__in VARIANT *pFilter,
                       VARIANT_BOOL fEntityReferenceExpansion,
                                __RPC__deref_out_opt IDOMNodeIterator **ppNodeIterator);
                   HRESULT ( STDMETHODCALLTYPE *createTreeWalker )(
            __RPC__in IDocumentTraversal * This,
                       __RPC__in_opt IDispatch *pRootNode,
                       long ulWhatToShow,
                       __RPC__in VARIANT *pFilter,
                       VARIANT_BOOL fEntityReferenceExpansion,
                                __RPC__deref_out_opt IDOMTreeWalker **ppTreeWalker);
        END_INTERFACE
    } IDocumentTraversalVtbl;
    interface IDocumentTraversal
    {
        CONST_VTBL struct IDocumentTraversalVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> createNodeIterator(This,pRootNode,ulWhatToShow,pFilter,fEntityReferenceExpansion,ppNodeIterator) )
    ( (This)->lpVtbl -> createTreeWalker(This,pRootNode,ulWhatToShow,pFilter,fEntityReferenceExpansion,ppTreeWalker) )
EXTERN_C const IID DIID_DispHTMLDocument;
    typedef struct DispHTMLDocumentVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDocument * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDocument * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDocument * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDocument * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDocument * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDocument * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDocument * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDocumentVtbl;
    interface DispHTMLDocument
    {
        CONST_VTBL struct DispHTMLDocumentVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDocument;
class DECLSPEC_UUID("25336920-03F9-11cf-8FD0-00AA00686F13")
HTMLDocument;
EXTERN_C const IID DIID_DWebBridgeEvents;
    typedef struct DWebBridgeEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DWebBridgeEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DWebBridgeEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DWebBridgeEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DWebBridgeEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DWebBridgeEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DWebBridgeEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DWebBridgeEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DWebBridgeEventsVtbl;
    interface DWebBridgeEvents
    {
        CONST_VTBL struct DWebBridgeEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IWebBridge;
    typedef struct IWebBridgeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IWebBridge * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IWebBridge * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IWebBridge * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IWebBridge * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IWebBridge * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IWebBridge * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IWebBridge * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_URL )(
            __RPC__in IWebBridge * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_URL )(
            __RPC__in IWebBridge * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_Scrollbar )(
            __RPC__in IWebBridge * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_Scrollbar )(
            __RPC__in IWebBridge * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_embed )(
            __RPC__in IWebBridge * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_embed )(
            __RPC__in IWebBridge * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_event )(
            __RPC__in IWebBridge * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IWebBridge * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *AboutBox )(
            __RPC__in IWebBridge * This);
        END_INTERFACE
    } IWebBridgeVtbl;
    interface IWebBridge
    {
        CONST_VTBL struct IWebBridgeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_URL(This,v) )
    ( (This)->lpVtbl -> get_URL(This,p) )
    ( (This)->lpVtbl -> put_Scrollbar(This,v) )
    ( (This)->lpVtbl -> get_Scrollbar(This,p) )
    ( (This)->lpVtbl -> put_embed(This,v) )
    ( (This)->lpVtbl -> get_embed(This,p) )
    ( (This)->lpVtbl -> get_event(This,p) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> AboutBox(This) )
EXTERN_C const IID IID_IWBScriptControl;
    typedef struct IWBScriptControlVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IWBScriptControl * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IWBScriptControl * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IWBScriptControl * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IWBScriptControl * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IWBScriptControl * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IWBScriptControl * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IWBScriptControl * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *raiseEvent )(
            __RPC__in IWBScriptControl * This,
                       __RPC__in BSTR name,
                       VARIANT eventData);
                   HRESULT ( STDMETHODCALLTYPE *bubbleEvent )(
            __RPC__in IWBScriptControl * This);
                   HRESULT ( STDMETHODCALLTYPE *setContextMenu )(
            __RPC__in IWBScriptControl * This,
                       VARIANT menuItemPairs);
                            HRESULT ( STDMETHODCALLTYPE *put_selectableContent )(
            __RPC__in IWBScriptControl * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectableContent )(
            __RPC__in IWBScriptControl * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_frozen )(
            __RPC__in IWBScriptControl * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_scrollbar )(
            __RPC__in IWBScriptControl * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_scrollbar )(
            __RPC__in IWBScriptControl * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_version )(
            __RPC__in IWBScriptControl * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_visibility )(
            __RPC__in IWBScriptControl * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_onvisibilitychange )(
            __RPC__in IWBScriptControl * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_onvisibilitychange )(
            __RPC__in IWBScriptControl * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IWBScriptControlVtbl;
    interface IWBScriptControl
    {
        CONST_VTBL struct IWBScriptControlVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> raiseEvent(This,name,eventData) )
    ( (This)->lpVtbl -> bubbleEvent(This) )
    ( (This)->lpVtbl -> setContextMenu(This,menuItemPairs) )
    ( (This)->lpVtbl -> put_selectableContent(This,v) )
    ( (This)->lpVtbl -> get_selectableContent(This,p) )
    ( (This)->lpVtbl -> get_frozen(This,p) )
    ( (This)->lpVtbl -> put_scrollbar(This,v) )
    ( (This)->lpVtbl -> get_scrollbar(This,p) )
    ( (This)->lpVtbl -> get_version(This,p) )
    ( (This)->lpVtbl -> get_visibility(This,p) )
    ( (This)->lpVtbl -> put_onvisibilitychange(This,v) )
    ( (This)->lpVtbl -> get_onvisibilitychange(This,p) )
EXTERN_C const CLSID CLSID_Scriptlet;
class DECLSPEC_UUID("AE24FDAE-03C6-11D1-8B76-0080C744F389")
Scriptlet;
EXTERN_C const IID IID_IHTMLEmbedElement;
    typedef struct IHTMLEmbedElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEmbedElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEmbedElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEmbedElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLEmbedElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLEmbedElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLEmbedElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLEmbedElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_hidden )(
            __RPC__in IHTMLEmbedElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_hidden )(
            __RPC__in IHTMLEmbedElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_palette )(
            __RPC__in IHTMLEmbedElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pluginspage )(
            __RPC__in IHTMLEmbedElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLEmbedElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLEmbedElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_units )(
            __RPC__in IHTMLEmbedElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_units )(
            __RPC__in IHTMLEmbedElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLEmbedElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLEmbedElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLEmbedElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLEmbedElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLEmbedElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLEmbedElement * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLEmbedElementVtbl;
    interface IHTMLEmbedElement
    {
        CONST_VTBL struct IHTMLEmbedElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_hidden(This,v) )
    ( (This)->lpVtbl -> get_hidden(This,p) )
    ( (This)->lpVtbl -> get_palette(This,p) )
    ( (This)->lpVtbl -> get_pluginspage(This,p) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> put_units(This,v) )
    ( (This)->lpVtbl -> get_units(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
EXTERN_C const IID IID_IHTMLEmbedElement2;
    typedef struct IHTMLEmbedElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEmbedElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEmbedElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEmbedElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLEmbedElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLEmbedElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLEmbedElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLEmbedElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLEmbedElement2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLEmbedElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pluginspage )(
            __RPC__in IHTMLEmbedElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLEmbedElement2Vtbl;
    interface IHTMLEmbedElement2
    {
        CONST_VTBL struct IHTMLEmbedElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> get_pluginspage(This,p) )
EXTERN_C const IID DIID_DispHTMLEmbed;
    typedef struct DispHTMLEmbedVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLEmbed * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLEmbed * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLEmbed * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLEmbed * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLEmbed * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLEmbed * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLEmbed * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLEmbedVtbl;
    interface DispHTMLEmbed
    {
        CONST_VTBL struct DispHTMLEmbedVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLEmbed;
class DECLSPEC_UUID("3050f25d-98b5-11cf-bb82-00aa00bdce0b")
HTMLEmbed;
EXTERN_C const IID DIID_HTMLMapEvents2;
    typedef struct HTMLMapEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLMapEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLMapEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLMapEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLMapEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLMapEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLMapEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLMapEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLMapEvents2Vtbl;
    interface HTMLMapEvents2
    {
        CONST_VTBL struct HTMLMapEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLMapEvents;
    typedef struct HTMLMapEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLMapEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLMapEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLMapEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLMapEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLMapEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLMapEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLMapEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLMapEventsVtbl;
    interface HTMLMapEvents
    {
        CONST_VTBL struct HTMLMapEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLAreasCollection;
    typedef struct IHTMLAreasCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAreasCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAreasCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAreasCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAreasCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAreasCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAreasCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAreasCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_length )(
            __RPC__in IHTMLAreasCollection * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLAreasCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLAreasCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLAreasCollection * This,
                                 VARIANT name,
                                 VARIANT index,
                                __RPC__deref_out_opt IDispatch **pdisp);
                   HRESULT ( STDMETHODCALLTYPE *tags )(
            __RPC__in IHTMLAreasCollection * This,
                       VARIANT tagName,
                                __RPC__deref_out_opt IDispatch **pdisp);
                   HRESULT ( STDMETHODCALLTYPE *add )(
            __RPC__in IHTMLAreasCollection * This,
                       __RPC__in_opt IHTMLElement *element,
                                 VARIANT before);
                   HRESULT ( STDMETHODCALLTYPE *remove )(
            __RPC__in IHTMLAreasCollection * This,
                                     long index);
        END_INTERFACE
    } IHTMLAreasCollectionVtbl;
    interface IHTMLAreasCollection
    {
        CONST_VTBL struct IHTMLAreasCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_length(This,v) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,name,index,pdisp) )
    ( (This)->lpVtbl -> tags(This,tagName,pdisp) )
    ( (This)->lpVtbl -> add(This,element,before) )
    ( (This)->lpVtbl -> remove(This,index) )
EXTERN_C const IID IID_IHTMLAreasCollection2;
    typedef struct IHTMLAreasCollection2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAreasCollection2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAreasCollection2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAreasCollection2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAreasCollection2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAreasCollection2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAreasCollection2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAreasCollection2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *urns )(
            __RPC__in IHTMLAreasCollection2 * This,
                       VARIANT urn,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLAreasCollection2Vtbl;
    interface IHTMLAreasCollection2
    {
        CONST_VTBL struct IHTMLAreasCollection2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> urns(This,urn,pdisp) )
EXTERN_C const IID IID_IHTMLAreasCollection3;
    typedef struct IHTMLAreasCollection3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAreasCollection3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAreasCollection3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAreasCollection3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAreasCollection3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAreasCollection3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAreasCollection3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAreasCollection3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *namedItem )(
            __RPC__in IHTMLAreasCollection3 * This,
                       __RPC__in BSTR name,
                                __RPC__deref_out_opt IDispatch **pdisp);
        END_INTERFACE
    } IHTMLAreasCollection3Vtbl;
    interface IHTMLAreasCollection3
    {
        CONST_VTBL struct IHTMLAreasCollection3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> namedItem(This,name,pdisp) )
EXTERN_C const IID IID_IHTMLAreasCollection4;
    typedef struct IHTMLAreasCollection4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAreasCollection4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAreasCollection4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAreasCollection4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAreasCollection4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAreasCollection4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAreasCollection4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAreasCollection4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLAreasCollection4 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLAreasCollection4 * This,
                       long index,
                                __RPC__deref_out_opt IHTMLElement2 **pNode);
                   HRESULT ( STDMETHODCALLTYPE *namedItem )(
            __RPC__in IHTMLAreasCollection4 * This,
                       __RPC__in BSTR name,
                                __RPC__deref_out_opt IHTMLElement2 **pNode);
        END_INTERFACE
    } IHTMLAreasCollection4Vtbl;
    interface IHTMLAreasCollection4
    {
        CONST_VTBL struct IHTMLAreasCollection4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> item(This,index,pNode) )
    ( (This)->lpVtbl -> namedItem(This,name,pNode) )
EXTERN_C const IID IID_IHTMLMapElement;
    typedef struct IHTMLMapElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMapElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMapElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMapElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMapElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMapElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMapElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMapElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_areas )(
            __RPC__in IHTMLMapElement * This,
                                __RPC__deref_out_opt IHTMLAreasCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLMapElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLMapElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLMapElementVtbl;
    interface IHTMLMapElement
    {
        CONST_VTBL struct IHTMLMapElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_areas(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
EXTERN_C const IID DIID_DispHTMLAreasCollection;
    typedef struct DispHTMLAreasCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLAreasCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLAreasCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLAreasCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLAreasCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLAreasCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLAreasCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLAreasCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLAreasCollectionVtbl;
    interface DispHTMLAreasCollection
    {
        CONST_VTBL struct DispHTMLAreasCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLAreasCollection;
class DECLSPEC_UUID("3050f4ca-98b5-11cf-bb82-00aa00bdce0b")
HTMLAreasCollection;
EXTERN_C const IID DIID_DispHTMLMapElement;
    typedef struct DispHTMLMapElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLMapElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLMapElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLMapElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLMapElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLMapElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLMapElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLMapElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLMapElementVtbl;
    interface DispHTMLMapElement
    {
        CONST_VTBL struct DispHTMLMapElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLMapElement;
class DECLSPEC_UUID("3050f271-98b5-11cf-bb82-00aa00bdce0b")
HTMLMapElement;
EXTERN_C const IID DIID_HTMLAreaEvents2;
    typedef struct HTMLAreaEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLAreaEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLAreaEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLAreaEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLAreaEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLAreaEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLAreaEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLAreaEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLAreaEvents2Vtbl;
    interface HTMLAreaEvents2
    {
        CONST_VTBL struct HTMLAreaEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLAreaEvents;
    typedef struct HTMLAreaEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLAreaEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLAreaEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLAreaEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLAreaEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLAreaEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLAreaEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLAreaEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLAreaEventsVtbl;
    interface HTMLAreaEvents
    {
        CONST_VTBL struct HTMLAreaEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLAreaElement;
    typedef struct IHTMLAreaElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAreaElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAreaElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAreaElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAreaElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAreaElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_shape )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_shape )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_coords )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_coords )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_href )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_target )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_target )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_alt )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_alt )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_noHref )(
            __RPC__in IHTMLAreaElement * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_noHref )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_host )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_host )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_hostname )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_hostname )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_pathname )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_pathname )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_port )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_port )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_protocol )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_protocol )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_search )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_search )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_hash )(
            __RPC__in IHTMLAreaElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_hash )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onblur )(
            __RPC__in IHTMLAreaElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onblur )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onfocus )(
            __RPC__in IHTMLAreaElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onfocus )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_tabIndex )(
            __RPC__in IHTMLAreaElement * This,
                       short v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_tabIndex )(
            __RPC__in IHTMLAreaElement * This,
                                __RPC__out short *p);
                   HRESULT ( STDMETHODCALLTYPE *focus )(
            __RPC__in IHTMLAreaElement * This);
                   HRESULT ( STDMETHODCALLTYPE *blur )(
            __RPC__in IHTMLAreaElement * This);
        END_INTERFACE
    } IHTMLAreaElementVtbl;
    interface IHTMLAreaElement
    {
        CONST_VTBL struct IHTMLAreaElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_shape(This,v) )
    ( (This)->lpVtbl -> get_shape(This,p) )
    ( (This)->lpVtbl -> put_coords(This,v) )
    ( (This)->lpVtbl -> get_coords(This,p) )
    ( (This)->lpVtbl -> put_href(This,v) )
    ( (This)->lpVtbl -> get_href(This,p) )
    ( (This)->lpVtbl -> put_target(This,v) )
    ( (This)->lpVtbl -> get_target(This,p) )
    ( (This)->lpVtbl -> put_alt(This,v) )
    ( (This)->lpVtbl -> get_alt(This,p) )
    ( (This)->lpVtbl -> put_noHref(This,v) )
    ( (This)->lpVtbl -> get_noHref(This,p) )
    ( (This)->lpVtbl -> put_host(This,v) )
    ( (This)->lpVtbl -> get_host(This,p) )
    ( (This)->lpVtbl -> put_hostname(This,v) )
    ( (This)->lpVtbl -> get_hostname(This,p) )
    ( (This)->lpVtbl -> put_pathname(This,v) )
    ( (This)->lpVtbl -> get_pathname(This,p) )
    ( (This)->lpVtbl -> put_port(This,v) )
    ( (This)->lpVtbl -> get_port(This,p) )
    ( (This)->lpVtbl -> put_protocol(This,v) )
    ( (This)->lpVtbl -> get_protocol(This,p) )
    ( (This)->lpVtbl -> put_search(This,v) )
    ( (This)->lpVtbl -> get_search(This,p) )
    ( (This)->lpVtbl -> put_hash(This,v) )
    ( (This)->lpVtbl -> get_hash(This,p) )
    ( (This)->lpVtbl -> put_onblur(This,v) )
    ( (This)->lpVtbl -> get_onblur(This,p) )
    ( (This)->lpVtbl -> put_onfocus(This,v) )
    ( (This)->lpVtbl -> get_onfocus(This,p) )
    ( (This)->lpVtbl -> put_tabIndex(This,v) )
    ( (This)->lpVtbl -> get_tabIndex(This,p) )
    ( (This)->lpVtbl -> focus(This) )
    ( (This)->lpVtbl -> blur(This) )
EXTERN_C const IID IID_IHTMLAreaElement2;
    typedef struct IHTMLAreaElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAreaElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAreaElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAreaElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAreaElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAreaElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAreaElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAreaElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_shape )(
            __RPC__in IHTMLAreaElement2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_shape )(
            __RPC__in IHTMLAreaElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_coords )(
            __RPC__in IHTMLAreaElement2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_coords )(
            __RPC__in IHTMLAreaElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_href )(
            __RPC__in IHTMLAreaElement2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in IHTMLAreaElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLAreaElement2Vtbl;
    interface IHTMLAreaElement2
    {
        CONST_VTBL struct IHTMLAreaElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_shape(This,v) )
    ( (This)->lpVtbl -> get_shape(This,p) )
    ( (This)->lpVtbl -> put_coords(This,v) )
    ( (This)->lpVtbl -> get_coords(This,p) )
    ( (This)->lpVtbl -> put_href(This,v) )
    ( (This)->lpVtbl -> get_href(This,p) )
EXTERN_C const IID DIID_DispHTMLAreaElement;
    typedef struct DispHTMLAreaElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLAreaElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLAreaElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLAreaElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLAreaElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLAreaElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLAreaElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLAreaElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLAreaElementVtbl;
    interface DispHTMLAreaElement
    {
        CONST_VTBL struct DispHTMLAreaElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLAreaElement;
class DECLSPEC_UUID("3050f283-98b5-11cf-bb82-00aa00bdce0b")
HTMLAreaElement;
EXTERN_C const IID IID_IHTMLTableCaption;
    typedef struct IHTMLTableCaptionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableCaption * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableCaption * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableCaption * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableCaption * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableCaption * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableCaption * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableCaption * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLTableCaption * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLTableCaption * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_vAlign )(
            __RPC__in IHTMLTableCaption * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_vAlign )(
            __RPC__in IHTMLTableCaption * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLTableCaptionVtbl;
    interface IHTMLTableCaption
    {
        CONST_VTBL struct IHTMLTableCaptionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_vAlign(This,v) )
    ( (This)->lpVtbl -> get_vAlign(This,p) )
EXTERN_C const IID DIID_DispHTMLTableCaption;
    typedef struct DispHTMLTableCaptionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLTableCaption * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLTableCaption * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLTableCaption * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLTableCaption * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLTableCaption * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLTableCaption * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLTableCaption * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLTableCaptionVtbl;
    interface DispHTMLTableCaption
    {
        CONST_VTBL struct DispHTMLTableCaptionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLTableCaption;
class DECLSPEC_UUID("3050f2ec-98b5-11cf-bb82-00aa00bdce0b")
HTMLTableCaption;
EXTERN_C const IID IID_IHTMLCommentElement;
    typedef struct IHTMLCommentElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCommentElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCommentElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCommentElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCommentElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCommentElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCommentElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCommentElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_text )(
            __RPC__in IHTMLCommentElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_text )(
            __RPC__in IHTMLCommentElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_atomic )(
            __RPC__in IHTMLCommentElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_atomic )(
            __RPC__in IHTMLCommentElement * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLCommentElementVtbl;
    interface IHTMLCommentElement
    {
        CONST_VTBL struct IHTMLCommentElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_text(This,v) )
    ( (This)->lpVtbl -> get_text(This,p) )
    ( (This)->lpVtbl -> put_atomic(This,v) )
    ( (This)->lpVtbl -> get_atomic(This,p) )
EXTERN_C const IID IID_IHTMLCommentElement2;
    typedef struct IHTMLCommentElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCommentElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCommentElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCommentElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCommentElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCommentElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCommentElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCommentElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_data )(
            __RPC__in IHTMLCommentElement2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_data )(
            __RPC__in IHTMLCommentElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLCommentElement2 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *substringData )(
            __RPC__in IHTMLCommentElement2 * This,
                       long offset,
                       long Count,
                                __RPC__deref_out_opt BSTR *pbstrsubString);
                   HRESULT ( STDMETHODCALLTYPE *appendData )(
            __RPC__in IHTMLCommentElement2 * This,
                       __RPC__in BSTR bstrstring);
                   HRESULT ( STDMETHODCALLTYPE *insertData )(
            __RPC__in IHTMLCommentElement2 * This,
                       long offset,
                       __RPC__in BSTR bstrstring);
                   HRESULT ( STDMETHODCALLTYPE *deleteData )(
            __RPC__in IHTMLCommentElement2 * This,
                       long offset,
                       long Count);
                   HRESULT ( STDMETHODCALLTYPE *replaceData )(
            __RPC__in IHTMLCommentElement2 * This,
                       long offset,
                       long Count,
                       __RPC__in BSTR bstrstring);
        END_INTERFACE
    } IHTMLCommentElement2Vtbl;
    interface IHTMLCommentElement2
    {
        CONST_VTBL struct IHTMLCommentElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_data(This,v) )
    ( (This)->lpVtbl -> get_data(This,p) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> substringData(This,offset,Count,pbstrsubString) )
    ( (This)->lpVtbl -> appendData(This,bstrstring) )
    ( (This)->lpVtbl -> insertData(This,offset,bstrstring) )
    ( (This)->lpVtbl -> deleteData(This,offset,Count) )
    ( (This)->lpVtbl -> replaceData(This,offset,Count,bstrstring) )
EXTERN_C const IID IID_IHTMLCommentElement3;
    typedef struct IHTMLCommentElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCommentElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCommentElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCommentElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCommentElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCommentElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCommentElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCommentElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *substringData )(
            __RPC__in IHTMLCommentElement3 * This,
                       long offset,
                       long Count,
                                __RPC__deref_out_opt BSTR *pbstrsubString);
                   HRESULT ( STDMETHODCALLTYPE *insertData )(
            __RPC__in IHTMLCommentElement3 * This,
                       long offset,
                       __RPC__in BSTR bstrstring);
                   HRESULT ( STDMETHODCALLTYPE *deleteData )(
            __RPC__in IHTMLCommentElement3 * This,
                       long offset,
                       long Count);
                   HRESULT ( STDMETHODCALLTYPE *replaceData )(
            __RPC__in IHTMLCommentElement3 * This,
                       long offset,
                       long Count,
                       __RPC__in BSTR bstrstring);
        END_INTERFACE
    } IHTMLCommentElement3Vtbl;
    interface IHTMLCommentElement3
    {
        CONST_VTBL struct IHTMLCommentElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> substringData(This,offset,Count,pbstrsubString) )
    ( (This)->lpVtbl -> insertData(This,offset,bstrstring) )
    ( (This)->lpVtbl -> deleteData(This,offset,Count) )
    ( (This)->lpVtbl -> replaceData(This,offset,Count,bstrstring) )
EXTERN_C const IID DIID_DispHTMLCommentElement;
    typedef struct DispHTMLCommentElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLCommentElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLCommentElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLCommentElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLCommentElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLCommentElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLCommentElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLCommentElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLCommentElementVtbl;
    interface DispHTMLCommentElement
    {
        CONST_VTBL struct DispHTMLCommentElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLCommentElement;
class DECLSPEC_UUID("3050f317-98b5-11cf-bb82-00aa00bdce0b")
HTMLCommentElement;
EXTERN_C const IID IID_IHTMLPhraseElement;
    typedef struct IHTMLPhraseElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPhraseElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPhraseElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPhraseElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLPhraseElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLPhraseElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLPhraseElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLPhraseElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } IHTMLPhraseElementVtbl;
    interface IHTMLPhraseElement
    {
        CONST_VTBL struct IHTMLPhraseElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLPhraseElement2;
    typedef struct IHTMLPhraseElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPhraseElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPhraseElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPhraseElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLPhraseElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLPhraseElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLPhraseElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLPhraseElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_cite )(
            __RPC__in IHTMLPhraseElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_cite )(
            __RPC__in IHTMLPhraseElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_dateTime )(
            __RPC__in IHTMLPhraseElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_dateTime )(
            __RPC__in IHTMLPhraseElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLPhraseElement2Vtbl;
    interface IHTMLPhraseElement2
    {
        CONST_VTBL struct IHTMLPhraseElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_cite(This,v) )
    ( (This)->lpVtbl -> get_cite(This,p) )
    ( (This)->lpVtbl -> put_dateTime(This,v) )
    ( (This)->lpVtbl -> get_dateTime(This,p) )
EXTERN_C const IID IID_IHTMLPhraseElement3;
    typedef struct IHTMLPhraseElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPhraseElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPhraseElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPhraseElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLPhraseElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLPhraseElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLPhraseElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLPhraseElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_cite )(
            __RPC__in IHTMLPhraseElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_cite )(
            __RPC__in IHTMLPhraseElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLPhraseElement3Vtbl;
    interface IHTMLPhraseElement3
    {
        CONST_VTBL struct IHTMLPhraseElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_cite(This,v) )
    ( (This)->lpVtbl -> get_cite(This,p) )
EXTERN_C const IID IID_IHTMLSpanElement;
    typedef struct IHTMLSpanElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSpanElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSpanElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSpanElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSpanElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSpanElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSpanElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSpanElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } IHTMLSpanElementVtbl;
    interface IHTMLSpanElement
    {
        CONST_VTBL struct IHTMLSpanElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispHTMLPhraseElement;
    typedef struct DispHTMLPhraseElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLPhraseElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLPhraseElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLPhraseElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLPhraseElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLPhraseElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLPhraseElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLPhraseElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLPhraseElementVtbl;
    interface DispHTMLPhraseElement
    {
        CONST_VTBL struct DispHTMLPhraseElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLPhraseElement;
class DECLSPEC_UUID("3050f26e-98b5-11cf-bb82-00aa00bdce0b")
HTMLPhraseElement;
EXTERN_C const IID DIID_DispHTMLSpanElement;
    typedef struct DispHTMLSpanElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLSpanElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLSpanElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLSpanElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLSpanElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLSpanElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLSpanElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLSpanElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLSpanElementVtbl;
    interface DispHTMLSpanElement
    {
        CONST_VTBL struct DispHTMLSpanElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLSpanElement;
class DECLSPEC_UUID("3050f3f5-98b4-11cf-bb82-00aa00bdce0b")
HTMLSpanElement;
EXTERN_C const IID DIID_HTMLTableEvents2;
    typedef struct HTMLTableEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLTableEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLTableEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLTableEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLTableEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLTableEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLTableEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLTableEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLTableEvents2Vtbl;
    interface HTMLTableEvents2
    {
        CONST_VTBL struct HTMLTableEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLTableEvents;
    typedef struct HTMLTableEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLTableEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLTableEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLTableEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLTableEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLTableEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLTableEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLTableEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLTableEventsVtbl;
    interface HTMLTableEvents
    {
        CONST_VTBL struct HTMLTableEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLTableSection;
    typedef struct IHTMLTableSectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableSection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableSection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableSection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableSection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableSection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableSection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableSection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLTableSection * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLTableSection * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_vAlign )(
            __RPC__in IHTMLTableSection * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_vAlign )(
            __RPC__in IHTMLTableSection * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_bgColor )(
            __RPC__in IHTMLTableSection * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_bgColor )(
            __RPC__in IHTMLTableSection * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_rows )(
            __RPC__in IHTMLTableSection * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                   HRESULT ( STDMETHODCALLTYPE *insertRow )(
            __RPC__in IHTMLTableSection * This,
                                     long index,
                                __RPC__deref_out_opt IDispatch **row);
                   HRESULT ( STDMETHODCALLTYPE *deleteRow )(
            __RPC__in IHTMLTableSection * This,
                                     long index);
        END_INTERFACE
    } IHTMLTableSectionVtbl;
    interface IHTMLTableSection
    {
        CONST_VTBL struct IHTMLTableSectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_vAlign(This,v) )
    ( (This)->lpVtbl -> get_vAlign(This,p) )
    ( (This)->lpVtbl -> put_bgColor(This,v) )
    ( (This)->lpVtbl -> get_bgColor(This,p) )
    ( (This)->lpVtbl -> get_rows(This,p) )
    ( (This)->lpVtbl -> insertRow(This,index,row) )
    ( (This)->lpVtbl -> deleteRow(This,index) )
EXTERN_C const IID IID_IHTMLTable;
    typedef struct IHTMLTableVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTable * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTable * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTable * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTable * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTable * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTable * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTable * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_cols )(
            __RPC__in IHTMLTable * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_cols )(
            __RPC__in IHTMLTable * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_border )(
            __RPC__in IHTMLTable * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_border )(
            __RPC__in IHTMLTable * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frame )(
            __RPC__in IHTMLTable * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_frame )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_rules )(
            __RPC__in IHTMLTable * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_rules )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_cellSpacing )(
            __RPC__in IHTMLTable * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_cellSpacing )(
            __RPC__in IHTMLTable * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_cellPadding )(
            __RPC__in IHTMLTable * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_cellPadding )(
            __RPC__in IHTMLTable * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_background )(
            __RPC__in IHTMLTable * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_background )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_bgColor )(
            __RPC__in IHTMLTable * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_bgColor )(
            __RPC__in IHTMLTable * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_borderColor )(
            __RPC__in IHTMLTable * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderColor )(
            __RPC__in IHTMLTable * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_borderColorLight )(
            __RPC__in IHTMLTable * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderColorLight )(
            __RPC__in IHTMLTable * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_borderColorDark )(
            __RPC__in IHTMLTable * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderColorDark )(
            __RPC__in IHTMLTable * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLTable * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *refresh )(
            __RPC__in IHTMLTable * This);
                            HRESULT ( STDMETHODCALLTYPE *get_rows )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLTable * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLTable * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLTable * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLTable * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_dataPageSize )(
            __RPC__in IHTMLTable * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_dataPageSize )(
            __RPC__in IHTMLTable * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *nextPage )(
            __RPC__in IHTMLTable * This);
                   HRESULT ( STDMETHODCALLTYPE *previousPage )(
            __RPC__in IHTMLTable * This);
                            HRESULT ( STDMETHODCALLTYPE *get_tHead )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt IHTMLTableSection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_tFoot )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt IHTMLTableSection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_tBodies )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *get_caption )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt IHTMLTableCaption **p);
                   HRESULT ( STDMETHODCALLTYPE *createTHead )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt IDispatch **head);
                   HRESULT ( STDMETHODCALLTYPE *deleteTHead )(
            __RPC__in IHTMLTable * This);
                   HRESULT ( STDMETHODCALLTYPE *createTFoot )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt IDispatch **foot);
                   HRESULT ( STDMETHODCALLTYPE *deleteTFoot )(
            __RPC__in IHTMLTable * This);
                   HRESULT ( STDMETHODCALLTYPE *createCaption )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt IHTMLTableCaption **caption);
                   HRESULT ( STDMETHODCALLTYPE *deleteCaption )(
            __RPC__in IHTMLTable * This);
                   HRESULT ( STDMETHODCALLTYPE *insertRow )(
            __RPC__in IHTMLTable * This,
                                     long index,
                                __RPC__deref_out_opt IDispatch **row);
                   HRESULT ( STDMETHODCALLTYPE *deleteRow )(
            __RPC__in IHTMLTable * This,
                                     long index);
                            HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLTable * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )(
            __RPC__in IHTMLTable * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )(
            __RPC__in IHTMLTable * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLTableVtbl;
    interface IHTMLTable
    {
        CONST_VTBL struct IHTMLTableVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_cols(This,v) )
    ( (This)->lpVtbl -> get_cols(This,p) )
    ( (This)->lpVtbl -> put_border(This,v) )
    ( (This)->lpVtbl -> get_border(This,p) )
    ( (This)->lpVtbl -> put_frame(This,v) )
    ( (This)->lpVtbl -> get_frame(This,p) )
    ( (This)->lpVtbl -> put_rules(This,v) )
    ( (This)->lpVtbl -> get_rules(This,p) )
    ( (This)->lpVtbl -> put_cellSpacing(This,v) )
    ( (This)->lpVtbl -> get_cellSpacing(This,p) )
    ( (This)->lpVtbl -> put_cellPadding(This,v) )
    ( (This)->lpVtbl -> get_cellPadding(This,p) )
    ( (This)->lpVtbl -> put_background(This,v) )
    ( (This)->lpVtbl -> get_background(This,p) )
    ( (This)->lpVtbl -> put_bgColor(This,v) )
    ( (This)->lpVtbl -> get_bgColor(This,p) )
    ( (This)->lpVtbl -> put_borderColor(This,v) )
    ( (This)->lpVtbl -> get_borderColor(This,p) )
    ( (This)->lpVtbl -> put_borderColorLight(This,v) )
    ( (This)->lpVtbl -> get_borderColorLight(This,p) )
    ( (This)->lpVtbl -> put_borderColorDark(This,v) )
    ( (This)->lpVtbl -> get_borderColorDark(This,p) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> refresh(This) )
    ( (This)->lpVtbl -> get_rows(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_dataPageSize(This,v) )
    ( (This)->lpVtbl -> get_dataPageSize(This,p) )
    ( (This)->lpVtbl -> nextPage(This) )
    ( (This)->lpVtbl -> previousPage(This) )
    ( (This)->lpVtbl -> get_tHead(This,p) )
    ( (This)->lpVtbl -> get_tFoot(This,p) )
    ( (This)->lpVtbl -> get_tBodies(This,p) )
    ( (This)->lpVtbl -> get_caption(This,p) )
    ( (This)->lpVtbl -> createTHead(This,head) )
    ( (This)->lpVtbl -> deleteTHead(This) )
    ( (This)->lpVtbl -> createTFoot(This,foot) )
    ( (This)->lpVtbl -> deleteTFoot(This) )
    ( (This)->lpVtbl -> createCaption(This,caption) )
    ( (This)->lpVtbl -> deleteCaption(This) )
    ( (This)->lpVtbl -> insertRow(This,index,row) )
    ( (This)->lpVtbl -> deleteRow(This,index) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> put_onreadystatechange(This,v) )
    ( (This)->lpVtbl -> get_onreadystatechange(This,p) )
EXTERN_C const IID IID_IHTMLTable2;
    typedef struct IHTMLTable2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTable2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTable2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTable2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTable2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTable2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTable2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTable2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *firstPage )(
            __RPC__in IHTMLTable2 * This);
                   HRESULT ( STDMETHODCALLTYPE *lastPage )(
            __RPC__in IHTMLTable2 * This);
                            HRESULT ( STDMETHODCALLTYPE *get_cells )(
            __RPC__in IHTMLTable2 * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                   HRESULT ( STDMETHODCALLTYPE *moveRow )(
            __RPC__in IHTMLTable2 * This,
                                     long indexFrom,
                                     long indexTo,
                                __RPC__deref_out_opt IDispatch **row);
        END_INTERFACE
    } IHTMLTable2Vtbl;
    interface IHTMLTable2
    {
        CONST_VTBL struct IHTMLTable2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> firstPage(This) )
    ( (This)->lpVtbl -> lastPage(This) )
    ( (This)->lpVtbl -> get_cells(This,p) )
    ( (This)->lpVtbl -> moveRow(This,indexFrom,indexTo,row) )
EXTERN_C const IID IID_IHTMLTable3;
    typedef struct IHTMLTable3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTable3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTable3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTable3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTable3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTable3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTable3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTable3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_summary )(
            __RPC__in IHTMLTable3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_summary )(
            __RPC__in IHTMLTable3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLTable3Vtbl;
    interface IHTMLTable3
    {
        CONST_VTBL struct IHTMLTable3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_summary(This,v) )
    ( (This)->lpVtbl -> get_summary(This,p) )
EXTERN_C const IID IID_IHTMLTable4;
    typedef struct IHTMLTable4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTable4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTable4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTable4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTable4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTable4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTable4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTable4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_tHead )(
            __RPC__in IHTMLTable4 * This,
                       __RPC__in_opt IHTMLTableSection *v);
                            HRESULT ( STDMETHODCALLTYPE *get_tHead )(
            __RPC__in IHTMLTable4 * This,
                                __RPC__deref_out_opt IHTMLTableSection **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_tFoot )(
            __RPC__in IHTMLTable4 * This,
                       __RPC__in_opt IHTMLTableSection *v);
                            HRESULT ( STDMETHODCALLTYPE *get_tFoot )(
            __RPC__in IHTMLTable4 * This,
                                __RPC__deref_out_opt IHTMLTableSection **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_caption )(
            __RPC__in IHTMLTable4 * This,
                       __RPC__in_opt IHTMLTableCaption *v);
                            HRESULT ( STDMETHODCALLTYPE *get_caption )(
            __RPC__in IHTMLTable4 * This,
                                __RPC__deref_out_opt IHTMLTableCaption **p);
                   HRESULT ( STDMETHODCALLTYPE *insertRow )(
            __RPC__in IHTMLTable4 * This,
                                     long index,
                                __RPC__deref_out_opt IDispatch **row);
                   HRESULT ( STDMETHODCALLTYPE *deleteRow )(
            __RPC__in IHTMLTable4 * This,
                                     long index);
                   HRESULT ( STDMETHODCALLTYPE *createTBody )(
            __RPC__in IHTMLTable4 * This,
                                __RPC__deref_out_opt IHTMLTableSection **tbody);
        END_INTERFACE
    } IHTMLTable4Vtbl;
    interface IHTMLTable4
    {
        CONST_VTBL struct IHTMLTable4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_tHead(This,v) )
    ( (This)->lpVtbl -> get_tHead(This,p) )
    ( (This)->lpVtbl -> putref_tFoot(This,v) )
    ( (This)->lpVtbl -> get_tFoot(This,p) )
    ( (This)->lpVtbl -> putref_caption(This,v) )
    ( (This)->lpVtbl -> get_caption(This,p) )
    ( (This)->lpVtbl -> insertRow(This,index,row) )
    ( (This)->lpVtbl -> deleteRow(This,index) )
    ( (This)->lpVtbl -> createTBody(This,tbody) )
EXTERN_C const IID IID_IHTMLTableCol;
    typedef struct IHTMLTableColVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableCol * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableCol * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableCol * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableCol * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableCol * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableCol * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableCol * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_span )(
            __RPC__in IHTMLTableCol * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_span )(
            __RPC__in IHTMLTableCol * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLTableCol * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLTableCol * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLTableCol * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLTableCol * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_vAlign )(
            __RPC__in IHTMLTableCol * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_vAlign )(
            __RPC__in IHTMLTableCol * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLTableColVtbl;
    interface IHTMLTableCol
    {
        CONST_VTBL struct IHTMLTableColVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_span(This,v) )
    ( (This)->lpVtbl -> get_span(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_vAlign(This,v) )
    ( (This)->lpVtbl -> get_vAlign(This,p) )
EXTERN_C const IID IID_IHTMLTableCol2;
    typedef struct IHTMLTableCol2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableCol2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableCol2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableCol2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableCol2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableCol2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableCol2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableCol2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ch )(
            __RPC__in IHTMLTableCol2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ch )(
            __RPC__in IHTMLTableCol2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_chOff )(
            __RPC__in IHTMLTableCol2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_chOff )(
            __RPC__in IHTMLTableCol2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLTableCol2Vtbl;
    interface IHTMLTableCol2
    {
        CONST_VTBL struct IHTMLTableCol2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_ch(This,v) )
    ( (This)->lpVtbl -> get_ch(This,p) )
    ( (This)->lpVtbl -> put_chOff(This,v) )
    ( (This)->lpVtbl -> get_chOff(This,p) )
EXTERN_C const IID IID_IHTMLTableCol3;
    typedef struct IHTMLTableCol3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableCol3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableCol3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableCol3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableCol3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableCol3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableCol3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableCol3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ch )(
            __RPC__in IHTMLTableCol3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ch )(
            __RPC__in IHTMLTableCol3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_chOff )(
            __RPC__in IHTMLTableCol3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_chOff )(
            __RPC__in IHTMLTableCol3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLTableCol3Vtbl;
    interface IHTMLTableCol3
    {
        CONST_VTBL struct IHTMLTableCol3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_ch(This,v) )
    ( (This)->lpVtbl -> get_ch(This,p) )
    ( (This)->lpVtbl -> put_chOff(This,v) )
    ( (This)->lpVtbl -> get_chOff(This,p) )
EXTERN_C const IID IID_IHTMLTableSection2;
    typedef struct IHTMLTableSection2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableSection2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableSection2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableSection2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableSection2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableSection2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableSection2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableSection2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *moveRow )(
            __RPC__in IHTMLTableSection2 * This,
                                     long indexFrom,
                                     long indexTo,
                                __RPC__deref_out_opt IDispatch **row);
        END_INTERFACE
    } IHTMLTableSection2Vtbl;
    interface IHTMLTableSection2
    {
        CONST_VTBL struct IHTMLTableSection2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> moveRow(This,indexFrom,indexTo,row) )
EXTERN_C const IID IID_IHTMLTableSection3;
    typedef struct IHTMLTableSection3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableSection3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableSection3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableSection3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableSection3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableSection3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableSection3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableSection3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ch )(
            __RPC__in IHTMLTableSection3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ch )(
            __RPC__in IHTMLTableSection3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_chOff )(
            __RPC__in IHTMLTableSection3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_chOff )(
            __RPC__in IHTMLTableSection3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLTableSection3Vtbl;
    interface IHTMLTableSection3
    {
        CONST_VTBL struct IHTMLTableSection3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_ch(This,v) )
    ( (This)->lpVtbl -> get_ch(This,p) )
    ( (This)->lpVtbl -> put_chOff(This,v) )
    ( (This)->lpVtbl -> get_chOff(This,p) )
EXTERN_C const IID IID_IHTMLTableSection4;
    typedef struct IHTMLTableSection4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableSection4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableSection4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableSection4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableSection4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableSection4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableSection4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableSection4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ch )(
            __RPC__in IHTMLTableSection4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ch )(
            __RPC__in IHTMLTableSection4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_chOff )(
            __RPC__in IHTMLTableSection4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_chOff )(
            __RPC__in IHTMLTableSection4 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *insertRow )(
            __RPC__in IHTMLTableSection4 * This,
                                     long index,
                                __RPC__deref_out_opt IDispatch **row);
                   HRESULT ( STDMETHODCALLTYPE *deleteRow )(
            __RPC__in IHTMLTableSection4 * This,
                                     long index);
        END_INTERFACE
    } IHTMLTableSection4Vtbl;
    interface IHTMLTableSection4
    {
        CONST_VTBL struct IHTMLTableSection4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_ch(This,v) )
    ( (This)->lpVtbl -> get_ch(This,p) )
    ( (This)->lpVtbl -> put_chOff(This,v) )
    ( (This)->lpVtbl -> get_chOff(This,p) )
    ( (This)->lpVtbl -> insertRow(This,index,row) )
    ( (This)->lpVtbl -> deleteRow(This,index) )
EXTERN_C const IID IID_IHTMLTableRow;
    typedef struct IHTMLTableRowVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableRow * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableRow * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableRow * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableRow * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableRow * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableRow * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableRow * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLTableRow * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLTableRow * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_vAlign )(
            __RPC__in IHTMLTableRow * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_vAlign )(
            __RPC__in IHTMLTableRow * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_bgColor )(
            __RPC__in IHTMLTableRow * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_bgColor )(
            __RPC__in IHTMLTableRow * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_borderColor )(
            __RPC__in IHTMLTableRow * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderColor )(
            __RPC__in IHTMLTableRow * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_borderColorLight )(
            __RPC__in IHTMLTableRow * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderColorLight )(
            __RPC__in IHTMLTableRow * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_borderColorDark )(
            __RPC__in IHTMLTableRow * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderColorDark )(
            __RPC__in IHTMLTableRow * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_rowIndex )(
            __RPC__in IHTMLTableRow * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_sectionRowIndex )(
            __RPC__in IHTMLTableRow * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_cells )(
            __RPC__in IHTMLTableRow * This,
                                __RPC__deref_out_opt IHTMLElementCollection **p);
                   HRESULT ( STDMETHODCALLTYPE *insertCell )(
            __RPC__in IHTMLTableRow * This,
                                     long index,
                                __RPC__deref_out_opt IDispatch **row);
                   HRESULT ( STDMETHODCALLTYPE *deleteCell )(
            __RPC__in IHTMLTableRow * This,
                                     long index);
        END_INTERFACE
    } IHTMLTableRowVtbl;
    interface IHTMLTableRow
    {
        CONST_VTBL struct IHTMLTableRowVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_vAlign(This,v) )
    ( (This)->lpVtbl -> get_vAlign(This,p) )
    ( (This)->lpVtbl -> put_bgColor(This,v) )
    ( (This)->lpVtbl -> get_bgColor(This,p) )
    ( (This)->lpVtbl -> put_borderColor(This,v) )
    ( (This)->lpVtbl -> get_borderColor(This,p) )
    ( (This)->lpVtbl -> put_borderColorLight(This,v) )
    ( (This)->lpVtbl -> get_borderColorLight(This,p) )
    ( (This)->lpVtbl -> put_borderColorDark(This,v) )
    ( (This)->lpVtbl -> get_borderColorDark(This,p) )
    ( (This)->lpVtbl -> get_rowIndex(This,p) )
    ( (This)->lpVtbl -> get_sectionRowIndex(This,p) )
    ( (This)->lpVtbl -> get_cells(This,p) )
    ( (This)->lpVtbl -> insertCell(This,index,row) )
    ( (This)->lpVtbl -> deleteCell(This,index) )
EXTERN_C const IID IID_IHTMLTableRow2;
    typedef struct IHTMLTableRow2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableRow2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableRow2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableRow2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableRow2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableRow2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableRow2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableRow2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLTableRow2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLTableRow2 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLTableRow2Vtbl;
    interface IHTMLTableRow2
    {
        CONST_VTBL struct IHTMLTableRow2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
EXTERN_C const IID IID_IHTMLTableRow3;
    typedef struct IHTMLTableRow3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableRow3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableRow3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableRow3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableRow3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableRow3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableRow3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableRow3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ch )(
            __RPC__in IHTMLTableRow3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ch )(
            __RPC__in IHTMLTableRow3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_chOff )(
            __RPC__in IHTMLTableRow3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_chOff )(
            __RPC__in IHTMLTableRow3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLTableRow3Vtbl;
    interface IHTMLTableRow3
    {
        CONST_VTBL struct IHTMLTableRow3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_ch(This,v) )
    ( (This)->lpVtbl -> get_ch(This,p) )
    ( (This)->lpVtbl -> put_chOff(This,v) )
    ( (This)->lpVtbl -> get_chOff(This,p) )
EXTERN_C const IID IID_IHTMLTableRow4;
    typedef struct IHTMLTableRow4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableRow4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableRow4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableRow4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableRow4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableRow4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableRow4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableRow4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ch )(
            __RPC__in IHTMLTableRow4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ch )(
            __RPC__in IHTMLTableRow4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_chOff )(
            __RPC__in IHTMLTableRow4 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_chOff )(
            __RPC__in IHTMLTableRow4 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *insertCell )(
            __RPC__in IHTMLTableRow4 * This,
                                     long index,
                                __RPC__deref_out_opt IDispatch **row);
                   HRESULT ( STDMETHODCALLTYPE *deleteCell )(
            __RPC__in IHTMLTableRow4 * This,
                                     long index);
        END_INTERFACE
    } IHTMLTableRow4Vtbl;
    interface IHTMLTableRow4
    {
        CONST_VTBL struct IHTMLTableRow4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_ch(This,v) )
    ( (This)->lpVtbl -> get_ch(This,p) )
    ( (This)->lpVtbl -> put_chOff(This,v) )
    ( (This)->lpVtbl -> get_chOff(This,p) )
    ( (This)->lpVtbl -> insertCell(This,index,row) )
    ( (This)->lpVtbl -> deleteCell(This,index) )
EXTERN_C const IID IID_IHTMLTableRowMetrics;
    typedef struct IHTMLTableRowMetricsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableRowMetrics * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableRowMetrics * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableRowMetrics * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableRowMetrics * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableRowMetrics * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableRowMetrics * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableRowMetrics * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientHeight )(
            __RPC__in IHTMLTableRowMetrics * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientWidth )(
            __RPC__in IHTMLTableRowMetrics * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientTop )(
            __RPC__in IHTMLTableRowMetrics * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_clientLeft )(
            __RPC__in IHTMLTableRowMetrics * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLTableRowMetricsVtbl;
    interface IHTMLTableRowMetrics
    {
        CONST_VTBL struct IHTMLTableRowMetricsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_clientHeight(This,p) )
    ( (This)->lpVtbl -> get_clientWidth(This,p) )
    ( (This)->lpVtbl -> get_clientTop(This,p) )
    ( (This)->lpVtbl -> get_clientLeft(This,p) )
EXTERN_C const IID IID_IHTMLTableCell;
    typedef struct IHTMLTableCellVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableCell * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableCell * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableCell * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableCell * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableCell * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableCell * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableCell * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_rowSpan )(
            __RPC__in IHTMLTableCell * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_rowSpan )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_colSpan )(
            __RPC__in IHTMLTableCell * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_colSpan )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLTableCell * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_vAlign )(
            __RPC__in IHTMLTableCell * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_vAlign )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_bgColor )(
            __RPC__in IHTMLTableCell * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_bgColor )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_noWrap )(
            __RPC__in IHTMLTableCell * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_noWrap )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_background )(
            __RPC__in IHTMLTableCell * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_background )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_borderColor )(
            __RPC__in IHTMLTableCell * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderColor )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_borderColorLight )(
            __RPC__in IHTMLTableCell * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderColorLight )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_borderColorDark )(
            __RPC__in IHTMLTableCell * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderColorDark )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLTableCell * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLTableCell * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_cellIndex )(
            __RPC__in IHTMLTableCell * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLTableCellVtbl;
    interface IHTMLTableCell
    {
        CONST_VTBL struct IHTMLTableCellVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_rowSpan(This,v) )
    ( (This)->lpVtbl -> get_rowSpan(This,p) )
    ( (This)->lpVtbl -> put_colSpan(This,v) )
    ( (This)->lpVtbl -> get_colSpan(This,p) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_vAlign(This,v) )
    ( (This)->lpVtbl -> get_vAlign(This,p) )
    ( (This)->lpVtbl -> put_bgColor(This,v) )
    ( (This)->lpVtbl -> get_bgColor(This,p) )
    ( (This)->lpVtbl -> put_noWrap(This,v) )
    ( (This)->lpVtbl -> get_noWrap(This,p) )
    ( (This)->lpVtbl -> put_background(This,v) )
    ( (This)->lpVtbl -> get_background(This,p) )
    ( (This)->lpVtbl -> put_borderColor(This,v) )
    ( (This)->lpVtbl -> get_borderColor(This,p) )
    ( (This)->lpVtbl -> put_borderColorLight(This,v) )
    ( (This)->lpVtbl -> get_borderColorLight(This,p) )
    ( (This)->lpVtbl -> put_borderColorDark(This,v) )
    ( (This)->lpVtbl -> get_borderColorDark(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> get_cellIndex(This,p) )
EXTERN_C const IID IID_IHTMLTableCell2;
    typedef struct IHTMLTableCell2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableCell2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableCell2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableCell2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableCell2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableCell2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableCell2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableCell2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_abbr )(
            __RPC__in IHTMLTableCell2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_abbr )(
            __RPC__in IHTMLTableCell2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_axis )(
            __RPC__in IHTMLTableCell2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_axis )(
            __RPC__in IHTMLTableCell2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ch )(
            __RPC__in IHTMLTableCell2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ch )(
            __RPC__in IHTMLTableCell2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_chOff )(
            __RPC__in IHTMLTableCell2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_chOff )(
            __RPC__in IHTMLTableCell2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_headers )(
            __RPC__in IHTMLTableCell2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_headers )(
            __RPC__in IHTMLTableCell2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_scope )(
            __RPC__in IHTMLTableCell2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_scope )(
            __RPC__in IHTMLTableCell2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLTableCell2Vtbl;
    interface IHTMLTableCell2
    {
        CONST_VTBL struct IHTMLTableCell2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_abbr(This,v) )
    ( (This)->lpVtbl -> get_abbr(This,p) )
    ( (This)->lpVtbl -> put_axis(This,v) )
    ( (This)->lpVtbl -> get_axis(This,p) )
    ( (This)->lpVtbl -> put_ch(This,v) )
    ( (This)->lpVtbl -> get_ch(This,p) )
    ( (This)->lpVtbl -> put_chOff(This,v) )
    ( (This)->lpVtbl -> get_chOff(This,p) )
    ( (This)->lpVtbl -> put_headers(This,v) )
    ( (This)->lpVtbl -> get_headers(This,p) )
    ( (This)->lpVtbl -> put_scope(This,v) )
    ( (This)->lpVtbl -> get_scope(This,p) )
EXTERN_C const IID IID_IHTMLTableCell3;
    typedef struct IHTMLTableCell3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTableCell3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTableCell3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTableCell3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTableCell3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTableCell3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTableCell3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTableCell3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ch )(
            __RPC__in IHTMLTableCell3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ch )(
            __RPC__in IHTMLTableCell3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_chOff )(
            __RPC__in IHTMLTableCell3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_chOff )(
            __RPC__in IHTMLTableCell3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLTableCell3Vtbl;
    interface IHTMLTableCell3
    {
        CONST_VTBL struct IHTMLTableCell3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_ch(This,v) )
    ( (This)->lpVtbl -> get_ch(This,p) )
    ( (This)->lpVtbl -> put_chOff(This,v) )
    ( (This)->lpVtbl -> get_chOff(This,p) )
EXTERN_C const IID DIID_DispHTMLTable;
    typedef struct DispHTMLTableVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLTable * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLTable * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLTable * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLTable * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLTable * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLTable * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLTable * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLTableVtbl;
    interface DispHTMLTable
    {
        CONST_VTBL struct DispHTMLTableVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLTable;
class DECLSPEC_UUID("3050f26b-98b5-11cf-bb82-00aa00bdce0b")
HTMLTable;
EXTERN_C const IID DIID_DispHTMLTableCol;
    typedef struct DispHTMLTableColVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLTableCol * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLTableCol * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLTableCol * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLTableCol * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLTableCol * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLTableCol * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLTableCol * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLTableColVtbl;
    interface DispHTMLTableCol
    {
        CONST_VTBL struct DispHTMLTableColVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLTableCol;
class DECLSPEC_UUID("3050f26c-98b5-11cf-bb82-00aa00bdce0b")
HTMLTableCol;
EXTERN_C const IID DIID_DispHTMLTableSection;
    typedef struct DispHTMLTableSectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLTableSection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLTableSection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLTableSection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLTableSection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLTableSection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLTableSection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLTableSection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLTableSectionVtbl;
    interface DispHTMLTableSection
    {
        CONST_VTBL struct DispHTMLTableSectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLTableSection;
class DECLSPEC_UUID("3050f2e9-98b5-11cf-bb82-00aa00bdce0b")
HTMLTableSection;
EXTERN_C const IID DIID_DispHTMLTableRow;
    typedef struct DispHTMLTableRowVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLTableRow * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLTableRow * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLTableRow * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLTableRow * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLTableRow * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLTableRow * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLTableRow * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLTableRowVtbl;
    interface DispHTMLTableRow
    {
        CONST_VTBL struct DispHTMLTableRowVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLTableRow;
class DECLSPEC_UUID("3050f26d-98b5-11cf-bb82-00aa00bdce0b")
HTMLTableRow;
EXTERN_C const IID DIID_DispHTMLTableCell;
    typedef struct DispHTMLTableCellVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLTableCell * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLTableCell * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLTableCell * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLTableCell * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLTableCell * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLTableCell * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLTableCell * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLTableCellVtbl;
    interface DispHTMLTableCell
    {
        CONST_VTBL struct DispHTMLTableCellVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLTableCell;
class DECLSPEC_UUID("3050f246-98b5-11cf-bb82-00aa00bdce0b")
HTMLTableCell;
EXTERN_C const IID DIID_HTMLScriptEvents2;
    typedef struct HTMLScriptEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLScriptEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLScriptEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLScriptEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLScriptEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLScriptEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLScriptEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLScriptEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLScriptEvents2Vtbl;
    interface HTMLScriptEvents2
    {
        CONST_VTBL struct HTMLScriptEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLScriptEvents;
    typedef struct HTMLScriptEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLScriptEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLScriptEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLScriptEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLScriptEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLScriptEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLScriptEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLScriptEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLScriptEventsVtbl;
    interface HTMLScriptEvents
    {
        CONST_VTBL struct HTMLScriptEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLScriptElement;
    typedef struct IHTMLScriptElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLScriptElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLScriptElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLScriptElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLScriptElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLScriptElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLScriptElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLScriptElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLScriptElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLScriptElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_htmlFor )(
            __RPC__in IHTMLScriptElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_htmlFor )(
            __RPC__in IHTMLScriptElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_event )(
            __RPC__in IHTMLScriptElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_event )(
            __RPC__in IHTMLScriptElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_text )(
            __RPC__in IHTMLScriptElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_text )(
            __RPC__in IHTMLScriptElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_defer )(
            __RPC__in IHTMLScriptElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_defer )(
            __RPC__in IHTMLScriptElement * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLScriptElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLScriptElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLScriptElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLScriptElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLScriptElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLScriptElementVtbl;
    interface IHTMLScriptElement
    {
        CONST_VTBL struct IHTMLScriptElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> put_htmlFor(This,v) )
    ( (This)->lpVtbl -> get_htmlFor(This,p) )
    ( (This)->lpVtbl -> put_event(This,v) )
    ( (This)->lpVtbl -> get_event(This,p) )
    ( (This)->lpVtbl -> put_text(This,v) )
    ( (This)->lpVtbl -> get_text(This,p) )
    ( (This)->lpVtbl -> put_defer(This,v) )
    ( (This)->lpVtbl -> get_defer(This,p) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
EXTERN_C const IID IID_IHTMLScriptElement2;
    typedef struct IHTMLScriptElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLScriptElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLScriptElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLScriptElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLScriptElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLScriptElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLScriptElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLScriptElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_charset )(
            __RPC__in IHTMLScriptElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_charset )(
            __RPC__in IHTMLScriptElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLScriptElement2Vtbl;
    interface IHTMLScriptElement2
    {
        CONST_VTBL struct IHTMLScriptElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_charset(This,v) )
    ( (This)->lpVtbl -> get_charset(This,p) )
EXTERN_C const IID IID_IHTMLScriptElement3;
    typedef struct IHTMLScriptElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLScriptElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLScriptElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLScriptElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLScriptElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLScriptElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLScriptElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLScriptElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLScriptElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLScriptElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLScriptElement3Vtbl;
    interface IHTMLScriptElement3
    {
        CONST_VTBL struct IHTMLScriptElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
EXTERN_C const IID IID_IHTMLScriptElement4;
    typedef struct IHTMLScriptElement4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLScriptElement4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLScriptElement4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLScriptElement4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLScriptElement4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLScriptElement4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLScriptElement4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLScriptElement4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_usedCharset )(
            __RPC__in IHTMLScriptElement4 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLScriptElement4Vtbl;
    interface IHTMLScriptElement4
    {
        CONST_VTBL struct IHTMLScriptElement4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_usedCharset(This,p) )
EXTERN_C const IID DIID_DispHTMLScriptElement;
    typedef struct DispHTMLScriptElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLScriptElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLScriptElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLScriptElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLScriptElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLScriptElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLScriptElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLScriptElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLScriptElementVtbl;
    interface DispHTMLScriptElement
    {
        CONST_VTBL struct DispHTMLScriptElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLScriptElement;
class DECLSPEC_UUID("3050f28c-98b5-11cf-bb82-00aa00bdce0b")
HTMLScriptElement;
EXTERN_C const IID IID_IHTMLNoShowElement;
    typedef struct IHTMLNoShowElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLNoShowElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLNoShowElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLNoShowElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLNoShowElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLNoShowElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLNoShowElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLNoShowElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } IHTMLNoShowElementVtbl;
    interface IHTMLNoShowElement
    {
        CONST_VTBL struct IHTMLNoShowElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispHTMLNoShowElement;
    typedef struct DispHTMLNoShowElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLNoShowElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLNoShowElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLNoShowElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLNoShowElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLNoShowElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLNoShowElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLNoShowElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLNoShowElementVtbl;
    interface DispHTMLNoShowElement
    {
        CONST_VTBL struct DispHTMLNoShowElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLNoShowElement;
class DECLSPEC_UUID("3050f38b-98b5-11cf-bb82-00aa00bdce0b")
HTMLNoShowElement;
EXTERN_C const IID DIID_HTMLObjectElementEvents2;
    typedef struct HTMLObjectElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLObjectElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLObjectElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLObjectElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLObjectElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLObjectElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLObjectElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLObjectElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLObjectElementEvents2Vtbl;
    interface HTMLObjectElementEvents2
    {
        CONST_VTBL struct HTMLObjectElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLObjectElementEvents;
    typedef struct HTMLObjectElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLObjectElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLObjectElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLObjectElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLObjectElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLObjectElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLObjectElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLObjectElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLObjectElementEventsVtbl;
    interface HTMLObjectElementEvents
    {
        CONST_VTBL struct HTMLObjectElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLObjectElement;
    typedef struct IHTMLObjectElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLObjectElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLObjectElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLObjectElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLObjectElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLObjectElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLObjectElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLObjectElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *get_object )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt IDispatch **p);
                                    HRESULT ( STDMETHODCALLTYPE *get_classid )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                    HRESULT ( STDMETHODCALLTYPE *get_data )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                       HRESULT ( STDMETHODCALLTYPE *putref_recordset )(
            __RPC__in IHTMLObjectElement * This,
                       __RPC__in_opt IDispatch *v);
                                    HRESULT ( STDMETHODCALLTYPE *get_recordset )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt IDispatch **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLObjectElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLObjectElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_codeBase )(
            __RPC__in IHTMLObjectElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_codeBase )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_codeType )(
            __RPC__in IHTMLObjectElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_codeType )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_code )(
            __RPC__in IHTMLObjectElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_code )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_BaseHref )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLObjectElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLObjectElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLObjectElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__out VARIANT *p);
                                    HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )(
            __RPC__in IHTMLObjectElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLObjectElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_altHtml )(
            __RPC__in IHTMLObjectElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_altHtml )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_vspace )(
            __RPC__in IHTMLObjectElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_vspace )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_hspace )(
            __RPC__in IHTMLObjectElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_hspace )(
            __RPC__in IHTMLObjectElement * This,
                                __RPC__out long *p);
        END_INTERFACE
    } IHTMLObjectElementVtbl;
    interface IHTMLObjectElement
    {
        CONST_VTBL struct IHTMLObjectElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_object(This,p) )
    ( (This)->lpVtbl -> get_classid(This,p) )
    ( (This)->lpVtbl -> get_data(This,p) )
    ( (This)->lpVtbl -> putref_recordset(This,v) )
    ( (This)->lpVtbl -> get_recordset(This,p) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_codeBase(This,v) )
    ( (This)->lpVtbl -> get_codeBase(This,p) )
    ( (This)->lpVtbl -> put_codeType(This,v) )
    ( (This)->lpVtbl -> get_codeType(This,p) )
    ( (This)->lpVtbl -> put_code(This,v) )
    ( (This)->lpVtbl -> get_code(This,p) )
    ( (This)->lpVtbl -> get_BaseHref(This,p) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> put_onreadystatechange(This,v) )
    ( (This)->lpVtbl -> get_onreadystatechange(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> put_altHtml(This,v) )
    ( (This)->lpVtbl -> get_altHtml(This,p) )
    ( (This)->lpVtbl -> put_vspace(This,v) )
    ( (This)->lpVtbl -> get_vspace(This,p) )
    ( (This)->lpVtbl -> put_hspace(This,v) )
    ( (This)->lpVtbl -> get_hspace(This,p) )
EXTERN_C const IID IID_IHTMLObjectElement2;
    typedef struct IHTMLObjectElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLObjectElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLObjectElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLObjectElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLObjectElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLObjectElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLObjectElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLObjectElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *namedRecordset )(
            __RPC__in IHTMLObjectElement2 * This,
                       __RPC__in BSTR dataMember,
                                 __RPC__in VARIANT *hierarchy,
                                __RPC__deref_out_opt IDispatch **ppRecordset);
                                    HRESULT ( STDMETHODCALLTYPE *put_classid )(
            __RPC__in IHTMLObjectElement2 * This,
                       __RPC__in BSTR v);
                                    HRESULT ( STDMETHODCALLTYPE *get_classid )(
            __RPC__in IHTMLObjectElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                    HRESULT ( STDMETHODCALLTYPE *put_data )(
            __RPC__in IHTMLObjectElement2 * This,
                       __RPC__in BSTR v);
                                    HRESULT ( STDMETHODCALLTYPE *get_data )(
            __RPC__in IHTMLObjectElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLObjectElement2Vtbl;
    interface IHTMLObjectElement2
    {
        CONST_VTBL struct IHTMLObjectElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> namedRecordset(This,dataMember,hierarchy,ppRecordset) )
    ( (This)->lpVtbl -> put_classid(This,v) )
    ( (This)->lpVtbl -> get_classid(This,p) )
    ( (This)->lpVtbl -> put_data(This,v) )
    ( (This)->lpVtbl -> get_data(This,p) )
EXTERN_C const IID IID_IHTMLObjectElement3;
    typedef struct IHTMLObjectElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLObjectElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLObjectElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLObjectElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLObjectElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLObjectElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLObjectElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLObjectElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_archive )(
            __RPC__in IHTMLObjectElement3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_archive )(
            __RPC__in IHTMLObjectElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_alt )(
            __RPC__in IHTMLObjectElement3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_alt )(
            __RPC__in IHTMLObjectElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_declare )(
            __RPC__in IHTMLObjectElement3 * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_declare )(
            __RPC__in IHTMLObjectElement3 * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_standby )(
            __RPC__in IHTMLObjectElement3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_standby )(
            __RPC__in IHTMLObjectElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_border )(
            __RPC__in IHTMLObjectElement3 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_border )(
            __RPC__in IHTMLObjectElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_useMap )(
            __RPC__in IHTMLObjectElement3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_useMap )(
            __RPC__in IHTMLObjectElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLObjectElement3Vtbl;
    interface IHTMLObjectElement3
    {
        CONST_VTBL struct IHTMLObjectElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_archive(This,v) )
    ( (This)->lpVtbl -> get_archive(This,p) )
    ( (This)->lpVtbl -> put_alt(This,v) )
    ( (This)->lpVtbl -> get_alt(This,p) )
    ( (This)->lpVtbl -> put_declare(This,v) )
    ( (This)->lpVtbl -> get_declare(This,p) )
    ( (This)->lpVtbl -> put_standby(This,v) )
    ( (This)->lpVtbl -> get_standby(This,p) )
    ( (This)->lpVtbl -> put_border(This,v) )
    ( (This)->lpVtbl -> get_border(This,p) )
    ( (This)->lpVtbl -> put_useMap(This,v) )
    ( (This)->lpVtbl -> get_useMap(This,p) )
EXTERN_C const IID IID_IHTMLObjectElement4;
    typedef struct IHTMLObjectElement4Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLObjectElement4 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLObjectElement4 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLObjectElement4 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLObjectElement4 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLObjectElement4 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLObjectElement4 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLObjectElement4 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_contentDocument )(
            __RPC__in IHTMLObjectElement4 * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *put_codeBase )(
            __RPC__in IHTMLObjectElement4 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_codeBase )(
            __RPC__in IHTMLObjectElement4 * This,
                                __RPC__deref_out_opt BSTR *p);
                                    HRESULT ( STDMETHODCALLTYPE *put_data )(
            __RPC__in IHTMLObjectElement4 * This,
                       __RPC__in BSTR v);
                                    HRESULT ( STDMETHODCALLTYPE *get_data )(
            __RPC__in IHTMLObjectElement4 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLObjectElement4Vtbl;
    interface IHTMLObjectElement4
    {
        CONST_VTBL struct IHTMLObjectElement4Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_contentDocument(This,p) )
    ( (This)->lpVtbl -> put_codeBase(This,v) )
    ( (This)->lpVtbl -> get_codeBase(This,p) )
    ( (This)->lpVtbl -> put_data(This,v) )
    ( (This)->lpVtbl -> get_data(This,p) )
EXTERN_C const IID IID_IHTMLObjectElement5;
    typedef struct IHTMLObjectElement5Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLObjectElement5 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLObjectElement5 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLObjectElement5 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLObjectElement5 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLObjectElement5 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLObjectElement5 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLObjectElement5 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_object )(
            __RPC__in IHTMLObjectElement5 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_object )(
            __RPC__in IHTMLObjectElement5 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLObjectElement5Vtbl;
    interface IHTMLObjectElement5
    {
        CONST_VTBL struct IHTMLObjectElement5Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_object(This,v) )
    ( (This)->lpVtbl -> get_object(This,p) )
EXTERN_C const IID IID_IHTMLParamElement;
    typedef struct IHTMLParamElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLParamElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLParamElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLParamElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLParamElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLParamElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLParamElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLParamElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLParamElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLParamElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLParamElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLParamElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLParamElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLParamElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_valueType )(
            __RPC__in IHTMLParamElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_valueType )(
            __RPC__in IHTMLParamElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLParamElementVtbl;
    interface IHTMLParamElement
    {
        CONST_VTBL struct IHTMLParamElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_valueType(This,v) )
    ( (This)->lpVtbl -> get_valueType(This,p) )
EXTERN_C const IID IID_IHTMLParamElement2;
    typedef struct IHTMLParamElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLParamElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLParamElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLParamElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLParamElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLParamElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLParamElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLParamElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLParamElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLParamElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLParamElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLParamElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLParamElement2 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLParamElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_valueType )(
            __RPC__in IHTMLParamElement2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_valueType )(
            __RPC__in IHTMLParamElement2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLParamElement2Vtbl;
    interface IHTMLParamElement2
    {
        CONST_VTBL struct IHTMLParamElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_valueType(This,v) )
    ( (This)->lpVtbl -> get_valueType(This,p) )
EXTERN_C const IID DIID_DispHTMLObjectElement;
    typedef struct DispHTMLObjectElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLObjectElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLObjectElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLObjectElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLObjectElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLObjectElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLObjectElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLObjectElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLObjectElementVtbl;
    interface DispHTMLObjectElement
    {
        CONST_VTBL struct DispHTMLObjectElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLObjectElement;
class DECLSPEC_UUID("3050f24e-98b5-11cf-bb82-00aa00bdce0b")
HTMLObjectElement;
EXTERN_C const IID DIID_DispHTMLParamElement;
    typedef struct DispHTMLParamElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLParamElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLParamElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLParamElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLParamElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLParamElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLParamElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLParamElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLParamElementVtbl;
    interface DispHTMLParamElement
    {
        CONST_VTBL struct DispHTMLParamElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLParamElement;
class DECLSPEC_UUID("3050f83e-98b5-11cf-bb82-00aa00bdce0b")
HTMLParamElement;
EXTERN_C const IID DIID_HTMLFrameSiteEvents2;
    typedef struct HTMLFrameSiteEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLFrameSiteEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLFrameSiteEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLFrameSiteEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLFrameSiteEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLFrameSiteEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLFrameSiteEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLFrameSiteEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLFrameSiteEvents2Vtbl;
    interface HTMLFrameSiteEvents2
    {
        CONST_VTBL struct HTMLFrameSiteEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLFrameSiteEvents;
    typedef struct HTMLFrameSiteEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLFrameSiteEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLFrameSiteEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLFrameSiteEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLFrameSiteEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLFrameSiteEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLFrameSiteEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLFrameSiteEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLFrameSiteEventsVtbl;
    interface HTMLFrameSiteEvents
    {
        CONST_VTBL struct HTMLFrameSiteEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLFrameBase2;
    typedef struct IHTMLFrameBase2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFrameBase2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFrameBase2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFrameBase2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFrameBase2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFrameBase2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFrameBase2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFrameBase2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_contentWindow )(
            __RPC__in IHTMLFrameBase2 * This,
                                __RPC__deref_out_opt IHTMLWindow2 **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLFrameBase2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLFrameBase2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )(
            __RPC__in IHTMLFrameBase2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )(
            __RPC__in IHTMLFrameBase2 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLFrameBase2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_allowTransparency )(
            __RPC__in IHTMLFrameBase2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_allowTransparency )(
            __RPC__in IHTMLFrameBase2 * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLFrameBase2Vtbl;
    interface IHTMLFrameBase2
    {
        CONST_VTBL struct IHTMLFrameBase2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_contentWindow(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> put_onreadystatechange(This,v) )
    ( (This)->lpVtbl -> get_onreadystatechange(This,p) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> put_allowTransparency(This,v) )
    ( (This)->lpVtbl -> get_allowTransparency(This,p) )
EXTERN_C const IID IID_IHTMLFrameBase3;
    typedef struct IHTMLFrameBase3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFrameBase3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFrameBase3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFrameBase3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFrameBase3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFrameBase3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFrameBase3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFrameBase3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_longDesc )(
            __RPC__in IHTMLFrameBase3 * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_longDesc )(
            __RPC__in IHTMLFrameBase3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLFrameBase3Vtbl;
    interface IHTMLFrameBase3
    {
        CONST_VTBL struct IHTMLFrameBase3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_longDesc(This,v) )
    ( (This)->lpVtbl -> get_longDesc(This,p) )
EXTERN_C const IID DIID_DispHTMLFrameBase;
    typedef struct DispHTMLFrameBaseVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLFrameBase * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLFrameBase * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLFrameBase * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLFrameBase * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLFrameBase * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLFrameBase * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLFrameBase * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLFrameBaseVtbl;
    interface DispHTMLFrameBase
    {
        CONST_VTBL struct DispHTMLFrameBaseVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLFrameBase;
class DECLSPEC_UUID("3050f312-98b5-11cf-bb82-00aa00bdce0b")
HTMLFrameBase;
EXTERN_C const IID IID_IHTMLFrameElement;
    typedef struct IHTMLFrameElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFrameElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFrameElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFrameElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFrameElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFrameElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFrameElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFrameElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_borderColor )(
            __RPC__in IHTMLFrameElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderColor )(
            __RPC__in IHTMLFrameElement * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLFrameElementVtbl;
    interface IHTMLFrameElement
    {
        CONST_VTBL struct IHTMLFrameElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_borderColor(This,v) )
    ( (This)->lpVtbl -> get_borderColor(This,p) )
EXTERN_C const IID IID_IHTMLFrameElement2;
    typedef struct IHTMLFrameElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFrameElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFrameElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFrameElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFrameElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFrameElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFrameElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFrameElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLFrameElement2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLFrameElement2 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLFrameElement2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLFrameElement2 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLFrameElement2Vtbl;
    interface IHTMLFrameElement2
    {
        CONST_VTBL struct IHTMLFrameElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
EXTERN_C const IID IID_IHTMLFrameElement3;
    typedef struct IHTMLFrameElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFrameElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFrameElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFrameElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFrameElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFrameElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFrameElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFrameElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_contentDocument )(
            __RPC__in IHTMLFrameElement3 * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLFrameElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLFrameElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_longDesc )(
            __RPC__in IHTMLFrameElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_longDesc )(
            __RPC__in IHTMLFrameElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameBorder )(
            __RPC__in IHTMLFrameElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameBorder )(
            __RPC__in IHTMLFrameElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLFrameElement3Vtbl;
    interface IHTMLFrameElement3
    {
        CONST_VTBL struct IHTMLFrameElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_contentDocument(This,p) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> put_longDesc(This,v) )
    ( (This)->lpVtbl -> get_longDesc(This,p) )
    ( (This)->lpVtbl -> put_frameBorder(This,v) )
    ( (This)->lpVtbl -> get_frameBorder(This,p) )
EXTERN_C const IID DIID_DispHTMLFrameElement;
    typedef struct DispHTMLFrameElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLFrameElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLFrameElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLFrameElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLFrameElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLFrameElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLFrameElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLFrameElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLFrameElementVtbl;
    interface DispHTMLFrameElement
    {
        CONST_VTBL struct DispHTMLFrameElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLFrameElement;
class DECLSPEC_UUID("3050f314-98b5-11cf-bb82-00aa00bdce0b")
HTMLFrameElement;
EXTERN_C const IID IID_IHTMLIFrameElement;
    typedef struct IHTMLIFrameElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLIFrameElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLIFrameElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLIFrameElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLIFrameElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLIFrameElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLIFrameElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLIFrameElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_vspace )(
            __RPC__in IHTMLIFrameElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_vspace )(
            __RPC__in IHTMLIFrameElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_hspace )(
            __RPC__in IHTMLIFrameElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_hspace )(
            __RPC__in IHTMLIFrameElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLIFrameElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLIFrameElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLIFrameElementVtbl;
    interface IHTMLIFrameElement
    {
        CONST_VTBL struct IHTMLIFrameElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_vspace(This,v) )
    ( (This)->lpVtbl -> get_vspace(This,p) )
    ( (This)->lpVtbl -> put_hspace(This,v) )
    ( (This)->lpVtbl -> get_hspace(This,p) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
EXTERN_C const IID IID_IHTMLIFrameElement2;
    typedef struct IHTMLIFrameElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLIFrameElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLIFrameElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLIFrameElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLIFrameElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLIFrameElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLIFrameElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLIFrameElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLIFrameElement2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLIFrameElement2 * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLIFrameElement2 * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLIFrameElement2 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLIFrameElement2Vtbl;
    interface IHTMLIFrameElement2
    {
        CONST_VTBL struct IHTMLIFrameElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
EXTERN_C const IID IID_IHTMLIFrameElement3;
    typedef struct IHTMLIFrameElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLIFrameElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLIFrameElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLIFrameElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLIFrameElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLIFrameElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLIFrameElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLIFrameElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_contentDocument )(
            __RPC__in IHTMLIFrameElement3 * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLIFrameElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLIFrameElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_longDesc )(
            __RPC__in IHTMLIFrameElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_longDesc )(
            __RPC__in IHTMLIFrameElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameBorder )(
            __RPC__in IHTMLIFrameElement3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameBorder )(
            __RPC__in IHTMLIFrameElement3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLIFrameElement3Vtbl;
    interface IHTMLIFrameElement3
    {
        CONST_VTBL struct IHTMLIFrameElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_contentDocument(This,p) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> put_longDesc(This,v) )
    ( (This)->lpVtbl -> get_longDesc(This,p) )
    ( (This)->lpVtbl -> put_frameBorder(This,v) )
    ( (This)->lpVtbl -> get_frameBorder(This,p) )
EXTERN_C const IID DIID_DispHTMLIFrame;
    typedef struct DispHTMLIFrameVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLIFrame * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLIFrame * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLIFrame * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLIFrame * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLIFrame * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLIFrame * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLIFrame * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLIFrameVtbl;
    interface DispHTMLIFrame
    {
        CONST_VTBL struct DispHTMLIFrameVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLIFrame;
class DECLSPEC_UUID("3050f316-98b5-11cf-bb82-00aa00bdce0b")
HTMLIFrame;
EXTERN_C const IID IID_IHTMLDivPosition;
    typedef struct IHTMLDivPositionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDivPosition * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDivPosition * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDivPosition * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDivPosition * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDivPosition * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDivPosition * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDivPosition * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLDivPosition * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLDivPosition * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLDivPositionVtbl;
    interface IHTMLDivPosition
    {
        CONST_VTBL struct IHTMLDivPositionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
EXTERN_C const IID IID_IHTMLFieldSetElement;
    typedef struct IHTMLFieldSetElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFieldSetElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFieldSetElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFieldSetElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFieldSetElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFieldSetElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFieldSetElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFieldSetElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLFieldSetElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLFieldSetElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLFieldSetElementVtbl;
    interface IHTMLFieldSetElement
    {
        CONST_VTBL struct IHTMLFieldSetElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
EXTERN_C const IID IID_IHTMLFieldSetElement2;
    typedef struct IHTMLFieldSetElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFieldSetElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFieldSetElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFieldSetElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFieldSetElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFieldSetElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFieldSetElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFieldSetElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLFieldSetElement2 * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
        END_INTERFACE
    } IHTMLFieldSetElement2Vtbl;
    interface IHTMLFieldSetElement2
    {
        CONST_VTBL struct IHTMLFieldSetElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_form(This,p) )
EXTERN_C const IID IID_IHTMLLegendElement;
    typedef struct IHTMLLegendElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLLegendElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLLegendElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLLegendElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLLegendElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLLegendElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLLegendElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLLegendElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLLegendElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLLegendElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLLegendElementVtbl;
    interface IHTMLLegendElement
    {
        CONST_VTBL struct IHTMLLegendElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
EXTERN_C const IID IID_IHTMLLegendElement2;
    typedef struct IHTMLLegendElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLLegendElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLLegendElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLLegendElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLLegendElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLLegendElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLLegendElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLLegendElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLLegendElement2 * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
        END_INTERFACE
    } IHTMLLegendElement2Vtbl;
    interface IHTMLLegendElement2
    {
        CONST_VTBL struct IHTMLLegendElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_form(This,p) )
EXTERN_C const IID DIID_DispHTMLDivPosition;
    typedef struct DispHTMLDivPositionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLDivPosition * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLDivPosition * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLDivPosition * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLDivPosition * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLDivPosition * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLDivPosition * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLDivPosition * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLDivPositionVtbl;
    interface DispHTMLDivPosition
    {
        CONST_VTBL struct DispHTMLDivPositionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLDivPosition;
class DECLSPEC_UUID("3050f249-98b5-11cf-bb82-00aa00bdce0b")
HTMLDivPosition;
EXTERN_C const IID DIID_DispHTMLFieldSetElement;
    typedef struct DispHTMLFieldSetElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLFieldSetElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLFieldSetElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLFieldSetElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLFieldSetElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLFieldSetElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLFieldSetElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLFieldSetElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLFieldSetElementVtbl;
    interface DispHTMLFieldSetElement
    {
        CONST_VTBL struct DispHTMLFieldSetElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLFieldSetElement;
class DECLSPEC_UUID("3050f3e8-98b5-11cf-bb82-00aa00bdce0b")
HTMLFieldSetElement;
EXTERN_C const IID DIID_DispHTMLLegendElement;
    typedef struct DispHTMLLegendElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLLegendElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLLegendElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLLegendElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLLegendElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLLegendElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLLegendElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLLegendElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLLegendElementVtbl;
    interface DispHTMLLegendElement
    {
        CONST_VTBL struct DispHTMLLegendElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLLegendElement;
class DECLSPEC_UUID("3050f3e9-98b5-11cf-bb82-00aa00bdce0b")
HTMLLegendElement;
EXTERN_C const IID IID_IHTMLSpanFlow;
    typedef struct IHTMLSpanFlowVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSpanFlow * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSpanFlow * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSpanFlow * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSpanFlow * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSpanFlow * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSpanFlow * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSpanFlow * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in IHTMLSpanFlow * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in IHTMLSpanFlow * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLSpanFlowVtbl;
    interface IHTMLSpanFlow
    {
        CONST_VTBL struct IHTMLSpanFlowVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
EXTERN_C const IID DIID_DispHTMLSpanFlow;
    typedef struct DispHTMLSpanFlowVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLSpanFlow * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLSpanFlow * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLSpanFlow * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLSpanFlow * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLSpanFlow * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLSpanFlow * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLSpanFlow * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLSpanFlowVtbl;
    interface DispHTMLSpanFlow
    {
        CONST_VTBL struct DispHTMLSpanFlowVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLSpanFlow;
class DECLSPEC_UUID("3050f3e6-98b5-11cf-bb82-00aa00bdce0b")
HTMLSpanFlow;
EXTERN_C const IID IID_IHTMLFrameSetElement;
    typedef struct IHTMLFrameSetElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFrameSetElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFrameSetElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFrameSetElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFrameSetElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFrameSetElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFrameSetElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFrameSetElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_rows )(
            __RPC__in IHTMLFrameSetElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_rows )(
            __RPC__in IHTMLFrameSetElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_cols )(
            __RPC__in IHTMLFrameSetElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_cols )(
            __RPC__in IHTMLFrameSetElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_border )(
            __RPC__in IHTMLFrameSetElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_border )(
            __RPC__in IHTMLFrameSetElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_borderColor )(
            __RPC__in IHTMLFrameSetElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderColor )(
            __RPC__in IHTMLFrameSetElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameBorder )(
            __RPC__in IHTMLFrameSetElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameBorder )(
            __RPC__in IHTMLFrameSetElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameSpacing )(
            __RPC__in IHTMLFrameSetElement * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameSpacing )(
            __RPC__in IHTMLFrameSetElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_name )(
            __RPC__in IHTMLFrameSetElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLFrameSetElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLFrameSetElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLFrameSetElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onunload )(
            __RPC__in IHTMLFrameSetElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onunload )(
            __RPC__in IHTMLFrameSetElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeunload )(
            __RPC__in IHTMLFrameSetElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeunload )(
            __RPC__in IHTMLFrameSetElement * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLFrameSetElementVtbl;
    interface IHTMLFrameSetElement
    {
        CONST_VTBL struct IHTMLFrameSetElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_rows(This,v) )
    ( (This)->lpVtbl -> get_rows(This,p) )
    ( (This)->lpVtbl -> put_cols(This,v) )
    ( (This)->lpVtbl -> get_cols(This,p) )
    ( (This)->lpVtbl -> put_border(This,v) )
    ( (This)->lpVtbl -> get_border(This,p) )
    ( (This)->lpVtbl -> put_borderColor(This,v) )
    ( (This)->lpVtbl -> get_borderColor(This,p) )
    ( (This)->lpVtbl -> put_frameBorder(This,v) )
    ( (This)->lpVtbl -> get_frameBorder(This,p) )
    ( (This)->lpVtbl -> put_frameSpacing(This,v) )
    ( (This)->lpVtbl -> get_frameSpacing(This,p) )
    ( (This)->lpVtbl -> put_name(This,v) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> put_onunload(This,v) )
    ( (This)->lpVtbl -> get_onunload(This,p) )
    ( (This)->lpVtbl -> put_onbeforeunload(This,v) )
    ( (This)->lpVtbl -> get_onbeforeunload(This,p) )
EXTERN_C const IID IID_IHTMLFrameSetElement2;
    typedef struct IHTMLFrameSetElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFrameSetElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFrameSetElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFrameSetElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFrameSetElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFrameSetElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFrameSetElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFrameSetElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onbeforeprint )(
            __RPC__in IHTMLFrameSetElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onbeforeprint )(
            __RPC__in IHTMLFrameSetElement2 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onafterprint )(
            __RPC__in IHTMLFrameSetElement2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onafterprint )(
            __RPC__in IHTMLFrameSetElement2 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLFrameSetElement2Vtbl;
    interface IHTMLFrameSetElement2
    {
        CONST_VTBL struct IHTMLFrameSetElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_onbeforeprint(This,v) )
    ( (This)->lpVtbl -> get_onbeforeprint(This,p) )
    ( (This)->lpVtbl -> put_onafterprint(This,v) )
    ( (This)->lpVtbl -> get_onafterprint(This,p) )
EXTERN_C const IID IID_IHTMLFrameSetElement3;
    typedef struct IHTMLFrameSetElement3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFrameSetElement3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFrameSetElement3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFrameSetElement3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFrameSetElement3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFrameSetElement3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFrameSetElement3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFrameSetElement3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onhashchange )(
            __RPC__in IHTMLFrameSetElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onhashchange )(
            __RPC__in IHTMLFrameSetElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onmessage )(
            __RPC__in IHTMLFrameSetElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onmessage )(
            __RPC__in IHTMLFrameSetElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onoffline )(
            __RPC__in IHTMLFrameSetElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onoffline )(
            __RPC__in IHTMLFrameSetElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ononline )(
            __RPC__in IHTMLFrameSetElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ononline )(
            __RPC__in IHTMLFrameSetElement3 * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onstorage )(
            __RPC__in IHTMLFrameSetElement3 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onstorage )(
            __RPC__in IHTMLFrameSetElement3 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLFrameSetElement3Vtbl;
    interface IHTMLFrameSetElement3
    {
        CONST_VTBL struct IHTMLFrameSetElement3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_onhashchange(This,v) )
    ( (This)->lpVtbl -> get_onhashchange(This,p) )
    ( (This)->lpVtbl -> put_onmessage(This,v) )
    ( (This)->lpVtbl -> get_onmessage(This,p) )
    ( (This)->lpVtbl -> put_onoffline(This,v) )
    ( (This)->lpVtbl -> get_onoffline(This,p) )
    ( (This)->lpVtbl -> put_ononline(This,v) )
    ( (This)->lpVtbl -> get_ononline(This,p) )
    ( (This)->lpVtbl -> put_onstorage(This,v) )
    ( (This)->lpVtbl -> get_onstorage(This,p) )
EXTERN_C const IID DIID_DispHTMLFrameSetSite;
    typedef struct DispHTMLFrameSetSiteVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLFrameSetSite * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLFrameSetSite * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLFrameSetSite * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLFrameSetSite * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLFrameSetSite * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLFrameSetSite * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLFrameSetSite * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLFrameSetSiteVtbl;
    interface DispHTMLFrameSetSite
    {
        CONST_VTBL struct DispHTMLFrameSetSiteVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLFrameSetSite;
class DECLSPEC_UUID("3050f31A-98b5-11cf-bb82-00aa00bdce0b")
HTMLFrameSetSite;
EXTERN_C const IID IID_IHTMLBGsound;
    typedef struct IHTMLBGsoundVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLBGsound * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLBGsound * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLBGsound * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLBGsound * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLBGsound * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLBGsound * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLBGsound * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLBGsound * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLBGsound * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_loop )(
            __RPC__in IHTMLBGsound * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_loop )(
            __RPC__in IHTMLBGsound * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_volume )(
            __RPC__in IHTMLBGsound * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_volume )(
            __RPC__in IHTMLBGsound * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_balance )(
            __RPC__in IHTMLBGsound * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_balance )(
            __RPC__in IHTMLBGsound * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLBGsoundVtbl;
    interface IHTMLBGsound
    {
        CONST_VTBL struct IHTMLBGsoundVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> put_loop(This,v) )
    ( (This)->lpVtbl -> get_loop(This,p) )
    ( (This)->lpVtbl -> put_volume(This,v) )
    ( (This)->lpVtbl -> get_volume(This,p) )
    ( (This)->lpVtbl -> put_balance(This,v) )
    ( (This)->lpVtbl -> get_balance(This,p) )
EXTERN_C const IID DIID_DispHTMLBGsound;
    typedef struct DispHTMLBGsoundVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLBGsound * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLBGsound * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLBGsound * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLBGsound * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLBGsound * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLBGsound * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLBGsound * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLBGsoundVtbl;
    interface DispHTMLBGsound
    {
        CONST_VTBL struct DispHTMLBGsoundVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLBGsound;
class DECLSPEC_UUID("3050f370-98b5-11cf-bb82-00aa00bdce0b")
HTMLBGsound;
EXTERN_C const IID IID_IHTMLFontNamesCollection;
    typedef struct IHTMLFontNamesCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFontNamesCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFontNamesCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFontNamesCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFontNamesCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFontNamesCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFontNamesCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFontNamesCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLFontNamesCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLFontNamesCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLFontNamesCollection * This,
                       long index,
                                __RPC__deref_out_opt BSTR *pBstr);
        END_INTERFACE
    } IHTMLFontNamesCollectionVtbl;
    interface IHTMLFontNamesCollection
    {
        CONST_VTBL struct IHTMLFontNamesCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,index,pBstr) )
EXTERN_C const IID IID_IHTMLFontSizesCollection;
    typedef struct IHTMLFontSizesCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLFontSizesCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLFontSizesCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLFontSizesCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLFontSizesCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLFontSizesCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLFontSizesCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLFontSizesCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLFontSizesCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLFontSizesCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                            HRESULT ( STDMETHODCALLTYPE *get_forFont )(
            __RPC__in IHTMLFontSizesCollection * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLFontSizesCollection * This,
                       long index,
                                __RPC__out long *plSize);
        END_INTERFACE
    } IHTMLFontSizesCollectionVtbl;
    interface IHTMLFontSizesCollection
    {
        CONST_VTBL struct IHTMLFontSizesCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> get_forFont(This,p) )
    ( (This)->lpVtbl -> item(This,index,plSize) )
EXTERN_C const IID IID_IHTMLOptionsHolder;
    typedef struct IHTMLOptionsHolderVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLOptionsHolder * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLOptionsHolder * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLOptionsHolder * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLOptionsHolder * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLOptionsHolder * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLOptionsHolder * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLOptionsHolder * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *get_document )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__deref_out_opt IHTMLDocument2 **p);
                                    HRESULT ( STDMETHODCALLTYPE *get_fonts )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__deref_out_opt IHTMLFontNamesCollection **p);
                            HRESULT ( STDMETHODCALLTYPE *put_execArg )(
            __RPC__in IHTMLOptionsHolder * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_execArg )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_errorLine )(
            __RPC__in IHTMLOptionsHolder * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_errorLine )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_errorCharacter )(
            __RPC__in IHTMLOptionsHolder * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_errorCharacter )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_errorCode )(
            __RPC__in IHTMLOptionsHolder * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_errorCode )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_errorMessage )(
            __RPC__in IHTMLOptionsHolder * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_errorMessage )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_errorDebug )(
            __RPC__in IHTMLOptionsHolder * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_errorDebug )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__out VARIANT_BOOL *p);
                                    HRESULT ( STDMETHODCALLTYPE *get_unsecuredWindowOfDocument )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__deref_out_opt IHTMLWindow2 **p);
                            HRESULT ( STDMETHODCALLTYPE *put_findText )(
            __RPC__in IHTMLOptionsHolder * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_findText )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_anythingAfterFrameset )(
            __RPC__in IHTMLOptionsHolder * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_anythingAfterFrameset )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *sizes )(
            __RPC__in IHTMLOptionsHolder * This,
                       __RPC__in BSTR fontName,
                                __RPC__deref_out_opt IHTMLFontSizesCollection **pSizesCollection);
                   HRESULT ( STDMETHODCALLTYPE *openfiledlg )(
            __RPC__in IHTMLOptionsHolder * This,
                                 VARIANT initFile,
                                 VARIANT initDir,
                                 VARIANT filter,
                                 VARIANT title,
                                __RPC__deref_out_opt BSTR *pathName);
                   HRESULT ( STDMETHODCALLTYPE *savefiledlg )(
            __RPC__in IHTMLOptionsHolder * This,
                                 VARIANT initFile,
                                 VARIANT initDir,
                                 VARIANT filter,
                                 VARIANT title,
                                __RPC__deref_out_opt BSTR *pathName);
                   HRESULT ( STDMETHODCALLTYPE *choosecolordlg )(
            __RPC__in IHTMLOptionsHolder * This,
                                 VARIANT initColor,
                                __RPC__out long *rgbColor);
                   HRESULT ( STDMETHODCALLTYPE *showSecurityInfo )(
            __RPC__in IHTMLOptionsHolder * This);
                   HRESULT ( STDMETHODCALLTYPE *isApartmentModel )(
            __RPC__in IHTMLOptionsHolder * This,
                       __RPC__in_opt IHTMLObjectElement *object,
                                __RPC__out VARIANT_BOOL *fApartment);
                   HRESULT ( STDMETHODCALLTYPE *getCharset )(
            __RPC__in IHTMLOptionsHolder * This,
                       __RPC__in BSTR fontName,
                                __RPC__out long *charset);
                            HRESULT ( STDMETHODCALLTYPE *get_secureConnectionInfo )(
            __RPC__in IHTMLOptionsHolder * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLOptionsHolderVtbl;
    interface IHTMLOptionsHolder
    {
        CONST_VTBL struct IHTMLOptionsHolderVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_document(This,p) )
    ( (This)->lpVtbl -> get_fonts(This,p) )
    ( (This)->lpVtbl -> put_execArg(This,v) )
    ( (This)->lpVtbl -> get_execArg(This,p) )
    ( (This)->lpVtbl -> put_errorLine(This,v) )
    ( (This)->lpVtbl -> get_errorLine(This,p) )
    ( (This)->lpVtbl -> put_errorCharacter(This,v) )
    ( (This)->lpVtbl -> get_errorCharacter(This,p) )
    ( (This)->lpVtbl -> put_errorCode(This,v) )
    ( (This)->lpVtbl -> get_errorCode(This,p) )
    ( (This)->lpVtbl -> put_errorMessage(This,v) )
    ( (This)->lpVtbl -> get_errorMessage(This,p) )
    ( (This)->lpVtbl -> put_errorDebug(This,v) )
    ( (This)->lpVtbl -> get_errorDebug(This,p) )
    ( (This)->lpVtbl -> get_unsecuredWindowOfDocument(This,p) )
    ( (This)->lpVtbl -> put_findText(This,v) )
    ( (This)->lpVtbl -> get_findText(This,p) )
    ( (This)->lpVtbl -> put_anythingAfterFrameset(This,v) )
    ( (This)->lpVtbl -> get_anythingAfterFrameset(This,p) )
    ( (This)->lpVtbl -> sizes(This,fontName,pSizesCollection) )
    ( (This)->lpVtbl -> openfiledlg(This,initFile,initDir,filter,title,pathName) )
    ( (This)->lpVtbl -> savefiledlg(This,initFile,initDir,filter,title,pathName) )
    ( (This)->lpVtbl -> choosecolordlg(This,initColor,rgbColor) )
    ( (This)->lpVtbl -> showSecurityInfo(This) )
    ( (This)->lpVtbl -> isApartmentModel(This,object,fApartment) )
    ( (This)->lpVtbl -> getCharset(This,fontName,charset) )
    ( (This)->lpVtbl -> get_secureConnectionInfo(This,p) )
EXTERN_C const IID DIID_HTMLStyleElementEvents2;
    typedef struct HTMLStyleElementEvents2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLStyleElementEvents2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLStyleElementEvents2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLStyleElementEvents2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLStyleElementEvents2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLStyleElementEvents2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLStyleElementEvents2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLStyleElementEvents2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLStyleElementEvents2Vtbl;
    interface HTMLStyleElementEvents2
    {
        CONST_VTBL struct HTMLStyleElementEvents2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_HTMLStyleElementEvents;
    typedef struct HTMLStyleElementEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLStyleElementEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLStyleElementEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLStyleElementEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLStyleElementEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLStyleElementEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLStyleElementEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLStyleElementEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLStyleElementEventsVtbl;
    interface HTMLStyleElementEvents
    {
        CONST_VTBL struct HTMLStyleElementEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLStyleElement;
    typedef struct IHTMLStyleElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLStyleElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLStyleElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLStyleElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )(
            __RPC__in IHTMLStyleElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )(
            __RPC__in IHTMLStyleElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLStyleElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLStyleElement * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLStyleElement * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLStyleElement * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_styleSheet )(
            __RPC__in IHTMLStyleElement * This,
                                __RPC__deref_out_opt IHTMLStyleSheet **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_disabled )(
            __RPC__in IHTMLStyleElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_disabled )(
            __RPC__in IHTMLStyleElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_media )(
            __RPC__in IHTMLStyleElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_media )(
            __RPC__in IHTMLStyleElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLStyleElementVtbl;
    interface IHTMLStyleElement
    {
        CONST_VTBL struct IHTMLStyleElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> put_onreadystatechange(This,v) )
    ( (This)->lpVtbl -> get_onreadystatechange(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> get_styleSheet(This,p) )
    ( (This)->lpVtbl -> put_disabled(This,v) )
    ( (This)->lpVtbl -> get_disabled(This,p) )
    ( (This)->lpVtbl -> put_media(This,v) )
    ( (This)->lpVtbl -> get_media(This,p) )
EXTERN_C const IID IID_IHTMLStyleElement2;
    typedef struct IHTMLStyleElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_sheet )(
            __RPC__in IHTMLStyleElement2 * This,
                                __RPC__deref_out_opt IHTMLStyleSheet **p);
        END_INTERFACE
    } IHTMLStyleElement2Vtbl;
    interface IHTMLStyleElement2
    {
        CONST_VTBL struct IHTMLStyleElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_sheet(This,p) )
EXTERN_C const IID DIID_DispHTMLStyleElement;
    typedef struct DispHTMLStyleElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStyleElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStyleElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStyleElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStyleElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStyleElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStyleElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStyleElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStyleElementVtbl;
    interface DispHTMLStyleElement
    {
        CONST_VTBL struct DispHTMLStyleElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStyleElement;
class DECLSPEC_UUID("3050f37d-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleElement;
EXTERN_C const IID IID_IHTMLStyleFontFace;
    typedef struct IHTMLStyleFontFaceVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleFontFace * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleFontFace * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleFontFace * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleFontFace * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleFontFace * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleFontFace * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleFontFace * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_fontsrc )(
            __RPC__in IHTMLStyleFontFace * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_fontsrc )(
            __RPC__in IHTMLStyleFontFace * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLStyleFontFaceVtbl;
    interface IHTMLStyleFontFace
    {
        CONST_VTBL struct IHTMLStyleFontFaceVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_fontsrc(This,v) )
    ( (This)->lpVtbl -> get_fontsrc(This,p) )
EXTERN_C const IID IID_IHTMLStyleFontFace2;
    typedef struct IHTMLStyleFontFace2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleFontFace2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleFontFace2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleFontFace2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleFontFace2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleFontFace2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleFontFace2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleFontFace2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                          HRESULT ( STDMETHODCALLTYPE *get_style )(
            __RPC__in IHTMLStyleFontFace2 * This,
                                __RPC__deref_out_opt IHTMLRuleStyle **p);
        END_INTERFACE
    } IHTMLStyleFontFace2Vtbl;
    interface IHTMLStyleFontFace2
    {
        CONST_VTBL struct IHTMLStyleFontFace2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_style(This,p) )
EXTERN_C const IID DIID_DispHTMLStyleFontFace;
    typedef struct DispHTMLStyleFontFaceVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStyleFontFace * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStyleFontFace * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStyleFontFace * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStyleFontFace * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStyleFontFace * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStyleFontFace * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStyleFontFace * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStyleFontFaceVtbl;
    interface DispHTMLStyleFontFace
    {
        CONST_VTBL struct DispHTMLStyleFontFaceVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStyleFontFace;
class DECLSPEC_UUID("3050f3d4-98b5-11cf-bb82-00aa00bdce0b")
HTMLStyleFontFace;
EXTERN_C const IID IID_IHTMLXDomainRequest;
    typedef struct IHTMLXDomainRequestVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLXDomainRequest * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLXDomainRequest * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLXDomainRequest * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLXDomainRequest * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLXDomainRequest * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLXDomainRequest * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLXDomainRequest * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_responseText )(
            __RPC__in IHTMLXDomainRequest * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_timeout )(
            __RPC__in IHTMLXDomainRequest * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_timeout )(
            __RPC__in IHTMLXDomainRequest * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_contentType )(
            __RPC__in IHTMLXDomainRequest * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_onprogress )(
            __RPC__in IHTMLXDomainRequest * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_onprogress )(
            __RPC__in IHTMLXDomainRequest * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_onerror )(
            __RPC__in IHTMLXDomainRequest * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_onerror )(
            __RPC__in IHTMLXDomainRequest * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_ontimeout )(
            __RPC__in IHTMLXDomainRequest * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_ontimeout )(
            __RPC__in IHTMLXDomainRequest * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_onload )(
            __RPC__in IHTMLXDomainRequest * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_onload )(
            __RPC__in IHTMLXDomainRequest * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *abort )(
            __RPC__in IHTMLXDomainRequest * This);
                   HRESULT ( STDMETHODCALLTYPE *open )(
            __RPC__in IHTMLXDomainRequest * This,
                       __RPC__in BSTR bstrMethod,
                       __RPC__in BSTR bstrUrl);
                   HRESULT ( STDMETHODCALLTYPE *send )(
            __RPC__in IHTMLXDomainRequest * This,
                                 VARIANT varBody);
        END_INTERFACE
    } IHTMLXDomainRequestVtbl;
    interface IHTMLXDomainRequest
    {
        CONST_VTBL struct IHTMLXDomainRequestVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_responseText(This,p) )
    ( (This)->lpVtbl -> put_timeout(This,v) )
    ( (This)->lpVtbl -> get_timeout(This,p) )
    ( (This)->lpVtbl -> get_contentType(This,p) )
    ( (This)->lpVtbl -> put_onprogress(This,v) )
    ( (This)->lpVtbl -> get_onprogress(This,p) )
    ( (This)->lpVtbl -> put_onerror(This,v) )
    ( (This)->lpVtbl -> get_onerror(This,p) )
    ( (This)->lpVtbl -> put_ontimeout(This,v) )
    ( (This)->lpVtbl -> get_ontimeout(This,p) )
    ( (This)->lpVtbl -> put_onload(This,v) )
    ( (This)->lpVtbl -> get_onload(This,p) )
    ( (This)->lpVtbl -> abort(This) )
    ( (This)->lpVtbl -> open(This,bstrMethod,bstrUrl) )
    ( (This)->lpVtbl -> send(This,varBody) )
EXTERN_C const IID IID_IHTMLXDomainRequestFactory;
    typedef struct IHTMLXDomainRequestFactoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLXDomainRequestFactory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLXDomainRequestFactory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLXDomainRequestFactory * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLXDomainRequestFactory * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLXDomainRequestFactory * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLXDomainRequestFactory * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLXDomainRequestFactory * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *create )(
            __RPC__in IHTMLXDomainRequestFactory * This,
                                __RPC__deref_out_opt IHTMLXDomainRequest **__MIDL__IHTMLXDomainRequestFactory0000);
        END_INTERFACE
    } IHTMLXDomainRequestFactoryVtbl;
    interface IHTMLXDomainRequestFactory
    {
        CONST_VTBL struct IHTMLXDomainRequestFactoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> create(This,__MIDL__IHTMLXDomainRequestFactory0000) )
EXTERN_C const IID DIID_DispXDomainRequest;
    typedef struct DispXDomainRequestVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispXDomainRequest * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispXDomainRequest * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispXDomainRequest * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispXDomainRequest * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispXDomainRequest * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispXDomainRequest * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispXDomainRequest * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispXDomainRequestVtbl;
    interface DispXDomainRequest
    {
        CONST_VTBL struct DispXDomainRequestVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_XDomainRequest;
class DECLSPEC_UUID("30510455-98b5-11cf-bb82-00aa00bdce0b")
XDomainRequest;
EXTERN_C const CLSID CLSID_XDomainRequestFactory;
class DECLSPEC_UUID("30510457-98b5-11cf-bb82-00aa00bdce0b")
XDomainRequestFactory;
EXTERN_C const IID IID_IHTMLStorage2;
    typedef struct IHTMLStorage2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStorage2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStorage2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStorage2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStorage2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStorage2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStorage2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStorage2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *setItem )(
            __RPC__in IHTMLStorage2 * This,
                       __RPC__in BSTR bstrKey,
                       __RPC__in BSTR bstrValue);
        END_INTERFACE
    } IHTMLStorage2Vtbl;
    interface IHTMLStorage2
    {
        CONST_VTBL struct IHTMLStorage2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> setItem(This,bstrKey,bstrValue) )
EXTERN_C const IID DIID_DispHTMLStorage;
    typedef struct DispHTMLStorageVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStorage * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStorage * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStorage * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStorage * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStorage * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStorage * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStorage * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStorageVtbl;
    interface DispHTMLStorage
    {
        CONST_VTBL struct DispHTMLStorageVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStorage;
class DECLSPEC_UUID("30510475-98b5-11cf-bb82-00aa00bdce0b")
HTMLStorage;
EXTERN_C const IID IID_IEventTarget;
    typedef struct IEventTargetVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IEventTarget * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IEventTarget * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IEventTarget * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IEventTarget * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IEventTarget * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IEventTarget * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IEventTarget * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *addEventListener )(
            __RPC__in IEventTarget * This,
                       __RPC__in BSTR type,
                       __RPC__in_opt IDispatch *listener,
                       VARIANT_BOOL useCapture);
                   HRESULT ( STDMETHODCALLTYPE *removeEventListener )(
            __RPC__in IEventTarget * This,
                       __RPC__in BSTR type,
                       __RPC__in_opt IDispatch *listener,
                       VARIANT_BOOL useCapture);
                   HRESULT ( STDMETHODCALLTYPE *dispatchEvent )(
            __RPC__in IEventTarget * This,
                       __RPC__in_opt IDOMEvent *evt,
                                __RPC__out VARIANT_BOOL *pfResult);
        END_INTERFACE
    } IEventTargetVtbl;
    interface IEventTarget
    {
        CONST_VTBL struct IEventTargetVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> addEventListener(This,type,listener,useCapture) )
    ( (This)->lpVtbl -> removeEventListener(This,type,listener,useCapture) )
    ( (This)->lpVtbl -> dispatchEvent(This,evt,pfResult) )
EXTERN_C const IID DIID_DispDOMEvent;
    typedef struct DispDOMEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMEventVtbl;
    interface DispDOMEvent
    {
        CONST_VTBL struct DispDOMEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMEvent;
class DECLSPEC_UUID("305104bb-98b5-11cf-bb82-00aa00bdce0b")
DOMEvent;
EXTERN_C const IID IID_IDOMUIEvent;
    typedef struct IDOMUIEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMUIEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMUIEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMUIEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMUIEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMUIEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMUIEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMUIEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_view )(
            __RPC__in IDOMUIEvent * This,
                                __RPC__deref_out_opt IHTMLWindow2 **p);
                            HRESULT ( STDMETHODCALLTYPE *get_detail )(
            __RPC__in IDOMUIEvent * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *initUIEvent )(
            __RPC__in IDOMUIEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in_opt IHTMLWindow2 *view,
                       long detail);
        END_INTERFACE
    } IDOMUIEventVtbl;
    interface IDOMUIEvent
    {
        CONST_VTBL struct IDOMUIEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_view(This,p) )
    ( (This)->lpVtbl -> get_detail(This,p) )
    ( (This)->lpVtbl -> initUIEvent(This,eventType,canBubble,cancelable,view,detail) )
EXTERN_C const IID DIID_DispDOMUIEvent;
    typedef struct DispDOMUIEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMUIEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMUIEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMUIEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMUIEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMUIEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMUIEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMUIEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMUIEventVtbl;
    interface DispDOMUIEvent
    {
        CONST_VTBL struct DispDOMUIEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMUIEvent;
class DECLSPEC_UUID("305106cb-98b5-11cf-bb82-00aa00bdce0b")
DOMUIEvent;
EXTERN_C const IID IID_IDOMMouseEvent;
    typedef struct IDOMMouseEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMMouseEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMMouseEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMMouseEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMMouseEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMMouseEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMMouseEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMMouseEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_screenX )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_screenY )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_clientX )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_clientY )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_ctrlKey )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_shiftKey )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_altKey )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_metaKey )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_button )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_relatedTarget )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__deref_out_opt IEventTarget **p);
                   HRESULT ( STDMETHODCALLTYPE *initMouseEvent )(
            __RPC__in IDOMMouseEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in_opt IHTMLWindow2 *viewArg,
                       long detailArg,
                       long screenXArg,
                       long screenYArg,
                       long clientXArg,
                       long clientYArg,
                       VARIANT_BOOL ctrlKeyArg,
                       VARIANT_BOOL altKeyArg,
                       VARIANT_BOOL shiftKeyArg,
                       VARIANT_BOOL metaKeyArg,
                       USHORT buttonArg,
                       __RPC__in_opt IEventTarget *relatedTargetArg);
                   HRESULT ( STDMETHODCALLTYPE *getModifierState )(
            __RPC__in IDOMMouseEvent * This,
                       __RPC__in BSTR keyArg,
                                __RPC__out VARIANT_BOOL *activated);
                            HRESULT ( STDMETHODCALLTYPE *get_buttons )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fromElement )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_toElement )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetX )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_offsetY )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pageX )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pageY )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_layerX )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_layerY )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_which )(
            __RPC__in IDOMMouseEvent * This,
                                __RPC__out USHORT *p);
        END_INTERFACE
    } IDOMMouseEventVtbl;
    interface IDOMMouseEvent
    {
        CONST_VTBL struct IDOMMouseEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_screenX(This,p) )
    ( (This)->lpVtbl -> get_screenY(This,p) )
    ( (This)->lpVtbl -> get_clientX(This,p) )
    ( (This)->lpVtbl -> get_clientY(This,p) )
    ( (This)->lpVtbl -> get_ctrlKey(This,p) )
    ( (This)->lpVtbl -> get_shiftKey(This,p) )
    ( (This)->lpVtbl -> get_altKey(This,p) )
    ( (This)->lpVtbl -> get_metaKey(This,p) )
    ( (This)->lpVtbl -> get_button(This,p) )
    ( (This)->lpVtbl -> get_relatedTarget(This,p) )
    ( (This)->lpVtbl -> initMouseEvent(This,eventType,canBubble,cancelable,viewArg,detailArg,screenXArg,screenYArg,clientXArg,clientYArg,ctrlKeyArg,altKeyArg,shiftKeyArg,metaKeyArg,buttonArg,relatedTargetArg) )
    ( (This)->lpVtbl -> getModifierState(This,keyArg,activated) )
    ( (This)->lpVtbl -> get_buttons(This,p) )
    ( (This)->lpVtbl -> get_fromElement(This,p) )
    ( (This)->lpVtbl -> get_toElement(This,p) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> get_offsetX(This,p) )
    ( (This)->lpVtbl -> get_offsetY(This,p) )
    ( (This)->lpVtbl -> get_pageX(This,p) )
    ( (This)->lpVtbl -> get_pageY(This,p) )
    ( (This)->lpVtbl -> get_layerX(This,p) )
    ( (This)->lpVtbl -> get_layerY(This,p) )
    ( (This)->lpVtbl -> get_which(This,p) )
EXTERN_C const IID DIID_DispDOMMouseEvent;
    typedef struct DispDOMMouseEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMMouseEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMMouseEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMMouseEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMMouseEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMMouseEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMMouseEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMMouseEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMMouseEventVtbl;
    interface DispDOMMouseEvent
    {
        CONST_VTBL struct DispDOMMouseEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMMouseEvent;
class DECLSPEC_UUID("305106cf-98b5-11cf-bb82-00aa00bdce0b")
DOMMouseEvent;
EXTERN_C const IID IID_IDOMDragEvent;
    typedef struct IDOMDragEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMDragEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMDragEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMDragEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMDragEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMDragEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMDragEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMDragEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_dataTransfer )(
            __RPC__in IDOMDragEvent * This,
                                __RPC__deref_out_opt IHTMLDataTransfer **p);
                   HRESULT ( STDMETHODCALLTYPE *initDragEvent )(
            __RPC__in IDOMDragEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in_opt IHTMLWindow2 *viewArg,
                       long detailArg,
                       long screenXArg,
                       long screenYArg,
                       long clientXArg,
                       long clientYArg,
                       VARIANT_BOOL ctrlKeyArg,
                       VARIANT_BOOL altKeyArg,
                       VARIANT_BOOL shiftKeyArg,
                       VARIANT_BOOL metaKeyArg,
                       USHORT buttonArg,
                       __RPC__in_opt IEventTarget *relatedTargetArg,
                       __RPC__in_opt IHTMLDataTransfer *dataTransferArg);
        END_INTERFACE
    } IDOMDragEventVtbl;
    interface IDOMDragEvent
    {
        CONST_VTBL struct IDOMDragEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_dataTransfer(This,p) )
    ( (This)->lpVtbl -> initDragEvent(This,eventType,canBubble,cancelable,viewArg,detailArg,screenXArg,screenYArg,clientXArg,clientYArg,ctrlKeyArg,altKeyArg,shiftKeyArg,metaKeyArg,buttonArg,relatedTargetArg,dataTransferArg) )
EXTERN_C const IID DIID_DispDOMDragEvent;
    typedef struct DispDOMDragEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMDragEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMDragEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMDragEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMDragEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMDragEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMDragEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMDragEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMDragEventVtbl;
    interface DispDOMDragEvent
    {
        CONST_VTBL struct DispDOMDragEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMDragEvent;
class DECLSPEC_UUID("30510762-98b5-11cf-bb82-00aa00bdce0b")
DOMDragEvent;
EXTERN_C const IID IID_IDOMMouseWheelEvent;
    typedef struct IDOMMouseWheelEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMMouseWheelEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMMouseWheelEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMMouseWheelEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMMouseWheelEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMMouseWheelEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMMouseWheelEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMMouseWheelEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_wheelDelta )(
            __RPC__in IDOMMouseWheelEvent * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *initMouseWheelEvent )(
            __RPC__in IDOMMouseWheelEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in_opt IHTMLWindow2 *viewArg,
                       long detailArg,
                       long screenXArg,
                       long screenYArg,
                       long clientXArg,
                       long clientYArg,
                       USHORT buttonArg,
                       __RPC__in_opt IEventTarget *relatedTargetArg,
                       __RPC__in BSTR modifiersListArg,
                       long wheelDeltaArg);
        END_INTERFACE
    } IDOMMouseWheelEventVtbl;
    interface IDOMMouseWheelEvent
    {
        CONST_VTBL struct IDOMMouseWheelEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_wheelDelta(This,p) )
    ( (This)->lpVtbl -> initMouseWheelEvent(This,eventType,canBubble,cancelable,viewArg,detailArg,screenXArg,screenYArg,clientXArg,clientYArg,buttonArg,relatedTargetArg,modifiersListArg,wheelDeltaArg) )
EXTERN_C const IID DIID_DispDOMMouseWheelEvent;
    typedef struct DispDOMMouseWheelEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMMouseWheelEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMMouseWheelEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMMouseWheelEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMMouseWheelEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMMouseWheelEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMMouseWheelEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMMouseWheelEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMMouseWheelEventVtbl;
    interface DispDOMMouseWheelEvent
    {
        CONST_VTBL struct DispDOMMouseWheelEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMMouseWheelEvent;
class DECLSPEC_UUID("305106d1-98b5-11cf-bb82-00aa00bdce0b")
DOMMouseWheelEvent;
EXTERN_C const IID IID_IDOMWheelEvent;
    typedef struct IDOMWheelEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMWheelEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMWheelEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMWheelEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMWheelEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMWheelEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMWheelEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMWheelEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_deltaX )(
            __RPC__in IDOMWheelEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_deltaY )(
            __RPC__in IDOMWheelEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_deltaZ )(
            __RPC__in IDOMWheelEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_deltaMode )(
            __RPC__in IDOMWheelEvent * This,
                                __RPC__out ULONG *p);
                   HRESULT ( STDMETHODCALLTYPE *initWheelEvent )(
            __RPC__in IDOMWheelEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in_opt IHTMLWindow2 *viewArg,
                       long detailArg,
                       long screenXArg,
                       long screenYArg,
                       long clientXArg,
                       long clientYArg,
                       USHORT buttonArg,
                       __RPC__in_opt IEventTarget *relatedTargetArg,
                       __RPC__in BSTR modifiersListArg,
                       long deltaX,
                       long deltaY,
                       long deltaZ,
                       ULONG deltaMode);
        END_INTERFACE
    } IDOMWheelEventVtbl;
    interface IDOMWheelEvent
    {
        CONST_VTBL struct IDOMWheelEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_deltaX(This,p) )
    ( (This)->lpVtbl -> get_deltaY(This,p) )
    ( (This)->lpVtbl -> get_deltaZ(This,p) )
    ( (This)->lpVtbl -> get_deltaMode(This,p) )
    ( (This)->lpVtbl -> initWheelEvent(This,eventType,canBubble,cancelable,viewArg,detailArg,screenXArg,screenYArg,clientXArg,clientYArg,buttonArg,relatedTargetArg,modifiersListArg,deltaX,deltaY,deltaZ,deltaMode) )
EXTERN_C const IID DIID_DispDOMWheelEvent;
    typedef struct DispDOMWheelEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMWheelEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMWheelEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMWheelEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMWheelEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMWheelEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMWheelEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMWheelEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMWheelEventVtbl;
    interface DispDOMWheelEvent
    {
        CONST_VTBL struct DispDOMWheelEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMWheelEvent;
class DECLSPEC_UUID("305106d3-98b5-11cf-bb82-00aa00bdce0b")
DOMWheelEvent;
EXTERN_C const IID IID_IDOMTextEvent;
    typedef struct IDOMTextEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMTextEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMTextEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMTextEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMTextEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMTextEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMTextEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMTextEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_data )(
            __RPC__in IDOMTextEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_inputMethod )(
            __RPC__in IDOMTextEvent * This,
                                __RPC__out ULONG *p);
                   HRESULT ( STDMETHODCALLTYPE *initTextEvent )(
            __RPC__in IDOMTextEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in_opt IHTMLWindow2 *viewArg,
                       __RPC__in BSTR dataArg,
                       ULONG inputMethod,
                       __RPC__in BSTR locale);
                            HRESULT ( STDMETHODCALLTYPE *get_locale )(
            __RPC__in IDOMTextEvent * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IDOMTextEventVtbl;
    interface IDOMTextEvent
    {
        CONST_VTBL struct IDOMTextEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_data(This,p) )
    ( (This)->lpVtbl -> get_inputMethod(This,p) )
    ( (This)->lpVtbl -> initTextEvent(This,eventType,canBubble,cancelable,viewArg,dataArg,inputMethod,locale) )
    ( (This)->lpVtbl -> get_locale(This,p) )
EXTERN_C const IID DIID_DispDOMTextEvent;
    typedef struct DispDOMTextEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMTextEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMTextEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMTextEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMTextEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMTextEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMTextEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMTextEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMTextEventVtbl;
    interface DispDOMTextEvent
    {
        CONST_VTBL struct DispDOMTextEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMTextEvent;
class DECLSPEC_UUID("305106d5-98b5-11cf-bb82-00aa00bdce0b")
DOMTextEvent;
EXTERN_C const IID IID_IDOMKeyboardEvent;
    typedef struct IDOMKeyboardEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMKeyboardEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMKeyboardEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMKeyboardEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMKeyboardEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMKeyboardEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMKeyboardEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMKeyboardEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_key )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_location )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__out ULONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_ctrlKey )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_shiftKey )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_altKey )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_metaKey )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_repeat )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *getModifierState )(
            __RPC__in IDOMKeyboardEvent * This,
                       __RPC__in BSTR keyArg,
                                __RPC__out VARIANT_BOOL *state);
                   HRESULT ( STDMETHODCALLTYPE *initKeyboardEvent )(
            __RPC__in IDOMKeyboardEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in_opt IHTMLWindow2 *viewArg,
                       __RPC__in BSTR keyArg,
                       ULONG locationArg,
                       __RPC__in BSTR modifiersListArg,
                       VARIANT_BOOL repeat,
                       __RPC__in BSTR locale);
                            HRESULT ( STDMETHODCALLTYPE *get_keyCode )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_charCode )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_which )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_ie9_char )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_locale )(
            __RPC__in IDOMKeyboardEvent * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IDOMKeyboardEventVtbl;
    interface IDOMKeyboardEvent
    {
        CONST_VTBL struct IDOMKeyboardEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_key(This,p) )
    ( (This)->lpVtbl -> get_location(This,p) )
    ( (This)->lpVtbl -> get_ctrlKey(This,p) )
    ( (This)->lpVtbl -> get_shiftKey(This,p) )
    ( (This)->lpVtbl -> get_altKey(This,p) )
    ( (This)->lpVtbl -> get_metaKey(This,p) )
    ( (This)->lpVtbl -> get_repeat(This,p) )
    ( (This)->lpVtbl -> getModifierState(This,keyArg,state) )
    ( (This)->lpVtbl -> initKeyboardEvent(This,eventType,canBubble,cancelable,viewArg,keyArg,locationArg,modifiersListArg,repeat,locale) )
    ( (This)->lpVtbl -> get_keyCode(This,p) )
    ( (This)->lpVtbl -> get_charCode(This,p) )
    ( (This)->lpVtbl -> get_which(This,p) )
    ( (This)->lpVtbl -> get_ie9_char(This,p) )
    ( (This)->lpVtbl -> get_locale(This,p) )
EXTERN_C const IID DIID_DispDOMKeyboardEvent;
    typedef struct DispDOMKeyboardEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMKeyboardEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMKeyboardEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMKeyboardEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMKeyboardEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMKeyboardEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMKeyboardEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMKeyboardEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMKeyboardEventVtbl;
    interface DispDOMKeyboardEvent
    {
        CONST_VTBL struct DispDOMKeyboardEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMKeyboardEvent;
class DECLSPEC_UUID("305106d7-98b5-11cf-bb82-00aa00bdce0b")
DOMKeyboardEvent;
EXTERN_C const IID IID_IDOMCompositionEvent;
    typedef struct IDOMCompositionEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMCompositionEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMCompositionEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMCompositionEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMCompositionEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMCompositionEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMCompositionEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMCompositionEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_data )(
            __RPC__in IDOMCompositionEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *initCompositionEvent )(
            __RPC__in IDOMCompositionEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in_opt IHTMLWindow2 *viewArg,
                       __RPC__in BSTR data,
                       __RPC__in BSTR locale);
                            HRESULT ( STDMETHODCALLTYPE *get_locale )(
            __RPC__in IDOMCompositionEvent * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IDOMCompositionEventVtbl;
    interface IDOMCompositionEvent
    {
        CONST_VTBL struct IDOMCompositionEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_data(This,p) )
    ( (This)->lpVtbl -> initCompositionEvent(This,eventType,canBubble,cancelable,viewArg,data,locale) )
    ( (This)->lpVtbl -> get_locale(This,p) )
EXTERN_C const IID DIID_DispDOMCompositionEvent;
    typedef struct DispDOMCompositionEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMCompositionEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMCompositionEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMCompositionEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMCompositionEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMCompositionEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMCompositionEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMCompositionEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMCompositionEventVtbl;
    interface DispDOMCompositionEvent
    {
        CONST_VTBL struct DispDOMCompositionEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMCompositionEvent;
class DECLSPEC_UUID("305106d9-98b5-11cf-bb82-00aa00bdce0b")
DOMCompositionEvent;
EXTERN_C const IID IID_IDOMMutationEvent;
    typedef struct IDOMMutationEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMMutationEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMMutationEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMMutationEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMMutationEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMMutationEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMMutationEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMMutationEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_relatedNode )(
            __RPC__in IDOMMutationEvent * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_prevValue )(
            __RPC__in IDOMMutationEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_newValue )(
            __RPC__in IDOMMutationEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_attrName )(
            __RPC__in IDOMMutationEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_attrChange )(
            __RPC__in IDOMMutationEvent * This,
                                __RPC__out USHORT *p);
                   HRESULT ( STDMETHODCALLTYPE *initMutationEvent )(
            __RPC__in IDOMMutationEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in_opt IDispatch *relatedNodeArg,
                       __RPC__in BSTR prevValueArg,
                       __RPC__in BSTR newValueArg,
                       __RPC__in BSTR attrNameArg,
                       USHORT attrChangeArg);
        END_INTERFACE
    } IDOMMutationEventVtbl;
    interface IDOMMutationEvent
    {
        CONST_VTBL struct IDOMMutationEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_relatedNode(This,p) )
    ( (This)->lpVtbl -> get_prevValue(This,p) )
    ( (This)->lpVtbl -> get_newValue(This,p) )
    ( (This)->lpVtbl -> get_attrName(This,p) )
    ( (This)->lpVtbl -> get_attrChange(This,p) )
    ( (This)->lpVtbl -> initMutationEvent(This,eventType,canBubble,cancelable,relatedNodeArg,prevValueArg,newValueArg,attrNameArg,attrChangeArg) )
EXTERN_C const IID DIID_DispDOMMutationEvent;
    typedef struct DispDOMMutationEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMMutationEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMMutationEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMMutationEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMMutationEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMMutationEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMMutationEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMMutationEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMMutationEventVtbl;
    interface DispDOMMutationEvent
    {
        CONST_VTBL struct DispDOMMutationEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMMutationEvent;
class DECLSPEC_UUID("305106db-98b5-11cf-bb82-00aa00bdce0b")
DOMMutationEvent;
EXTERN_C const IID IID_IDOMBeforeUnloadEvent;
    typedef struct IDOMBeforeUnloadEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMBeforeUnloadEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMBeforeUnloadEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMBeforeUnloadEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMBeforeUnloadEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMBeforeUnloadEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMBeforeUnloadEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMBeforeUnloadEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_returnValue )(
            __RPC__in IDOMBeforeUnloadEvent * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_returnValue )(
            __RPC__in IDOMBeforeUnloadEvent * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IDOMBeforeUnloadEventVtbl;
    interface IDOMBeforeUnloadEvent
    {
        CONST_VTBL struct IDOMBeforeUnloadEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_returnValue(This,v) )
    ( (This)->lpVtbl -> get_returnValue(This,p) )
EXTERN_C const IID DIID_DispDOMBeforeUnloadEvent;
    typedef struct DispDOMBeforeUnloadEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMBeforeUnloadEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMBeforeUnloadEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMBeforeUnloadEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMBeforeUnloadEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMBeforeUnloadEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMBeforeUnloadEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMBeforeUnloadEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMBeforeUnloadEventVtbl;
    interface DispDOMBeforeUnloadEvent
    {
        CONST_VTBL struct DispDOMBeforeUnloadEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMBeforeUnloadEvent;
class DECLSPEC_UUID("30510764-98b5-11cf-bb82-00aa00bdce0b")
DOMBeforeUnloadEvent;
EXTERN_C const IID IID_IDOMFocusEvent;
    typedef struct IDOMFocusEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMFocusEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMFocusEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMFocusEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMFocusEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMFocusEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMFocusEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMFocusEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_relatedTarget )(
            __RPC__in IDOMFocusEvent * This,
                                __RPC__deref_out_opt IEventTarget **p);
                   HRESULT ( STDMETHODCALLTYPE *initFocusEvent )(
            __RPC__in IDOMFocusEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in_opt IHTMLWindow2 *view,
                       long detail,
                       __RPC__in_opt IEventTarget *relatedTargetArg);
        END_INTERFACE
    } IDOMFocusEventVtbl;
    interface IDOMFocusEvent
    {
        CONST_VTBL struct IDOMFocusEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_relatedTarget(This,p) )
    ( (This)->lpVtbl -> initFocusEvent(This,eventType,canBubble,cancelable,view,detail,relatedTargetArg) )
EXTERN_C const IID DIID_DispDOMFocusEvent;
    typedef struct DispDOMFocusEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMFocusEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMFocusEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMFocusEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMFocusEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMFocusEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMFocusEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMFocusEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMFocusEventVtbl;
    interface DispDOMFocusEvent
    {
        CONST_VTBL struct DispDOMFocusEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMFocusEvent;
class DECLSPEC_UUID("305106cd-98b5-11cf-bb82-00aa00bdce0b")
DOMFocusEvent;
EXTERN_C const IID IID_IDOMCustomEvent;
    typedef struct IDOMCustomEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMCustomEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMCustomEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMCustomEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMCustomEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMCustomEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMCustomEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMCustomEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_detail )(
            __RPC__in IDOMCustomEvent * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *initCustomEvent )(
            __RPC__in IDOMCustomEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in VARIANT *detail);
        END_INTERFACE
    } IDOMCustomEventVtbl;
    interface IDOMCustomEvent
    {
        CONST_VTBL struct IDOMCustomEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_detail(This,p) )
    ( (This)->lpVtbl -> initCustomEvent(This,eventType,canBubble,cancelable,detail) )
EXTERN_C const IID DIID_DispDOMCustomEvent;
    typedef struct DispDOMCustomEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMCustomEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMCustomEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMCustomEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMCustomEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMCustomEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMCustomEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMCustomEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMCustomEventVtbl;
    interface DispDOMCustomEvent
    {
        CONST_VTBL struct DispDOMCustomEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMCustomEvent;
class DECLSPEC_UUID("305106df-98b5-11cf-bb82-00aa00bdce0b")
DOMCustomEvent;
EXTERN_C const IID IID_ICanvasGradient;
    typedef struct ICanvasGradientVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ICanvasGradient * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ICanvasGradient * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ICanvasGradient * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ICanvasGradient * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ICanvasGradient * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ICanvasGradient * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ICanvasGradient * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *addColorStop )(
            __RPC__in ICanvasGradient * This,
                       float offset,
                       __RPC__in BSTR color);
        END_INTERFACE
    } ICanvasGradientVtbl;
    interface ICanvasGradient
    {
        CONST_VTBL struct ICanvasGradientVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> addColorStop(This,offset,color) )
EXTERN_C const IID IID_ICanvasPattern;
    typedef struct ICanvasPatternVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ICanvasPattern * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ICanvasPattern * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ICanvasPattern * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ICanvasPattern * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ICanvasPattern * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ICanvasPattern * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ICanvasPattern * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ICanvasPatternVtbl;
    interface ICanvasPattern
    {
        CONST_VTBL struct ICanvasPatternVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_ICanvasTextMetrics;
    typedef struct ICanvasTextMetricsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ICanvasTextMetrics * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ICanvasTextMetrics * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ICanvasTextMetrics * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ICanvasTextMetrics * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ICanvasTextMetrics * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ICanvasTextMetrics * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ICanvasTextMetrics * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in ICanvasTextMetrics * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ICanvasTextMetricsVtbl;
    interface ICanvasTextMetrics
    {
        CONST_VTBL struct ICanvasTextMetricsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_width(This,p) )
EXTERN_C const IID IID_ICanvasImageData;
    typedef struct ICanvasImageDataVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ICanvasImageData * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ICanvasImageData * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ICanvasImageData * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ICanvasImageData * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ICanvasImageData * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ICanvasImageData * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ICanvasImageData * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in ICanvasImageData * This,
                                __RPC__out ULONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in ICanvasImageData * This,
                                __RPC__out ULONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_data )(
            __RPC__in ICanvasImageData * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } ICanvasImageDataVtbl;
    interface ICanvasImageData
    {
        CONST_VTBL struct ICanvasImageDataVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> get_data(This,p) )
EXTERN_C const IID IID_ICanvasPixelArray;
    typedef struct ICanvasPixelArrayVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ICanvasPixelArray * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ICanvasPixelArray * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ICanvasPixelArray * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ICanvasPixelArray * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ICanvasPixelArray * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ICanvasPixelArray * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ICanvasPixelArray * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in ICanvasPixelArray * This,
                                __RPC__out ULONG *p);
        END_INTERFACE
    } ICanvasPixelArrayVtbl;
    interface ICanvasPixelArray
    {
        CONST_VTBL struct ICanvasPixelArrayVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
EXTERN_C const IID IID_IHTMLCanvasElement;
    typedef struct IHTMLCanvasElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCanvasElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCanvasElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCanvasElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLCanvasElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLCanvasElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLCanvasElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLCanvasElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLCanvasElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLCanvasElement * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLCanvasElement * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLCanvasElement * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *getContext )(
            __RPC__in IHTMLCanvasElement * This,
                       __RPC__in BSTR contextId,
                                __RPC__deref_out_opt ICanvasRenderingContext2D **ppContext);
                   HRESULT ( STDMETHODCALLTYPE *toDataURL )(
            __RPC__in IHTMLCanvasElement * This,
                       __RPC__in BSTR type,
                       VARIANT jpegquality,
                                __RPC__deref_out_opt BSTR *pUrl);
        END_INTERFACE
    } IHTMLCanvasElementVtbl;
    interface IHTMLCanvasElement
    {
        CONST_VTBL struct IHTMLCanvasElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> getContext(This,contextId,ppContext) )
    ( (This)->lpVtbl -> toDataURL(This,type,jpegquality,pUrl) )
EXTERN_C const IID IID_ICanvasRenderingContext2D;
    typedef struct ICanvasRenderingContext2DVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ICanvasRenderingContext2D * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ICanvasRenderingContext2D * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ICanvasRenderingContext2D * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ICanvasRenderingContext2D * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ICanvasRenderingContext2D * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_canvas )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__deref_out_opt IHTMLCanvasElement **p);
                   HRESULT ( STDMETHODCALLTYPE *restore )(
            __RPC__in ICanvasRenderingContext2D * This);
                   HRESULT ( STDMETHODCALLTYPE *save )(
            __RPC__in ICanvasRenderingContext2D * This);
                   HRESULT ( STDMETHODCALLTYPE *rotate )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float angle);
                   HRESULT ( STDMETHODCALLTYPE *scale )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x,
                       float y);
                   HRESULT ( STDMETHODCALLTYPE *setTransform )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float m11,
                       float m12,
                       float m21,
                       float m22,
                       float dx,
                       float dy);
                   HRESULT ( STDMETHODCALLTYPE *transform )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float m11,
                       float m12,
                       float m21,
                       float m22,
                       float dx,
                       float dy);
                   HRESULT ( STDMETHODCALLTYPE *translate )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x,
                       float y);
                            HRESULT ( STDMETHODCALLTYPE *put_globalAlpha )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_globalAlpha )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_globalCompositeOperation )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_globalCompositeOperation )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_fillStyle )(
            __RPC__in ICanvasRenderingContext2D * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_fillStyle )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_strokeStyle )(
            __RPC__in ICanvasRenderingContext2D * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_strokeStyle )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *createLinearGradient )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x0,
                       float y0,
                       float x1,
                       float y1,
                                __RPC__deref_out_opt ICanvasGradient **ppCanvasGradient);
                   HRESULT ( STDMETHODCALLTYPE *createRadialGradient )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x0,
                       float y0,
                       float r0,
                       float x1,
                       float y1,
                       float r1,
                                __RPC__deref_out_opt ICanvasGradient **ppCanvasGradient);
                   HRESULT ( STDMETHODCALLTYPE *createPattern )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in_opt IDispatch *image,
                       VARIANT repetition,
                                __RPC__deref_out_opt ICanvasPattern **ppCanvasPattern);
                            HRESULT ( STDMETHODCALLTYPE *put_lineCap )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_lineCap )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_lineJoin )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_lineJoin )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_lineWidth )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_lineWidth )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_miterLimit )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_miterLimit )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_shadowBlur )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_shadowBlur )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_shadowColor )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_shadowColor )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_shadowOffsetX )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_shadowOffsetX )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_shadowOffsetY )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_shadowOffsetY )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__out float *p);
                   HRESULT ( STDMETHODCALLTYPE *clearRect )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x,
                       float y,
                       float w,
                       float h);
                   HRESULT ( STDMETHODCALLTYPE *fillRect )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x,
                       float y,
                       float w,
                       float h);
                   HRESULT ( STDMETHODCALLTYPE *strokeRect )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x,
                       float y,
                       float w,
                       float h);
                   HRESULT ( STDMETHODCALLTYPE *arc )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x,
                       float y,
                       float radius,
                       float startAngle,
                       float endAngle,
                       BOOL anticlockwise);
                   HRESULT ( STDMETHODCALLTYPE *arcTo )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x1,
                       float y1,
                       float x2,
                       float y2,
                       float radius);
                   HRESULT ( STDMETHODCALLTYPE *beginPath )(
            __RPC__in ICanvasRenderingContext2D * This);
                   HRESULT ( STDMETHODCALLTYPE *bezierCurveTo )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float cp1x,
                       float cp1y,
                       float cp2x,
                       float cp2y,
                       float x,
                       float y);
                   HRESULT ( STDMETHODCALLTYPE *clip )(
            __RPC__in ICanvasRenderingContext2D * This);
                   HRESULT ( STDMETHODCALLTYPE *closePath )(
            __RPC__in ICanvasRenderingContext2D * This);
                   HRESULT ( STDMETHODCALLTYPE *fill )(
            __RPC__in ICanvasRenderingContext2D * This);
                   HRESULT ( STDMETHODCALLTYPE *lineTo )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x,
                       float y);
                   HRESULT ( STDMETHODCALLTYPE *moveTo )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x,
                       float y);
                   HRESULT ( STDMETHODCALLTYPE *quadraticCurveTo )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float cpx,
                       float cpy,
                       float x,
                       float y);
                   HRESULT ( STDMETHODCALLTYPE *rect )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x,
                       float y,
                       float w,
                       float h);
                   HRESULT ( STDMETHODCALLTYPE *stroke )(
            __RPC__in ICanvasRenderingContext2D * This);
                   HRESULT ( STDMETHODCALLTYPE *isPointInPath )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float x,
                       float y,
                                __RPC__out VARIANT_BOOL *pResult);
                            HRESULT ( STDMETHODCALLTYPE *put_font )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_font )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_textAlign )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_textAlign )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_textBaseline )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_textBaseline )(
            __RPC__in ICanvasRenderingContext2D * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *fillText )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in BSTR text,
                       float x,
                       float y,
                       VARIANT maxWidth);
                   HRESULT ( STDMETHODCALLTYPE *measureText )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in BSTR text,
                                __RPC__deref_out_opt ICanvasTextMetrics **ppCanvasTextMetrics);
                   HRESULT ( STDMETHODCALLTYPE *strokeText )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in BSTR text,
                       float x,
                       float y,
                       VARIANT maxWidth);
                   HRESULT ( STDMETHODCALLTYPE *drawImage )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in_opt IDispatch *pSrc,
                       VARIANT a1,
                       VARIANT a2,
                       VARIANT a3,
                       VARIANT a4,
                       VARIANT a5,
                       VARIANT a6,
                       VARIANT a7,
                       VARIANT a8);
                   HRESULT ( STDMETHODCALLTYPE *createImageData )(
            __RPC__in ICanvasRenderingContext2D * This,
                       VARIANT a1,
                       VARIANT a2,
                                __RPC__deref_out_opt ICanvasImageData **ppCanvasImageData);
                   HRESULT ( STDMETHODCALLTYPE *getImageData )(
            __RPC__in ICanvasRenderingContext2D * This,
                       float sx,
                       float sy,
                       float sw,
                       float sh,
                                __RPC__deref_out_opt ICanvasImageData **ppCanvasImageData);
                   HRESULT ( STDMETHODCALLTYPE *putImageData )(
            __RPC__in ICanvasRenderingContext2D * This,
                       __RPC__in_opt ICanvasImageData *imagedata,
                       float dx,
                       float dy,
                       VARIANT dirtyX,
                       VARIANT dirtyY,
                       VARIANT dirtyWidth,
                       VARIANT dirtyHeight);
        END_INTERFACE
    } ICanvasRenderingContext2DVtbl;
    interface ICanvasRenderingContext2D
    {
        CONST_VTBL struct ICanvasRenderingContext2DVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_canvas(This,p) )
    ( (This)->lpVtbl -> restore(This) )
    ( (This)->lpVtbl -> save(This) )
    ( (This)->lpVtbl -> rotate(This,angle) )
    ( (This)->lpVtbl -> scale(This,x,y) )
    ( (This)->lpVtbl -> setTransform(This,m11,m12,m21,m22,dx,dy) )
    ( (This)->lpVtbl -> transform(This,m11,m12,m21,m22,dx,dy) )
    ( (This)->lpVtbl -> translate(This,x,y) )
    ( (This)->lpVtbl -> put_globalAlpha(This,v) )
    ( (This)->lpVtbl -> get_globalAlpha(This,p) )
    ( (This)->lpVtbl -> put_globalCompositeOperation(This,v) )
    ( (This)->lpVtbl -> get_globalCompositeOperation(This,p) )
    ( (This)->lpVtbl -> put_fillStyle(This,v) )
    ( (This)->lpVtbl -> get_fillStyle(This,p) )
    ( (This)->lpVtbl -> put_strokeStyle(This,v) )
    ( (This)->lpVtbl -> get_strokeStyle(This,p) )
    ( (This)->lpVtbl -> createLinearGradient(This,x0,y0,x1,y1,ppCanvasGradient) )
    ( (This)->lpVtbl -> createRadialGradient(This,x0,y0,r0,x1,y1,r1,ppCanvasGradient) )
    ( (This)->lpVtbl -> createPattern(This,image,repetition,ppCanvasPattern) )
    ( (This)->lpVtbl -> put_lineCap(This,v) )
    ( (This)->lpVtbl -> get_lineCap(This,p) )
    ( (This)->lpVtbl -> put_lineJoin(This,v) )
    ( (This)->lpVtbl -> get_lineJoin(This,p) )
    ( (This)->lpVtbl -> put_lineWidth(This,v) )
    ( (This)->lpVtbl -> get_lineWidth(This,p) )
    ( (This)->lpVtbl -> put_miterLimit(This,v) )
    ( (This)->lpVtbl -> get_miterLimit(This,p) )
    ( (This)->lpVtbl -> put_shadowBlur(This,v) )
    ( (This)->lpVtbl -> get_shadowBlur(This,p) )
    ( (This)->lpVtbl -> put_shadowColor(This,v) )
    ( (This)->lpVtbl -> get_shadowColor(This,p) )
    ( (This)->lpVtbl -> put_shadowOffsetX(This,v) )
    ( (This)->lpVtbl -> get_shadowOffsetX(This,p) )
    ( (This)->lpVtbl -> put_shadowOffsetY(This,v) )
    ( (This)->lpVtbl -> get_shadowOffsetY(This,p) )
    ( (This)->lpVtbl -> clearRect(This,x,y,w,h) )
    ( (This)->lpVtbl -> fillRect(This,x,y,w,h) )
    ( (This)->lpVtbl -> strokeRect(This,x,y,w,h) )
    ( (This)->lpVtbl -> arc(This,x,y,radius,startAngle,endAngle,anticlockwise) )
    ( (This)->lpVtbl -> arcTo(This,x1,y1,x2,y2,radius) )
    ( (This)->lpVtbl -> beginPath(This) )
    ( (This)->lpVtbl -> bezierCurveTo(This,cp1x,cp1y,cp2x,cp2y,x,y) )
    ( (This)->lpVtbl -> clip(This) )
    ( (This)->lpVtbl -> closePath(This) )
    ( (This)->lpVtbl -> fill(This) )
    ( (This)->lpVtbl -> lineTo(This,x,y) )
    ( (This)->lpVtbl -> moveTo(This,x,y) )
    ( (This)->lpVtbl -> quadraticCurveTo(This,cpx,cpy,x,y) )
    ( (This)->lpVtbl -> rect(This,x,y,w,h) )
    ( (This)->lpVtbl -> stroke(This) )
    ( (This)->lpVtbl -> isPointInPath(This,x,y,pResult) )
    ( (This)->lpVtbl -> put_font(This,v) )
    ( (This)->lpVtbl -> get_font(This,p) )
    ( (This)->lpVtbl -> put_textAlign(This,v) )
    ( (This)->lpVtbl -> get_textAlign(This,p) )
    ( (This)->lpVtbl -> put_textBaseline(This,v) )
    ( (This)->lpVtbl -> get_textBaseline(This,p) )
    ( (This)->lpVtbl -> fillText(This,text,x,y,maxWidth) )
    ( (This)->lpVtbl -> measureText(This,text,ppCanvasTextMetrics) )
    ( (This)->lpVtbl -> strokeText(This,text,x,y,maxWidth) )
    ( (This)->lpVtbl -> drawImage(This,pSrc,a1,a2,a3,a4,a5,a6,a7,a8) )
    ( (This)->lpVtbl -> createImageData(This,a1,a2,ppCanvasImageData) )
    ( (This)->lpVtbl -> getImageData(This,sx,sy,sw,sh,ppCanvasImageData) )
    ( (This)->lpVtbl -> putImageData(This,imagedata,dx,dy,dirtyX,dirtyY,dirtyWidth,dirtyHeight) )
EXTERN_C const IID DIID_DispCanvasGradient;
    typedef struct DispCanvasGradientVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispCanvasGradient * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispCanvasGradient * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispCanvasGradient * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispCanvasGradient * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispCanvasGradient * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispCanvasGradient * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispCanvasGradient * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispCanvasGradientVtbl;
    interface DispCanvasGradient
    {
        CONST_VTBL struct DispCanvasGradientVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_CanvasGradient;
class DECLSPEC_UUID("30510715-98b5-11cf-bb82-00aa00bdce0b")
CanvasGradient;
EXTERN_C const IID DIID_DispCanvasPattern;
    typedef struct DispCanvasPatternVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispCanvasPattern * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispCanvasPattern * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispCanvasPattern * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispCanvasPattern * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispCanvasPattern * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispCanvasPattern * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispCanvasPattern * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispCanvasPatternVtbl;
    interface DispCanvasPattern
    {
        CONST_VTBL struct DispCanvasPatternVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_CanvasPattern;
class DECLSPEC_UUID("30510717-98b5-11cf-bb82-00aa00bdce0b")
CanvasPattern;
EXTERN_C const IID DIID_DispCanvasTextMetrics;
    typedef struct DispCanvasTextMetricsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispCanvasTextMetrics * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispCanvasTextMetrics * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispCanvasTextMetrics * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispCanvasTextMetrics * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispCanvasTextMetrics * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispCanvasTextMetrics * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispCanvasTextMetrics * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispCanvasTextMetricsVtbl;
    interface DispCanvasTextMetrics
    {
        CONST_VTBL struct DispCanvasTextMetricsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_CanvasTextMetrics;
class DECLSPEC_UUID("30510719-98b5-11cf-bb82-00aa00bdce0b")
CanvasTextMetrics;
EXTERN_C const IID DIID_DispCanvasImageData;
    typedef struct DispCanvasImageDataVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispCanvasImageData * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispCanvasImageData * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispCanvasImageData * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispCanvasImageData * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispCanvasImageData * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispCanvasImageData * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispCanvasImageData * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispCanvasImageDataVtbl;
    interface DispCanvasImageData
    {
        CONST_VTBL struct DispCanvasImageDataVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_CanvasImageData;
class DECLSPEC_UUID("3051071b-98b5-11cf-bb82-00aa00bdce0b")
CanvasImageData;
EXTERN_C const IID DIID_DispCanvasRenderingContext2D;
    typedef struct DispCanvasRenderingContext2DVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispCanvasRenderingContext2D * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispCanvasRenderingContext2D * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispCanvasRenderingContext2D * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispCanvasRenderingContext2D * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispCanvasRenderingContext2D * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispCanvasRenderingContext2D * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispCanvasRenderingContext2D * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispCanvasRenderingContext2DVtbl;
    interface DispCanvasRenderingContext2D
    {
        CONST_VTBL struct DispCanvasRenderingContext2DVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_CanvasRenderingContext2D;
class DECLSPEC_UUID("30510700-98b5-11cf-bb82-00aa00bdce0b")
CanvasRenderingContext2D;
EXTERN_C const IID DIID_DispHTMLCanvasElement;
    typedef struct DispHTMLCanvasElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLCanvasElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLCanvasElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLCanvasElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLCanvasElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLCanvasElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLCanvasElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLCanvasElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLCanvasElementVtbl;
    interface DispHTMLCanvasElement
    {
        CONST_VTBL struct DispHTMLCanvasElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLCanvasElement;
class DECLSPEC_UUID("305106e5-98b5-11cf-bb82-00aa00bdce0b")
HTMLCanvasElement;
EXTERN_C const IID IID_IDOMProgressEvent;
    typedef struct IDOMProgressEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMProgressEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMProgressEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMProgressEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMProgressEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMProgressEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMProgressEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMProgressEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_lengthComputable )(
            __RPC__in IDOMProgressEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_loaded )(
            __RPC__in IDOMProgressEvent * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_total )(
            __RPC__in IDOMProgressEvent * This,
                                __RPC__out ULONGLONG *p);
                   HRESULT ( STDMETHODCALLTYPE *initProgressEvent )(
            __RPC__in IDOMProgressEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       VARIANT_BOOL lengthComputableArg,
                       ULONGLONG loadedArg,
                       ULONGLONG totalArg);
        END_INTERFACE
    } IDOMProgressEventVtbl;
    interface IDOMProgressEvent
    {
        CONST_VTBL struct IDOMProgressEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_lengthComputable(This,p) )
    ( (This)->lpVtbl -> get_loaded(This,p) )
    ( (This)->lpVtbl -> get_total(This,p) )
    ( (This)->lpVtbl -> initProgressEvent(This,eventType,canBubble,cancelable,lengthComputableArg,loadedArg,totalArg) )
EXTERN_C const IID DIID_DispDOMProgressEvent;
    typedef struct DispDOMProgressEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMProgressEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMProgressEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMProgressEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMProgressEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMProgressEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMProgressEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMProgressEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMProgressEventVtbl;
    interface DispDOMProgressEvent
    {
        CONST_VTBL struct DispDOMProgressEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMProgressEvent;
class DECLSPEC_UUID("3051071f-98b5-11cf-bb82-00aa00bdce0b")
DOMProgressEvent;
EXTERN_C const IID IID_IDOMMessageEvent;
    typedef struct IDOMMessageEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMMessageEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMMessageEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMMessageEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMMessageEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMMessageEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMMessageEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMMessageEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_data )(
            __RPC__in IDOMMessageEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_origin )(
            __RPC__in IDOMMessageEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_source )(
            __RPC__in IDOMMessageEvent * This,
                                __RPC__deref_out_opt IHTMLWindow2 **p);
                   HRESULT ( STDMETHODCALLTYPE *initMessageEvent )(
            __RPC__in IDOMMessageEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in BSTR data,
                       __RPC__in BSTR origin,
                       __RPC__in BSTR lastEventId,
                       __RPC__in_opt IHTMLWindow2 *source);
        END_INTERFACE
    } IDOMMessageEventVtbl;
    interface IDOMMessageEvent
    {
        CONST_VTBL struct IDOMMessageEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_data(This,p) )
    ( (This)->lpVtbl -> get_origin(This,p) )
    ( (This)->lpVtbl -> get_source(This,p) )
    ( (This)->lpVtbl -> initMessageEvent(This,eventType,canBubble,cancelable,data,origin,lastEventId,source) )
EXTERN_C const IID DIID_DispDOMMessageEvent;
    typedef struct DispDOMMessageEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMMessageEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMMessageEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMMessageEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMMessageEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMMessageEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMMessageEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMMessageEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMMessageEventVtbl;
    interface DispDOMMessageEvent
    {
        CONST_VTBL struct DispDOMMessageEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMMessageEvent;
class DECLSPEC_UUID("30510721-98b5-11cf-bb82-00aa00bdce0b")
DOMMessageEvent;
EXTERN_C const IID IID_IDOMSiteModeEvent;
    typedef struct IDOMSiteModeEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMSiteModeEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMSiteModeEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMSiteModeEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMSiteModeEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMSiteModeEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMSiteModeEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMSiteModeEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_buttonID )(
            __RPC__in IDOMSiteModeEvent * This,
                                __RPC__out LONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_actionURL )(
            __RPC__in IDOMSiteModeEvent * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IDOMSiteModeEventVtbl;
    interface IDOMSiteModeEvent
    {
        CONST_VTBL struct IDOMSiteModeEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_buttonID(This,p) )
    ( (This)->lpVtbl -> get_actionURL(This,p) )
EXTERN_C const IID DIID_DispDOMSiteModeEvent;
    typedef struct DispDOMSiteModeEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMSiteModeEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMSiteModeEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMSiteModeEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMSiteModeEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMSiteModeEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMSiteModeEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMSiteModeEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMSiteModeEventVtbl;
    interface DispDOMSiteModeEvent
    {
        CONST_VTBL struct DispDOMSiteModeEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMSiteModeEvent;
class DECLSPEC_UUID("30510766-98b6-11cf-bb82-00aa00bdce0b")
DOMSiteModeEvent;
EXTERN_C const IID IID_IDOMStorageEvent;
    typedef struct IDOMStorageEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMStorageEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMStorageEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMStorageEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMStorageEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMStorageEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMStorageEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMStorageEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_key )(
            __RPC__in IDOMStorageEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_oldValue )(
            __RPC__in IDOMStorageEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_newValue )(
            __RPC__in IDOMStorageEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_url )(
            __RPC__in IDOMStorageEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_storageArea )(
            __RPC__in IDOMStorageEvent * This,
                                __RPC__deref_out_opt IHTMLStorage **p);
                   HRESULT ( STDMETHODCALLTYPE *initStorageEvent )(
            __RPC__in IDOMStorageEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in BSTR keyArg,
                       __RPC__in BSTR oldValueArg,
                       __RPC__in BSTR newValueArg,
                       __RPC__in BSTR urlArg,
                       __RPC__in_opt IHTMLStorage *storageAreaArg);
        END_INTERFACE
    } IDOMStorageEventVtbl;
    interface IDOMStorageEvent
    {
        CONST_VTBL struct IDOMStorageEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_key(This,p) )
    ( (This)->lpVtbl -> get_oldValue(This,p) )
    ( (This)->lpVtbl -> get_newValue(This,p) )
    ( (This)->lpVtbl -> get_url(This,p) )
    ( (This)->lpVtbl -> get_storageArea(This,p) )
    ( (This)->lpVtbl -> initStorageEvent(This,eventType,canBubble,cancelable,keyArg,oldValueArg,newValueArg,urlArg,storageAreaArg) )
EXTERN_C const IID DIID_DispDOMStorageEvent;
    typedef struct DispDOMStorageEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMStorageEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMStorageEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMStorageEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMStorageEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMStorageEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMStorageEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMStorageEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMStorageEventVtbl;
    interface DispDOMStorageEvent
    {
        CONST_VTBL struct DispDOMStorageEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMStorageEvent;
class DECLSPEC_UUID("30510723-98b5-11cf-bb82-00aa00bdce0b")
DOMStorageEvent;
EXTERN_C const IID IID_IXMLHttpRequestEventTarget;
    typedef struct IXMLHttpRequestEventTargetVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IXMLHttpRequestEventTarget * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IXMLHttpRequestEventTarget * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IXMLHttpRequestEventTarget * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IXMLHttpRequestEventTarget * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IXMLHttpRequestEventTarget * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IXMLHttpRequestEventTarget * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IXMLHttpRequestEventTarget * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } IXMLHttpRequestEventTargetVtbl;
    interface IXMLHttpRequestEventTarget
    {
        CONST_VTBL struct IXMLHttpRequestEventTargetVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispXMLHttpRequestEventTarget;
    typedef struct DispXMLHttpRequestEventTargetVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispXMLHttpRequestEventTarget * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispXMLHttpRequestEventTarget * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispXMLHttpRequestEventTarget * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispXMLHttpRequestEventTarget * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispXMLHttpRequestEventTarget * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispXMLHttpRequestEventTarget * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispXMLHttpRequestEventTarget * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispXMLHttpRequestEventTargetVtbl;
    interface DispXMLHttpRequestEventTarget
    {
        CONST_VTBL struct DispXMLHttpRequestEventTargetVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_XMLHttpRequestEventTarget;
class DECLSPEC_UUID("30510831-98b5-11cf-bb82-00aa00bdce0b")
XMLHttpRequestEventTarget;
EXTERN_C const IID DIID_HTMLXMLHttpRequestEvents;
    typedef struct HTMLXMLHttpRequestEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLXMLHttpRequestEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLXMLHttpRequestEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLXMLHttpRequestEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLXMLHttpRequestEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLXMLHttpRequestEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLXMLHttpRequestEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLXMLHttpRequestEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLXMLHttpRequestEventsVtbl;
    interface HTMLXMLHttpRequestEvents
    {
        CONST_VTBL struct HTMLXMLHttpRequestEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLXMLHttpRequest;
    typedef struct IHTMLXMLHttpRequestVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLXMLHttpRequest * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLXMLHttpRequest * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLXMLHttpRequest * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLXMLHttpRequest * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLXMLHttpRequest * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLXMLHttpRequest * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLXMLHttpRequest * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLXMLHttpRequest * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_responseBody )(
            __RPC__in IHTMLXMLHttpRequest * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_responseText )(
            __RPC__in IHTMLXMLHttpRequest * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_responseXML )(
            __RPC__in IHTMLXMLHttpRequest * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLXMLHttpRequest * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_statusText )(
            __RPC__in IHTMLXMLHttpRequest * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )(
            __RPC__in IHTMLXMLHttpRequest * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )(
            __RPC__in IHTMLXMLHttpRequest * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *abort )(
            __RPC__in IHTMLXMLHttpRequest * This);
                   HRESULT ( STDMETHODCALLTYPE *open )(
            __RPC__in IHTMLXMLHttpRequest * This,
                       __RPC__in BSTR bstrMethod,
                       __RPC__in BSTR bstrUrl,
                       VARIANT varAsync,
                                 VARIANT varUser,
                                 VARIANT varPassword);
                   HRESULT ( STDMETHODCALLTYPE *send )(
            __RPC__in IHTMLXMLHttpRequest * This,
                                 VARIANT varBody);
                   HRESULT ( STDMETHODCALLTYPE *getAllResponseHeaders )(
            __RPC__in IHTMLXMLHttpRequest * This,
                                __RPC__deref_out_opt BSTR *__MIDL__IHTMLXMLHttpRequest0000);
                   HRESULT ( STDMETHODCALLTYPE *getResponseHeader )(
            __RPC__in IHTMLXMLHttpRequest * This,
                       __RPC__in BSTR bstrHeader,
                                __RPC__deref_out_opt BSTR *__MIDL__IHTMLXMLHttpRequest0001);
                   HRESULT ( STDMETHODCALLTYPE *setRequestHeader )(
            __RPC__in IHTMLXMLHttpRequest * This,
                       __RPC__in BSTR bstrHeader,
                       __RPC__in BSTR bstrValue);
        END_INTERFACE
    } IHTMLXMLHttpRequestVtbl;
    interface IHTMLXMLHttpRequest
    {
        CONST_VTBL struct IHTMLXMLHttpRequestVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> get_responseBody(This,p) )
    ( (This)->lpVtbl -> get_responseText(This,p) )
    ( (This)->lpVtbl -> get_responseXML(This,p) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> get_statusText(This,p) )
    ( (This)->lpVtbl -> put_onreadystatechange(This,v) )
    ( (This)->lpVtbl -> get_onreadystatechange(This,p) )
    ( (This)->lpVtbl -> abort(This) )
    ( (This)->lpVtbl -> open(This,bstrMethod,bstrUrl,varAsync,varUser,varPassword) )
    ( (This)->lpVtbl -> send(This,varBody) )
    ( (This)->lpVtbl -> getAllResponseHeaders(This,__MIDL__IHTMLXMLHttpRequest0000) )
    ( (This)->lpVtbl -> getResponseHeader(This,bstrHeader,__MIDL__IHTMLXMLHttpRequest0001) )
    ( (This)->lpVtbl -> setRequestHeader(This,bstrHeader,bstrValue) )
EXTERN_C const IID IID_IHTMLXMLHttpRequest2;
    typedef struct IHTMLXMLHttpRequest2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLXMLHttpRequest2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLXMLHttpRequest2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLXMLHttpRequest2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLXMLHttpRequest2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLXMLHttpRequest2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLXMLHttpRequest2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLXMLHttpRequest2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_timeout )(
            __RPC__in IHTMLXMLHttpRequest2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_timeout )(
            __RPC__in IHTMLXMLHttpRequest2 * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_ontimeout )(
            __RPC__in IHTMLXMLHttpRequest2 * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ontimeout )(
            __RPC__in IHTMLXMLHttpRequest2 * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IHTMLXMLHttpRequest2Vtbl;
    interface IHTMLXMLHttpRequest2
    {
        CONST_VTBL struct IHTMLXMLHttpRequest2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_timeout(This,v) )
    ( (This)->lpVtbl -> get_timeout(This,p) )
    ( (This)->lpVtbl -> put_ontimeout(This,v) )
    ( (This)->lpVtbl -> get_ontimeout(This,p) )
EXTERN_C const IID IID_IHTMLXMLHttpRequestFactory;
    typedef struct IHTMLXMLHttpRequestFactoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLXMLHttpRequestFactory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLXMLHttpRequestFactory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLXMLHttpRequestFactory * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLXMLHttpRequestFactory * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLXMLHttpRequestFactory * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLXMLHttpRequestFactory * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLXMLHttpRequestFactory * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *create )(
            __RPC__in IHTMLXMLHttpRequestFactory * This,
                                __RPC__deref_out_opt IHTMLXMLHttpRequest **__MIDL__IHTMLXMLHttpRequestFactory0000);
        END_INTERFACE
    } IHTMLXMLHttpRequestFactoryVtbl;
    interface IHTMLXMLHttpRequestFactory
    {
        CONST_VTBL struct IHTMLXMLHttpRequestFactoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> create(This,__MIDL__IHTMLXMLHttpRequestFactory0000) )
EXTERN_C const IID DIID_DispHTMLXMLHttpRequest;
    typedef struct DispHTMLXMLHttpRequestVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLXMLHttpRequest * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLXMLHttpRequest * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLXMLHttpRequest * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLXMLHttpRequest * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLXMLHttpRequest * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLXMLHttpRequest * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLXMLHttpRequest * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLXMLHttpRequestVtbl;
    interface DispHTMLXMLHttpRequest
    {
        CONST_VTBL struct DispHTMLXMLHttpRequestVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLXMLHttpRequest;
class DECLSPEC_UUID("3051040b-98b5-11cf-bb82-00aa00bdce0b")
HTMLXMLHttpRequest;
EXTERN_C const CLSID CLSID_HTMLXMLHttpRequestFactory;
class DECLSPEC_UUID("3051040d-98b5-11cf-bb82-00aa00bdce0b")
HTMLXMLHttpRequestFactory;
EXTERN_C const IID IID_ISVGAngle;
    typedef struct ISVGAngleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAngle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAngle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAngle * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAngle * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAngle * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAngle * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAngle * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_unitType )(
            __RPC__in ISVGAngle * This,
                       short v);
                            HRESULT ( STDMETHODCALLTYPE *get_unitType )(
            __RPC__in ISVGAngle * This,
                                __RPC__out short *p);
                            HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in ISVGAngle * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in ISVGAngle * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_valueInSpecifiedUnits )(
            __RPC__in ISVGAngle * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_valueInSpecifiedUnits )(
            __RPC__in ISVGAngle * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_valueAsString )(
            __RPC__in ISVGAngle * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_valueAsString )(
            __RPC__in ISVGAngle * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *newValueSpecifiedUnits )(
            __RPC__in ISVGAngle * This,
                       short unitType,
                       float valueInSpecifiedUnits);
                   HRESULT ( STDMETHODCALLTYPE *convertToSpecifiedUnits )(
            __RPC__in ISVGAngle * This,
                       short unitType);
        END_INTERFACE
    } ISVGAngleVtbl;
    interface ISVGAngle
    {
        CONST_VTBL struct ISVGAngleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_unitType(This,v) )
    ( (This)->lpVtbl -> get_unitType(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_valueInSpecifiedUnits(This,v) )
    ( (This)->lpVtbl -> get_valueInSpecifiedUnits(This,p) )
    ( (This)->lpVtbl -> put_valueAsString(This,v) )
    ( (This)->lpVtbl -> get_valueAsString(This,p) )
    ( (This)->lpVtbl -> newValueSpecifiedUnits(This,unitType,valueInSpecifiedUnits) )
    ( (This)->lpVtbl -> convertToSpecifiedUnits(This,unitType) )
EXTERN_C const CLSID CLSID_SVGAngle;
class DECLSPEC_UUID("30510584-98b5-11cf-bb82-00aa00bdce0b")
SVGAngle;
EXTERN_C const IID IID_ISVGElement;
    typedef struct ISVGElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_xmlbase )(
            __RPC__in ISVGElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_xmlbase )(
            __RPC__in ISVGElement * This,
                                __RPC__deref_out_opt BSTR *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_ownerSVGElement )(
            __RPC__in ISVGElement * This,
                       __RPC__in_opt ISVGSVGElement *v);
                            HRESULT ( STDMETHODCALLTYPE *get_ownerSVGElement )(
            __RPC__in ISVGElement * This,
                                __RPC__deref_out_opt ISVGSVGElement **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_viewportElement )(
            __RPC__in ISVGElement * This,
                       __RPC__in_opt ISVGElement *v);
                            HRESULT ( STDMETHODCALLTYPE *get_viewportElement )(
            __RPC__in ISVGElement * This,
                                __RPC__deref_out_opt ISVGElement **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_focusable )(
            __RPC__in ISVGElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_focusable )(
            __RPC__in ISVGElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
        END_INTERFACE
    } ISVGElementVtbl;
    interface ISVGElement
    {
        CONST_VTBL struct ISVGElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_xmlbase(This,v) )
    ( (This)->lpVtbl -> get_xmlbase(This,p) )
    ( (This)->lpVtbl -> putref_ownerSVGElement(This,v) )
    ( (This)->lpVtbl -> get_ownerSVGElement(This,p) )
    ( (This)->lpVtbl -> putref_viewportElement(This,v) )
    ( (This)->lpVtbl -> get_viewportElement(This,p) )
    ( (This)->lpVtbl -> putref_focusable(This,v) )
    ( (This)->lpVtbl -> get_focusable(This,p) )
EXTERN_C const IID IID_ISVGRect;
    typedef struct ISVGRectVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGRect * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGRect * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGRect * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGRect * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGRect * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGRect * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGRect * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGRect * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGRect * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGRect * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGRect * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in ISVGRect * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in ISVGRect * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in ISVGRect * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in ISVGRect * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGRectVtbl;
    interface ISVGRect
    {
        CONST_VTBL struct ISVGRectVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
EXTERN_C const IID IID_ISVGMatrix;
    typedef struct ISVGMatrixVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGMatrix * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGMatrix * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGMatrix * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGMatrix * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGMatrix * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGMatrix * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGMatrix * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_a )(
            __RPC__in ISVGMatrix * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_a )(
            __RPC__in ISVGMatrix * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_b )(
            __RPC__in ISVGMatrix * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_b )(
            __RPC__in ISVGMatrix * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_c )(
            __RPC__in ISVGMatrix * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_c )(
            __RPC__in ISVGMatrix * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_d )(
            __RPC__in ISVGMatrix * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_d )(
            __RPC__in ISVGMatrix * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_e )(
            __RPC__in ISVGMatrix * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_e )(
            __RPC__in ISVGMatrix * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_f )(
            __RPC__in ISVGMatrix * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_f )(
            __RPC__in ISVGMatrix * This,
                                __RPC__out float *p);
                   HRESULT ( STDMETHODCALLTYPE *multiply )(
            __RPC__in ISVGMatrix * This,
                       __RPC__in_opt ISVGMatrix *secondMatrix,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *inverse )(
            __RPC__in ISVGMatrix * This,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *translate )(
            __RPC__in ISVGMatrix * This,
                       float x,
                       float y,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *scale )(
            __RPC__in ISVGMatrix * This,
                       float scaleFactor,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *scaleNonUniform )(
            __RPC__in ISVGMatrix * This,
                       float scaleFactorX,
                       float scaleFactorY,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *rotate )(
            __RPC__in ISVGMatrix * This,
                       float angle,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *rotateFromVector )(
            __RPC__in ISVGMatrix * This,
                       float x,
                       float y,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *flipX )(
            __RPC__in ISVGMatrix * This,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *flipY )(
            __RPC__in ISVGMatrix * This,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *skewX )(
            __RPC__in ISVGMatrix * This,
                       float angle,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *skewY )(
            __RPC__in ISVGMatrix * This,
                       float angle,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
        END_INTERFACE
    } ISVGMatrixVtbl;
    interface ISVGMatrix
    {
        CONST_VTBL struct ISVGMatrixVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_a(This,v) )
    ( (This)->lpVtbl -> get_a(This,p) )
    ( (This)->lpVtbl -> put_b(This,v) )
    ( (This)->lpVtbl -> get_b(This,p) )
    ( (This)->lpVtbl -> put_c(This,v) )
    ( (This)->lpVtbl -> get_c(This,p) )
    ( (This)->lpVtbl -> put_d(This,v) )
    ( (This)->lpVtbl -> get_d(This,p) )
    ( (This)->lpVtbl -> put_e(This,v) )
    ( (This)->lpVtbl -> get_e(This,p) )
    ( (This)->lpVtbl -> put_f(This,v) )
    ( (This)->lpVtbl -> get_f(This,p) )
    ( (This)->lpVtbl -> multiply(This,secondMatrix,ppResult) )
    ( (This)->lpVtbl -> inverse(This,ppResult) )
    ( (This)->lpVtbl -> translate(This,x,y,ppResult) )
    ( (This)->lpVtbl -> scale(This,scaleFactor,ppResult) )
    ( (This)->lpVtbl -> scaleNonUniform(This,scaleFactorX,scaleFactorY,ppResult) )
    ( (This)->lpVtbl -> rotate(This,angle,ppResult) )
    ( (This)->lpVtbl -> rotateFromVector(This,x,y,ppResult) )
    ( (This)->lpVtbl -> flipX(This,ppResult) )
    ( (This)->lpVtbl -> flipY(This,ppResult) )
    ( (This)->lpVtbl -> skewX(This,angle,ppResult) )
    ( (This)->lpVtbl -> skewY(This,angle,ppResult) )
EXTERN_C const IID IID_ISVGStringList;
    typedef struct ISVGStringListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGStringList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGStringList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGStringList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGStringList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGStringList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGStringList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGStringList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_numberOfItems )(
            __RPC__in ISVGStringList * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_numberOfItems )(
            __RPC__in ISVGStringList * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *clear )(
            __RPC__in ISVGStringList * This);
                   HRESULT ( STDMETHODCALLTYPE *initialize )(
            __RPC__in ISVGStringList * This,
                       __RPC__in BSTR newItem,
                                __RPC__deref_out_opt BSTR *ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getItem )(
            __RPC__in ISVGStringList * This,
                       long index,
                                __RPC__deref_out_opt BSTR *ppResult);
                   HRESULT ( STDMETHODCALLTYPE *insertItemBefore )(
            __RPC__in ISVGStringList * This,
                       __RPC__in BSTR newItem,
                       long index,
                                __RPC__deref_out_opt BSTR *ppResult);
                   HRESULT ( STDMETHODCALLTYPE *replaceItem )(
            __RPC__in ISVGStringList * This,
                       __RPC__in BSTR newItem,
                       long index,
                                __RPC__deref_out_opt BSTR *ppResult);
                   HRESULT ( STDMETHODCALLTYPE *removeItem )(
            __RPC__in ISVGStringList * This,
                       long index,
                                __RPC__deref_out_opt BSTR *ppResult);
                   HRESULT ( STDMETHODCALLTYPE *appendItem )(
            __RPC__in ISVGStringList * This,
                       __RPC__in BSTR newItem,
                                __RPC__deref_out_opt BSTR *ppResult);
        END_INTERFACE
    } ISVGStringListVtbl;
    interface ISVGStringList
    {
        CONST_VTBL struct ISVGStringListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_numberOfItems(This,v) )
    ( (This)->lpVtbl -> get_numberOfItems(This,p) )
    ( (This)->lpVtbl -> clear(This) )
    ( (This)->lpVtbl -> initialize(This,newItem,ppResult) )
    ( (This)->lpVtbl -> getItem(This,index,ppResult) )
    ( (This)->lpVtbl -> insertItemBefore(This,newItem,index,ppResult) )
    ( (This)->lpVtbl -> replaceItem(This,newItem,index,ppResult) )
    ( (This)->lpVtbl -> removeItem(This,index,ppResult) )
    ( (This)->lpVtbl -> appendItem(This,newItem,ppResult) )
EXTERN_C const IID IID_ISVGAnimatedRect;
    typedef struct ISVGAnimatedRectVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedRect * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedRect * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedRect * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedRect * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedRect * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedRect * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedRect * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_baseVal )(
            __RPC__in ISVGAnimatedRect * This,
                       __RPC__in_opt ISVGRect *v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedRect * This,
                                __RPC__deref_out_opt ISVGRect **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_animVal )(
            __RPC__in ISVGAnimatedRect * This,
                       __RPC__in_opt ISVGRect *v);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedRect * This,
                                __RPC__deref_out_opt ISVGRect **p);
        END_INTERFACE
    } ISVGAnimatedRectVtbl;
    interface ISVGAnimatedRect
    {
        CONST_VTBL struct ISVGAnimatedRectVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> putref_animVal(This,v) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const IID IID_ISVGAnimatedString;
    typedef struct ISVGAnimatedStringVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedString * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedString * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedString * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedString * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedString * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedString * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedString * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_baseVal )(
            __RPC__in ISVGAnimatedString * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedString * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedString * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } ISVGAnimatedStringVtbl;
    interface ISVGAnimatedString
    {
        CONST_VTBL struct ISVGAnimatedStringVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const IID IID_ISVGAnimatedBoolean;
    typedef struct ISVGAnimatedBooleanVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedBoolean * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedBoolean * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedBoolean * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedBoolean * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedBoolean * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedBoolean * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedBoolean * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_baseVal )(
            __RPC__in ISVGAnimatedBoolean * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedBoolean * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_animVal )(
            __RPC__in ISVGAnimatedBoolean * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedBoolean * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } ISVGAnimatedBooleanVtbl;
    interface ISVGAnimatedBoolean
    {
        CONST_VTBL struct ISVGAnimatedBooleanVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> put_animVal(This,v) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const IID IID_ISVGAnimatedTransformList;
    typedef struct ISVGAnimatedTransformListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedTransformList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedTransformList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedTransformList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedTransformList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedTransformList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedTransformList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedTransformList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_baseVal )(
            __RPC__in ISVGAnimatedTransformList * This,
                       __RPC__in_opt ISVGTransformList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedTransformList * This,
                                __RPC__deref_out_opt ISVGTransformList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_animVal )(
            __RPC__in ISVGAnimatedTransformList * This,
                       __RPC__in_opt ISVGTransformList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedTransformList * This,
                                __RPC__deref_out_opt ISVGTransformList **p);
        END_INTERFACE
    } ISVGAnimatedTransformListVtbl;
    interface ISVGAnimatedTransformList
    {
        CONST_VTBL struct ISVGAnimatedTransformListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> putref_animVal(This,v) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const IID IID_ISVGAnimatedPreserveAspectRatio;
    typedef struct ISVGAnimatedPreserveAspectRatioVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedPreserveAspectRatio * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedPreserveAspectRatio * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedPreserveAspectRatio * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedPreserveAspectRatio * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedPreserveAspectRatio * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedPreserveAspectRatio * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedPreserveAspectRatio * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_baseVal )(
            __RPC__in ISVGAnimatedPreserveAspectRatio * This,
                       __RPC__in_opt ISVGPreserveAspectRatio *v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedPreserveAspectRatio * This,
                                __RPC__deref_out_opt ISVGPreserveAspectRatio **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_animVal )(
            __RPC__in ISVGAnimatedPreserveAspectRatio * This,
                       __RPC__in_opt ISVGPreserveAspectRatio *v);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedPreserveAspectRatio * This,
                                __RPC__deref_out_opt ISVGPreserveAspectRatio **p);
        END_INTERFACE
    } ISVGAnimatedPreserveAspectRatioVtbl;
    interface ISVGAnimatedPreserveAspectRatio
    {
        CONST_VTBL struct ISVGAnimatedPreserveAspectRatioVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> putref_animVal(This,v) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const IID IID_ISVGStylable;
    typedef struct ISVGStylableVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGStylable * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGStylable * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGStylable * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGStylable * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGStylable * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGStylable * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGStylable * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_className )(
            __RPC__in ISVGStylable * This,
                                __RPC__deref_out_opt ISVGAnimatedString **p);
        END_INTERFACE
    } ISVGStylableVtbl;
    interface ISVGStylable
    {
        CONST_VTBL struct ISVGStylableVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_className(This,p) )
EXTERN_C const IID IID_ISVGLocatable;
    typedef struct ISVGLocatableVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGLocatable * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGLocatable * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGLocatable * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGLocatable * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGLocatable * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGLocatable * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGLocatable * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_nearestViewportElement )(
            __RPC__in ISVGLocatable * This,
                                __RPC__deref_out_opt ISVGElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_farthestViewportElement )(
            __RPC__in ISVGLocatable * This,
                                __RPC__deref_out_opt ISVGElement **p);
                   HRESULT ( STDMETHODCALLTYPE *getBBox )(
            __RPC__in ISVGLocatable * This,
                                __RPC__deref_out_opt ISVGRect **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getCTM )(
            __RPC__in ISVGLocatable * This,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getScreenCTM )(
            __RPC__in ISVGLocatable * This,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getTransformToElement )(
            __RPC__in ISVGLocatable * This,
                       __RPC__in_opt ISVGElement *pElement,
                                __RPC__deref_out_opt ISVGMatrix **ppResult);
        END_INTERFACE
    } ISVGLocatableVtbl;
    interface ISVGLocatable
    {
        CONST_VTBL struct ISVGLocatableVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_nearestViewportElement(This,p) )
    ( (This)->lpVtbl -> get_farthestViewportElement(This,p) )
    ( (This)->lpVtbl -> getBBox(This,ppResult) )
    ( (This)->lpVtbl -> getCTM(This,ppResult) )
    ( (This)->lpVtbl -> getScreenCTM(This,ppResult) )
    ( (This)->lpVtbl -> getTransformToElement(This,pElement,ppResult) )
EXTERN_C const IID IID_ISVGTransformable;
    typedef struct ISVGTransformableVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGTransformable * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGTransformable * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGTransformable * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGTransformable * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGTransformable * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGTransformable * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGTransformable * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_transform )(
            __RPC__in ISVGTransformable * This,
                                __RPC__deref_out_opt ISVGAnimatedTransformList **p);
        END_INTERFACE
    } ISVGTransformableVtbl;
    interface ISVGTransformable
    {
        CONST_VTBL struct ISVGTransformableVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_transform(This,p) )
EXTERN_C const IID IID_ISVGTests;
    typedef struct ISVGTestsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGTests * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGTests * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGTests * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGTests * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGTests * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGTests * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGTests * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_requiredFeatures )(
            __RPC__in ISVGTests * This,
                                __RPC__deref_out_opt ISVGStringList **p);
                            HRESULT ( STDMETHODCALLTYPE *get_requiredExtensions )(
            __RPC__in ISVGTests * This,
                                __RPC__deref_out_opt ISVGStringList **p);
                            HRESULT ( STDMETHODCALLTYPE *get_systemLanguage )(
            __RPC__in ISVGTests * This,
                                __RPC__deref_out_opt ISVGStringList **p);
                   HRESULT ( STDMETHODCALLTYPE *hasExtension )(
            __RPC__in ISVGTests * This,
                       __RPC__in BSTR extension,
                                __RPC__out VARIANT_BOOL *pResult);
        END_INTERFACE
    } ISVGTestsVtbl;
    interface ISVGTests
    {
        CONST_VTBL struct ISVGTestsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_requiredFeatures(This,p) )
    ( (This)->lpVtbl -> get_requiredExtensions(This,p) )
    ( (This)->lpVtbl -> get_systemLanguage(This,p) )
    ( (This)->lpVtbl -> hasExtension(This,extension,pResult) )
EXTERN_C const IID IID_ISVGLangSpace;
    typedef struct ISVGLangSpaceVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGLangSpace * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGLangSpace * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGLangSpace * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGLangSpace * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGLangSpace * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGLangSpace * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGLangSpace * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_xmllang )(
            __RPC__in ISVGLangSpace * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_xmllang )(
            __RPC__in ISVGLangSpace * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_xmlspace )(
            __RPC__in ISVGLangSpace * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_xmlspace )(
            __RPC__in ISVGLangSpace * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } ISVGLangSpaceVtbl;
    interface ISVGLangSpace
    {
        CONST_VTBL struct ISVGLangSpaceVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_xmllang(This,v) )
    ( (This)->lpVtbl -> get_xmllang(This,p) )
    ( (This)->lpVtbl -> put_xmlspace(This,v) )
    ( (This)->lpVtbl -> get_xmlspace(This,p) )
EXTERN_C const IID IID_ISVGExternalResourcesRequired;
    typedef struct ISVGExternalResourcesRequiredVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGExternalResourcesRequired * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGExternalResourcesRequired * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGExternalResourcesRequired * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGExternalResourcesRequired * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGExternalResourcesRequired * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGExternalResourcesRequired * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGExternalResourcesRequired * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_externalResourcesRequired )(
            __RPC__in ISVGExternalResourcesRequired * This,
                                __RPC__deref_out_opt ISVGAnimatedBoolean **p);
        END_INTERFACE
    } ISVGExternalResourcesRequiredVtbl;
    interface ISVGExternalResourcesRequired
    {
        CONST_VTBL struct ISVGExternalResourcesRequiredVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_externalResourcesRequired(This,p) )
EXTERN_C const IID IID_ISVGFitToViewBox;
    typedef struct ISVGFitToViewBoxVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGFitToViewBox * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGFitToViewBox * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGFitToViewBox * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGFitToViewBox * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGFitToViewBox * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGFitToViewBox * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGFitToViewBox * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_viewBox )(
            __RPC__in ISVGFitToViewBox * This,
                                __RPC__deref_out_opt ISVGAnimatedRect **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_preserveAspectRatio )(
            __RPC__in ISVGFitToViewBox * This,
                       __RPC__in_opt ISVGAnimatedPreserveAspectRatio *v);
                            HRESULT ( STDMETHODCALLTYPE *get_preserveAspectRatio )(
            __RPC__in ISVGFitToViewBox * This,
                                __RPC__deref_out_opt ISVGAnimatedPreserveAspectRatio **p);
        END_INTERFACE
    } ISVGFitToViewBoxVtbl;
    interface ISVGFitToViewBox
    {
        CONST_VTBL struct ISVGFitToViewBoxVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_viewBox(This,p) )
    ( (This)->lpVtbl -> putref_preserveAspectRatio(This,v) )
    ( (This)->lpVtbl -> get_preserveAspectRatio(This,p) )
EXTERN_C const IID IID_ISVGZoomAndPan;
    typedef struct ISVGZoomAndPanVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGZoomAndPan * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGZoomAndPan * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGZoomAndPan * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGZoomAndPan * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGZoomAndPan * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGZoomAndPan * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGZoomAndPan * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_zoomAndPan )(
            __RPC__in ISVGZoomAndPan * This,
                                __RPC__out short *p);
        END_INTERFACE
    } ISVGZoomAndPanVtbl;
    interface ISVGZoomAndPan
    {
        CONST_VTBL struct ISVGZoomAndPanVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_zoomAndPan(This,p) )
EXTERN_C const IID IID_ISVGURIReference;
    typedef struct ISVGURIReferenceVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGURIReference * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGURIReference * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGURIReference * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGURIReference * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGURIReference * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGURIReference * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGURIReference * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_href )(
            __RPC__in ISVGURIReference * This,
                                __RPC__deref_out_opt ISVGAnimatedString **p);
        END_INTERFACE
    } ISVGURIReferenceVtbl;
    interface ISVGURIReference
    {
        CONST_VTBL struct ISVGURIReferenceVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_href(This,p) )
EXTERN_C const IID IID_ISVGAnimatedAngle;
    typedef struct ISVGAnimatedAngleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedAngle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedAngle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedAngle * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedAngle * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedAngle * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedAngle * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedAngle * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_baseVal )(
            __RPC__in ISVGAnimatedAngle * This,
                       __RPC__in_opt ISVGAngle *v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedAngle * This,
                                __RPC__deref_out_opt ISVGAngle **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_animVal )(
            __RPC__in ISVGAnimatedAngle * This,
                       __RPC__in_opt ISVGAngle *v);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedAngle * This,
                                __RPC__deref_out_opt ISVGAngle **p);
        END_INTERFACE
    } ISVGAnimatedAngleVtbl;
    interface ISVGAnimatedAngle
    {
        CONST_VTBL struct ISVGAnimatedAngleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> putref_animVal(This,v) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const CLSID CLSID_SVGAnimatedAngle;
class DECLSPEC_UUID("305105e4-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedAngle;
EXTERN_C const IID IID_ISVGTransformList;
    typedef struct ISVGTransformListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGTransformList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGTransformList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGTransformList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGTransformList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGTransformList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGTransformList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGTransformList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_numberOfItems )(
            __RPC__in ISVGTransformList * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_numberOfItems )(
            __RPC__in ISVGTransformList * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *clear )(
            __RPC__in ISVGTransformList * This);
                   HRESULT ( STDMETHODCALLTYPE *initialize )(
            __RPC__in ISVGTransformList * This,
                       __RPC__in_opt ISVGTransform *newItem,
                                __RPC__deref_out_opt ISVGTransform **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getItem )(
            __RPC__in ISVGTransformList * This,
                       long index,
                                __RPC__deref_out_opt ISVGTransform **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *insertItemBefore )(
            __RPC__in ISVGTransformList * This,
                       __RPC__in_opt ISVGTransform *newItem,
                       long index,
                                __RPC__deref_out_opt ISVGTransform **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *replaceItem )(
            __RPC__in ISVGTransformList * This,
                       __RPC__in_opt ISVGTransform *newItem,
                       long index,
                                __RPC__deref_out_opt ISVGTransform **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *removeItem )(
            __RPC__in ISVGTransformList * This,
                       long index,
                                __RPC__deref_out_opt ISVGTransform **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *appendItem )(
            __RPC__in ISVGTransformList * This,
                       __RPC__in_opt ISVGTransform *newItem,
                                __RPC__deref_out_opt ISVGTransform **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGTransformFromMatrix )(
            __RPC__in ISVGTransformList * This,
                       __RPC__in_opt ISVGMatrix *newItem,
                                __RPC__deref_out_opt ISVGTransform **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *consolidate )(
            __RPC__in ISVGTransformList * This,
                                __RPC__deref_out_opt ISVGTransform **ppResult);
        END_INTERFACE
    } ISVGTransformListVtbl;
    interface ISVGTransformList
    {
        CONST_VTBL struct ISVGTransformListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_numberOfItems(This,v) )
    ( (This)->lpVtbl -> get_numberOfItems(This,p) )
    ( (This)->lpVtbl -> clear(This) )
    ( (This)->lpVtbl -> initialize(This,newItem,ppResult) )
    ( (This)->lpVtbl -> getItem(This,index,ppResult) )
    ( (This)->lpVtbl -> insertItemBefore(This,newItem,index,ppResult) )
    ( (This)->lpVtbl -> replaceItem(This,newItem,index,ppResult) )
    ( (This)->lpVtbl -> removeItem(This,index,ppResult) )
    ( (This)->lpVtbl -> appendItem(This,newItem,ppResult) )
    ( (This)->lpVtbl -> createSVGTransformFromMatrix(This,newItem,ppResult) )
    ( (This)->lpVtbl -> consolidate(This,ppResult) )
EXTERN_C const CLSID CLSID_SVGAnimatedTransformList;
class DECLSPEC_UUID("305105b1-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedTransformList;
EXTERN_C const CLSID CLSID_SVGAnimatedBoolean;
class DECLSPEC_UUID("3051058b-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedBoolean;
EXTERN_C const IID IID_ISVGAnimatedEnumeration;
    typedef struct ISVGAnimatedEnumerationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedEnumeration * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedEnumeration * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedEnumeration * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedEnumeration * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedEnumeration * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedEnumeration * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedEnumeration * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_baseVal )(
            __RPC__in ISVGAnimatedEnumeration * This,
                       USHORT v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedEnumeration * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_animVal )(
            __RPC__in ISVGAnimatedEnumeration * This,
                       USHORT v);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedEnumeration * This,
                                __RPC__out USHORT *p);
        END_INTERFACE
    } ISVGAnimatedEnumerationVtbl;
    interface ISVGAnimatedEnumeration
    {
        CONST_VTBL struct ISVGAnimatedEnumerationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> put_animVal(This,v) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const CLSID CLSID_SVGAnimatedEnumeration;
class DECLSPEC_UUID("3051058e-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedEnumeration;
EXTERN_C const IID IID_ISVGAnimatedInteger;
    typedef struct ISVGAnimatedIntegerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedInteger * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedInteger * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedInteger * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedInteger * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedInteger * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedInteger * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedInteger * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_baseVal )(
            __RPC__in ISVGAnimatedInteger * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedInteger * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_animVal )(
            __RPC__in ISVGAnimatedInteger * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedInteger * This,
                                __RPC__out long *p);
        END_INTERFACE
    } ISVGAnimatedIntegerVtbl;
    interface ISVGAnimatedInteger
    {
        CONST_VTBL struct ISVGAnimatedIntegerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> put_animVal(This,v) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const CLSID CLSID_SVGAnimatedInteger;
class DECLSPEC_UUID("3051058f-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedInteger;
EXTERN_C const IID IID_ISVGLength;
    typedef struct ISVGLengthVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGLength * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGLength * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGLength * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGLength * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGLength * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGLength * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGLength * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_unitType )(
            __RPC__in ISVGLength * This,
                       short v);
                            HRESULT ( STDMETHODCALLTYPE *get_unitType )(
            __RPC__in ISVGLength * This,
                                __RPC__out short *p);
                            HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in ISVGLength * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in ISVGLength * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_valueInSpecifiedUnits )(
            __RPC__in ISVGLength * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_valueInSpecifiedUnits )(
            __RPC__in ISVGLength * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_valueAsString )(
            __RPC__in ISVGLength * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_valueAsString )(
            __RPC__in ISVGLength * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *newValueSpecifiedUnits )(
            __RPC__in ISVGLength * This,
                       short unitType,
                       float valueInSpecifiedUnits);
                   HRESULT ( STDMETHODCALLTYPE *convertToSpecifiedUnits )(
            __RPC__in ISVGLength * This,
                       short unitType);
        END_INTERFACE
    } ISVGLengthVtbl;
    interface ISVGLength
    {
        CONST_VTBL struct ISVGLengthVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_unitType(This,v) )
    ( (This)->lpVtbl -> get_unitType(This,p) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_valueInSpecifiedUnits(This,v) )
    ( (This)->lpVtbl -> get_valueInSpecifiedUnits(This,p) )
    ( (This)->lpVtbl -> put_valueAsString(This,v) )
    ( (This)->lpVtbl -> get_valueAsString(This,p) )
    ( (This)->lpVtbl -> newValueSpecifiedUnits(This,unitType,valueInSpecifiedUnits) )
    ( (This)->lpVtbl -> convertToSpecifiedUnits(This,unitType) )
EXTERN_C const IID IID_ISVGAnimatedLength;
    typedef struct ISVGAnimatedLengthVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedLength * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedLength * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedLength * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedLength * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedLength * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedLength * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedLength * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_baseVal )(
            __RPC__in ISVGAnimatedLength * This,
                       __RPC__in_opt ISVGLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedLength * This,
                                __RPC__deref_out_opt ISVGLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_animVal )(
            __RPC__in ISVGAnimatedLength * This,
                       __RPC__in_opt ISVGLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedLength * This,
                                __RPC__deref_out_opt ISVGLength **p);
        END_INTERFACE
    } ISVGAnimatedLengthVtbl;
    interface ISVGAnimatedLength
    {
        CONST_VTBL struct ISVGAnimatedLengthVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> putref_animVal(This,v) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const CLSID CLSID_SVGAnimatedLength;
class DECLSPEC_UUID("30510581-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedLength;
EXTERN_C const IID IID_ISVGLengthList;
    typedef struct ISVGLengthListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGLengthList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGLengthList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGLengthList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGLengthList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGLengthList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGLengthList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGLengthList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_numberOfItems )(
            __RPC__in ISVGLengthList * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_numberOfItems )(
            __RPC__in ISVGLengthList * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *clear )(
            __RPC__in ISVGLengthList * This);
                   HRESULT ( STDMETHODCALLTYPE *initialize )(
            __RPC__in ISVGLengthList * This,
                       __RPC__in_opt ISVGLength *newItem,
                                __RPC__deref_out_opt ISVGLength **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getItem )(
            __RPC__in ISVGLengthList * This,
                       long index,
                                __RPC__deref_out_opt ISVGLength **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *insertItemBefore )(
            __RPC__in ISVGLengthList * This,
                       __RPC__in_opt ISVGLength *newItem,
                       long index,
                                __RPC__deref_out_opt ISVGLength **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *replaceItem )(
            __RPC__in ISVGLengthList * This,
                       __RPC__in_opt ISVGLength *newItem,
                       long index,
                                __RPC__deref_out_opt ISVGLength **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *removeItem )(
            __RPC__in ISVGLengthList * This,
                       long index,
                                __RPC__deref_out_opt ISVGLength **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *appendItem )(
            __RPC__in ISVGLengthList * This,
                       __RPC__in_opt ISVGLength *newItem,
                                __RPC__deref_out_opt ISVGLength **ppResult);
        END_INTERFACE
    } ISVGLengthListVtbl;
    interface ISVGLengthList
    {
        CONST_VTBL struct ISVGLengthListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_numberOfItems(This,v) )
    ( (This)->lpVtbl -> get_numberOfItems(This,p) )
    ( (This)->lpVtbl -> clear(This) )
    ( (This)->lpVtbl -> initialize(This,newItem,ppResult) )
    ( (This)->lpVtbl -> getItem(This,index,ppResult) )
    ( (This)->lpVtbl -> insertItemBefore(This,newItem,index,ppResult) )
    ( (This)->lpVtbl -> replaceItem(This,newItem,index,ppResult) )
    ( (This)->lpVtbl -> removeItem(This,index,ppResult) )
    ( (This)->lpVtbl -> appendItem(This,newItem,ppResult) )
EXTERN_C const IID IID_ISVGAnimatedLengthList;
    typedef struct ISVGAnimatedLengthListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedLengthList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedLengthList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedLengthList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedLengthList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedLengthList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedLengthList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedLengthList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_baseVal )(
            __RPC__in ISVGAnimatedLengthList * This,
                       __RPC__in_opt ISVGLengthList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedLengthList * This,
                                __RPC__deref_out_opt ISVGLengthList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_animVal )(
            __RPC__in ISVGAnimatedLengthList * This,
                       __RPC__in_opt ISVGLengthList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedLengthList * This,
                                __RPC__deref_out_opt ISVGLengthList **p);
        END_INTERFACE
    } ISVGAnimatedLengthListVtbl;
    interface ISVGAnimatedLengthList
    {
        CONST_VTBL struct ISVGAnimatedLengthListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> putref_animVal(This,v) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const CLSID CLSID_SVGAnimatedLengthList;
class DECLSPEC_UUID("30510582-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedLengthList;
EXTERN_C const IID IID_ISVGNumber;
    typedef struct ISVGNumberVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGNumber * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGNumber * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGNumber * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGNumber * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGNumber * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGNumber * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGNumber * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in ISVGNumber * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in ISVGNumber * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGNumberVtbl;
    interface ISVGNumber
    {
        CONST_VTBL struct ISVGNumberVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
EXTERN_C const IID IID_ISVGAnimatedNumber;
    typedef struct ISVGAnimatedNumberVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedNumber * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedNumber * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedNumber * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedNumber * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedNumber * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedNumber * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedNumber * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_baseVal )(
            __RPC__in ISVGAnimatedNumber * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedNumber * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_animVal )(
            __RPC__in ISVGAnimatedNumber * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedNumber * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGAnimatedNumberVtbl;
    interface ISVGAnimatedNumber
    {
        CONST_VTBL struct ISVGAnimatedNumberVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> put_animVal(This,v) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const CLSID CLSID_SVGAnimatedNumber;
class DECLSPEC_UUID("30510588-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedNumber;
EXTERN_C const IID IID_ISVGNumberList;
    typedef struct ISVGNumberListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGNumberList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGNumberList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGNumberList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGNumberList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGNumberList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGNumberList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGNumberList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_numberOfItems )(
            __RPC__in ISVGNumberList * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_numberOfItems )(
            __RPC__in ISVGNumberList * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *clear )(
            __RPC__in ISVGNumberList * This);
                   HRESULT ( STDMETHODCALLTYPE *initialize )(
            __RPC__in ISVGNumberList * This,
                       __RPC__in_opt ISVGNumber *newItem,
                                __RPC__deref_out_opt ISVGNumber **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getItem )(
            __RPC__in ISVGNumberList * This,
                       long index,
                                __RPC__deref_out_opt ISVGNumber **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *insertItemBefore )(
            __RPC__in ISVGNumberList * This,
                       __RPC__in_opt ISVGNumber *newItem,
                       long index,
                                __RPC__deref_out_opt ISVGNumber **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *replaceItem )(
            __RPC__in ISVGNumberList * This,
                       __RPC__in_opt ISVGNumber *newItem,
                       long index,
                                __RPC__deref_out_opt ISVGNumber **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *removeItem )(
            __RPC__in ISVGNumberList * This,
                       long index,
                                __RPC__deref_out_opt ISVGNumber **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *appendItem )(
            __RPC__in ISVGNumberList * This,
                       __RPC__in_opt ISVGNumber *newItem,
                                __RPC__deref_out_opt ISVGNumber **ppResult);
        END_INTERFACE
    } ISVGNumberListVtbl;
    interface ISVGNumberList
    {
        CONST_VTBL struct ISVGNumberListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_numberOfItems(This,v) )
    ( (This)->lpVtbl -> get_numberOfItems(This,p) )
    ( (This)->lpVtbl -> clear(This) )
    ( (This)->lpVtbl -> initialize(This,newItem,ppResult) )
    ( (This)->lpVtbl -> getItem(This,index,ppResult) )
    ( (This)->lpVtbl -> insertItemBefore(This,newItem,index,ppResult) )
    ( (This)->lpVtbl -> replaceItem(This,newItem,index,ppResult) )
    ( (This)->lpVtbl -> removeItem(This,index,ppResult) )
    ( (This)->lpVtbl -> appendItem(This,newItem,ppResult) )
EXTERN_C const IID IID_ISVGAnimatedNumberList;
    typedef struct ISVGAnimatedNumberListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedNumberList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedNumberList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedNumberList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedNumberList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedNumberList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedNumberList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedNumberList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_baseVal )(
            __RPC__in ISVGAnimatedNumberList * This,
                       __RPC__in_opt ISVGNumberList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_baseVal )(
            __RPC__in ISVGAnimatedNumberList * This,
                                __RPC__deref_out_opt ISVGNumberList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_animVal )(
            __RPC__in ISVGAnimatedNumberList * This,
                       __RPC__in_opt ISVGNumberList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_animVal )(
            __RPC__in ISVGAnimatedNumberList * This,
                                __RPC__deref_out_opt ISVGNumberList **p);
        END_INTERFACE
    } ISVGAnimatedNumberListVtbl;
    interface ISVGAnimatedNumberList
    {
        CONST_VTBL struct ISVGAnimatedNumberListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_baseVal(This,v) )
    ( (This)->lpVtbl -> get_baseVal(This,p) )
    ( (This)->lpVtbl -> putref_animVal(This,v) )
    ( (This)->lpVtbl -> get_animVal(This,p) )
EXTERN_C const CLSID CLSID_SVGAnimatedNumberList;
class DECLSPEC_UUID("3051058a-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedNumberList;
EXTERN_C const CLSID CLSID_SVGAnimatedRect;
class DECLSPEC_UUID("30510586-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedRect;
EXTERN_C const CLSID CLSID_SVGAnimatedString;
class DECLSPEC_UUID("3051058c-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedString;
EXTERN_C const IID IID_ISVGClipPathElement;
    typedef struct ISVGClipPathElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGClipPathElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGClipPathElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGClipPathElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGClipPathElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGClipPathElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGClipPathElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGClipPathElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_clipPathUnits )(
            __RPC__in ISVGClipPathElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_clipPathUnits )(
            __RPC__in ISVGClipPathElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
        END_INTERFACE
    } ISVGClipPathElementVtbl;
    interface ISVGClipPathElement
    {
        CONST_VTBL struct ISVGClipPathElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_clipPathUnits(This,v) )
    ( (This)->lpVtbl -> get_clipPathUnits(This,p) )
EXTERN_C const IID DIID_DispSVGClipPathElement;
    typedef struct DispSVGClipPathElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGClipPathElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGClipPathElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGClipPathElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGClipPathElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGClipPathElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGClipPathElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGClipPathElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGClipPathElementVtbl;
    interface DispSVGClipPathElement
    {
        CONST_VTBL struct DispSVGClipPathElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGClipPathElement;
class DECLSPEC_UUID("305105e6-98b5-11cf-bb82-00aa00bdce0b")
SVGClipPathElement;
EXTERN_C const IID IID_ISVGDocument;
    typedef struct ISVGDocumentVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGDocument * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGDocument * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGDocument * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGDocument * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGDocument * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGDocument * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGDocument * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_rootElement )(
            __RPC__in ISVGDocument * This,
                                __RPC__deref_out_opt ISVGSVGElement **p);
        END_INTERFACE
    } ISVGDocumentVtbl;
    interface ISVGDocument
    {
        CONST_VTBL struct ISVGDocumentVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_rootElement(This,p) )
EXTERN_C const IID IID_IGetSVGDocument;
    typedef struct IGetSVGDocumentVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IGetSVGDocument * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IGetSVGDocument * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IGetSVGDocument * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IGetSVGDocument * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IGetSVGDocument * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IGetSVGDocument * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IGetSVGDocument * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *getSVGDocument )(
            __RPC__in IGetSVGDocument * This,
                                __RPC__deref_out_opt IDispatch **ppSVGDocument);
        END_INTERFACE
    } IGetSVGDocumentVtbl;
    interface IGetSVGDocument
    {
        CONST_VTBL struct IGetSVGDocumentVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> getSVGDocument(This,ppSVGDocument) )
EXTERN_C const IID DIID_DispSVGElement;
    typedef struct DispSVGElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGElementVtbl;
    interface DispSVGElement
    {
        CONST_VTBL struct DispSVGElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGElement;
class DECLSPEC_UUID("30510564-98b5-11cf-bb82-00aa00bdce0b")
SVGElement;
EXTERN_C const IID IID_IICCSVGColor;
    typedef struct IICCSVGColorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IICCSVGColor * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IICCSVGColor * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IICCSVGColor * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IICCSVGColor * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IICCSVGColor * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IICCSVGColor * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IICCSVGColor * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } IICCSVGColorVtbl;
    interface IICCSVGColor
    {
        CONST_VTBL struct IICCSVGColorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGLength;
class DECLSPEC_UUID("3051057e-98b5-11cf-bb82-00aa00bdce0b")
SVGLength;
EXTERN_C const CLSID CLSID_SVGLengthList;
class DECLSPEC_UUID("30510580-98b5-11cf-bb82-00aa00bdce0b")
SVGLengthList;
EXTERN_C const CLSID CLSID_SVGMatrix;
class DECLSPEC_UUID("305105ae-98b5-11cf-bb82-00aa00bdce0b")
SVGMatrix;
EXTERN_C const CLSID CLSID_SVGNumber;
class DECLSPEC_UUID("30510587-98b5-11cf-bb82-00aa00bdce0b")
SVGNumber;
EXTERN_C const CLSID CLSID_SVGNumberList;
class DECLSPEC_UUID("30510589-98b5-11cf-bb82-00aa00bdce0b")
SVGNumberList;
EXTERN_C const IID IID_ISVGPaint;
    typedef struct ISVGPaintVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPaint * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPaint * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPaint * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPaint * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPaint * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPaint * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPaint * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGPaintVtbl;
    interface ISVGPaint
    {
        CONST_VTBL struct ISVGPaintVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_ISVGPatternElement;
    typedef struct ISVGPatternElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPatternElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPatternElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPatternElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPatternElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPatternElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPatternElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPatternElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_patternUnits )(
            __RPC__in ISVGPatternElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_patternUnits )(
            __RPC__in ISVGPatternElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_patternContentUnits )(
            __RPC__in ISVGPatternElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_patternContentUnits )(
            __RPC__in ISVGPatternElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_patternTransform )(
            __RPC__in ISVGPatternElement * This,
                       __RPC__in_opt ISVGAnimatedTransformList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_patternTransform )(
            __RPC__in ISVGPatternElement * This,
                                __RPC__deref_out_opt ISVGAnimatedTransformList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_x )(
            __RPC__in ISVGPatternElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPatternElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_y )(
            __RPC__in ISVGPatternElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPatternElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_width )(
            __RPC__in ISVGPatternElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in ISVGPatternElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_height )(
            __RPC__in ISVGPatternElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in ISVGPatternElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
        END_INTERFACE
    } ISVGPatternElementVtbl;
    interface ISVGPatternElement
    {
        CONST_VTBL struct ISVGPatternElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_patternUnits(This,v) )
    ( (This)->lpVtbl -> get_patternUnits(This,p) )
    ( (This)->lpVtbl -> putref_patternContentUnits(This,v) )
    ( (This)->lpVtbl -> get_patternContentUnits(This,p) )
    ( (This)->lpVtbl -> putref_patternTransform(This,v) )
    ( (This)->lpVtbl -> get_patternTransform(This,p) )
    ( (This)->lpVtbl -> putref_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> putref_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> putref_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> putref_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
EXTERN_C const IID DIID_DispSVGPatternElement;
    typedef struct DispSVGPatternElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPatternElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPatternElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPatternElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPatternElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPatternElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPatternElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPatternElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPatternElementVtbl;
    interface DispSVGPatternElement
    {
        CONST_VTBL struct DispSVGPatternElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPatternElement;
class DECLSPEC_UUID("305105d4-98b5-11cf-bb82-00aa00bdce0b")
SVGPatternElement;
EXTERN_C const IID IID_ISVGPathSeg;
    typedef struct ISVGPathSegVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSeg * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSeg * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSeg * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSeg * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSeg * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSeg * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSeg * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_pathSegType )(
            __RPC__in ISVGPathSeg * This,
                       short v);
                            HRESULT ( STDMETHODCALLTYPE *get_pathSegType )(
            __RPC__in ISVGPathSeg * This,
                                __RPC__out short *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pathSegTypeAsLetter )(
            __RPC__in ISVGPathSeg * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } ISVGPathSegVtbl;
    interface ISVGPathSeg
    {
        CONST_VTBL struct ISVGPathSegVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_pathSegType(This,v) )
    ( (This)->lpVtbl -> get_pathSegType(This,p) )
    ( (This)->lpVtbl -> get_pathSegTypeAsLetter(This,p) )
EXTERN_C const IID IID_ISVGPathSegArcAbs;
    typedef struct ISVGPathSegArcAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegArcAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegArcAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegArcAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegArcAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegArcAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegArcAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegArcAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegArcAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegArcAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegArcAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegArcAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_r1 )(
            __RPC__in ISVGPathSegArcAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_r1 )(
            __RPC__in ISVGPathSegArcAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_r2 )(
            __RPC__in ISVGPathSegArcAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_r2 )(
            __RPC__in ISVGPathSegArcAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_angle )(
            __RPC__in ISVGPathSegArcAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_angle )(
            __RPC__in ISVGPathSegArcAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_largeArcFlag )(
            __RPC__in ISVGPathSegArcAbs * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_largeArcFlag )(
            __RPC__in ISVGPathSegArcAbs * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_sweepFlag )(
            __RPC__in ISVGPathSegArcAbs * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_sweepFlag )(
            __RPC__in ISVGPathSegArcAbs * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } ISVGPathSegArcAbsVtbl;
    interface ISVGPathSegArcAbs
    {
        CONST_VTBL struct ISVGPathSegArcAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> put_r1(This,v) )
    ( (This)->lpVtbl -> get_r1(This,p) )
    ( (This)->lpVtbl -> put_r2(This,v) )
    ( (This)->lpVtbl -> get_r2(This,p) )
    ( (This)->lpVtbl -> put_angle(This,v) )
    ( (This)->lpVtbl -> get_angle(This,p) )
    ( (This)->lpVtbl -> put_largeArcFlag(This,v) )
    ( (This)->lpVtbl -> get_largeArcFlag(This,p) )
    ( (This)->lpVtbl -> put_sweepFlag(This,v) )
    ( (This)->lpVtbl -> get_sweepFlag(This,p) )
EXTERN_C const IID IID_ISVGPathSegArcRel;
    typedef struct ISVGPathSegArcRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegArcRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegArcRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegArcRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegArcRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegArcRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegArcRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegArcRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegArcRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegArcRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegArcRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegArcRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_r1 )(
            __RPC__in ISVGPathSegArcRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_r1 )(
            __RPC__in ISVGPathSegArcRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_r2 )(
            __RPC__in ISVGPathSegArcRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_r2 )(
            __RPC__in ISVGPathSegArcRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_angle )(
            __RPC__in ISVGPathSegArcRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_angle )(
            __RPC__in ISVGPathSegArcRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_largeArcFlag )(
            __RPC__in ISVGPathSegArcRel * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_largeArcFlag )(
            __RPC__in ISVGPathSegArcRel * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_sweepFlag )(
            __RPC__in ISVGPathSegArcRel * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_sweepFlag )(
            __RPC__in ISVGPathSegArcRel * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } ISVGPathSegArcRelVtbl;
    interface ISVGPathSegArcRel
    {
        CONST_VTBL struct ISVGPathSegArcRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> put_r1(This,v) )
    ( (This)->lpVtbl -> get_r1(This,p) )
    ( (This)->lpVtbl -> put_r2(This,v) )
    ( (This)->lpVtbl -> get_r2(This,p) )
    ( (This)->lpVtbl -> put_angle(This,v) )
    ( (This)->lpVtbl -> get_angle(This,p) )
    ( (This)->lpVtbl -> put_largeArcFlag(This,v) )
    ( (This)->lpVtbl -> get_largeArcFlag(This,p) )
    ( (This)->lpVtbl -> put_sweepFlag(This,v) )
    ( (This)->lpVtbl -> get_sweepFlag(This,p) )
EXTERN_C const IID IID_ISVGPathSegClosePath;
    typedef struct ISVGPathSegClosePathVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegClosePath * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegClosePath * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegClosePath * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegClosePath * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegClosePath * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegClosePath * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegClosePath * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGPathSegClosePathVtbl;
    interface ISVGPathSegClosePath
    {
        CONST_VTBL struct ISVGPathSegClosePathVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_ISVGPathSegMovetoAbs;
    typedef struct ISVGPathSegMovetoAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegMovetoAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegMovetoAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegMovetoAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegMovetoAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegMovetoAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegMovetoAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegMovetoAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegMovetoAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegMovetoAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegMovetoAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegMovetoAbs * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegMovetoAbsVtbl;
    interface ISVGPathSegMovetoAbs
    {
        CONST_VTBL struct ISVGPathSegMovetoAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
EXTERN_C const IID IID_ISVGPathSegMovetoRel;
    typedef struct ISVGPathSegMovetoRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegMovetoRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegMovetoRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegMovetoRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegMovetoRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegMovetoRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegMovetoRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegMovetoRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegMovetoRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegMovetoRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegMovetoRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegMovetoRel * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegMovetoRelVtbl;
    interface ISVGPathSegMovetoRel
    {
        CONST_VTBL struct ISVGPathSegMovetoRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
EXTERN_C const IID IID_ISVGPathSegLinetoAbs;
    typedef struct ISVGPathSegLinetoAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegLinetoAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegLinetoAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegLinetoAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegLinetoAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegLinetoAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegLinetoAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegLinetoAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegLinetoAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegLinetoAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegLinetoAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegLinetoAbs * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegLinetoAbsVtbl;
    interface ISVGPathSegLinetoAbs
    {
        CONST_VTBL struct ISVGPathSegLinetoAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
EXTERN_C const IID IID_ISVGPathSegLinetoRel;
    typedef struct ISVGPathSegLinetoRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegLinetoRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegLinetoRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegLinetoRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegLinetoRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegLinetoRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegLinetoRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegLinetoRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegLinetoRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegLinetoRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegLinetoRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegLinetoRel * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegLinetoRelVtbl;
    interface ISVGPathSegLinetoRel
    {
        CONST_VTBL struct ISVGPathSegLinetoRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
EXTERN_C const IID IID_ISVGPathSegCurvetoCubicAbs;
    typedef struct ISVGPathSegCurvetoCubicAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegCurvetoCubicAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_x1 )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x1 )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y1 )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y1 )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_x2 )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x2 )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y2 )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y2 )(
            __RPC__in ISVGPathSegCurvetoCubicAbs * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegCurvetoCubicAbsVtbl;
    interface ISVGPathSegCurvetoCubicAbs
    {
        CONST_VTBL struct ISVGPathSegCurvetoCubicAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> put_x1(This,v) )
    ( (This)->lpVtbl -> get_x1(This,p) )
    ( (This)->lpVtbl -> put_y1(This,v) )
    ( (This)->lpVtbl -> get_y1(This,p) )
    ( (This)->lpVtbl -> put_x2(This,v) )
    ( (This)->lpVtbl -> get_x2(This,p) )
    ( (This)->lpVtbl -> put_y2(This,v) )
    ( (This)->lpVtbl -> get_y2(This,p) )
EXTERN_C const IID IID_ISVGPathSegCurvetoCubicRel;
    typedef struct ISVGPathSegCurvetoCubicRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegCurvetoCubicRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_x1 )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x1 )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y1 )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y1 )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_x2 )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x2 )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y2 )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y2 )(
            __RPC__in ISVGPathSegCurvetoCubicRel * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegCurvetoCubicRelVtbl;
    interface ISVGPathSegCurvetoCubicRel
    {
        CONST_VTBL struct ISVGPathSegCurvetoCubicRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> put_x1(This,v) )
    ( (This)->lpVtbl -> get_x1(This,p) )
    ( (This)->lpVtbl -> put_y1(This,v) )
    ( (This)->lpVtbl -> get_y1(This,p) )
    ( (This)->lpVtbl -> put_x2(This,v) )
    ( (This)->lpVtbl -> get_x2(This,p) )
    ( (This)->lpVtbl -> put_y2(This,v) )
    ( (This)->lpVtbl -> get_y2(This,p) )
EXTERN_C const IID IID_ISVGPathSegCurvetoCubicSmoothAbs;
    typedef struct ISVGPathSegCurvetoCubicSmoothAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegCurvetoCubicSmoothAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_x2 )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x2 )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y2 )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y2 )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothAbs * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegCurvetoCubicSmoothAbsVtbl;
    interface ISVGPathSegCurvetoCubicSmoothAbs
    {
        CONST_VTBL struct ISVGPathSegCurvetoCubicSmoothAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> put_x2(This,v) )
    ( (This)->lpVtbl -> get_x2(This,p) )
    ( (This)->lpVtbl -> put_y2(This,v) )
    ( (This)->lpVtbl -> get_y2(This,p) )
EXTERN_C const IID IID_ISVGPathSegCurvetoCubicSmoothRel;
    typedef struct ISVGPathSegCurvetoCubicSmoothRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegCurvetoCubicSmoothRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_x2 )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x2 )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y2 )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y2 )(
            __RPC__in ISVGPathSegCurvetoCubicSmoothRel * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegCurvetoCubicSmoothRelVtbl;
    interface ISVGPathSegCurvetoCubicSmoothRel
    {
        CONST_VTBL struct ISVGPathSegCurvetoCubicSmoothRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> put_x2(This,v) )
    ( (This)->lpVtbl -> get_x2(This,p) )
    ( (This)->lpVtbl -> put_y2(This,v) )
    ( (This)->lpVtbl -> get_y2(This,p) )
EXTERN_C const IID IID_ISVGPathSegCurvetoQuadraticAbs;
    typedef struct ISVGPathSegCurvetoQuadraticAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegCurvetoQuadraticAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_x1 )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x1 )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y1 )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y1 )(
            __RPC__in ISVGPathSegCurvetoQuadraticAbs * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegCurvetoQuadraticAbsVtbl;
    interface ISVGPathSegCurvetoQuadraticAbs
    {
        CONST_VTBL struct ISVGPathSegCurvetoQuadraticAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> put_x1(This,v) )
    ( (This)->lpVtbl -> get_x1(This,p) )
    ( (This)->lpVtbl -> put_y1(This,v) )
    ( (This)->lpVtbl -> get_y1(This,p) )
EXTERN_C const IID IID_ISVGPathSegCurvetoQuadraticRel;
    typedef struct ISVGPathSegCurvetoQuadraticRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegCurvetoQuadraticRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_x1 )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x1 )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y1 )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y1 )(
            __RPC__in ISVGPathSegCurvetoQuadraticRel * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegCurvetoQuadraticRelVtbl;
    interface ISVGPathSegCurvetoQuadraticRel
    {
        CONST_VTBL struct ISVGPathSegCurvetoQuadraticRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> put_x1(This,v) )
    ( (This)->lpVtbl -> get_x1(This,p) )
    ( (This)->lpVtbl -> put_y1(This,v) )
    ( (This)->lpVtbl -> get_y1(This,p) )
EXTERN_C const IID IID_ISVGPathSegCurvetoQuadraticSmoothAbs;
    typedef struct ISVGPathSegCurvetoQuadraticSmoothAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegCurvetoQuadraticSmoothAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothAbs * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothAbs * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegCurvetoQuadraticSmoothAbsVtbl;
    interface ISVGPathSegCurvetoQuadraticSmoothAbs
    {
        CONST_VTBL struct ISVGPathSegCurvetoQuadraticSmoothAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
EXTERN_C const IID IID_ISVGPathSegCurvetoQuadraticSmoothRel;
    typedef struct ISVGPathSegCurvetoQuadraticSmoothRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegCurvetoQuadraticSmoothRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothRel * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegCurvetoQuadraticSmoothRel * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegCurvetoQuadraticSmoothRelVtbl;
    interface ISVGPathSegCurvetoQuadraticSmoothRel
    {
        CONST_VTBL struct ISVGPathSegCurvetoQuadraticSmoothRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
EXTERN_C const IID IID_ISVGPathSegLinetoHorizontalAbs;
    typedef struct ISVGPathSegLinetoHorizontalAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegLinetoHorizontalAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegLinetoHorizontalAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegLinetoHorizontalAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegLinetoHorizontalAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegLinetoHorizontalAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegLinetoHorizontalAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegLinetoHorizontalAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegLinetoHorizontalAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegLinetoHorizontalAbs * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegLinetoHorizontalAbsVtbl;
    interface ISVGPathSegLinetoHorizontalAbs
    {
        CONST_VTBL struct ISVGPathSegLinetoHorizontalAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
EXTERN_C const IID IID_ISVGPathSegLinetoHorizontalRel;
    typedef struct ISVGPathSegLinetoHorizontalRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegLinetoHorizontalRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegLinetoHorizontalRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegLinetoHorizontalRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegLinetoHorizontalRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegLinetoHorizontalRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegLinetoHorizontalRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegLinetoHorizontalRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPathSegLinetoHorizontalRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPathSegLinetoHorizontalRel * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegLinetoHorizontalRelVtbl;
    interface ISVGPathSegLinetoHorizontalRel
    {
        CONST_VTBL struct ISVGPathSegLinetoHorizontalRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
EXTERN_C const IID IID_ISVGPathSegLinetoVerticalAbs;
    typedef struct ISVGPathSegLinetoVerticalAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegLinetoVerticalAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegLinetoVerticalAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegLinetoVerticalAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegLinetoVerticalAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegLinetoVerticalAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegLinetoVerticalAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegLinetoVerticalAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegLinetoVerticalAbs * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegLinetoVerticalAbs * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegLinetoVerticalAbsVtbl;
    interface ISVGPathSegLinetoVerticalAbs
    {
        CONST_VTBL struct ISVGPathSegLinetoVerticalAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
EXTERN_C const IID IID_ISVGPathSegLinetoVerticalRel;
    typedef struct ISVGPathSegLinetoVerticalRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegLinetoVerticalRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegLinetoVerticalRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegLinetoVerticalRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegLinetoVerticalRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegLinetoVerticalRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegLinetoVerticalRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegLinetoVerticalRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPathSegLinetoVerticalRel * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPathSegLinetoVerticalRel * This,
                                __RPC__out float *p);
        END_INTERFACE
    } ISVGPathSegLinetoVerticalRelVtbl;
    interface ISVGPathSegLinetoVerticalRel
    {
        CONST_VTBL struct ISVGPathSegLinetoVerticalRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
EXTERN_C const CLSID CLSID_SVGPathSeg;
class DECLSPEC_UUID("305105b3-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSeg;
EXTERN_C const IID DIID_DispSVGPathSegArcAbs;
    typedef struct DispSVGPathSegArcAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegArcAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegArcAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegArcAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegArcAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegArcAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegArcAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegArcAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegArcAbsVtbl;
    interface DispSVGPathSegArcAbs
    {
        CONST_VTBL struct DispSVGPathSegArcAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegArcAbs;
class DECLSPEC_UUID("305105bb-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegArcAbs;
EXTERN_C const IID DIID_DispSVGPathSegArcRel;
    typedef struct DispSVGPathSegArcRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegArcRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegArcRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegArcRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegArcRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegArcRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegArcRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegArcRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegArcRelVtbl;
    interface DispSVGPathSegArcRel
    {
        CONST_VTBL struct DispSVGPathSegArcRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegArcRel;
class DECLSPEC_UUID("305105bc-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegArcRel;
EXTERN_C const IID DIID_DispSVGPathSegClosePath;
    typedef struct DispSVGPathSegClosePathVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegClosePath * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegClosePath * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegClosePath * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegClosePath * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegClosePath * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegClosePath * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegClosePath * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegClosePathVtbl;
    interface DispSVGPathSegClosePath
    {
        CONST_VTBL struct DispSVGPathSegClosePathVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegClosePath;
class DECLSPEC_UUID("305105bd-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegClosePath;
EXTERN_C const IID DIID_DispSVGPathSegMovetoAbs;
    typedef struct DispSVGPathSegMovetoAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegMovetoAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegMovetoAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegMovetoAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegMovetoAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegMovetoAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegMovetoAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegMovetoAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegMovetoAbsVtbl;
    interface DispSVGPathSegMovetoAbs
    {
        CONST_VTBL struct DispSVGPathSegMovetoAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegMovetoAbs;
class DECLSPEC_UUID("305105cc-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegMovetoAbs;
EXTERN_C const IID DIID_DispSVGPathSegMovetoRel;
    typedef struct DispSVGPathSegMovetoRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegMovetoRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegMovetoRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegMovetoRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegMovetoRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegMovetoRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegMovetoRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegMovetoRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegMovetoRelVtbl;
    interface DispSVGPathSegMovetoRel
    {
        CONST_VTBL struct DispSVGPathSegMovetoRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegMovetoRel;
class DECLSPEC_UUID("305105cd-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegMovetoRel;
EXTERN_C const IID DIID_DispSVGPathSegLinetoAbs;
    typedef struct DispSVGPathSegLinetoAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegLinetoAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegLinetoAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegLinetoAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegLinetoAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegLinetoAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegLinetoAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegLinetoAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegLinetoAbsVtbl;
    interface DispSVGPathSegLinetoAbs
    {
        CONST_VTBL struct DispSVGPathSegLinetoAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegLinetoAbs;
class DECLSPEC_UUID("305105c6-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegLinetoAbs;
EXTERN_C const IID DIID_DispSVGPathSegLinetoRel;
    typedef struct DispSVGPathSegLinetoRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegLinetoRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegLinetoRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegLinetoRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegLinetoRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegLinetoRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegLinetoRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegLinetoRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegLinetoRelVtbl;
    interface DispSVGPathSegLinetoRel
    {
        CONST_VTBL struct DispSVGPathSegLinetoRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegLinetoRel;
class DECLSPEC_UUID("305105c9-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegLinetoRel;
EXTERN_C const IID DIID_DispSVGPathSegCurvetoCubicAbs;
    typedef struct DispSVGPathSegCurvetoCubicAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegCurvetoCubicAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegCurvetoCubicAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegCurvetoCubicAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegCurvetoCubicAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegCurvetoCubicAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegCurvetoCubicAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegCurvetoCubicAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegCurvetoCubicAbsVtbl;
    interface DispSVGPathSegCurvetoCubicAbs
    {
        CONST_VTBL struct DispSVGPathSegCurvetoCubicAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegCurvetoCubicAbs;
class DECLSPEC_UUID("305105be-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegCurvetoCubicAbs;
EXTERN_C const IID DIID_DispSVGPathSegCurvetoCubicRel;
    typedef struct DispSVGPathSegCurvetoCubicRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegCurvetoCubicRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegCurvetoCubicRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegCurvetoCubicRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegCurvetoCubicRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegCurvetoCubicRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegCurvetoCubicRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegCurvetoCubicRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegCurvetoCubicRelVtbl;
    interface DispSVGPathSegCurvetoCubicRel
    {
        CONST_VTBL struct DispSVGPathSegCurvetoCubicRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegCurvetoCubicRel;
class DECLSPEC_UUID("305105bf-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegCurvetoCubicRel;
EXTERN_C const IID DIID_DispSVGPathSegCurvetoCubicSmoothAbs;
    typedef struct DispSVGPathSegCurvetoCubicSmoothAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegCurvetoCubicSmoothAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegCurvetoCubicSmoothAbsVtbl;
    interface DispSVGPathSegCurvetoCubicSmoothAbs
    {
        CONST_VTBL struct DispSVGPathSegCurvetoCubicSmoothAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegCurvetoCubicSmoothAbs;
class DECLSPEC_UUID("305105c0-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegCurvetoCubicSmoothAbs;
EXTERN_C const IID DIID_DispSVGPathSegCurvetoCubicSmoothRel;
    typedef struct DispSVGPathSegCurvetoCubicSmoothRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegCurvetoCubicSmoothRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegCurvetoCubicSmoothRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegCurvetoCubicSmoothRelVtbl;
    interface DispSVGPathSegCurvetoCubicSmoothRel
    {
        CONST_VTBL struct DispSVGPathSegCurvetoCubicSmoothRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegCurvetoCubicSmoothRel;
class DECLSPEC_UUID("305105c1-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegCurvetoCubicSmoothRel;
EXTERN_C const IID DIID_DispSVGPathSegCurvetoQuadraticAbs;
    typedef struct DispSVGPathSegCurvetoQuadraticAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegCurvetoQuadraticAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegCurvetoQuadraticAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegCurvetoQuadraticAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegCurvetoQuadraticAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegCurvetoQuadraticAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegCurvetoQuadraticAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegCurvetoQuadraticAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegCurvetoQuadraticAbsVtbl;
    interface DispSVGPathSegCurvetoQuadraticAbs
    {
        CONST_VTBL struct DispSVGPathSegCurvetoQuadraticAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegCurvetoQuadraticAbs;
class DECLSPEC_UUID("305105c2-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegCurvetoQuadraticAbs;
EXTERN_C const IID DIID_DispSVGPathSegCurvetoQuadraticRel;
    typedef struct DispSVGPathSegCurvetoQuadraticRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegCurvetoQuadraticRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegCurvetoQuadraticRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegCurvetoQuadraticRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegCurvetoQuadraticRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegCurvetoQuadraticRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegCurvetoQuadraticRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegCurvetoQuadraticRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegCurvetoQuadraticRelVtbl;
    interface DispSVGPathSegCurvetoQuadraticRel
    {
        CONST_VTBL struct DispSVGPathSegCurvetoQuadraticRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegCurvetoQuadraticRel;
class DECLSPEC_UUID("305105c3-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegCurvetoQuadraticRel;
EXTERN_C const IID DIID_DispSVGPathSegCurvetoQuadraticSmoothAbs;
    typedef struct DispSVGPathSegCurvetoQuadraticSmoothAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegCurvetoQuadraticSmoothAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegCurvetoQuadraticSmoothAbsVtbl;
    interface DispSVGPathSegCurvetoQuadraticSmoothAbs
    {
        CONST_VTBL struct DispSVGPathSegCurvetoQuadraticSmoothAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegCurvetoQuadraticSmoothAbs;
class DECLSPEC_UUID("305105c4-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegCurvetoQuadraticSmoothAbs;
EXTERN_C const IID DIID_DispSVGPathSegCurvetoQuadraticSmoothRel;
    typedef struct DispSVGPathSegCurvetoQuadraticSmoothRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegCurvetoQuadraticSmoothRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegCurvetoQuadraticSmoothRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegCurvetoQuadraticSmoothRelVtbl;
    interface DispSVGPathSegCurvetoQuadraticSmoothRel
    {
        CONST_VTBL struct DispSVGPathSegCurvetoQuadraticSmoothRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegCurvetoQuadraticSmoothRel;
class DECLSPEC_UUID("305105c5-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegCurvetoQuadraticSmoothRel;
EXTERN_C const IID DIID_DispSVGPathSegLinetoHorizontalAbs;
    typedef struct DispSVGPathSegLinetoHorizontalAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegLinetoHorizontalAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegLinetoHorizontalAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegLinetoHorizontalAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegLinetoHorizontalAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegLinetoHorizontalAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegLinetoHorizontalAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegLinetoHorizontalAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegLinetoHorizontalAbsVtbl;
    interface DispSVGPathSegLinetoHorizontalAbs
    {
        CONST_VTBL struct DispSVGPathSegLinetoHorizontalAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegLinetoHorizontalAbs;
class DECLSPEC_UUID("305105c7-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegLinetoHorizontalAbs;
EXTERN_C const IID DIID_DispSVGPathSegLinetoHorizontalRel;
    typedef struct DispSVGPathSegLinetoHorizontalRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegLinetoHorizontalRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegLinetoHorizontalRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegLinetoHorizontalRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegLinetoHorizontalRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegLinetoHorizontalRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegLinetoHorizontalRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegLinetoHorizontalRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegLinetoHorizontalRelVtbl;
    interface DispSVGPathSegLinetoHorizontalRel
    {
        CONST_VTBL struct DispSVGPathSegLinetoHorizontalRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegLinetoHorizontalRel;
class DECLSPEC_UUID("305105c8-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegLinetoHorizontalRel;
EXTERN_C const IID DIID_DispSVGPathSegLinetoVerticalAbs;
    typedef struct DispSVGPathSegLinetoVerticalAbsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegLinetoVerticalAbs * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegLinetoVerticalAbs * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegLinetoVerticalAbs * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegLinetoVerticalAbs * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegLinetoVerticalAbs * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegLinetoVerticalAbs * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegLinetoVerticalAbs * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegLinetoVerticalAbsVtbl;
    interface DispSVGPathSegLinetoVerticalAbs
    {
        CONST_VTBL struct DispSVGPathSegLinetoVerticalAbsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegLinetoVerticalAbs;
class DECLSPEC_UUID("305105ca-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegLinetoVerticalAbs;
EXTERN_C const IID DIID_DispSVGPathSegLinetoVerticalRel;
    typedef struct DispSVGPathSegLinetoVerticalRelVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathSegLinetoVerticalRel * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathSegLinetoVerticalRel * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathSegLinetoVerticalRel * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathSegLinetoVerticalRel * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathSegLinetoVerticalRel * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathSegLinetoVerticalRel * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathSegLinetoVerticalRel * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathSegLinetoVerticalRelVtbl;
    interface DispSVGPathSegLinetoVerticalRel
    {
        CONST_VTBL struct DispSVGPathSegLinetoVerticalRelVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathSegLinetoVerticalRel;
class DECLSPEC_UUID("305105cb-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegLinetoVerticalRel;
EXTERN_C const IID IID_ISVGPathSegList;
    typedef struct ISVGPathSegListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathSegList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathSegList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathSegList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathSegList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathSegList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathSegList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathSegList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_numberOfItems )(
            __RPC__in ISVGPathSegList * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_numberOfItems )(
            __RPC__in ISVGPathSegList * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *clear )(
            __RPC__in ISVGPathSegList * This);
                   HRESULT ( STDMETHODCALLTYPE *initialize )(
            __RPC__in ISVGPathSegList * This,
                       __RPC__in_opt ISVGPathSeg *newItem,
                                __RPC__deref_out_opt ISVGPathSeg **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getItem )(
            __RPC__in ISVGPathSegList * This,
                       long index,
                                __RPC__deref_out_opt ISVGPathSeg **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *insertItemBefore )(
            __RPC__in ISVGPathSegList * This,
                       __RPC__in_opt ISVGPathSeg *newItem,
                       long index,
                                __RPC__deref_out_opt ISVGPathSeg **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *replaceItem )(
            __RPC__in ISVGPathSegList * This,
                       __RPC__in_opt ISVGPathSeg *newItem,
                       long index,
                                __RPC__deref_out_opt ISVGPathSeg **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *removeItem )(
            __RPC__in ISVGPathSegList * This,
                       long index,
                                __RPC__deref_out_opt ISVGPathSeg **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *appendItem )(
            __RPC__in ISVGPathSegList * This,
                       __RPC__in_opt ISVGPathSeg *newItem,
                                __RPC__deref_out_opt ISVGPathSeg **ppResult);
        END_INTERFACE
    } ISVGPathSegListVtbl;
    interface ISVGPathSegList
    {
        CONST_VTBL struct ISVGPathSegListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_numberOfItems(This,v) )
    ( (This)->lpVtbl -> get_numberOfItems(This,p) )
    ( (This)->lpVtbl -> clear(This) )
    ( (This)->lpVtbl -> initialize(This,newItem,ppResult) )
    ( (This)->lpVtbl -> getItem(This,index,ppResult) )
    ( (This)->lpVtbl -> insertItemBefore(This,newItem,index,ppResult) )
    ( (This)->lpVtbl -> replaceItem(This,newItem,index,ppResult) )
    ( (This)->lpVtbl -> removeItem(This,index,ppResult) )
    ( (This)->lpVtbl -> appendItem(This,newItem,ppResult) )
EXTERN_C const CLSID CLSID_SVGPathSegList;
class DECLSPEC_UUID("305105b4-98b5-11cf-bb82-00aa00bdce0b")
SVGPathSegList;
EXTERN_C const IID IID_ISVGPoint;
    typedef struct ISVGPointVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPoint * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPoint * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPoint * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPoint * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPoint * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPoint * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPoint * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_x )(
            __RPC__in ISVGPoint * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGPoint * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_y )(
            __RPC__in ISVGPoint * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGPoint * This,
                                __RPC__out float *p);
                   HRESULT ( STDMETHODCALLTYPE *matrixTransform )(
            __RPC__in ISVGPoint * This,
                       __RPC__in_opt ISVGMatrix *pMatrix,
                                __RPC__deref_out_opt ISVGPoint **ppResult);
        END_INTERFACE
    } ISVGPointVtbl;
    interface ISVGPoint
    {
        CONST_VTBL struct ISVGPointVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> put_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> matrixTransform(This,pMatrix,ppResult) )
EXTERN_C const CLSID CLSID_SVGPoint;
class DECLSPEC_UUID("305105ba-98b5-11cf-bb82-00aa00bdce0b")
SVGPoint;
EXTERN_C const IID IID_ISVGPointList;
    typedef struct ISVGPointListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPointList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPointList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPointList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPointList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPointList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPointList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPointList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_numberOfItems )(
            __RPC__in ISVGPointList * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_numberOfItems )(
            __RPC__in ISVGPointList * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *clear )(
            __RPC__in ISVGPointList * This);
                   HRESULT ( STDMETHODCALLTYPE *initialize )(
            __RPC__in ISVGPointList * This,
                       __RPC__in_opt ISVGPoint *pNewItem,
                                __RPC__deref_out_opt ISVGPoint **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getItem )(
            __RPC__in ISVGPointList * This,
                       long index,
                                __RPC__deref_out_opt ISVGPoint **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *insertItemBefore )(
            __RPC__in ISVGPointList * This,
                       __RPC__in_opt ISVGPoint *pNewItem,
                       long index,
                                __RPC__deref_out_opt ISVGPoint **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *replaceItem )(
            __RPC__in ISVGPointList * This,
                       __RPC__in_opt ISVGPoint *pNewItem,
                       long index,
                                __RPC__deref_out_opt ISVGPoint **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *removeItem )(
            __RPC__in ISVGPointList * This,
                       long index,
                                __RPC__deref_out_opt ISVGPoint **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *appendItem )(
            __RPC__in ISVGPointList * This,
                       __RPC__in_opt ISVGPoint *pNewItem,
                                __RPC__deref_out_opt ISVGPoint **ppResult);
        END_INTERFACE
    } ISVGPointListVtbl;
    interface ISVGPointList
    {
        CONST_VTBL struct ISVGPointListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_numberOfItems(This,v) )
    ( (This)->lpVtbl -> get_numberOfItems(This,p) )
    ( (This)->lpVtbl -> clear(This) )
    ( (This)->lpVtbl -> initialize(This,pNewItem,ppResult) )
    ( (This)->lpVtbl -> getItem(This,index,ppResult) )
    ( (This)->lpVtbl -> insertItemBefore(This,pNewItem,index,ppResult) )
    ( (This)->lpVtbl -> replaceItem(This,pNewItem,index,ppResult) )
    ( (This)->lpVtbl -> removeItem(This,index,ppResult) )
    ( (This)->lpVtbl -> appendItem(This,pNewItem,ppResult) )
EXTERN_C const CLSID CLSID_SVGPointList;
class DECLSPEC_UUID("305105b9-98b5-11cf-bb82-00aa00bdce0b")
SVGPointList;
EXTERN_C const CLSID CLSID_SVGRect;
class DECLSPEC_UUID("30510583-98b5-11cf-bb82-00aa00bdce0b")
SVGRect;
EXTERN_C const CLSID CLSID_SVGStringList;
class DECLSPEC_UUID("3051058d-98b5-11cf-bb82-00aa00bdce0b")
SVGStringList;
EXTERN_C const IID IID_ISVGViewSpec;
    typedef struct ISVGViewSpecVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGViewSpec * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGViewSpec * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGViewSpec * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGViewSpec * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGViewSpec * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGViewSpec * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGViewSpec * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGViewSpecVtbl;
    interface ISVGViewSpec
    {
        CONST_VTBL struct ISVGViewSpecVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_ISVGTransform;
    typedef struct ISVGTransformVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGTransform * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGTransform * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGTransform * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGTransform * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGTransform * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGTransform * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGTransform * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in ISVGTransform * This,
                       short v);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in ISVGTransform * This,
                                __RPC__out short *p);
                               HRESULT ( STDMETHODCALLTYPE *putref_matrix )(
            __RPC__in ISVGTransform * This,
                       __RPC__in_opt ISVGMatrix *v);
                            HRESULT ( STDMETHODCALLTYPE *get_matrix )(
            __RPC__in ISVGTransform * This,
                                __RPC__deref_out_opt ISVGMatrix **p);
                            HRESULT ( STDMETHODCALLTYPE *put_angle )(
            __RPC__in ISVGTransform * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_angle )(
            __RPC__in ISVGTransform * This,
                                __RPC__out float *p);
                   HRESULT ( STDMETHODCALLTYPE *setMatrix )(
            __RPC__in ISVGTransform * This,
                       __RPC__in_opt ISVGMatrix *matrix);
                   HRESULT ( STDMETHODCALLTYPE *setTranslate )(
            __RPC__in ISVGTransform * This,
                       float tx,
                       float ty);
                   HRESULT ( STDMETHODCALLTYPE *setScale )(
            __RPC__in ISVGTransform * This,
                       float sx,
                       float sy);
                   HRESULT ( STDMETHODCALLTYPE *setRotate )(
            __RPC__in ISVGTransform * This,
                       float angle,
                       float cx,
                       float cy);
                   HRESULT ( STDMETHODCALLTYPE *setSkewX )(
            __RPC__in ISVGTransform * This,
                       float angle);
                   HRESULT ( STDMETHODCALLTYPE *setSkewY )(
            __RPC__in ISVGTransform * This,
                       float angle);
        END_INTERFACE
    } ISVGTransformVtbl;
    interface ISVGTransform
    {
        CONST_VTBL struct ISVGTransformVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> putref_matrix(This,v) )
    ( (This)->lpVtbl -> get_matrix(This,p) )
    ( (This)->lpVtbl -> put_angle(This,v) )
    ( (This)->lpVtbl -> get_angle(This,p) )
    ( (This)->lpVtbl -> setMatrix(This,matrix) )
    ( (This)->lpVtbl -> setTranslate(This,tx,ty) )
    ( (This)->lpVtbl -> setScale(This,sx,sy) )
    ( (This)->lpVtbl -> setRotate(This,angle,cx,cy) )
    ( (This)->lpVtbl -> setSkewX(This,angle) )
    ( (This)->lpVtbl -> setSkewY(This,angle) )
EXTERN_C const CLSID CLSID_SVGTransform;
class DECLSPEC_UUID("305105af-98b5-11cf-bb82-00aa00bdce0b")
SVGTransform;
EXTERN_C const IID DIID_DispSVGSVGElement;
    typedef struct DispSVGSVGElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGSVGElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGSVGElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGSVGElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGSVGElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGSVGElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGSVGElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGSVGElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGSVGElementVtbl;
    interface DispSVGSVGElement
    {
        CONST_VTBL struct DispSVGSVGElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGSVGElement;
class DECLSPEC_UUID("30510574-98b5-11cf-bb82-00aa00bdce0b")
SVGSVGElement;
EXTERN_C const IID IID_ISVGElementInstance;
    typedef struct ISVGElementInstanceVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGElementInstance * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGElementInstance * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGElementInstance * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGElementInstance * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGElementInstance * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGElementInstance * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGElementInstance * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_correspondingElement )(
            __RPC__in ISVGElementInstance * This,
                                __RPC__deref_out_opt ISVGElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_correspondingUseElement )(
            __RPC__in ISVGElementInstance * This,
                                __RPC__deref_out_opt ISVGUseElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_parentNode )(
            __RPC__in ISVGElementInstance * This,
                                __RPC__deref_out_opt ISVGElementInstance **p);
                            HRESULT ( STDMETHODCALLTYPE *get_childNodes )(
            __RPC__in ISVGElementInstance * This,
                                __RPC__deref_out_opt ISVGElementInstanceList **p);
                            HRESULT ( STDMETHODCALLTYPE *get_firstChild )(
            __RPC__in ISVGElementInstance * This,
                                __RPC__deref_out_opt ISVGElementInstance **p);
                            HRESULT ( STDMETHODCALLTYPE *get_lastChild )(
            __RPC__in ISVGElementInstance * This,
                                __RPC__deref_out_opt ISVGElementInstance **p);
                            HRESULT ( STDMETHODCALLTYPE *get_previousSibling )(
            __RPC__in ISVGElementInstance * This,
                                __RPC__deref_out_opt ISVGElementInstance **p);
                            HRESULT ( STDMETHODCALLTYPE *get_nextSibling )(
            __RPC__in ISVGElementInstance * This,
                                __RPC__deref_out_opt ISVGElementInstance **p);
        END_INTERFACE
    } ISVGElementInstanceVtbl;
    interface ISVGElementInstance
    {
        CONST_VTBL struct ISVGElementInstanceVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_correspondingElement(This,p) )
    ( (This)->lpVtbl -> get_correspondingUseElement(This,p) )
    ( (This)->lpVtbl -> get_parentNode(This,p) )
    ( (This)->lpVtbl -> get_childNodes(This,p) )
    ( (This)->lpVtbl -> get_firstChild(This,p) )
    ( (This)->lpVtbl -> get_lastChild(This,p) )
    ( (This)->lpVtbl -> get_previousSibling(This,p) )
    ( (This)->lpVtbl -> get_nextSibling(This,p) )
EXTERN_C const IID IID_ISVGUseElement;
    typedef struct ISVGUseElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGUseElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGUseElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGUseElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGUseElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGUseElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGUseElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGUseElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_x )(
            __RPC__in ISVGUseElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGUseElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_y )(
            __RPC__in ISVGUseElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGUseElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_width )(
            __RPC__in ISVGUseElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in ISVGUseElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_height )(
            __RPC__in ISVGUseElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in ISVGUseElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_instanceRoot )(
            __RPC__in ISVGUseElement * This,
                       __RPC__in_opt ISVGElementInstance *v);
                            HRESULT ( STDMETHODCALLTYPE *get_instanceRoot )(
            __RPC__in ISVGUseElement * This,
                                __RPC__deref_out_opt ISVGElementInstance **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_animatedInstanceRoot )(
            __RPC__in ISVGUseElement * This,
                       __RPC__in_opt ISVGElementInstance *v);
                            HRESULT ( STDMETHODCALLTYPE *get_animatedInstanceRoot )(
            __RPC__in ISVGUseElement * This,
                                __RPC__deref_out_opt ISVGElementInstance **p);
        END_INTERFACE
    } ISVGUseElementVtbl;
    interface ISVGUseElement
    {
        CONST_VTBL struct ISVGUseElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> putref_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> putref_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> putref_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> putref_instanceRoot(This,v) )
    ( (This)->lpVtbl -> get_instanceRoot(This,p) )
    ( (This)->lpVtbl -> putref_animatedInstanceRoot(This,v) )
    ( (This)->lpVtbl -> get_animatedInstanceRoot(This,p) )
EXTERN_C const IID DIID_DispSVGUseElement;
    typedef struct DispSVGUseElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGUseElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGUseElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGUseElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGUseElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGUseElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGUseElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGUseElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGUseElementVtbl;
    interface DispSVGUseElement
    {
        CONST_VTBL struct DispSVGUseElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGUseElement;
class DECLSPEC_UUID("30510590-98b5-11cf-bb82-00aa00bdce0b")
SVGUseElement;
EXTERN_C const IID IID_IHTMLStyleSheetRulesAppliedCollection;
    typedef struct IHTMLStyleSheetRulesAppliedCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLStyleSheetRulesAppliedCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLStyleSheetRulesAppliedCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLStyleSheetRulesAppliedCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLStyleSheetRulesAppliedCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLStyleSheetRulesAppliedCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLStyleSheetRulesAppliedCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLStyleSheetRulesAppliedCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLStyleSheetRulesAppliedCollection * This,
                       long index,
                                __RPC__deref_out_opt IHTMLStyleSheetRule **ppHTMLStyleSheetRule);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLStyleSheetRulesAppliedCollection * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *propertyAppliedBy )(
            __RPC__in IHTMLStyleSheetRulesAppliedCollection * This,
                       __RPC__in BSTR name,
                                __RPC__deref_out_opt IHTMLStyleSheetRule **ppRule);
                   HRESULT ( STDMETHODCALLTYPE *propertyAppliedTrace )(
            __RPC__in IHTMLStyleSheetRulesAppliedCollection * This,
                       __RPC__in BSTR name,
                       long index,
                                __RPC__deref_out_opt IHTMLStyleSheetRule **ppRule);
                   HRESULT ( STDMETHODCALLTYPE *propertyAppliedTraceLength )(
            __RPC__in IHTMLStyleSheetRulesAppliedCollection * This,
                       __RPC__in BSTR name,
                                __RPC__out long *pLength);
        END_INTERFACE
    } IHTMLStyleSheetRulesAppliedCollectionVtbl;
    interface IHTMLStyleSheetRulesAppliedCollection
    {
        CONST_VTBL struct IHTMLStyleSheetRulesAppliedCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> item(This,index,ppHTMLStyleSheetRule) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> propertyAppliedBy(This,name,ppRule) )
    ( (This)->lpVtbl -> propertyAppliedTrace(This,name,index,ppRule) )
    ( (This)->lpVtbl -> propertyAppliedTraceLength(This,name,pLength) )
EXTERN_C const IID IID_IRulesApplied;
    typedef struct IRulesAppliedVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IRulesApplied * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IRulesApplied * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IRulesApplied * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IRulesApplied * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IRulesApplied * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IRulesApplied * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IRulesApplied * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_element )(
            __RPC__in IRulesApplied * This,
                                __RPC__deref_out_opt IHTMLElement **p);
                            HRESULT ( STDMETHODCALLTYPE *get_inlineStyles )(
            __RPC__in IRulesApplied * This,
                                __RPC__deref_out_opt IHTMLStyle **p);
                            HRESULT ( STDMETHODCALLTYPE *get_appliedRules )(
            __RPC__in IRulesApplied * This,
                                __RPC__deref_out_opt IHTMLStyleSheetRulesAppliedCollection **p);
                   HRESULT ( STDMETHODCALLTYPE *propertyIsInline )(
            __RPC__in IRulesApplied * This,
                       __RPC__in BSTR name,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *propertyIsInheritable )(
            __RPC__in IRulesApplied * This,
                       __RPC__in BSTR name,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *hasInheritableProperty )(
            __RPC__in IRulesApplied * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IRulesAppliedVtbl;
    interface IRulesApplied
    {
        CONST_VTBL struct IRulesAppliedVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_element(This,p) )
    ( (This)->lpVtbl -> get_inlineStyles(This,p) )
    ( (This)->lpVtbl -> get_appliedRules(This,p) )
    ( (This)->lpVtbl -> propertyIsInline(This,name,p) )
    ( (This)->lpVtbl -> propertyIsInheritable(This,name,p) )
    ( (This)->lpVtbl -> hasInheritableProperty(This,p) )
EXTERN_C const IID DIID_DispHTMLStyleSheetRulesAppliedCollection;
    typedef struct DispHTMLStyleSheetRulesAppliedCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLStyleSheetRulesAppliedCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLStyleSheetRulesAppliedCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLStyleSheetRulesAppliedCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLStyleSheetRulesAppliedCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLStyleSheetRulesAppliedCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLStyleSheetRulesAppliedCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLStyleSheetRulesAppliedCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLStyleSheetRulesAppliedCollectionVtbl;
    interface DispHTMLStyleSheetRulesAppliedCollection
    {
        CONST_VTBL struct DispHTMLStyleSheetRulesAppliedCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLStyleSheetRulesAppliedCollection;
class DECLSPEC_UUID("eb36f845-2395-4719-b85c-d0d80e184bd9")
HTMLStyleSheetRulesAppliedCollection;
EXTERN_C const IID DIID_DispRulesApplied;
    typedef struct DispRulesAppliedVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispRulesApplied * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispRulesApplied * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispRulesApplied * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispRulesApplied * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispRulesApplied * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispRulesApplied * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispRulesApplied * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispRulesAppliedVtbl;
    interface DispRulesApplied
    {
        CONST_VTBL struct DispRulesAppliedVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_RulesApplied;
class DECLSPEC_UUID("7c803920-7a53-4d26-98ac-fdd23e6b9e01")
RulesApplied;
EXTERN_C const IID DIID_DispRulesAppliedCollection;
    typedef struct DispRulesAppliedCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispRulesAppliedCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispRulesAppliedCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispRulesAppliedCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispRulesAppliedCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispRulesAppliedCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispRulesAppliedCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispRulesAppliedCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispRulesAppliedCollectionVtbl;
    interface DispRulesAppliedCollection
    {
        CONST_VTBL struct DispRulesAppliedCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_RulesAppliedCollection;
class DECLSPEC_UUID("671926ee-c3cf-40af-be8f-1cbaee6486e8")
RulesAppliedCollection;
EXTERN_C const IID DIID_DispHTMLW3CComputedStyle;
    typedef struct DispHTMLW3CComputedStyleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLW3CComputedStyle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLW3CComputedStyle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLW3CComputedStyle * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLW3CComputedStyle * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLW3CComputedStyle * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLW3CComputedStyle * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLW3CComputedStyle * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLW3CComputedStyleVtbl;
    interface DispHTMLW3CComputedStyle
    {
        CONST_VTBL struct DispHTMLW3CComputedStyleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLW3CComputedStyle;
class DECLSPEC_UUID("305106c8-98b5-11cf-bb82-00aa00bdce0b")
HTMLW3CComputedStyle;
EXTERN_C const CLSID CLSID_SVGTransformList;
class DECLSPEC_UUID("305105b0-98b5-11cf-bb82-00aa00bdce0b")
SVGTransformList;
EXTERN_C const IID IID_ISVGAnimatedPoints;
    typedef struct ISVGAnimatedPointsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedPoints * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedPoints * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedPoints * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedPoints * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedPoints * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedPoints * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedPoints * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_points )(
            __RPC__in ISVGAnimatedPoints * This,
                       __RPC__in_opt ISVGPointList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_points )(
            __RPC__in ISVGAnimatedPoints * This,
                                __RPC__deref_out_opt ISVGPointList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_animatedPoints )(
            __RPC__in ISVGAnimatedPoints * This,
                       __RPC__in_opt ISVGPointList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_animatedPoints )(
            __RPC__in ISVGAnimatedPoints * This,
                                __RPC__deref_out_opt ISVGPointList **p);
        END_INTERFACE
    } ISVGAnimatedPointsVtbl;
    interface ISVGAnimatedPoints
    {
        CONST_VTBL struct ISVGAnimatedPointsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_points(This,v) )
    ( (This)->lpVtbl -> get_points(This,p) )
    ( (This)->lpVtbl -> putref_animatedPoints(This,v) )
    ( (This)->lpVtbl -> get_animatedPoints(This,p) )
EXTERN_C const IID IID_ISVGCircleElement;
    typedef struct ISVGCircleElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGCircleElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGCircleElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGCircleElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGCircleElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGCircleElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGCircleElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGCircleElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_cx )(
            __RPC__in ISVGCircleElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_cx )(
            __RPC__in ISVGCircleElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_cy )(
            __RPC__in ISVGCircleElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_cy )(
            __RPC__in ISVGCircleElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_r )(
            __RPC__in ISVGCircleElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_r )(
            __RPC__in ISVGCircleElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
        END_INTERFACE
    } ISVGCircleElementVtbl;
    interface ISVGCircleElement
    {
        CONST_VTBL struct ISVGCircleElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_cx(This,v) )
    ( (This)->lpVtbl -> get_cx(This,p) )
    ( (This)->lpVtbl -> putref_cy(This,v) )
    ( (This)->lpVtbl -> get_cy(This,p) )
    ( (This)->lpVtbl -> putref_r(This,v) )
    ( (This)->lpVtbl -> get_r(This,p) )
EXTERN_C const IID IID_ISVGEllipseElement;
    typedef struct ISVGEllipseElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGEllipseElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGEllipseElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGEllipseElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGEllipseElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGEllipseElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGEllipseElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGEllipseElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_cx )(
            __RPC__in ISVGEllipseElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_cx )(
            __RPC__in ISVGEllipseElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_cy )(
            __RPC__in ISVGEllipseElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_cy )(
            __RPC__in ISVGEllipseElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_rx )(
            __RPC__in ISVGEllipseElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_rx )(
            __RPC__in ISVGEllipseElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_ry )(
            __RPC__in ISVGEllipseElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_ry )(
            __RPC__in ISVGEllipseElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
        END_INTERFACE
    } ISVGEllipseElementVtbl;
    interface ISVGEllipseElement
    {
        CONST_VTBL struct ISVGEllipseElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_cx(This,v) )
    ( (This)->lpVtbl -> get_cx(This,p) )
    ( (This)->lpVtbl -> putref_cy(This,v) )
    ( (This)->lpVtbl -> get_cy(This,p) )
    ( (This)->lpVtbl -> putref_rx(This,v) )
    ( (This)->lpVtbl -> get_rx(This,p) )
    ( (This)->lpVtbl -> putref_ry(This,v) )
    ( (This)->lpVtbl -> get_ry(This,p) )
EXTERN_C const IID IID_ISVGLineElement;
    typedef struct ISVGLineElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGLineElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGLineElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGLineElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGLineElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGLineElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGLineElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGLineElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_x1 )(
            __RPC__in ISVGLineElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_x1 )(
            __RPC__in ISVGLineElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_y1 )(
            __RPC__in ISVGLineElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_y1 )(
            __RPC__in ISVGLineElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_x2 )(
            __RPC__in ISVGLineElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_x2 )(
            __RPC__in ISVGLineElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_y2 )(
            __RPC__in ISVGLineElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_y2 )(
            __RPC__in ISVGLineElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
        END_INTERFACE
    } ISVGLineElementVtbl;
    interface ISVGLineElement
    {
        CONST_VTBL struct ISVGLineElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_x1(This,v) )
    ( (This)->lpVtbl -> get_x1(This,p) )
    ( (This)->lpVtbl -> putref_y1(This,v) )
    ( (This)->lpVtbl -> get_y1(This,p) )
    ( (This)->lpVtbl -> putref_x2(This,v) )
    ( (This)->lpVtbl -> get_x2(This,p) )
    ( (This)->lpVtbl -> putref_y2(This,v) )
    ( (This)->lpVtbl -> get_y2(This,p) )
EXTERN_C const IID IID_ISVGRectElement;
    typedef struct ISVGRectElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGRectElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGRectElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGRectElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGRectElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGRectElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGRectElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGRectElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_x )(
            __RPC__in ISVGRectElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGRectElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_y )(
            __RPC__in ISVGRectElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGRectElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_width )(
            __RPC__in ISVGRectElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in ISVGRectElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_height )(
            __RPC__in ISVGRectElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in ISVGRectElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_rx )(
            __RPC__in ISVGRectElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_rx )(
            __RPC__in ISVGRectElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_ry )(
            __RPC__in ISVGRectElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_ry )(
            __RPC__in ISVGRectElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
        END_INTERFACE
    } ISVGRectElementVtbl;
    interface ISVGRectElement
    {
        CONST_VTBL struct ISVGRectElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> putref_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> putref_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> putref_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> putref_rx(This,v) )
    ( (This)->lpVtbl -> get_rx(This,p) )
    ( (This)->lpVtbl -> putref_ry(This,v) )
    ( (This)->lpVtbl -> get_ry(This,p) )
EXTERN_C const IID IID_ISVGPolygonElement;
    typedef struct ISVGPolygonElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPolygonElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPolygonElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPolygonElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPolygonElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPolygonElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPolygonElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPolygonElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGPolygonElementVtbl;
    interface ISVGPolygonElement
    {
        CONST_VTBL struct ISVGPolygonElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_ISVGPolylineElement;
    typedef struct ISVGPolylineElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPolylineElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPolylineElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPolylineElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPolylineElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPolylineElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPolylineElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPolylineElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGPolylineElementVtbl;
    interface ISVGPolylineElement
    {
        CONST_VTBL struct ISVGPolylineElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispSVGCircleElement;
    typedef struct DispSVGCircleElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGCircleElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGCircleElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGCircleElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGCircleElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGCircleElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGCircleElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGCircleElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGCircleElementVtbl;
    interface DispSVGCircleElement
    {
        CONST_VTBL struct DispSVGCircleElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGCircleElement;
class DECLSPEC_UUID("30510578-98b5-11cf-bb82-00aa00bdce0b")
SVGCircleElement;
EXTERN_C const IID DIID_DispSVGEllipseElement;
    typedef struct DispSVGEllipseElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGEllipseElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGEllipseElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGEllipseElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGEllipseElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGEllipseElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGEllipseElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGEllipseElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGEllipseElementVtbl;
    interface DispSVGEllipseElement
    {
        CONST_VTBL struct DispSVGEllipseElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGEllipseElement;
class DECLSPEC_UUID("30510579-98b5-11cf-bb82-00aa00bdce0b")
SVGEllipseElement;
EXTERN_C const IID DIID_DispSVGLineElement;
    typedef struct DispSVGLineElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGLineElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGLineElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGLineElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGLineElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGLineElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGLineElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGLineElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGLineElementVtbl;
    interface DispSVGLineElement
    {
        CONST_VTBL struct DispSVGLineElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGLineElement;
class DECLSPEC_UUID("3051057a-98b5-11cf-bb82-00aa00bdce0b")
SVGLineElement;
EXTERN_C const IID DIID_DispSVGRectElement;
    typedef struct DispSVGRectElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGRectElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGRectElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGRectElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGRectElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGRectElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGRectElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGRectElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGRectElementVtbl;
    interface DispSVGRectElement
    {
        CONST_VTBL struct DispSVGRectElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGRectElement;
class DECLSPEC_UUID("30510577-98b5-11cf-bb82-00aa00bdce0b")
SVGRectElement;
EXTERN_C const IID DIID_DispSVGPolygonElement;
    typedef struct DispSVGPolygonElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPolygonElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPolygonElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPolygonElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPolygonElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPolygonElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPolygonElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPolygonElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPolygonElementVtbl;
    interface DispSVGPolygonElement
    {
        CONST_VTBL struct DispSVGPolygonElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPolygonElement;
class DECLSPEC_UUID("3051057b-98b5-11cf-bb82-00aa00bdce0b")
SVGPolygonElement;
EXTERN_C const IID DIID_DispSVGPolylineElement;
    typedef struct DispSVGPolylineElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPolylineElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPolylineElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPolylineElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPolylineElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPolylineElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPolylineElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPolylineElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPolylineElementVtbl;
    interface DispSVGPolylineElement
    {
        CONST_VTBL struct DispSVGPolylineElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPolylineElement;
class DECLSPEC_UUID("3051057c-98b5-11cf-bb82-00aa00bdce0b")
SVGPolylineElement;
EXTERN_C const IID IID_ISVGGElement;
    typedef struct ISVGGElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGGElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGGElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGGElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGGElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGGElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGGElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGGElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGGElementVtbl;
    interface ISVGGElement
    {
        CONST_VTBL struct ISVGGElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispSVGGElement;
    typedef struct DispSVGGElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGGElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGGElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGGElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGGElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGGElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGGElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGGElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGGElementVtbl;
    interface DispSVGGElement
    {
        CONST_VTBL struct DispSVGGElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGGElement;
class DECLSPEC_UUID("3051056f-98b5-11cf-bb82-00aa00bdce0b")
SVGGElement;
EXTERN_C const IID IID_ISVGSymbolElement;
    typedef struct ISVGSymbolElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGSymbolElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGSymbolElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGSymbolElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGSymbolElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGSymbolElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGSymbolElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGSymbolElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGSymbolElementVtbl;
    interface ISVGSymbolElement
    {
        CONST_VTBL struct ISVGSymbolElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispSVGSymbolElement;
    typedef struct DispSVGSymbolElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGSymbolElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGSymbolElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGSymbolElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGSymbolElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGSymbolElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGSymbolElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGSymbolElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGSymbolElementVtbl;
    interface DispSVGSymbolElement
    {
        CONST_VTBL struct DispSVGSymbolElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGSymbolElement;
class DECLSPEC_UUID("30510571-98b5-11cf-bb82-00aa00bdce0b")
SVGSymbolElement;
EXTERN_C const IID IID_ISVGDefsElement;
    typedef struct ISVGDefsElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGDefsElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGDefsElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGDefsElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGDefsElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGDefsElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGDefsElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGDefsElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGDefsElementVtbl;
    interface ISVGDefsElement
    {
        CONST_VTBL struct ISVGDefsElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispSVGDefsElement;
    typedef struct DispSVGDefsElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGDefsElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGDefsElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGDefsElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGDefsElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGDefsElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGDefsElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGDefsElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGDefsElementVtbl;
    interface DispSVGDefsElement
    {
        CONST_VTBL struct DispSVGDefsElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGDefsElement;
class DECLSPEC_UUID("30510570-98b5-11cf-bb82-00aa00bdce0b")
SVGDefsElement;
EXTERN_C const IID IID_ISVGAnimatedPathData;
    typedef struct ISVGAnimatedPathDataVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAnimatedPathData * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAnimatedPathData * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAnimatedPathData * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAnimatedPathData * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAnimatedPathData * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAnimatedPathData * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAnimatedPathData * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_pathSegList )(
            __RPC__in ISVGAnimatedPathData * This,
                       __RPC__in_opt ISVGPathSegList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_pathSegList )(
            __RPC__in ISVGAnimatedPathData * This,
                                __RPC__deref_out_opt ISVGPathSegList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_normalizedPathSegList )(
            __RPC__in ISVGAnimatedPathData * This,
                       __RPC__in_opt ISVGPathSegList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_normalizedPathSegList )(
            __RPC__in ISVGAnimatedPathData * This,
                                __RPC__deref_out_opt ISVGPathSegList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_animatedPathSegList )(
            __RPC__in ISVGAnimatedPathData * This,
                       __RPC__in_opt ISVGPathSegList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_animatedPathSegList )(
            __RPC__in ISVGAnimatedPathData * This,
                                __RPC__deref_out_opt ISVGPathSegList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_animatedNormalizedPathSegList )(
            __RPC__in ISVGAnimatedPathData * This,
                       __RPC__in_opt ISVGPathSegList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_animatedNormalizedPathSegList )(
            __RPC__in ISVGAnimatedPathData * This,
                                __RPC__deref_out_opt ISVGPathSegList **p);
        END_INTERFACE
    } ISVGAnimatedPathDataVtbl;
    interface ISVGAnimatedPathData
    {
        CONST_VTBL struct ISVGAnimatedPathDataVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_pathSegList(This,v) )
    ( (This)->lpVtbl -> get_pathSegList(This,p) )
    ( (This)->lpVtbl -> putref_normalizedPathSegList(This,v) )
    ( (This)->lpVtbl -> get_normalizedPathSegList(This,p) )
    ( (This)->lpVtbl -> putref_animatedPathSegList(This,v) )
    ( (This)->lpVtbl -> get_animatedPathSegList(This,p) )
    ( (This)->lpVtbl -> putref_animatedNormalizedPathSegList(This,v) )
    ( (This)->lpVtbl -> get_animatedNormalizedPathSegList(This,p) )
EXTERN_C const IID IID_ISVGPathElement;
    typedef struct ISVGPathElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPathElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPathElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPathElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPathElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPathElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPathElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPathElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_pathLength )(
            __RPC__in ISVGPathElement * This,
                       __RPC__in_opt ISVGAnimatedNumber *v);
                            HRESULT ( STDMETHODCALLTYPE *get_pathLength )(
            __RPC__in ISVGPathElement * This,
                                __RPC__deref_out_opt ISVGAnimatedNumber **p);
                   HRESULT ( STDMETHODCALLTYPE *getTotalLength )(
            __RPC__in ISVGPathElement * This,
                                __RPC__out float *pfltResult);
                   HRESULT ( STDMETHODCALLTYPE *getPointAtLength )(
            __RPC__in ISVGPathElement * This,
                       float fltdistance,
                                __RPC__deref_out_opt ISVGPoint **ppPointResult);
                   HRESULT ( STDMETHODCALLTYPE *getPathSegAtLength )(
            __RPC__in ISVGPathElement * This,
                       float fltdistance,
                                __RPC__out long *plResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegClosePath )(
            __RPC__in ISVGPathElement * This,
                                __RPC__deref_out_opt ISVGPathSegClosePath **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegMovetoAbs )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                                __RPC__deref_out_opt ISVGPathSegMovetoAbs **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegMovetoRel )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                                __RPC__deref_out_opt ISVGPathSegMovetoRel **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegLinetoAbs )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                                __RPC__deref_out_opt ISVGPathSegLinetoAbs **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegLinetoRel )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                                __RPC__deref_out_opt ISVGPathSegLinetoRel **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegCurvetoCubicAbs )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                       float x1,
                       float y1,
                       float x2,
                       float y2,
                                __RPC__deref_out_opt ISVGPathSegCurvetoCubicAbs **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegCurvetoCubicRel )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                       float x1,
                       float y1,
                       float x2,
                       float y2,
                                __RPC__deref_out_opt ISVGPathSegCurvetoCubicRel **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegCurvetoQuadraticAbs )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                       float x1,
                       float y1,
                                __RPC__deref_out_opt ISVGPathSegCurvetoQuadraticAbs **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegCurvetoQuadraticRel )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                       float x1,
                       float y1,
                                __RPC__deref_out_opt ISVGPathSegCurvetoQuadraticRel **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegArcAbs )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                       float r1,
                       float r2,
                       float angle,
                       VARIANT_BOOL largeArcFlag,
                       VARIANT_BOOL sweepFlag,
                                __RPC__deref_out_opt ISVGPathSegArcAbs **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegArcRel )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                       float r1,
                       float r2,
                       float angle,
                       VARIANT_BOOL largeArcFlag,
                       VARIANT_BOOL sweepFlag,
                                __RPC__deref_out_opt ISVGPathSegArcRel **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegLinetoHorizontalAbs )(
            __RPC__in ISVGPathElement * This,
                       float x,
                                __RPC__deref_out_opt ISVGPathSegLinetoHorizontalAbs **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegLinetoHorizontalRel )(
            __RPC__in ISVGPathElement * This,
                       float x,
                                __RPC__deref_out_opt ISVGPathSegLinetoHorizontalRel **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegLinetoVerticalAbs )(
            __RPC__in ISVGPathElement * This,
                       float y,
                                __RPC__deref_out_opt ISVGPathSegLinetoVerticalAbs **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegLinetoVerticalRel )(
            __RPC__in ISVGPathElement * This,
                       float y,
                                __RPC__deref_out_opt ISVGPathSegLinetoVerticalRel **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegCurvetoCubicSmoothAbs )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                       float x2,
                       float y2,
                                __RPC__deref_out_opt ISVGPathSegCurvetoCubicSmoothAbs **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegCurvetoCubicSmoothRel )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                       float x2,
                       float y2,
                                __RPC__deref_out_opt ISVGPathSegCurvetoCubicSmoothRel **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegCurvetoQuadraticSmoothAbs )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                                __RPC__deref_out_opt ISVGPathSegCurvetoQuadraticSmoothAbs **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *createSVGPathSegCurvetoQuadraticSmoothRel )(
            __RPC__in ISVGPathElement * This,
                       float x,
                       float y,
                                __RPC__deref_out_opt ISVGPathSegCurvetoQuadraticSmoothRel **ppResult);
        END_INTERFACE
    } ISVGPathElementVtbl;
    interface ISVGPathElement
    {
        CONST_VTBL struct ISVGPathElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_pathLength(This,v) )
    ( (This)->lpVtbl -> get_pathLength(This,p) )
    ( (This)->lpVtbl -> getTotalLength(This,pfltResult) )
    ( (This)->lpVtbl -> getPointAtLength(This,fltdistance,ppPointResult) )
    ( (This)->lpVtbl -> getPathSegAtLength(This,fltdistance,plResult) )
    ( (This)->lpVtbl -> createSVGPathSegClosePath(This,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegMovetoAbs(This,x,y,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegMovetoRel(This,x,y,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegLinetoAbs(This,x,y,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegLinetoRel(This,x,y,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegCurvetoCubicAbs(This,x,y,x1,y1,x2,y2,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegCurvetoCubicRel(This,x,y,x1,y1,x2,y2,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegCurvetoQuadraticAbs(This,x,y,x1,y1,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegCurvetoQuadraticRel(This,x,y,x1,y1,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegArcAbs(This,x,y,r1,r2,angle,largeArcFlag,sweepFlag,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegArcRel(This,x,y,r1,r2,angle,largeArcFlag,sweepFlag,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegLinetoHorizontalAbs(This,x,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegLinetoHorizontalRel(This,x,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegLinetoVerticalAbs(This,y,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegLinetoVerticalRel(This,y,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegCurvetoCubicSmoothAbs(This,x,y,x2,y2,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegCurvetoCubicSmoothRel(This,x,y,x2,y2,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegCurvetoQuadraticSmoothAbs(This,x,y,ppResult) )
    ( (This)->lpVtbl -> createSVGPathSegCurvetoQuadraticSmoothRel(This,x,y,ppResult) )
EXTERN_C const IID DIID_DispSVGPathElement;
    typedef struct DispSVGPathElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGPathElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGPathElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGPathElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGPathElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGPathElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGPathElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGPathElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGPathElementVtbl;
    interface DispSVGPathElement
    {
        CONST_VTBL struct DispSVGPathElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGPathElement;
class DECLSPEC_UUID("305105b2-98b5-11cf-bb82-00aa00bdce0b")
SVGPathElement;
EXTERN_C const IID IID_ISVGPreserveAspectRatio;
    typedef struct ISVGPreserveAspectRatioVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGPreserveAspectRatio * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGPreserveAspectRatio * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGPreserveAspectRatio * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGPreserveAspectRatio * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGPreserveAspectRatio * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGPreserveAspectRatio * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGPreserveAspectRatio * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_align )(
            __RPC__in ISVGPreserveAspectRatio * This,
                       short v);
                            HRESULT ( STDMETHODCALLTYPE *get_align )(
            __RPC__in ISVGPreserveAspectRatio * This,
                                __RPC__out short *p);
                            HRESULT ( STDMETHODCALLTYPE *put_meetOrSlice )(
            __RPC__in ISVGPreserveAspectRatio * This,
                       short v);
                            HRESULT ( STDMETHODCALLTYPE *get_meetOrSlice )(
            __RPC__in ISVGPreserveAspectRatio * This,
                                __RPC__out short *p);
        END_INTERFACE
    } ISVGPreserveAspectRatioVtbl;
    interface ISVGPreserveAspectRatio
    {
        CONST_VTBL struct ISVGPreserveAspectRatioVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_align(This,v) )
    ( (This)->lpVtbl -> get_align(This,p) )
    ( (This)->lpVtbl -> put_meetOrSlice(This,v) )
    ( (This)->lpVtbl -> get_meetOrSlice(This,p) )
EXTERN_C const CLSID CLSID_SVGPreserveAspectRatio;
class DECLSPEC_UUID("305105d0-98b5-11cf-bb82-00aa00bdce0b")
SVGPreserveAspectRatio;
EXTERN_C const IID IID_ISVGTextElement;
    typedef struct ISVGTextElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGTextElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGTextElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGTextElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGTextElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGTextElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGTextElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGTextElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGTextElementVtbl;
    interface ISVGTextElement
    {
        CONST_VTBL struct ISVGTextElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispSVGTextElement;
    typedef struct DispSVGTextElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGTextElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGTextElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGTextElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGTextElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGTextElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGTextElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGTextElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGTextElementVtbl;
    interface DispSVGTextElement
    {
        CONST_VTBL struct DispSVGTextElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGTextElement;
class DECLSPEC_UUID("305105df-98b5-11cf-bb82-00aa00bdce0b")
SVGTextElement;
EXTERN_C const CLSID CLSID_SVGAnimatedPreserveAspectRatio;
class DECLSPEC_UUID("305105ce-98b5-11cf-bb82-00aa00bdce0b")
SVGAnimatedPreserveAspectRatio;
EXTERN_C const IID IID_ISVGImageElement;
    typedef struct ISVGImageElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGImageElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGImageElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGImageElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGImageElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGImageElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGImageElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGImageElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_x )(
            __RPC__in ISVGImageElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGImageElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_y )(
            __RPC__in ISVGImageElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGImageElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_width )(
            __RPC__in ISVGImageElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in ISVGImageElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_height )(
            __RPC__in ISVGImageElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in ISVGImageElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
        END_INTERFACE
    } ISVGImageElementVtbl;
    interface ISVGImageElement
    {
        CONST_VTBL struct ISVGImageElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> putref_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> putref_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> putref_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
EXTERN_C const IID DIID_DispSVGImageElement;
    typedef struct DispSVGImageElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGImageElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGImageElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGImageElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGImageElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGImageElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGImageElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGImageElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGImageElementVtbl;
    interface DispSVGImageElement
    {
        CONST_VTBL struct DispSVGImageElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGImageElement;
class DECLSPEC_UUID("305105cf-98b5-11cf-bb82-00aa00bdce0b")
SVGImageElement;
EXTERN_C const IID IID_ISVGStopElement;
    typedef struct ISVGStopElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGStopElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGStopElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGStopElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGStopElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGStopElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGStopElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGStopElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_offset )(
            __RPC__in ISVGStopElement * This,
                       __RPC__in_opt ISVGAnimatedNumber *v);
                            HRESULT ( STDMETHODCALLTYPE *get_offset )(
            __RPC__in ISVGStopElement * This,
                                __RPC__deref_out_opt ISVGAnimatedNumber **p);
        END_INTERFACE
    } ISVGStopElementVtbl;
    interface ISVGStopElement
    {
        CONST_VTBL struct ISVGStopElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_offset(This,v) )
    ( (This)->lpVtbl -> get_offset(This,p) )
EXTERN_C const IID DIID_DispSVGStopElement;
    typedef struct DispSVGStopElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGStopElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGStopElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGStopElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGStopElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGStopElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGStopElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGStopElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGStopElementVtbl;
    interface DispSVGStopElement
    {
        CONST_VTBL struct DispSVGStopElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGStopElement;
class DECLSPEC_UUID("305105d5-98b5-11cf-bb82-00aa00bdce0b")
SVGStopElement;
EXTERN_C const IID IID_ISVGGradientElement;
    typedef struct ISVGGradientElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGGradientElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGGradientElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGGradientElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGGradientElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGGradientElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGGradientElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGGradientElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_gradientUnits )(
            __RPC__in ISVGGradientElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_gradientUnits )(
            __RPC__in ISVGGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_gradientTransform )(
            __RPC__in ISVGGradientElement * This,
                       __RPC__in_opt ISVGAnimatedTransformList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_gradientTransform )(
            __RPC__in ISVGGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedTransformList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_spreadMethod )(
            __RPC__in ISVGGradientElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_spreadMethod )(
            __RPC__in ISVGGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
        END_INTERFACE
    } ISVGGradientElementVtbl;
    interface ISVGGradientElement
    {
        CONST_VTBL struct ISVGGradientElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_gradientUnits(This,v) )
    ( (This)->lpVtbl -> get_gradientUnits(This,p) )
    ( (This)->lpVtbl -> putref_gradientTransform(This,v) )
    ( (This)->lpVtbl -> get_gradientTransform(This,p) )
    ( (This)->lpVtbl -> putref_spreadMethod(This,v) )
    ( (This)->lpVtbl -> get_spreadMethod(This,p) )
EXTERN_C const IID DIID_DispSVGGradientElement;
    typedef struct DispSVGGradientElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGGradientElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGGradientElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGGradientElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGGradientElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGGradientElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGGradientElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGGradientElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGGradientElementVtbl;
    interface DispSVGGradientElement
    {
        CONST_VTBL struct DispSVGGradientElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGGradientElement;
class DECLSPEC_UUID("305105d6-98b5-11cf-bb82-00aa00bdce0b")
SVGGradientElement;
EXTERN_C const IID IID_ISVGLinearGradientElement;
    typedef struct ISVGLinearGradientElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGLinearGradientElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGLinearGradientElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGLinearGradientElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGLinearGradientElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGLinearGradientElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGLinearGradientElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGLinearGradientElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_x1 )(
            __RPC__in ISVGLinearGradientElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_x1 )(
            __RPC__in ISVGLinearGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_y1 )(
            __RPC__in ISVGLinearGradientElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_y1 )(
            __RPC__in ISVGLinearGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_x2 )(
            __RPC__in ISVGLinearGradientElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_x2 )(
            __RPC__in ISVGLinearGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_y2 )(
            __RPC__in ISVGLinearGradientElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_y2 )(
            __RPC__in ISVGLinearGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
        END_INTERFACE
    } ISVGLinearGradientElementVtbl;
    interface ISVGLinearGradientElement
    {
        CONST_VTBL struct ISVGLinearGradientElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_x1(This,v) )
    ( (This)->lpVtbl -> get_x1(This,p) )
    ( (This)->lpVtbl -> putref_y1(This,v) )
    ( (This)->lpVtbl -> get_y1(This,p) )
    ( (This)->lpVtbl -> putref_x2(This,v) )
    ( (This)->lpVtbl -> get_x2(This,p) )
    ( (This)->lpVtbl -> putref_y2(This,v) )
    ( (This)->lpVtbl -> get_y2(This,p) )
EXTERN_C const IID DIID_DispSVGLinearGradientElement;
    typedef struct DispSVGLinearGradientElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGLinearGradientElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGLinearGradientElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGLinearGradientElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGLinearGradientElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGLinearGradientElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGLinearGradientElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGLinearGradientElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGLinearGradientElementVtbl;
    interface DispSVGLinearGradientElement
    {
        CONST_VTBL struct DispSVGLinearGradientElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGLinearGradientElement;
class DECLSPEC_UUID("305105d2-98b5-11cf-bb82-00aa00bdce0b")
SVGLinearGradientElement;
EXTERN_C const IID IID_ISVGRadialGradientElement;
    typedef struct ISVGRadialGradientElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGRadialGradientElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGRadialGradientElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGRadialGradientElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGRadialGradientElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGRadialGradientElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGRadialGradientElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGRadialGradientElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_cx )(
            __RPC__in ISVGRadialGradientElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_cx )(
            __RPC__in ISVGRadialGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_cy )(
            __RPC__in ISVGRadialGradientElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_cy )(
            __RPC__in ISVGRadialGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_r )(
            __RPC__in ISVGRadialGradientElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_r )(
            __RPC__in ISVGRadialGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_fx )(
            __RPC__in ISVGRadialGradientElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_fx )(
            __RPC__in ISVGRadialGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_fy )(
            __RPC__in ISVGRadialGradientElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_fy )(
            __RPC__in ISVGRadialGradientElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
        END_INTERFACE
    } ISVGRadialGradientElementVtbl;
    interface ISVGRadialGradientElement
    {
        CONST_VTBL struct ISVGRadialGradientElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_cx(This,v) )
    ( (This)->lpVtbl -> get_cx(This,p) )
    ( (This)->lpVtbl -> putref_cy(This,v) )
    ( (This)->lpVtbl -> get_cy(This,p) )
    ( (This)->lpVtbl -> putref_r(This,v) )
    ( (This)->lpVtbl -> get_r(This,p) )
    ( (This)->lpVtbl -> putref_fx(This,v) )
    ( (This)->lpVtbl -> get_fx(This,p) )
    ( (This)->lpVtbl -> putref_fy(This,v) )
    ( (This)->lpVtbl -> get_fy(This,p) )
EXTERN_C const IID DIID_DispSVGRadialGradientElement;
    typedef struct DispSVGRadialGradientElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGRadialGradientElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGRadialGradientElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGRadialGradientElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGRadialGradientElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGRadialGradientElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGRadialGradientElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGRadialGradientElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGRadialGradientElementVtbl;
    interface DispSVGRadialGradientElement
    {
        CONST_VTBL struct DispSVGRadialGradientElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGRadialGradientElement;
class DECLSPEC_UUID("305105d3-98b5-11cf-bb82-00aa00bdce0b")
SVGRadialGradientElement;
EXTERN_C const IID IID_ISVGMaskElement;
    typedef struct ISVGMaskElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGMaskElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGMaskElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGMaskElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGMaskElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGMaskElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGMaskElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGMaskElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_maskUnits )(
            __RPC__in ISVGMaskElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_maskUnits )(
            __RPC__in ISVGMaskElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_maskContentUnits )(
            __RPC__in ISVGMaskElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_maskContentUnits )(
            __RPC__in ISVGMaskElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_x )(
            __RPC__in ISVGMaskElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGMaskElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_y )(
            __RPC__in ISVGMaskElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGMaskElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_width )(
            __RPC__in ISVGMaskElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in ISVGMaskElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_height )(
            __RPC__in ISVGMaskElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in ISVGMaskElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
        END_INTERFACE
    } ISVGMaskElementVtbl;
    interface ISVGMaskElement
    {
        CONST_VTBL struct ISVGMaskElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_maskUnits(This,v) )
    ( (This)->lpVtbl -> get_maskUnits(This,p) )
    ( (This)->lpVtbl -> putref_maskContentUnits(This,v) )
    ( (This)->lpVtbl -> get_maskContentUnits(This,p) )
    ( (This)->lpVtbl -> putref_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> putref_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> putref_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> putref_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
EXTERN_C const IID DIID_DispSVGMaskElement;
    typedef struct DispSVGMaskElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGMaskElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGMaskElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGMaskElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGMaskElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGMaskElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGMaskElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGMaskElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGMaskElementVtbl;
    interface DispSVGMaskElement
    {
        CONST_VTBL struct DispSVGMaskElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGMaskElement;
class DECLSPEC_UUID("305105e7-98b5-11cf-bb82-00aa00bdce0b")
SVGMaskElement;
EXTERN_C const IID IID_ISVGMarkerElement;
    typedef struct ISVGMarkerElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGMarkerElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGMarkerElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGMarkerElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGMarkerElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGMarkerElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGMarkerElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGMarkerElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_refX )(
            __RPC__in ISVGMarkerElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_refX )(
            __RPC__in ISVGMarkerElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_refY )(
            __RPC__in ISVGMarkerElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_refY )(
            __RPC__in ISVGMarkerElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_markerUnits )(
            __RPC__in ISVGMarkerElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_markerUnits )(
            __RPC__in ISVGMarkerElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_markerWidth )(
            __RPC__in ISVGMarkerElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_markerWidth )(
            __RPC__in ISVGMarkerElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_markerHeight )(
            __RPC__in ISVGMarkerElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_markerHeight )(
            __RPC__in ISVGMarkerElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_orientType )(
            __RPC__in ISVGMarkerElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_orientType )(
            __RPC__in ISVGMarkerElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_orientAngle )(
            __RPC__in ISVGMarkerElement * This,
                       __RPC__in_opt ISVGAnimatedAngle *v);
                            HRESULT ( STDMETHODCALLTYPE *get_orientAngle )(
            __RPC__in ISVGMarkerElement * This,
                                __RPC__deref_out_opt ISVGAnimatedAngle **p);
                   HRESULT ( STDMETHODCALLTYPE *setOrientToAuto )(
            __RPC__in ISVGMarkerElement * This);
                   HRESULT ( STDMETHODCALLTYPE *setOrientToAngle )(
            __RPC__in ISVGMarkerElement * This,
                       __RPC__in_opt ISVGAngle *pSVGAngle);
        END_INTERFACE
    } ISVGMarkerElementVtbl;
    interface ISVGMarkerElement
    {
        CONST_VTBL struct ISVGMarkerElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_refX(This,v) )
    ( (This)->lpVtbl -> get_refX(This,p) )
    ( (This)->lpVtbl -> putref_refY(This,v) )
    ( (This)->lpVtbl -> get_refY(This,p) )
    ( (This)->lpVtbl -> putref_markerUnits(This,v) )
    ( (This)->lpVtbl -> get_markerUnits(This,p) )
    ( (This)->lpVtbl -> putref_markerWidth(This,v) )
    ( (This)->lpVtbl -> get_markerWidth(This,p) )
    ( (This)->lpVtbl -> putref_markerHeight(This,v) )
    ( (This)->lpVtbl -> get_markerHeight(This,p) )
    ( (This)->lpVtbl -> putref_orientType(This,v) )
    ( (This)->lpVtbl -> get_orientType(This,p) )
    ( (This)->lpVtbl -> putref_orientAngle(This,v) )
    ( (This)->lpVtbl -> get_orientAngle(This,p) )
    ( (This)->lpVtbl -> setOrientToAuto(This) )
    ( (This)->lpVtbl -> setOrientToAngle(This,pSVGAngle) )
EXTERN_C const IID DIID_DispSVGMarkerElement;
    typedef struct DispSVGMarkerElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGMarkerElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGMarkerElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGMarkerElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGMarkerElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGMarkerElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGMarkerElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGMarkerElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGMarkerElementVtbl;
    interface DispSVGMarkerElement
    {
        CONST_VTBL struct DispSVGMarkerElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGMarkerElement;
class DECLSPEC_UUID("305105de-98b5-11cf-bb82-00aa00bdce0b")
SVGMarkerElement;
EXTERN_C const IID IID_ISVGZoomEvent;
    typedef struct ISVGZoomEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGZoomEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGZoomEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGZoomEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGZoomEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGZoomEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGZoomEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGZoomEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_zoomRectScreen )(
            __RPC__in ISVGZoomEvent * This,
                                __RPC__deref_out_opt ISVGRect **p);
                            HRESULT ( STDMETHODCALLTYPE *get_previousScale )(
            __RPC__in ISVGZoomEvent * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *get_previousTranslate )(
            __RPC__in ISVGZoomEvent * This,
                                __RPC__deref_out_opt ISVGPoint **p);
                            HRESULT ( STDMETHODCALLTYPE *get_newScale )(
            __RPC__in ISVGZoomEvent * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *get_newTranslate )(
            __RPC__in ISVGZoomEvent * This,
                                __RPC__deref_out_opt ISVGPoint **p);
        END_INTERFACE
    } ISVGZoomEventVtbl;
    interface ISVGZoomEvent
    {
        CONST_VTBL struct ISVGZoomEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_zoomRectScreen(This,p) )
    ( (This)->lpVtbl -> get_previousScale(This,p) )
    ( (This)->lpVtbl -> get_previousTranslate(This,p) )
    ( (This)->lpVtbl -> get_newScale(This,p) )
    ( (This)->lpVtbl -> get_newTranslate(This,p) )
EXTERN_C const IID DIID_DispSVGZoomEvent;
    typedef struct DispSVGZoomEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGZoomEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGZoomEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGZoomEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGZoomEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGZoomEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGZoomEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGZoomEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGZoomEventVtbl;
    interface DispSVGZoomEvent
    {
        CONST_VTBL struct DispSVGZoomEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGZoomEvent;
class DECLSPEC_UUID("305105d9-98b5-11cf-bb82-00aa00bdce0b")
SVGZoomEvent;
EXTERN_C const IID IID_ISVGAElement;
    typedef struct ISVGAElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGAElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGAElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGAElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGAElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGAElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGAElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGAElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_target )(
            __RPC__in ISVGAElement * This,
                       __RPC__in_opt ISVGAnimatedString *v);
                            HRESULT ( STDMETHODCALLTYPE *get_target )(
            __RPC__in ISVGAElement * This,
                                __RPC__deref_out_opt ISVGAnimatedString **p);
        END_INTERFACE
    } ISVGAElementVtbl;
    interface ISVGAElement
    {
        CONST_VTBL struct ISVGAElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_target(This,v) )
    ( (This)->lpVtbl -> get_target(This,p) )
EXTERN_C const IID DIID_DispSVGAElement;
    typedef struct DispSVGAElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGAElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGAElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGAElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGAElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGAElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGAElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGAElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGAElementVtbl;
    interface DispSVGAElement
    {
        CONST_VTBL struct DispSVGAElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGAElement;
class DECLSPEC_UUID("305105db-98b5-11cf-bb82-00aa00bdce0b")
SVGAElement;
EXTERN_C const IID IID_ISVGViewElement;
    typedef struct ISVGViewElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGViewElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGViewElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGViewElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGViewElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGViewElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGViewElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGViewElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_viewTarget )(
            __RPC__in ISVGViewElement * This,
                       __RPC__in_opt ISVGStringList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_viewTarget )(
            __RPC__in ISVGViewElement * This,
                                __RPC__deref_out_opt ISVGStringList **p);
        END_INTERFACE
    } ISVGViewElementVtbl;
    interface ISVGViewElement
    {
        CONST_VTBL struct ISVGViewElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_viewTarget(This,v) )
    ( (This)->lpVtbl -> get_viewTarget(This,p) )
EXTERN_C const IID DIID_DispSVGViewElement;
    typedef struct DispSVGViewElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGViewElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGViewElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGViewElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGViewElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGViewElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGViewElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGViewElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGViewElementVtbl;
    interface DispSVGViewElement
    {
        CONST_VTBL struct DispSVGViewElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGViewElement;
class DECLSPEC_UUID("305105dc-98b5-11cf-bb82-00aa00bdce0b")
SVGViewElement;
EXTERN_C const IID IID_IHTMLMediaError;
    typedef struct IHTMLMediaErrorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMediaError * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMediaError * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMediaError * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMediaError * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMediaError * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMediaError * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMediaError * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_code )(
            __RPC__in IHTMLMediaError * This,
                                __RPC__out short *p);
        END_INTERFACE
    } IHTMLMediaErrorVtbl;
    interface IHTMLMediaError
    {
        CONST_VTBL struct IHTMLMediaErrorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_code(This,p) )
EXTERN_C const IID IID_IHTMLTimeRanges;
    typedef struct IHTMLTimeRangesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTimeRanges * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTimeRanges * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTimeRanges * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTimeRanges * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTimeRanges * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTimeRanges * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTimeRanges * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLTimeRanges * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *start )(
            __RPC__in IHTMLTimeRanges * This,
                       long index,
                                __RPC__out float *startTime);
                   HRESULT ( STDMETHODCALLTYPE *end )(
            __RPC__in IHTMLTimeRanges * This,
                       long index,
                                __RPC__out float *endTime);
        END_INTERFACE
    } IHTMLTimeRangesVtbl;
    interface IHTMLTimeRanges
    {
        CONST_VTBL struct IHTMLTimeRangesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> start(This,index,startTime) )
    ( (This)->lpVtbl -> end(This,index,endTime) )
EXTERN_C const IID IID_IHTMLTimeRanges2;
    typedef struct IHTMLTimeRanges2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLTimeRanges2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLTimeRanges2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLTimeRanges2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLTimeRanges2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLTimeRanges2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLTimeRanges2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLTimeRanges2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *startDouble )(
            __RPC__in IHTMLTimeRanges2 * This,
                       long index,
                                __RPC__out double *startTime);
                   HRESULT ( STDMETHODCALLTYPE *endDouble )(
            __RPC__in IHTMLTimeRanges2 * This,
                       long index,
                                __RPC__out double *endTime);
        END_INTERFACE
    } IHTMLTimeRanges2Vtbl;
    interface IHTMLTimeRanges2
    {
        CONST_VTBL struct IHTMLTimeRanges2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> startDouble(This,index,startTime) )
    ( (This)->lpVtbl -> endDouble(This,index,endTime) )
EXTERN_C const IID IID_IHTMLMediaElement;
    typedef struct IHTMLMediaElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMediaElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMediaElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMediaElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMediaElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMediaElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMediaElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMediaElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_error )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__deref_out_opt IHTMLMediaError **p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLMediaElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_currentSrc )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_networkState )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out USHORT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_preload )(
            __RPC__in IHTMLMediaElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_preload )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__deref_out_opt BSTR *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_buffered )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__deref_out_opt IHTMLTimeRanges **p);
                   HRESULT ( STDMETHODCALLTYPE *load )(
            __RPC__in IHTMLMediaElement * This);
                   HRESULT ( STDMETHODCALLTYPE *canPlayType )(
            __RPC__in IHTMLMediaElement * This,
                       __RPC__in BSTR type,
                                __RPC__deref_out_opt BSTR *canPlay);
                                                   HRESULT ( STDMETHODCALLTYPE *get_seeking )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_currentTime )(
            __RPC__in IHTMLMediaElement * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_currentTime )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_initialTime )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_duration )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_paused )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_defaultPlaybackRate )(
            __RPC__in IHTMLMediaElement * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_defaultPlaybackRate )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_playbackRate )(
            __RPC__in IHTMLMediaElement * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_playbackRate )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_played )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__deref_out_opt IHTMLTimeRanges **p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_seekable )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__deref_out_opt IHTMLTimeRanges **p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_ended )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_autoplay )(
            __RPC__in IHTMLMediaElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_autoplay )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_loop )(
            __RPC__in IHTMLMediaElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_loop )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *play )(
            __RPC__in IHTMLMediaElement * This);
                   HRESULT ( STDMETHODCALLTYPE *pause )(
            __RPC__in IHTMLMediaElement * This);
                                                   HRESULT ( STDMETHODCALLTYPE *put_controls )(
            __RPC__in IHTMLMediaElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_controls )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_volume )(
            __RPC__in IHTMLMediaElement * This,
                       float v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_volume )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out float *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_muted )(
            __RPC__in IHTMLMediaElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_muted )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_autobuffer )(
            __RPC__in IHTMLMediaElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_autobuffer )(
            __RPC__in IHTMLMediaElement * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLMediaElementVtbl;
    interface IHTMLMediaElement
    {
        CONST_VTBL struct IHTMLMediaElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_error(This,p) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> get_currentSrc(This,p) )
    ( (This)->lpVtbl -> get_networkState(This,p) )
    ( (This)->lpVtbl -> put_preload(This,v) )
    ( (This)->lpVtbl -> get_preload(This,p) )
    ( (This)->lpVtbl -> get_buffered(This,p) )
    ( (This)->lpVtbl -> load(This) )
    ( (This)->lpVtbl -> canPlayType(This,type,canPlay) )
    ( (This)->lpVtbl -> get_seeking(This,p) )
    ( (This)->lpVtbl -> put_currentTime(This,v) )
    ( (This)->lpVtbl -> get_currentTime(This,p) )
    ( (This)->lpVtbl -> get_initialTime(This,p) )
    ( (This)->lpVtbl -> get_duration(This,p) )
    ( (This)->lpVtbl -> get_paused(This,p) )
    ( (This)->lpVtbl -> put_defaultPlaybackRate(This,v) )
    ( (This)->lpVtbl -> get_defaultPlaybackRate(This,p) )
    ( (This)->lpVtbl -> put_playbackRate(This,v) )
    ( (This)->lpVtbl -> get_playbackRate(This,p) )
    ( (This)->lpVtbl -> get_played(This,p) )
    ( (This)->lpVtbl -> get_seekable(This,p) )
    ( (This)->lpVtbl -> get_ended(This,p) )
    ( (This)->lpVtbl -> put_autoplay(This,v) )
    ( (This)->lpVtbl -> get_autoplay(This,p) )
    ( (This)->lpVtbl -> put_loop(This,v) )
    ( (This)->lpVtbl -> get_loop(This,p) )
    ( (This)->lpVtbl -> play(This) )
    ( (This)->lpVtbl -> pause(This) )
    ( (This)->lpVtbl -> put_controls(This,v) )
    ( (This)->lpVtbl -> get_controls(This,p) )
    ( (This)->lpVtbl -> put_volume(This,v) )
    ( (This)->lpVtbl -> get_volume(This,p) )
    ( (This)->lpVtbl -> put_muted(This,v) )
    ( (This)->lpVtbl -> get_muted(This,p) )
    ( (This)->lpVtbl -> put_autobuffer(This,v) )
    ( (This)->lpVtbl -> get_autobuffer(This,p) )
EXTERN_C const IID IID_IHTMLMediaElement2;
    typedef struct IHTMLMediaElement2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMediaElement2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMediaElement2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMediaElement2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMediaElement2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMediaElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMediaElement2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMediaElement2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_currentTimeDouble )(
            __RPC__in IHTMLMediaElement2 * This,
                       double v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_currentTimeDouble )(
            __RPC__in IHTMLMediaElement2 * This,
                                __RPC__out double *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_initialTimeDouble )(
            __RPC__in IHTMLMediaElement2 * This,
                                __RPC__out double *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_durationDouble )(
            __RPC__in IHTMLMediaElement2 * This,
                                __RPC__out double *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_defaultPlaybackRateDouble )(
            __RPC__in IHTMLMediaElement2 * This,
                       double v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_defaultPlaybackRateDouble )(
            __RPC__in IHTMLMediaElement2 * This,
                                __RPC__out double *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_playbackRateDouble )(
            __RPC__in IHTMLMediaElement2 * This,
                       double v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_playbackRateDouble )(
            __RPC__in IHTMLMediaElement2 * This,
                                __RPC__out double *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_volumeDouble )(
            __RPC__in IHTMLMediaElement2 * This,
                       double v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_volumeDouble )(
            __RPC__in IHTMLMediaElement2 * This,
                                __RPC__out double *p);
        END_INTERFACE
    } IHTMLMediaElement2Vtbl;
    interface IHTMLMediaElement2
    {
        CONST_VTBL struct IHTMLMediaElement2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_currentTimeDouble(This,v) )
    ( (This)->lpVtbl -> get_currentTimeDouble(This,p) )
    ( (This)->lpVtbl -> get_initialTimeDouble(This,p) )
    ( (This)->lpVtbl -> get_durationDouble(This,p) )
    ( (This)->lpVtbl -> put_defaultPlaybackRateDouble(This,v) )
    ( (This)->lpVtbl -> get_defaultPlaybackRateDouble(This,p) )
    ( (This)->lpVtbl -> put_playbackRateDouble(This,v) )
    ( (This)->lpVtbl -> get_playbackRateDouble(This,p) )
    ( (This)->lpVtbl -> put_volumeDouble(This,v) )
    ( (This)->lpVtbl -> get_volumeDouble(This,p) )
EXTERN_C const IID IID_IHTMLMSMediaElement;
    typedef struct IHTMLMSMediaElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLMSMediaElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLMSMediaElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLMSMediaElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLMSMediaElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLMSMediaElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLMSMediaElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLMSMediaElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msPlayToDisabled )(
            __RPC__in IHTMLMSMediaElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msPlayToDisabled )(
            __RPC__in IHTMLMSMediaElement * This,
                                __RPC__out VARIANT_BOOL *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_msPlayToPrimary )(
            __RPC__in IHTMLMSMediaElement * This,
                       VARIANT_BOOL v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_msPlayToPrimary )(
            __RPC__in IHTMLMSMediaElement * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLMSMediaElementVtbl;
    interface IHTMLMSMediaElement
    {
        CONST_VTBL struct IHTMLMSMediaElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_msPlayToDisabled(This,v) )
    ( (This)->lpVtbl -> get_msPlayToDisabled(This,p) )
    ( (This)->lpVtbl -> put_msPlayToPrimary(This,v) )
    ( (This)->lpVtbl -> get_msPlayToPrimary(This,p) )
EXTERN_C const IID IID_IHTMLSourceElement;
    typedef struct IHTMLSourceElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLSourceElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLSourceElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLSourceElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLSourceElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLSourceElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLSourceElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLSourceElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_src )(
            __RPC__in IHTMLSourceElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_src )(
            __RPC__in IHTMLSourceElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in IHTMLSourceElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLSourceElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_media )(
            __RPC__in IHTMLSourceElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_media )(
            __RPC__in IHTMLSourceElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLSourceElementVtbl;
    interface IHTMLSourceElement
    {
        CONST_VTBL struct IHTMLSourceElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_src(This,v) )
    ( (This)->lpVtbl -> get_src(This,p) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_media(This,v) )
    ( (This)->lpVtbl -> get_media(This,p) )
EXTERN_C const IID IID_IHTMLAudioElement;
    typedef struct IHTMLAudioElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAudioElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAudioElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAudioElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAudioElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAudioElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAudioElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAudioElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } IHTMLAudioElementVtbl;
    interface IHTMLAudioElement
    {
        CONST_VTBL struct IHTMLAudioElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLVideoElement;
    typedef struct IHTMLVideoElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLVideoElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLVideoElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLVideoElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLVideoElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLVideoElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLVideoElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLVideoElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                                   HRESULT ( STDMETHODCALLTYPE *put_width )(
            __RPC__in IHTMLVideoElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IHTMLVideoElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_height )(
            __RPC__in IHTMLVideoElement * This,
                       long v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IHTMLVideoElement * This,
                                __RPC__out long *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_videoWidth )(
            __RPC__in IHTMLVideoElement * This,
                                __RPC__out ULONG *p);
                                                   HRESULT ( STDMETHODCALLTYPE *get_videoHeight )(
            __RPC__in IHTMLVideoElement * This,
                                __RPC__out ULONG *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_poster )(
            __RPC__in IHTMLVideoElement * This,
                       __RPC__in BSTR v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_poster )(
            __RPC__in IHTMLVideoElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLVideoElementVtbl;
    interface IHTMLVideoElement
    {
        CONST_VTBL struct IHTMLVideoElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_width(This,v) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> put_height(This,v) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> get_videoWidth(This,p) )
    ( (This)->lpVtbl -> get_videoHeight(This,p) )
    ( (This)->lpVtbl -> put_poster(This,v) )
    ( (This)->lpVtbl -> get_poster(This,p) )
EXTERN_C const IID IID_IHTMLAudioElementFactory;
    typedef struct IHTMLAudioElementFactoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAudioElementFactory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAudioElementFactory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAudioElementFactory * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAudioElementFactory * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAudioElementFactory * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAudioElementFactory * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAudioElementFactory * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *create )(
            __RPC__in IHTMLAudioElementFactory * This,
                                 VARIANT src,
                                __RPC__deref_out_opt IHTMLAudioElement **__MIDL__IHTMLAudioElementFactory0000);
        END_INTERFACE
    } IHTMLAudioElementFactoryVtbl;
    interface IHTMLAudioElementFactory
    {
        CONST_VTBL struct IHTMLAudioElementFactoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> create(This,src,__MIDL__IHTMLAudioElementFactory0000) )
EXTERN_C const IID DIID_DispHTMLMediaError;
    typedef struct DispHTMLMediaErrorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLMediaError * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLMediaError * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLMediaError * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLMediaError * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLMediaError * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLMediaError * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLMediaError * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLMediaErrorVtbl;
    interface DispHTMLMediaError
    {
        CONST_VTBL struct DispHTMLMediaErrorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLMediaError;
class DECLSPEC_UUID("3051070a-98b5-11cf-bb82-00aa00bdce0b")
HTMLMediaError;
EXTERN_C const IID DIID_DispHTMLTimeRanges;
    typedef struct DispHTMLTimeRangesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLTimeRanges * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLTimeRanges * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLTimeRanges * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLTimeRanges * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLTimeRanges * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLTimeRanges * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLTimeRanges * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLTimeRangesVtbl;
    interface DispHTMLTimeRanges
    {
        CONST_VTBL struct DispHTMLTimeRangesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLTimeRanges;
class DECLSPEC_UUID("3051070b-98b5-11cf-bb82-00aa00bdce0b")
HTMLTimeRanges;
EXTERN_C const IID DIID_DispHTMLMediaElement;
    typedef struct DispHTMLMediaElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLMediaElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLMediaElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLMediaElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLMediaElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLMediaElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLMediaElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLMediaElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLMediaElementVtbl;
    interface DispHTMLMediaElement
    {
        CONST_VTBL struct DispHTMLMediaElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLMediaElement;
class DECLSPEC_UUID("3051070c-98b5-11cf-bb82-00aa00bdce0b")
HTMLMediaElement;
EXTERN_C const IID DIID_DispHTMLSourceElement;
    typedef struct DispHTMLSourceElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLSourceElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLSourceElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLSourceElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLSourceElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLSourceElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLSourceElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLSourceElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLSourceElementVtbl;
    interface DispHTMLSourceElement
    {
        CONST_VTBL struct DispHTMLSourceElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLSourceElement;
class DECLSPEC_UUID("3051070d-98b5-11cf-bb82-00aa00bdce0b")
HTMLSourceElement;
EXTERN_C const IID DIID_DispHTMLAudioElement;
    typedef struct DispHTMLAudioElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLAudioElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLAudioElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLAudioElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLAudioElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLAudioElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLAudioElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLAudioElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLAudioElementVtbl;
    interface DispHTMLAudioElement
    {
        CONST_VTBL struct DispHTMLAudioElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLAudioElement;
class DECLSPEC_UUID("3051070e-98b5-11cf-bb82-00aa00bdce0b")
HTMLAudioElement;
EXTERN_C const CLSID CLSID_HTMLAudioElementFactory;
class DECLSPEC_UUID("305107ec-98b5-11cf-bb82-00aa00bdce0b")
HTMLAudioElementFactory;
EXTERN_C const IID DIID_DispHTMLVideoElement;
    typedef struct DispHTMLVideoElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLVideoElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLVideoElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLVideoElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLVideoElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLVideoElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLVideoElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLVideoElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLVideoElementVtbl;
    interface DispHTMLVideoElement
    {
        CONST_VTBL struct DispHTMLVideoElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLVideoElement;
class DECLSPEC_UUID("3051070f-98b5-11cf-bb82-00aa00bdce0b")
HTMLVideoElement;
EXTERN_C const IID IID_ISVGSwitchElement;
    typedef struct ISVGSwitchElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGSwitchElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGSwitchElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGSwitchElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGSwitchElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGSwitchElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGSwitchElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGSwitchElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGSwitchElementVtbl;
    interface ISVGSwitchElement
    {
        CONST_VTBL struct ISVGSwitchElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispSVGSwitchElement;
    typedef struct DispSVGSwitchElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGSwitchElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGSwitchElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGSwitchElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGSwitchElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGSwitchElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGSwitchElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGSwitchElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGSwitchElementVtbl;
    interface DispSVGSwitchElement
    {
        CONST_VTBL struct DispSVGSwitchElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGSwitchElement;
class DECLSPEC_UUID("305105d8-98b5-11cf-bb82-00aa00bdce0b")
SVGSwitchElement;
EXTERN_C const IID IID_ISVGDescElement;
    typedef struct ISVGDescElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGDescElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGDescElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGDescElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGDescElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGDescElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGDescElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGDescElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGDescElementVtbl;
    interface ISVGDescElement
    {
        CONST_VTBL struct ISVGDescElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispSVGDescElement;
    typedef struct DispSVGDescElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGDescElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGDescElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGDescElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGDescElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGDescElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGDescElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGDescElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGDescElementVtbl;
    interface DispSVGDescElement
    {
        CONST_VTBL struct DispSVGDescElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGDescElement;
class DECLSPEC_UUID("30510572-98b5-11cf-bb82-00aa00bdce0b")
SVGDescElement;
EXTERN_C const IID IID_ISVGTitleElement;
    typedef struct ISVGTitleElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGTitleElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGTitleElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGTitleElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGTitleElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGTitleElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGTitleElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGTitleElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGTitleElementVtbl;
    interface ISVGTitleElement
    {
        CONST_VTBL struct ISVGTitleElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispSVGTitleElement;
    typedef struct DispSVGTitleElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGTitleElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGTitleElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGTitleElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGTitleElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGTitleElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGTitleElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGTitleElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGTitleElementVtbl;
    interface DispSVGTitleElement
    {
        CONST_VTBL struct DispSVGTitleElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGTitleElement;
class DECLSPEC_UUID("30510573-98b5-11cf-bb82-00aa00bdce0b")
SVGTitleElement;
EXTERN_C const IID IID_ISVGMetadataElement;
    typedef struct ISVGMetadataElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGMetadataElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGMetadataElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGMetadataElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGMetadataElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGMetadataElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGMetadataElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGMetadataElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGMetadataElementVtbl;
    interface ISVGMetadataElement
    {
        CONST_VTBL struct ISVGMetadataElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispSVGMetadataElement;
    typedef struct DispSVGMetadataElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGMetadataElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGMetadataElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGMetadataElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGMetadataElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGMetadataElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGMetadataElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGMetadataElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGMetadataElementVtbl;
    interface DispSVGMetadataElement
    {
        CONST_VTBL struct DispSVGMetadataElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGMetadataElement;
class DECLSPEC_UUID("305105d7-98b5-11cf-bb82-00aa00bdce0b")
SVGMetadataElement;
EXTERN_C const IID IID_ISVGElementInstanceList;
    typedef struct ISVGElementInstanceListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGElementInstanceList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGElementInstanceList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGElementInstanceList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGElementInstanceList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGElementInstanceList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGElementInstanceList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGElementInstanceList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in ISVGElementInstanceList * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in ISVGElementInstanceList * This,
                       long index,
                                __RPC__deref_out_opt ISVGElementInstance **ppResult);
        END_INTERFACE
    } ISVGElementInstanceListVtbl;
    interface ISVGElementInstanceList
    {
        CONST_VTBL struct ISVGElementInstanceListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> item(This,index,ppResult) )
EXTERN_C const IID DIID_DispSVGElementInstance;
    typedef struct DispSVGElementInstanceVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGElementInstance * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGElementInstance * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGElementInstance * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGElementInstance * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGElementInstance * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGElementInstance * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGElementInstance * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGElementInstanceVtbl;
    interface DispSVGElementInstance
    {
        CONST_VTBL struct DispSVGElementInstanceVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGElementInstance;
class DECLSPEC_UUID("30510575-98b5-11cf-bb82-00aa00bdce0b")
SVGElementInstance;
EXTERN_C const IID DIID_DispSVGElementInstanceList;
    typedef struct DispSVGElementInstanceListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGElementInstanceList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGElementInstanceList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGElementInstanceList * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGElementInstanceList * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGElementInstanceList * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGElementInstanceList * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGElementInstanceList * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGElementInstanceListVtbl;
    interface DispSVGElementInstanceList
    {
        CONST_VTBL struct DispSVGElementInstanceListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGElementInstanceList;
class DECLSPEC_UUID("30510576-98b5-11cf-bb82-00aa00bdce0b")
SVGElementInstanceList;
EXTERN_C const IID IID_IDOMException;
    typedef struct IDOMExceptionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMException * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMException * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMException * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMException * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMException * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMException * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMException * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_code )(
            __RPC__in IDOMException * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_code )(
            __RPC__in IDOMException * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_message )(
            __RPC__in IDOMException * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IDOMExceptionVtbl;
    interface IDOMException
    {
        CONST_VTBL struct IDOMExceptionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_code(This,v) )
    ( (This)->lpVtbl -> get_code(This,p) )
    ( (This)->lpVtbl -> get_message(This,p) )
EXTERN_C const IID DIID_DispDOMException;
    typedef struct DispDOMExceptionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMException * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMException * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMException * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMException * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMException * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMException * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMException * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMExceptionVtbl;
    interface DispDOMException
    {
        CONST_VTBL struct DispDOMExceptionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMException;
class DECLSPEC_UUID("3051072c-98b5-11cf-bb82-00aa00bdce0b")
DOMException;
EXTERN_C const IID IID_IRangeException;
    typedef struct IRangeExceptionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IRangeException * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IRangeException * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IRangeException * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IRangeException * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IRangeException * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IRangeException * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IRangeException * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_code )(
            __RPC__in IRangeException * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_code )(
            __RPC__in IRangeException * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_message )(
            __RPC__in IRangeException * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IRangeExceptionVtbl;
    interface IRangeException
    {
        CONST_VTBL struct IRangeExceptionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_code(This,v) )
    ( (This)->lpVtbl -> get_code(This,p) )
    ( (This)->lpVtbl -> get_message(This,p) )
EXTERN_C const IID DIID_DispRangeException;
    typedef struct DispRangeExceptionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispRangeException * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispRangeException * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispRangeException * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispRangeException * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispRangeException * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispRangeException * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispRangeException * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispRangeExceptionVtbl;
    interface DispRangeException
    {
        CONST_VTBL struct DispRangeExceptionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_RangeException;
class DECLSPEC_UUID("3051072e-98b5-11cf-bb82-00aa00bdce0b")
RangeException;
EXTERN_C const IID IID_ISVGException;
    typedef struct ISVGExceptionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGException * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGException * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGException * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGException * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGException * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGException * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGException * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_code )(
            __RPC__in ISVGException * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_code )(
            __RPC__in ISVGException * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_message )(
            __RPC__in ISVGException * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } ISVGExceptionVtbl;
    interface ISVGException
    {
        CONST_VTBL struct ISVGExceptionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_code(This,v) )
    ( (This)->lpVtbl -> get_code(This,p) )
    ( (This)->lpVtbl -> get_message(This,p) )
EXTERN_C const IID DIID_DispSVGException;
    typedef struct DispSVGExceptionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGException * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGException * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGException * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGException * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGException * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGException * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGException * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGExceptionVtbl;
    interface DispSVGException
    {
        CONST_VTBL struct DispSVGExceptionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGException;
class DECLSPEC_UUID("30510730-98b5-11cf-bb82-00aa00bdce0b")
SVGException;
EXTERN_C const IID IID_IEventException;
    typedef struct IEventExceptionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IEventException * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IEventException * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IEventException * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IEventException * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IEventException * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IEventException * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IEventException * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_code )(
            __RPC__in IEventException * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_code )(
            __RPC__in IEventException * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_message )(
            __RPC__in IEventException * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IEventExceptionVtbl;
    interface IEventException
    {
        CONST_VTBL struct IEventExceptionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_code(This,v) )
    ( (This)->lpVtbl -> get_code(This,p) )
    ( (This)->lpVtbl -> get_message(This,p) )
EXTERN_C const IID DIID_DispEventException;
    typedef struct DispEventExceptionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispEventException * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispEventException * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispEventException * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispEventException * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispEventException * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispEventException * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispEventException * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispEventExceptionVtbl;
    interface DispEventException
    {
        CONST_VTBL struct DispEventExceptionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_EventException;
class DECLSPEC_UUID("3051073b-98b5-11cf-bb82-00aa00bdce0b")
EventException;
EXTERN_C const IID IID_ISVGScriptElement;
    typedef struct ISVGScriptElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGScriptElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGScriptElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGScriptElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGScriptElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGScriptElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGScriptElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGScriptElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in ISVGScriptElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in ISVGScriptElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } ISVGScriptElementVtbl;
    interface ISVGScriptElement
    {
        CONST_VTBL struct ISVGScriptElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
EXTERN_C const IID DIID_DispSVGScriptElement;
    typedef struct DispSVGScriptElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGScriptElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGScriptElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGScriptElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGScriptElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGScriptElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGScriptElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGScriptElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGScriptElementVtbl;
    interface DispSVGScriptElement
    {
        CONST_VTBL struct DispSVGScriptElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGScriptElement;
class DECLSPEC_UUID("305105e1-98b5-11cf-bb82-00aa00bdce0b")
SVGScriptElement;
EXTERN_C const IID IID_ISVGStyleElement;
    typedef struct ISVGStyleElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGStyleElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGStyleElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGStyleElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGStyleElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGStyleElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGStyleElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGStyleElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_type )(
            __RPC__in ISVGStyleElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in ISVGStyleElement * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_media )(
            __RPC__in ISVGStyleElement * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_media )(
            __RPC__in ISVGStyleElement * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } ISVGStyleElementVtbl;
    interface ISVGStyleElement
    {
        CONST_VTBL struct ISVGStyleElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_type(This,v) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> put_media(This,v) )
    ( (This)->lpVtbl -> get_media(This,p) )
EXTERN_C const IID DIID_DispSVGStyleElement;
    typedef struct DispSVGStyleElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGStyleElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGStyleElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGStyleElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGStyleElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGStyleElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGStyleElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGStyleElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGStyleElementVtbl;
    interface DispSVGStyleElement
    {
        CONST_VTBL struct DispSVGStyleElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGStyleElement;
class DECLSPEC_UUID("305105d1-98b5-11cf-bb82-00aa00bdce0b")
SVGStyleElement;
EXTERN_C const IID IID_ISVGTextContentElement;
    typedef struct ISVGTextContentElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGTextContentElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGTextContentElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGTextContentElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGTextContentElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGTextContentElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGTextContentElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGTextContentElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_textLength )(
            __RPC__in ISVGTextContentElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_textLength )(
            __RPC__in ISVGTextContentElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_lengthAdjust )(
            __RPC__in ISVGTextContentElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_lengthAdjust )(
            __RPC__in ISVGTextContentElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
                   HRESULT ( STDMETHODCALLTYPE *getNumberOfChars )(
            __RPC__in ISVGTextContentElement * This,
                                __RPC__out long *pResult);
                   HRESULT ( STDMETHODCALLTYPE *getComputedTextLength )(
            __RPC__in ISVGTextContentElement * This,
                                __RPC__out float *pResult);
                   HRESULT ( STDMETHODCALLTYPE *getSubStringLength )(
            __RPC__in ISVGTextContentElement * This,
                       long charnum,
                       long nchars,
                                __RPC__out float *pResult);
                   HRESULT ( STDMETHODCALLTYPE *getStartPositionOfChar )(
            __RPC__in ISVGTextContentElement * This,
                       long charnum,
                                __RPC__deref_out_opt ISVGPoint **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getEndPositionOfChar )(
            __RPC__in ISVGTextContentElement * This,
                       long charnum,
                                __RPC__deref_out_opt ISVGPoint **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getExtentOfChar )(
            __RPC__in ISVGTextContentElement * This,
                       long charnum,
                                __RPC__deref_out_opt ISVGRect **ppResult);
                   HRESULT ( STDMETHODCALLTYPE *getRotationOfChar )(
            __RPC__in ISVGTextContentElement * This,
                       long charnum,
                                __RPC__out float *pResult);
                   HRESULT ( STDMETHODCALLTYPE *getCharNumAtPosition )(
            __RPC__in ISVGTextContentElement * This,
                       __RPC__in_opt ISVGPoint *point,
                                __RPC__out long *pResult);
                   HRESULT ( STDMETHODCALLTYPE *selectSubString )(
            __RPC__in ISVGTextContentElement * This,
                       long charnum,
                       long nchars);
        END_INTERFACE
    } ISVGTextContentElementVtbl;
    interface ISVGTextContentElement
    {
        CONST_VTBL struct ISVGTextContentElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_textLength(This,v) )
    ( (This)->lpVtbl -> get_textLength(This,p) )
    ( (This)->lpVtbl -> putref_lengthAdjust(This,v) )
    ( (This)->lpVtbl -> get_lengthAdjust(This,p) )
    ( (This)->lpVtbl -> getNumberOfChars(This,pResult) )
    ( (This)->lpVtbl -> getComputedTextLength(This,pResult) )
    ( (This)->lpVtbl -> getSubStringLength(This,charnum,nchars,pResult) )
    ( (This)->lpVtbl -> getStartPositionOfChar(This,charnum,ppResult) )
    ( (This)->lpVtbl -> getEndPositionOfChar(This,charnum,ppResult) )
    ( (This)->lpVtbl -> getExtentOfChar(This,charnum,ppResult) )
    ( (This)->lpVtbl -> getRotationOfChar(This,charnum,pResult) )
    ( (This)->lpVtbl -> getCharNumAtPosition(This,point,pResult) )
    ( (This)->lpVtbl -> selectSubString(This,charnum,nchars) )
EXTERN_C const IID DIID_DispSVGTextContentElement;
    typedef struct DispSVGTextContentElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGTextContentElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGTextContentElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGTextContentElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGTextContentElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGTextContentElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGTextContentElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGTextContentElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGTextContentElementVtbl;
    interface DispSVGTextContentElement
    {
        CONST_VTBL struct DispSVGTextContentElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGTextContentElement;
class DECLSPEC_UUID("305105dd-98b5-11cf-bb82-00aa00bdce0b")
SVGTextContentElement;
EXTERN_C const IID IID_ISVGTextPositioningElement;
    typedef struct ISVGTextPositioningElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGTextPositioningElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGTextPositioningElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGTextPositioningElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGTextPositioningElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGTextPositioningElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGTextPositioningElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGTextPositioningElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_x )(
            __RPC__in ISVGTextPositioningElement * This,
                       __RPC__in_opt ISVGAnimatedLengthList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ISVGTextPositioningElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLengthList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_y )(
            __RPC__in ISVGTextPositioningElement * This,
                       __RPC__in_opt ISVGAnimatedLengthList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_y )(
            __RPC__in ISVGTextPositioningElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLengthList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_dx )(
            __RPC__in ISVGTextPositioningElement * This,
                       __RPC__in_opt ISVGAnimatedLengthList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_dx )(
            __RPC__in ISVGTextPositioningElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLengthList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_dy )(
            __RPC__in ISVGTextPositioningElement * This,
                       __RPC__in_opt ISVGAnimatedLengthList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_dy )(
            __RPC__in ISVGTextPositioningElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLengthList **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_rotate )(
            __RPC__in ISVGTextPositioningElement * This,
                       __RPC__in_opt ISVGAnimatedNumberList *v);
                            HRESULT ( STDMETHODCALLTYPE *get_rotate )(
            __RPC__in ISVGTextPositioningElement * This,
                                __RPC__deref_out_opt ISVGAnimatedNumberList **p);
        END_INTERFACE
    } ISVGTextPositioningElementVtbl;
    interface ISVGTextPositioningElement
    {
        CONST_VTBL struct ISVGTextPositioningElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_x(This,v) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> putref_y(This,v) )
    ( (This)->lpVtbl -> get_y(This,p) )
    ( (This)->lpVtbl -> putref_dx(This,v) )
    ( (This)->lpVtbl -> get_dx(This,p) )
    ( (This)->lpVtbl -> putref_dy(This,v) )
    ( (This)->lpVtbl -> get_dy(This,p) )
    ( (This)->lpVtbl -> putref_rotate(This,v) )
    ( (This)->lpVtbl -> get_rotate(This,p) )
EXTERN_C const IID DIID_DispSVGTextPositioningElement;
    typedef struct DispSVGTextPositioningElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGTextPositioningElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGTextPositioningElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGTextPositioningElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGTextPositioningElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGTextPositioningElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGTextPositioningElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGTextPositioningElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGTextPositioningElementVtbl;
    interface DispSVGTextPositioningElement
    {
        CONST_VTBL struct DispSVGTextPositioningElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGTextPositioningElement;
class DECLSPEC_UUID("305105e0-98b5-11cf-bb82-00aa00bdce0b")
SVGTextPositioningElement;
EXTERN_C const IID DIID_DispDOMDocumentType;
    typedef struct DispDOMDocumentTypeVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMDocumentType * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMDocumentType * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMDocumentType * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMDocumentType * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMDocumentType * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMDocumentType * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMDocumentType * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMDocumentTypeVtbl;
    interface DispDOMDocumentType
    {
        CONST_VTBL struct DispDOMDocumentTypeVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMDocumentType;
class DECLSPEC_UUID("30510739-98b5-11cf-bb82-00aa00bdce0b")
DOMDocumentType;
EXTERN_C const IID DIID_DispNodeIterator;
    typedef struct DispNodeIteratorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispNodeIterator * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispNodeIterator * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispNodeIterator * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispNodeIterator * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispNodeIterator * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispNodeIterator * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispNodeIterator * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispNodeIteratorVtbl;
    interface DispNodeIterator
    {
        CONST_VTBL struct DispNodeIteratorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_NodeIterator;
class DECLSPEC_UUID("30510745-98b5-11cf-bb82-00aa00bdce0b")
NodeIterator;
EXTERN_C const IID DIID_DispTreeWalker;
    typedef struct DispTreeWalkerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispTreeWalker * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispTreeWalker * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispTreeWalker * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispTreeWalker * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispTreeWalker * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispTreeWalker * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispTreeWalker * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispTreeWalkerVtbl;
    interface DispTreeWalker
    {
        CONST_VTBL struct DispTreeWalkerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_TreeWalker;
class DECLSPEC_UUID("30510747-98b5-11cf-bb82-00aa00bdce0b")
TreeWalker;
EXTERN_C const IID DIID_DispDOMProcessingInstruction;
    typedef struct DispDOMProcessingInstructionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMProcessingInstruction * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMProcessingInstruction * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMProcessingInstruction * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMProcessingInstruction * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMProcessingInstruction * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMProcessingInstruction * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMProcessingInstruction * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMProcessingInstructionVtbl;
    interface DispDOMProcessingInstruction
    {
        CONST_VTBL struct DispDOMProcessingInstructionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMProcessingInstruction;
class DECLSPEC_UUID("30510743-98b5-11cf-bb82-00aa00bdce0b")
DOMProcessingInstruction;
EXTERN_C const IID IID_IHTMLPerformanceNavigation;
    typedef struct IHTMLPerformanceNavigationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPerformanceNavigation * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPerformanceNavigation * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPerformanceNavigation * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLPerformanceNavigation * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLPerformanceNavigation * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLPerformanceNavigation * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLPerformanceNavigation * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_type )(
            __RPC__in IHTMLPerformanceNavigation * This,
                                __RPC__out ULONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_redirectCount )(
            __RPC__in IHTMLPerformanceNavigation * This,
                                __RPC__out ULONG *p);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLPerformanceNavigation * This,
                                __RPC__deref_out_opt BSTR *string);
                   HRESULT ( STDMETHODCALLTYPE *toJSON )(
            __RPC__in IHTMLPerformanceNavigation * This,
                                __RPC__out VARIANT *pVar);
        END_INTERFACE
    } IHTMLPerformanceNavigationVtbl;
    interface IHTMLPerformanceNavigation
    {
        CONST_VTBL struct IHTMLPerformanceNavigationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_type(This,p) )
    ( (This)->lpVtbl -> get_redirectCount(This,p) )
    ( (This)->lpVtbl -> toString(This,string) )
    ( (This)->lpVtbl -> toJSON(This,pVar) )
EXTERN_C const IID IID_IHTMLPerformanceTiming;
    typedef struct IHTMLPerformanceTimingVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPerformanceTiming * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPerformanceTiming * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPerformanceTiming * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLPerformanceTiming * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLPerformanceTiming * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLPerformanceTiming * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLPerformanceTiming * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_navigationStart )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unloadEventStart )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unloadEventEnd )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_redirectStart )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_redirectEnd )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fetchStart )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_domainLookupStart )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_domainLookupEnd )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_connectStart )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_connectEnd )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_requestStart )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_responseStart )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_responseEnd )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_domLoading )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_domInteractive )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_domContentLoadedEventStart )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_domContentLoadedEventEnd )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_domComplete )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_loadEventStart )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_loadEventEnd )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                            HRESULT ( STDMETHODCALLTYPE *get_msFirstPaint )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out ULONGLONG *p);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__deref_out_opt BSTR *string);
                   HRESULT ( STDMETHODCALLTYPE *toJSON )(
            __RPC__in IHTMLPerformanceTiming * This,
                                __RPC__out VARIANT *pVar);
        END_INTERFACE
    } IHTMLPerformanceTimingVtbl;
    interface IHTMLPerformanceTiming
    {
        CONST_VTBL struct IHTMLPerformanceTimingVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_navigationStart(This,p) )
    ( (This)->lpVtbl -> get_unloadEventStart(This,p) )
    ( (This)->lpVtbl -> get_unloadEventEnd(This,p) )
    ( (This)->lpVtbl -> get_redirectStart(This,p) )
    ( (This)->lpVtbl -> get_redirectEnd(This,p) )
    ( (This)->lpVtbl -> get_fetchStart(This,p) )
    ( (This)->lpVtbl -> get_domainLookupStart(This,p) )
    ( (This)->lpVtbl -> get_domainLookupEnd(This,p) )
    ( (This)->lpVtbl -> get_connectStart(This,p) )
    ( (This)->lpVtbl -> get_connectEnd(This,p) )
    ( (This)->lpVtbl -> get_requestStart(This,p) )
    ( (This)->lpVtbl -> get_responseStart(This,p) )
    ( (This)->lpVtbl -> get_responseEnd(This,p) )
    ( (This)->lpVtbl -> get_domLoading(This,p) )
    ( (This)->lpVtbl -> get_domInteractive(This,p) )
    ( (This)->lpVtbl -> get_domContentLoadedEventStart(This,p) )
    ( (This)->lpVtbl -> get_domContentLoadedEventEnd(This,p) )
    ( (This)->lpVtbl -> get_domComplete(This,p) )
    ( (This)->lpVtbl -> get_loadEventStart(This,p) )
    ( (This)->lpVtbl -> get_loadEventEnd(This,p) )
    ( (This)->lpVtbl -> get_msFirstPaint(This,p) )
    ( (This)->lpVtbl -> toString(This,string) )
    ( (This)->lpVtbl -> toJSON(This,pVar) )
EXTERN_C const IID DIID_DispHTMLPerformance;
    typedef struct DispHTMLPerformanceVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLPerformance * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLPerformance * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLPerformance * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLPerformance * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLPerformance * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLPerformance * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLPerformance * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLPerformanceVtbl;
    interface DispHTMLPerformance
    {
        CONST_VTBL struct DispHTMLPerformanceVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLPerformance;
class DECLSPEC_UUID("3051074f-98b5-11cf-bb82-00aa00bdce0b")
HTMLPerformance;
EXTERN_C const IID DIID_DispHTMLPerformanceNavigation;
    typedef struct DispHTMLPerformanceNavigationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLPerformanceNavigation * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLPerformanceNavigation * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLPerformanceNavigation * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLPerformanceNavigation * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLPerformanceNavigation * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLPerformanceNavigation * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLPerformanceNavigation * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLPerformanceNavigationVtbl;
    interface DispHTMLPerformanceNavigation
    {
        CONST_VTBL struct DispHTMLPerformanceNavigationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLPerformanceNavigation;
class DECLSPEC_UUID("30510751-98b5-11cf-bb82-00aa00bdce0b")
HTMLPerformanceNavigation;
EXTERN_C const IID DIID_DispHTMLPerformanceTiming;
    typedef struct DispHTMLPerformanceTimingVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLPerformanceTiming * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLPerformanceTiming * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLPerformanceTiming * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLPerformanceTiming * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLPerformanceTiming * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLPerformanceTiming * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLPerformanceTiming * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLPerformanceTimingVtbl;
    interface DispHTMLPerformanceTiming
    {
        CONST_VTBL struct DispHTMLPerformanceTimingVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLPerformanceTiming;
class DECLSPEC_UUID("30510753-98b5-11cf-bb82-00aa00bdce0b")
HTMLPerformanceTiming;
EXTERN_C const IID IID_ISVGTSpanElement;
    typedef struct ISVGTSpanElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGTSpanElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGTSpanElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGTSpanElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGTSpanElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGTSpanElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGTSpanElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGTSpanElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } ISVGTSpanElementVtbl;
    interface ISVGTSpanElement
    {
        CONST_VTBL struct ISVGTSpanElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID DIID_DispSVGTSpanElement;
    typedef struct DispSVGTSpanElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGTSpanElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGTSpanElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGTSpanElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGTSpanElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGTSpanElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGTSpanElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGTSpanElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGTSpanElementVtbl;
    interface DispSVGTSpanElement
    {
        CONST_VTBL struct DispSVGTSpanElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGTSpanElement;
class DECLSPEC_UUID("305105e2-98b5-11cf-bb82-00aa00bdce0b")
SVGTSpanElement;
EXTERN_C const IID IID_ITemplatePrinter;
    typedef struct ITemplatePrinterVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ITemplatePrinter * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ITemplatePrinter * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ITemplatePrinter * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ITemplatePrinter * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ITemplatePrinter * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ITemplatePrinter * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ITemplatePrinter * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *startDoc )(
            __RPC__in ITemplatePrinter * This,
                       __RPC__in BSTR bstrTitle,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *stopDoc )(
            __RPC__in ITemplatePrinter * This);
                   HRESULT ( STDMETHODCALLTYPE *printBlankPage )(
            __RPC__in ITemplatePrinter * This);
                   HRESULT ( STDMETHODCALLTYPE *printPage )(
            __RPC__in ITemplatePrinter * This,
                       __RPC__in_opt IDispatch *pElemDisp);
                   HRESULT ( STDMETHODCALLTYPE *ensurePrintDialogDefaults )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *showPrintDialog )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *showPageSetupDialog )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *printNonNative )(
            __RPC__in ITemplatePrinter * This,
                       __RPC__in_opt IUnknown *pMarkup,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *printNonNativeFrames )(
            __RPC__in ITemplatePrinter * This,
                       __RPC__in_opt IUnknown *pMarkup,
                       VARIANT_BOOL fActiveFrame);
                            HRESULT ( STDMETHODCALLTYPE *put_framesetDocument )(
            __RPC__in ITemplatePrinter * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_framesetDocument )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameActive )(
            __RPC__in ITemplatePrinter * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameActive )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameAsShown )(
            __RPC__in ITemplatePrinter * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameAsShown )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selection )(
            __RPC__in ITemplatePrinter * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_selection )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selectedPages )(
            __RPC__in ITemplatePrinter * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectedPages )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_currentPage )(
            __RPC__in ITemplatePrinter * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_currentPage )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_currentPageAvail )(
            __RPC__in ITemplatePrinter * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_currentPageAvail )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_collate )(
            __RPC__in ITemplatePrinter * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_collate )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_duplex )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_copies )(
            __RPC__in ITemplatePrinter * This,
                       USHORT v);
                            HRESULT ( STDMETHODCALLTYPE *get_copies )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_pageFrom )(
            __RPC__in ITemplatePrinter * This,
                       USHORT v);
                            HRESULT ( STDMETHODCALLTYPE *get_pageFrom )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_pageTo )(
            __RPC__in ITemplatePrinter * This,
                       USHORT v);
                            HRESULT ( STDMETHODCALLTYPE *get_pageTo )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_tableOfLinks )(
            __RPC__in ITemplatePrinter * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_tableOfLinks )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_allLinkedDocuments )(
            __RPC__in ITemplatePrinter * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_allLinkedDocuments )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_header )(
            __RPC__in ITemplatePrinter * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_header )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_footer )(
            __RPC__in ITemplatePrinter * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_footer )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginLeft )(
            __RPC__in ITemplatePrinter * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginLeft )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginRight )(
            __RPC__in ITemplatePrinter * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginRight )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginTop )(
            __RPC__in ITemplatePrinter * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginTop )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginBottom )(
            __RPC__in ITemplatePrinter * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginBottom )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pageWidth )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pageHeight )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableLeft )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableTop )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableRight )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableBottom )(
            __RPC__in ITemplatePrinter * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *updatePageStatus )(
            __RPC__in ITemplatePrinter * This,
                       __RPC__in long *p);
        END_INTERFACE
    } ITemplatePrinterVtbl;
    interface ITemplatePrinter
    {
        CONST_VTBL struct ITemplatePrinterVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> startDoc(This,bstrTitle,p) )
    ( (This)->lpVtbl -> stopDoc(This) )
    ( (This)->lpVtbl -> printBlankPage(This) )
    ( (This)->lpVtbl -> printPage(This,pElemDisp) )
    ( (This)->lpVtbl -> ensurePrintDialogDefaults(This,p) )
    ( (This)->lpVtbl -> showPrintDialog(This,p) )
    ( (This)->lpVtbl -> showPageSetupDialog(This,p) )
    ( (This)->lpVtbl -> printNonNative(This,pMarkup,p) )
    ( (This)->lpVtbl -> printNonNativeFrames(This,pMarkup,fActiveFrame) )
    ( (This)->lpVtbl -> put_framesetDocument(This,v) )
    ( (This)->lpVtbl -> get_framesetDocument(This,p) )
    ( (This)->lpVtbl -> put_frameActive(This,v) )
    ( (This)->lpVtbl -> get_frameActive(This,p) )
    ( (This)->lpVtbl -> put_frameAsShown(This,v) )
    ( (This)->lpVtbl -> get_frameAsShown(This,p) )
    ( (This)->lpVtbl -> put_selection(This,v) )
    ( (This)->lpVtbl -> get_selection(This,p) )
    ( (This)->lpVtbl -> put_selectedPages(This,v) )
    ( (This)->lpVtbl -> get_selectedPages(This,p) )
    ( (This)->lpVtbl -> put_currentPage(This,v) )
    ( (This)->lpVtbl -> get_currentPage(This,p) )
    ( (This)->lpVtbl -> put_currentPageAvail(This,v) )
    ( (This)->lpVtbl -> get_currentPageAvail(This,p) )
    ( (This)->lpVtbl -> put_collate(This,v) )
    ( (This)->lpVtbl -> get_collate(This,p) )
    ( (This)->lpVtbl -> get_duplex(This,p) )
    ( (This)->lpVtbl -> put_copies(This,v) )
    ( (This)->lpVtbl -> get_copies(This,p) )
    ( (This)->lpVtbl -> put_pageFrom(This,v) )
    ( (This)->lpVtbl -> get_pageFrom(This,p) )
    ( (This)->lpVtbl -> put_pageTo(This,v) )
    ( (This)->lpVtbl -> get_pageTo(This,p) )
    ( (This)->lpVtbl -> put_tableOfLinks(This,v) )
    ( (This)->lpVtbl -> get_tableOfLinks(This,p) )
    ( (This)->lpVtbl -> put_allLinkedDocuments(This,v) )
    ( (This)->lpVtbl -> get_allLinkedDocuments(This,p) )
    ( (This)->lpVtbl -> put_header(This,v) )
    ( (This)->lpVtbl -> get_header(This,p) )
    ( (This)->lpVtbl -> put_footer(This,v) )
    ( (This)->lpVtbl -> get_footer(This,p) )
    ( (This)->lpVtbl -> put_marginLeft(This,v) )
    ( (This)->lpVtbl -> get_marginLeft(This,p) )
    ( (This)->lpVtbl -> put_marginRight(This,v) )
    ( (This)->lpVtbl -> get_marginRight(This,p) )
    ( (This)->lpVtbl -> put_marginTop(This,v) )
    ( (This)->lpVtbl -> get_marginTop(This,p) )
    ( (This)->lpVtbl -> put_marginBottom(This,v) )
    ( (This)->lpVtbl -> get_marginBottom(This,p) )
    ( (This)->lpVtbl -> get_pageWidth(This,p) )
    ( (This)->lpVtbl -> get_pageHeight(This,p) )
    ( (This)->lpVtbl -> get_unprintableLeft(This,p) )
    ( (This)->lpVtbl -> get_unprintableTop(This,p) )
    ( (This)->lpVtbl -> get_unprintableRight(This,p) )
    ( (This)->lpVtbl -> get_unprintableBottom(This,p) )
    ( (This)->lpVtbl -> updatePageStatus(This,p) )
EXTERN_C const IID IID_ITemplatePrinter2;
    typedef struct ITemplatePrinter2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ITemplatePrinter2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ITemplatePrinter2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ITemplatePrinter2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ITemplatePrinter2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ITemplatePrinter2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ITemplatePrinter2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ITemplatePrinter2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *startDoc )(
            __RPC__in ITemplatePrinter2 * This,
                       __RPC__in BSTR bstrTitle,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *stopDoc )(
            __RPC__in ITemplatePrinter2 * This);
                   HRESULT ( STDMETHODCALLTYPE *printBlankPage )(
            __RPC__in ITemplatePrinter2 * This);
                   HRESULT ( STDMETHODCALLTYPE *printPage )(
            __RPC__in ITemplatePrinter2 * This,
                       __RPC__in_opt IDispatch *pElemDisp);
                   HRESULT ( STDMETHODCALLTYPE *ensurePrintDialogDefaults )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *showPrintDialog )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *showPageSetupDialog )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *printNonNative )(
            __RPC__in ITemplatePrinter2 * This,
                       __RPC__in_opt IUnknown *pMarkup,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *printNonNativeFrames )(
            __RPC__in ITemplatePrinter2 * This,
                       __RPC__in_opt IUnknown *pMarkup,
                       VARIANT_BOOL fActiveFrame);
                            HRESULT ( STDMETHODCALLTYPE *put_framesetDocument )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_framesetDocument )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameActive )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameActive )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameAsShown )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameAsShown )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selection )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_selection )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selectedPages )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectedPages )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_currentPage )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_currentPage )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_currentPageAvail )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_currentPageAvail )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_collate )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_collate )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_duplex )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_copies )(
            __RPC__in ITemplatePrinter2 * This,
                       USHORT v);
                            HRESULT ( STDMETHODCALLTYPE *get_copies )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_pageFrom )(
            __RPC__in ITemplatePrinter2 * This,
                       USHORT v);
                            HRESULT ( STDMETHODCALLTYPE *get_pageFrom )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_pageTo )(
            __RPC__in ITemplatePrinter2 * This,
                       USHORT v);
                            HRESULT ( STDMETHODCALLTYPE *get_pageTo )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_tableOfLinks )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_tableOfLinks )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_allLinkedDocuments )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_allLinkedDocuments )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_header )(
            __RPC__in ITemplatePrinter2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_header )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_footer )(
            __RPC__in ITemplatePrinter2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_footer )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginLeft )(
            __RPC__in ITemplatePrinter2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginLeft )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginRight )(
            __RPC__in ITemplatePrinter2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginRight )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginTop )(
            __RPC__in ITemplatePrinter2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginTop )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginBottom )(
            __RPC__in ITemplatePrinter2 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginBottom )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pageWidth )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pageHeight )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableLeft )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableTop )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableRight )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableBottom )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *updatePageStatus )(
            __RPC__in ITemplatePrinter2 * This,
                       __RPC__in long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selectionEnabled )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectionEnabled )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameActiveEnabled )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameActiveEnabled )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_orientation )(
            __RPC__in ITemplatePrinter2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_orientation )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_usePrinterCopyCollate )(
            __RPC__in ITemplatePrinter2 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_usePrinterCopyCollate )(
            __RPC__in ITemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *deviceSupports )(
            __RPC__in ITemplatePrinter2 * This,
                       __RPC__in BSTR bstrProperty,
                                __RPC__out VARIANT *pvar);
        END_INTERFACE
    } ITemplatePrinter2Vtbl;
    interface ITemplatePrinter2
    {
        CONST_VTBL struct ITemplatePrinter2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> startDoc(This,bstrTitle,p) )
    ( (This)->lpVtbl -> stopDoc(This) )
    ( (This)->lpVtbl -> printBlankPage(This) )
    ( (This)->lpVtbl -> printPage(This,pElemDisp) )
    ( (This)->lpVtbl -> ensurePrintDialogDefaults(This,p) )
    ( (This)->lpVtbl -> showPrintDialog(This,p) )
    ( (This)->lpVtbl -> showPageSetupDialog(This,p) )
    ( (This)->lpVtbl -> printNonNative(This,pMarkup,p) )
    ( (This)->lpVtbl -> printNonNativeFrames(This,pMarkup,fActiveFrame) )
    ( (This)->lpVtbl -> put_framesetDocument(This,v) )
    ( (This)->lpVtbl -> get_framesetDocument(This,p) )
    ( (This)->lpVtbl -> put_frameActive(This,v) )
    ( (This)->lpVtbl -> get_frameActive(This,p) )
    ( (This)->lpVtbl -> put_frameAsShown(This,v) )
    ( (This)->lpVtbl -> get_frameAsShown(This,p) )
    ( (This)->lpVtbl -> put_selection(This,v) )
    ( (This)->lpVtbl -> get_selection(This,p) )
    ( (This)->lpVtbl -> put_selectedPages(This,v) )
    ( (This)->lpVtbl -> get_selectedPages(This,p) )
    ( (This)->lpVtbl -> put_currentPage(This,v) )
    ( (This)->lpVtbl -> get_currentPage(This,p) )
    ( (This)->lpVtbl -> put_currentPageAvail(This,v) )
    ( (This)->lpVtbl -> get_currentPageAvail(This,p) )
    ( (This)->lpVtbl -> put_collate(This,v) )
    ( (This)->lpVtbl -> get_collate(This,p) )
    ( (This)->lpVtbl -> get_duplex(This,p) )
    ( (This)->lpVtbl -> put_copies(This,v) )
    ( (This)->lpVtbl -> get_copies(This,p) )
    ( (This)->lpVtbl -> put_pageFrom(This,v) )
    ( (This)->lpVtbl -> get_pageFrom(This,p) )
    ( (This)->lpVtbl -> put_pageTo(This,v) )
    ( (This)->lpVtbl -> get_pageTo(This,p) )
    ( (This)->lpVtbl -> put_tableOfLinks(This,v) )
    ( (This)->lpVtbl -> get_tableOfLinks(This,p) )
    ( (This)->lpVtbl -> put_allLinkedDocuments(This,v) )
    ( (This)->lpVtbl -> get_allLinkedDocuments(This,p) )
    ( (This)->lpVtbl -> put_header(This,v) )
    ( (This)->lpVtbl -> get_header(This,p) )
    ( (This)->lpVtbl -> put_footer(This,v) )
    ( (This)->lpVtbl -> get_footer(This,p) )
    ( (This)->lpVtbl -> put_marginLeft(This,v) )
    ( (This)->lpVtbl -> get_marginLeft(This,p) )
    ( (This)->lpVtbl -> put_marginRight(This,v) )
    ( (This)->lpVtbl -> get_marginRight(This,p) )
    ( (This)->lpVtbl -> put_marginTop(This,v) )
    ( (This)->lpVtbl -> get_marginTop(This,p) )
    ( (This)->lpVtbl -> put_marginBottom(This,v) )
    ( (This)->lpVtbl -> get_marginBottom(This,p) )
    ( (This)->lpVtbl -> get_pageWidth(This,p) )
    ( (This)->lpVtbl -> get_pageHeight(This,p) )
    ( (This)->lpVtbl -> get_unprintableLeft(This,p) )
    ( (This)->lpVtbl -> get_unprintableTop(This,p) )
    ( (This)->lpVtbl -> get_unprintableRight(This,p) )
    ( (This)->lpVtbl -> get_unprintableBottom(This,p) )
    ( (This)->lpVtbl -> updatePageStatus(This,p) )
    ( (This)->lpVtbl -> put_selectionEnabled(This,v) )
    ( (This)->lpVtbl -> get_selectionEnabled(This,p) )
    ( (This)->lpVtbl -> put_frameActiveEnabled(This,v) )
    ( (This)->lpVtbl -> get_frameActiveEnabled(This,p) )
    ( (This)->lpVtbl -> put_orientation(This,v) )
    ( (This)->lpVtbl -> get_orientation(This,p) )
    ( (This)->lpVtbl -> put_usePrinterCopyCollate(This,v) )
    ( (This)->lpVtbl -> get_usePrinterCopyCollate(This,p) )
    ( (This)->lpVtbl -> deviceSupports(This,bstrProperty,pvar) )
EXTERN_C const IID IID_ITemplatePrinter3;
    typedef struct ITemplatePrinter3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ITemplatePrinter3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ITemplatePrinter3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ITemplatePrinter3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ITemplatePrinter3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ITemplatePrinter3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *startDoc )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in BSTR bstrTitle,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *stopDoc )(
            __RPC__in ITemplatePrinter3 * This);
                   HRESULT ( STDMETHODCALLTYPE *printBlankPage )(
            __RPC__in ITemplatePrinter3 * This);
                   HRESULT ( STDMETHODCALLTYPE *printPage )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in_opt IDispatch *pElemDisp);
                   HRESULT ( STDMETHODCALLTYPE *ensurePrintDialogDefaults )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *showPrintDialog )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *showPageSetupDialog )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *printNonNative )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in_opt IUnknown *pMarkup,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *printNonNativeFrames )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in_opt IUnknown *pMarkup,
                       VARIANT_BOOL fActiveFrame);
                            HRESULT ( STDMETHODCALLTYPE *put_framesetDocument )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_framesetDocument )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameActive )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameActive )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameAsShown )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameAsShown )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selection )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_selection )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selectedPages )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectedPages )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_currentPage )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_currentPage )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_currentPageAvail )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_currentPageAvail )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_collate )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_collate )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_duplex )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_copies )(
            __RPC__in ITemplatePrinter3 * This,
                       USHORT v);
                            HRESULT ( STDMETHODCALLTYPE *get_copies )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_pageFrom )(
            __RPC__in ITemplatePrinter3 * This,
                       USHORT v);
                            HRESULT ( STDMETHODCALLTYPE *get_pageFrom )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_pageTo )(
            __RPC__in ITemplatePrinter3 * This,
                       USHORT v);
                            HRESULT ( STDMETHODCALLTYPE *get_pageTo )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out USHORT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_tableOfLinks )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_tableOfLinks )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_allLinkedDocuments )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_allLinkedDocuments )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_header )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_header )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_footer )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_footer )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginLeft )(
            __RPC__in ITemplatePrinter3 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginLeft )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginRight )(
            __RPC__in ITemplatePrinter3 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginRight )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginTop )(
            __RPC__in ITemplatePrinter3 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginTop )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_marginBottom )(
            __RPC__in ITemplatePrinter3 * This,
                       long v);
                            HRESULT ( STDMETHODCALLTYPE *get_marginBottom )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pageWidth )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_pageHeight )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableLeft )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableTop )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableRight )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_unprintableBottom )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *updatePageStatus )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in long *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selectionEnabled )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_selectionEnabled )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_frameActiveEnabled )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_frameActiveEnabled )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *put_orientation )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_orientation )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_usePrinterCopyCollate )(
            __RPC__in ITemplatePrinter3 * This,
                       VARIANT_BOOL v);
                            HRESULT ( STDMETHODCALLTYPE *get_usePrinterCopyCollate )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *deviceSupports )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in BSTR bstrProperty,
                                __RPC__out VARIANT *pvar);
                            HRESULT ( STDMETHODCALLTYPE *put_headerFooterFont )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_headerFooterFont )(
            __RPC__in ITemplatePrinter3 * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *getPageMarginTop )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in_opt IDispatch *pageRule,
                       long pageWidth,
                       long pageHeight,
                                __RPC__out VARIANT *pMargin);
                   HRESULT ( STDMETHODCALLTYPE *getPageMarginRight )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in_opt IDispatch *pageRule,
                       long pageWidth,
                       long pageHeight,
                                __RPC__out VARIANT *pMargin);
                   HRESULT ( STDMETHODCALLTYPE *getPageMarginBottom )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in_opt IDispatch *pageRule,
                       long pageWidth,
                       long pageHeight,
                                __RPC__out VARIANT *pMargin);
                   HRESULT ( STDMETHODCALLTYPE *getPageMarginLeft )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in_opt IDispatch *pageRule,
                       long pageWidth,
                       long pageHeight,
                                __RPC__out VARIANT *pMargin);
                   HRESULT ( STDMETHODCALLTYPE *getPageMarginTopImportant )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in_opt IDispatch *pageRule,
                                __RPC__out VARIANT_BOOL *pbImportant);
                   HRESULT ( STDMETHODCALLTYPE *getPageMarginRightImportant )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in_opt IDispatch *pageRule,
                                __RPC__out VARIANT_BOOL *pbImportant);
                   HRESULT ( STDMETHODCALLTYPE *getPageMarginBottomImportant )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in_opt IDispatch *pageRule,
                                __RPC__out VARIANT_BOOL *pbImportant);
                   HRESULT ( STDMETHODCALLTYPE *getPageMarginLeftImportant )(
            __RPC__in ITemplatePrinter3 * This,
                       __RPC__in_opt IDispatch *pageRule,
                                __RPC__out VARIANT_BOOL *pbImportant);
        END_INTERFACE
    } ITemplatePrinter3Vtbl;
    interface ITemplatePrinter3
    {
        CONST_VTBL struct ITemplatePrinter3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> startDoc(This,bstrTitle,p) )
    ( (This)->lpVtbl -> stopDoc(This) )
    ( (This)->lpVtbl -> printBlankPage(This) )
    ( (This)->lpVtbl -> printPage(This,pElemDisp) )
    ( (This)->lpVtbl -> ensurePrintDialogDefaults(This,p) )
    ( (This)->lpVtbl -> showPrintDialog(This,p) )
    ( (This)->lpVtbl -> showPageSetupDialog(This,p) )
    ( (This)->lpVtbl -> printNonNative(This,pMarkup,p) )
    ( (This)->lpVtbl -> printNonNativeFrames(This,pMarkup,fActiveFrame) )
    ( (This)->lpVtbl -> put_framesetDocument(This,v) )
    ( (This)->lpVtbl -> get_framesetDocument(This,p) )
    ( (This)->lpVtbl -> put_frameActive(This,v) )
    ( (This)->lpVtbl -> get_frameActive(This,p) )
    ( (This)->lpVtbl -> put_frameAsShown(This,v) )
    ( (This)->lpVtbl -> get_frameAsShown(This,p) )
    ( (This)->lpVtbl -> put_selection(This,v) )
    ( (This)->lpVtbl -> get_selection(This,p) )
    ( (This)->lpVtbl -> put_selectedPages(This,v) )
    ( (This)->lpVtbl -> get_selectedPages(This,p) )
    ( (This)->lpVtbl -> put_currentPage(This,v) )
    ( (This)->lpVtbl -> get_currentPage(This,p) )
    ( (This)->lpVtbl -> put_currentPageAvail(This,v) )
    ( (This)->lpVtbl -> get_currentPageAvail(This,p) )
    ( (This)->lpVtbl -> put_collate(This,v) )
    ( (This)->lpVtbl -> get_collate(This,p) )
    ( (This)->lpVtbl -> get_duplex(This,p) )
    ( (This)->lpVtbl -> put_copies(This,v) )
    ( (This)->lpVtbl -> get_copies(This,p) )
    ( (This)->lpVtbl -> put_pageFrom(This,v) )
    ( (This)->lpVtbl -> get_pageFrom(This,p) )
    ( (This)->lpVtbl -> put_pageTo(This,v) )
    ( (This)->lpVtbl -> get_pageTo(This,p) )
    ( (This)->lpVtbl -> put_tableOfLinks(This,v) )
    ( (This)->lpVtbl -> get_tableOfLinks(This,p) )
    ( (This)->lpVtbl -> put_allLinkedDocuments(This,v) )
    ( (This)->lpVtbl -> get_allLinkedDocuments(This,p) )
    ( (This)->lpVtbl -> put_header(This,v) )
    ( (This)->lpVtbl -> get_header(This,p) )
    ( (This)->lpVtbl -> put_footer(This,v) )
    ( (This)->lpVtbl -> get_footer(This,p) )
    ( (This)->lpVtbl -> put_marginLeft(This,v) )
    ( (This)->lpVtbl -> get_marginLeft(This,p) )
    ( (This)->lpVtbl -> put_marginRight(This,v) )
    ( (This)->lpVtbl -> get_marginRight(This,p) )
    ( (This)->lpVtbl -> put_marginTop(This,v) )
    ( (This)->lpVtbl -> get_marginTop(This,p) )
    ( (This)->lpVtbl -> put_marginBottom(This,v) )
    ( (This)->lpVtbl -> get_marginBottom(This,p) )
    ( (This)->lpVtbl -> get_pageWidth(This,p) )
    ( (This)->lpVtbl -> get_pageHeight(This,p) )
    ( (This)->lpVtbl -> get_unprintableLeft(This,p) )
    ( (This)->lpVtbl -> get_unprintableTop(This,p) )
    ( (This)->lpVtbl -> get_unprintableRight(This,p) )
    ( (This)->lpVtbl -> get_unprintableBottom(This,p) )
    ( (This)->lpVtbl -> updatePageStatus(This,p) )
    ( (This)->lpVtbl -> put_selectionEnabled(This,v) )
    ( (This)->lpVtbl -> get_selectionEnabled(This,p) )
    ( (This)->lpVtbl -> put_frameActiveEnabled(This,v) )
    ( (This)->lpVtbl -> get_frameActiveEnabled(This,p) )
    ( (This)->lpVtbl -> put_orientation(This,v) )
    ( (This)->lpVtbl -> get_orientation(This,p) )
    ( (This)->lpVtbl -> put_usePrinterCopyCollate(This,v) )
    ( (This)->lpVtbl -> get_usePrinterCopyCollate(This,p) )
    ( (This)->lpVtbl -> deviceSupports(This,bstrProperty,pvar) )
    ( (This)->lpVtbl -> put_headerFooterFont(This,v) )
    ( (This)->lpVtbl -> get_headerFooterFont(This,p) )
    ( (This)->lpVtbl -> getPageMarginTop(This,pageRule,pageWidth,pageHeight,pMargin) )
    ( (This)->lpVtbl -> getPageMarginRight(This,pageRule,pageWidth,pageHeight,pMargin) )
    ( (This)->lpVtbl -> getPageMarginBottom(This,pageRule,pageWidth,pageHeight,pMargin) )
    ( (This)->lpVtbl -> getPageMarginLeft(This,pageRule,pageWidth,pageHeight,pMargin) )
    ( (This)->lpVtbl -> getPageMarginTopImportant(This,pageRule,pbImportant) )
    ( (This)->lpVtbl -> getPageMarginRightImportant(This,pageRule,pbImportant) )
    ( (This)->lpVtbl -> getPageMarginBottomImportant(This,pageRule,pbImportant) )
    ( (This)->lpVtbl -> getPageMarginLeftImportant(This,pageRule,pbImportant) )
EXTERN_C const IID IID_IPrintManagerTemplatePrinter;
    typedef struct IPrintManagerTemplatePrinterVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IPrintManagerTemplatePrinter * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IPrintManagerTemplatePrinter * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IPrintManagerTemplatePrinter * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IPrintManagerTemplatePrinter * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IPrintManagerTemplatePrinter * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IPrintManagerTemplatePrinter * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IPrintManagerTemplatePrinter * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *startPrint )(
            __RPC__in IPrintManagerTemplatePrinter * This);
                   HRESULT ( STDMETHODCALLTYPE *drawPreviewPage )(
            __RPC__in IPrintManagerTemplatePrinter * This,
                       __RPC__in_opt IDispatch *pElemDisp,
                       long nPage);
                   HRESULT ( STDMETHODCALLTYPE *setPageCount )(
            __RPC__in IPrintManagerTemplatePrinter * This,
                       long nPage);
                   HRESULT ( STDMETHODCALLTYPE *invalidatePreview )(
            __RPC__in IPrintManagerTemplatePrinter * This);
                   HRESULT ( STDMETHODCALLTYPE *getPrintTaskOptionValue )(
            __RPC__in IPrintManagerTemplatePrinter * This,
                       __RPC__in BSTR bstrKey,
                                __RPC__out VARIANT *pvarin);
                   HRESULT ( STDMETHODCALLTYPE *endPrint )(
            __RPC__in IPrintManagerTemplatePrinter * This);
        END_INTERFACE
    } IPrintManagerTemplatePrinterVtbl;
    interface IPrintManagerTemplatePrinter
    {
        CONST_VTBL struct IPrintManagerTemplatePrinterVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> startPrint(This) )
    ( (This)->lpVtbl -> drawPreviewPage(This,pElemDisp,nPage) )
    ( (This)->lpVtbl -> setPageCount(This,nPage) )
    ( (This)->lpVtbl -> invalidatePreview(This) )
    ( (This)->lpVtbl -> getPrintTaskOptionValue(This,bstrKey,pvarin) )
    ( (This)->lpVtbl -> endPrint(This) )
EXTERN_C const IID IID_IPrintManagerTemplatePrinter2;
    typedef struct IPrintManagerTemplatePrinter2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IPrintManagerTemplatePrinter2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IPrintManagerTemplatePrinter2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IPrintManagerTemplatePrinter2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IPrintManagerTemplatePrinter2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IPrintManagerTemplatePrinter2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IPrintManagerTemplatePrinter2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IPrintManagerTemplatePrinter2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *startPrint )(
            __RPC__in IPrintManagerTemplatePrinter2 * This);
                   HRESULT ( STDMETHODCALLTYPE *drawPreviewPage )(
            __RPC__in IPrintManagerTemplatePrinter2 * This,
                       __RPC__in_opt IDispatch *pElemDisp,
                       long nPage);
                   HRESULT ( STDMETHODCALLTYPE *setPageCount )(
            __RPC__in IPrintManagerTemplatePrinter2 * This,
                       long nPage);
                   HRESULT ( STDMETHODCALLTYPE *invalidatePreview )(
            __RPC__in IPrintManagerTemplatePrinter2 * This);
                   HRESULT ( STDMETHODCALLTYPE *getPrintTaskOptionValue )(
            __RPC__in IPrintManagerTemplatePrinter2 * This,
                       __RPC__in BSTR bstrKey,
                                __RPC__out VARIANT *pvarin);
                   HRESULT ( STDMETHODCALLTYPE *endPrint )(
            __RPC__in IPrintManagerTemplatePrinter2 * This);
                            HRESULT ( STDMETHODCALLTYPE *get_showHeaderFooter )(
            __RPC__in IPrintManagerTemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_shrinkToFit )(
            __RPC__in IPrintManagerTemplatePrinter2 * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_percentScale )(
            __RPC__in IPrintManagerTemplatePrinter2 * This,
                                __RPC__out float *p);
        END_INTERFACE
    } IPrintManagerTemplatePrinter2Vtbl;
    interface IPrintManagerTemplatePrinter2
    {
        CONST_VTBL struct IPrintManagerTemplatePrinter2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> startPrint(This) )
    ( (This)->lpVtbl -> drawPreviewPage(This,pElemDisp,nPage) )
    ( (This)->lpVtbl -> setPageCount(This,nPage) )
    ( (This)->lpVtbl -> invalidatePreview(This) )
    ( (This)->lpVtbl -> getPrintTaskOptionValue(This,bstrKey,pvarin) )
    ( (This)->lpVtbl -> endPrint(This) )
    ( (This)->lpVtbl -> get_showHeaderFooter(This,p) )
    ( (This)->lpVtbl -> get_shrinkToFit(This,p) )
    ( (This)->lpVtbl -> get_percentScale(This,p) )
EXTERN_C const CLSID CLSID_CTemplatePrinter;
class DECLSPEC_UUID("3050f6b3-98b5-11cf-bb82-00aa00bdce0b")
CTemplatePrinter;
EXTERN_C const IID DIID_DispCPrintManagerTemplatePrinter;
    typedef struct DispCPrintManagerTemplatePrinterVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispCPrintManagerTemplatePrinter * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispCPrintManagerTemplatePrinter * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispCPrintManagerTemplatePrinter * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispCPrintManagerTemplatePrinter * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispCPrintManagerTemplatePrinter * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispCPrintManagerTemplatePrinter * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispCPrintManagerTemplatePrinter * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispCPrintManagerTemplatePrinterVtbl;
    interface DispCPrintManagerTemplatePrinter
    {
        CONST_VTBL struct DispCPrintManagerTemplatePrinterVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_CPrintManagerTemplatePrinter;
class DECLSPEC_UUID("63619f54-9d71-4c23-a08d-50d7f18db2e9")
CPrintManagerTemplatePrinter;
EXTERN_C const IID IID_ISVGTextPathElement;
    typedef struct ISVGTextPathElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISVGTextPathElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISVGTextPathElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISVGTextPathElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in ISVGTextPathElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in ISVGTextPathElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in ISVGTextPathElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            ISVGTextPathElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                               HRESULT ( STDMETHODCALLTYPE *putref_startOffset )(
            __RPC__in ISVGTextPathElement * This,
                       __RPC__in_opt ISVGAnimatedLength *v);
                            HRESULT ( STDMETHODCALLTYPE *get_startOffset )(
            __RPC__in ISVGTextPathElement * This,
                                __RPC__deref_out_opt ISVGAnimatedLength **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_method )(
            __RPC__in ISVGTextPathElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_method )(
            __RPC__in ISVGTextPathElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
                               HRESULT ( STDMETHODCALLTYPE *putref_spacing )(
            __RPC__in ISVGTextPathElement * This,
                       __RPC__in_opt ISVGAnimatedEnumeration *v);
                            HRESULT ( STDMETHODCALLTYPE *get_spacing )(
            __RPC__in ISVGTextPathElement * This,
                                __RPC__deref_out_opt ISVGAnimatedEnumeration **p);
        END_INTERFACE
    } ISVGTextPathElementVtbl;
    interface ISVGTextPathElement
    {
        CONST_VTBL struct ISVGTextPathElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> putref_startOffset(This,v) )
    ( (This)->lpVtbl -> get_startOffset(This,p) )
    ( (This)->lpVtbl -> putref_method(This,v) )
    ( (This)->lpVtbl -> get_method(This,p) )
    ( (This)->lpVtbl -> putref_spacing(This,v) )
    ( (This)->lpVtbl -> get_spacing(This,p) )
EXTERN_C const IID DIID_DispSVGTextPathElement;
    typedef struct DispSVGTextPathElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispSVGTextPathElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispSVGTextPathElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispSVGTextPathElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispSVGTextPathElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispSVGTextPathElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispSVGTextPathElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispSVGTextPathElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispSVGTextPathElementVtbl;
    interface DispSVGTextPathElement
    {
        CONST_VTBL struct DispSVGTextPathElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_SVGTextPathElement;
class DECLSPEC_UUID("305105eb-98b5-11cf-bb82-00aa00bdce0b")
SVGTextPathElement;
EXTERN_C const IID IID_IDOMXmlSerializer;
    typedef struct IDOMXmlSerializerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMXmlSerializer * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMXmlSerializer * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMXmlSerializer * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMXmlSerializer * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMXmlSerializer * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMXmlSerializer * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMXmlSerializer * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *serializeToString )(
            __RPC__in IDOMXmlSerializer * This,
                       __RPC__in_opt IHTMLDOMNode *pNode,
                                __RPC__deref_out_opt BSTR *pString);
        END_INTERFACE
    } IDOMXmlSerializerVtbl;
    interface IDOMXmlSerializer
    {
        CONST_VTBL struct IDOMXmlSerializerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> serializeToString(This,pNode,pString) )
EXTERN_C const IID IID_IDOMParser;
    typedef struct IDOMParserVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMParser * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMParser * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMParser * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMParser * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMParser * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMParser * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMParser * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *parseFromString )(
            __RPC__in IDOMParser * This,
                       __RPC__in BSTR xmlSource,
                       __RPC__in BSTR mimeType,
                                __RPC__deref_out_opt IHTMLDocument2 **ppNode);
        END_INTERFACE
    } IDOMParserVtbl;
    interface IDOMParser
    {
        CONST_VTBL struct IDOMParserVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> parseFromString(This,xmlSource,mimeType,ppNode) )
EXTERN_C const IID DIID_DispXMLSerializer;
    typedef struct DispXMLSerializerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispXMLSerializer * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispXMLSerializer * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispXMLSerializer * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispXMLSerializer * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispXMLSerializer * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispXMLSerializer * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispXMLSerializer * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispXMLSerializerVtbl;
    interface DispXMLSerializer
    {
        CONST_VTBL struct DispXMLSerializerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_XMLSerializer;
class DECLSPEC_UUID("3051077e-98b5-11cf-bb82-00aa00bdce0b")
XMLSerializer;
EXTERN_C const IID DIID_DispDOMParser;
    typedef struct DispDOMParserVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMParser * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMParser * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMParser * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMParser * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMParser * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMParser * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMParser * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMParserVtbl;
    interface DispDOMParser
    {
        CONST_VTBL struct DispDOMParserVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMParser;
class DECLSPEC_UUID("30510782-98b5-11cf-bb82-00aa00bdce0b")
DOMParser;
EXTERN_C const IID IID_IDOMXmlSerializerFactory;
    typedef struct IDOMXmlSerializerFactoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMXmlSerializerFactory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMXmlSerializerFactory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMXmlSerializerFactory * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMXmlSerializerFactory * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMXmlSerializerFactory * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMXmlSerializerFactory * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMXmlSerializerFactory * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *create )(
            __RPC__in IDOMXmlSerializerFactory * This,
                                __RPC__deref_out_opt IDOMXmlSerializer **__MIDL__IDOMXmlSerializerFactory0000);
        END_INTERFACE
    } IDOMXmlSerializerFactoryVtbl;
    interface IDOMXmlSerializerFactory
    {
        CONST_VTBL struct IDOMXmlSerializerFactoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> create(This,__MIDL__IDOMXmlSerializerFactory0000) )
EXTERN_C const IID IID_IDOMParserFactory;
    typedef struct IDOMParserFactoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMParserFactory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMParserFactory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMParserFactory * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMParserFactory * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMParserFactory * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMParserFactory * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMParserFactory * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *create )(
            __RPC__in IDOMParserFactory * This,
                                __RPC__deref_out_opt IDOMParser **__MIDL__IDOMParserFactory0000);
        END_INTERFACE
    } IDOMParserFactoryVtbl;
    interface IDOMParserFactory
    {
        CONST_VTBL struct IDOMParserFactoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> create(This,__MIDL__IDOMParserFactory0000) )
EXTERN_C const CLSID CLSID_HTMLDOMXmlSerializerFactory;
class DECLSPEC_UUID("30510780-98b5-11cf-bb82-00aa00bdce0b")
HTMLDOMXmlSerializerFactory;
EXTERN_C const CLSID CLSID_DOMParserFactory;
class DECLSPEC_UUID("30510784-98b5-11cf-bb82-00aa00bdce0b")
DOMParserFactory;
EXTERN_C const IID DIID_DispHTMLSemanticElement;
    typedef struct DispHTMLSemanticElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLSemanticElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLSemanticElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLSemanticElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLSemanticElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLSemanticElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLSemanticElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLSemanticElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLSemanticElementVtbl;
    interface DispHTMLSemanticElement
    {
        CONST_VTBL struct DispHTMLSemanticElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLSemanticElement;
class DECLSPEC_UUID("305107b0-98b5-11cf-bb82-00aa00bdce0b")
HTMLSemanticElement;
EXTERN_C const IID IID_IHTMLProgressElement;
    typedef struct IHTMLProgressElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLProgressElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLProgressElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLProgressElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLProgressElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLProgressElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLProgressElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLProgressElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_value )(
            __RPC__in IHTMLProgressElement * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_value )(
            __RPC__in IHTMLProgressElement * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *put_max )(
            __RPC__in IHTMLProgressElement * This,
                       float v);
                            HRESULT ( STDMETHODCALLTYPE *get_max )(
            __RPC__in IHTMLProgressElement * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *get_position )(
            __RPC__in IHTMLProgressElement * This,
                                __RPC__out float *p);
                            HRESULT ( STDMETHODCALLTYPE *get_form )(
            __RPC__in IHTMLProgressElement * This,
                                __RPC__deref_out_opt IHTMLFormElement **p);
        END_INTERFACE
    } IHTMLProgressElementVtbl;
    interface IHTMLProgressElement
    {
        CONST_VTBL struct IHTMLProgressElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_value(This,v) )
    ( (This)->lpVtbl -> get_value(This,p) )
    ( (This)->lpVtbl -> put_max(This,v) )
    ( (This)->lpVtbl -> get_max(This,p) )
    ( (This)->lpVtbl -> get_position(This,p) )
    ( (This)->lpVtbl -> get_form(This,p) )
EXTERN_C const IID DIID_DispHTMLProgressElement;
    typedef struct DispHTMLProgressElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLProgressElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLProgressElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLProgressElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLProgressElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLProgressElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLProgressElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLProgressElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLProgressElementVtbl;
    interface DispHTMLProgressElement
    {
        CONST_VTBL struct DispHTMLProgressElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLProgressElement;
class DECLSPEC_UUID("3050f2d5-98b5-11cf-bb82-00aa00bdce0b")
HTMLProgressElement;
EXTERN_C const IID IID_IDOMMSTransitionEvent;
    typedef struct IDOMMSTransitionEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMMSTransitionEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMMSTransitionEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMMSTransitionEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMMSTransitionEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMMSTransitionEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMMSTransitionEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMMSTransitionEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_propertyName )(
            __RPC__in IDOMMSTransitionEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_elapsedTime )(
            __RPC__in IDOMMSTransitionEvent * This,
                                __RPC__out float *p);
                   HRESULT ( STDMETHODCALLTYPE *initMSTransitionEvent )(
            __RPC__in IDOMMSTransitionEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in BSTR propertyName,
                       float elapsedTime);
        END_INTERFACE
    } IDOMMSTransitionEventVtbl;
    interface IDOMMSTransitionEvent
    {
        CONST_VTBL struct IDOMMSTransitionEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_propertyName(This,p) )
    ( (This)->lpVtbl -> get_elapsedTime(This,p) )
    ( (This)->lpVtbl -> initMSTransitionEvent(This,eventType,canBubble,cancelable,propertyName,elapsedTime) )
EXTERN_C const IID DIID_DispDOMMSTransitionEvent;
    typedef struct DispDOMMSTransitionEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMMSTransitionEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMMSTransitionEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMMSTransitionEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMMSTransitionEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMMSTransitionEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMMSTransitionEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMMSTransitionEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMMSTransitionEventVtbl;
    interface DispDOMMSTransitionEvent
    {
        CONST_VTBL struct DispDOMMSTransitionEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMMSTransitionEvent;
class DECLSPEC_UUID("305107b6-98b5-11cf-bb82-00aa00bdce0b")
DOMMSTransitionEvent;
EXTERN_C const IID IID_IDOMMSAnimationEvent;
    typedef struct IDOMMSAnimationEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMMSAnimationEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMMSAnimationEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMMSAnimationEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMMSAnimationEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMMSAnimationEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMMSAnimationEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMMSAnimationEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_animationName )(
            __RPC__in IDOMMSAnimationEvent * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_elapsedTime )(
            __RPC__in IDOMMSAnimationEvent * This,
                                __RPC__out float *p);
                   HRESULT ( STDMETHODCALLTYPE *initMSAnimationEvent )(
            __RPC__in IDOMMSAnimationEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in BSTR animationName,
                       float elapsedTime);
        END_INTERFACE
    } IDOMMSAnimationEventVtbl;
    interface IDOMMSAnimationEvent
    {
        CONST_VTBL struct IDOMMSAnimationEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_animationName(This,p) )
    ( (This)->lpVtbl -> get_elapsedTime(This,p) )
    ( (This)->lpVtbl -> initMSAnimationEvent(This,eventType,canBubble,cancelable,animationName,elapsedTime) )
EXTERN_C const IID DIID_DispDOMMSAnimationEvent;
    typedef struct DispDOMMSAnimationEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMMSAnimationEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMMSAnimationEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMMSAnimationEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMMSAnimationEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMMSAnimationEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMMSAnimationEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMMSAnimationEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMMSAnimationEventVtbl;
    interface DispDOMMSAnimationEvent
    {
        CONST_VTBL struct DispDOMMSAnimationEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMMSAnimationEvent;
class DECLSPEC_UUID("305107b8-98b5-11cf-bb82-00aa00bdce0b")
DOMMSAnimationEvent;
EXTERN_C const IID IID_IWebGeocoordinates;
    typedef struct IWebGeocoordinatesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IWebGeocoordinates * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IWebGeocoordinates * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IWebGeocoordinates * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IWebGeocoordinates * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IWebGeocoordinates * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IWebGeocoordinates * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IWebGeocoordinates * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_latitude )(
            __RPC__in IWebGeocoordinates * This,
                                __RPC__out double *p);
                            HRESULT ( STDMETHODCALLTYPE *get_longitude )(
            __RPC__in IWebGeocoordinates * This,
                                __RPC__out double *p);
                            HRESULT ( STDMETHODCALLTYPE *get_altitude )(
            __RPC__in IWebGeocoordinates * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_accuracy )(
            __RPC__in IWebGeocoordinates * This,
                                __RPC__out double *p);
                            HRESULT ( STDMETHODCALLTYPE *get_altitudeAccuracy )(
            __RPC__in IWebGeocoordinates * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_heading )(
            __RPC__in IWebGeocoordinates * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_speed )(
            __RPC__in IWebGeocoordinates * This,
                                __RPC__out VARIANT *p);
        END_INTERFACE
    } IWebGeocoordinatesVtbl;
    interface IWebGeocoordinates
    {
        CONST_VTBL struct IWebGeocoordinatesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_latitude(This,p) )
    ( (This)->lpVtbl -> get_longitude(This,p) )
    ( (This)->lpVtbl -> get_altitude(This,p) )
    ( (This)->lpVtbl -> get_accuracy(This,p) )
    ( (This)->lpVtbl -> get_altitudeAccuracy(This,p) )
    ( (This)->lpVtbl -> get_heading(This,p) )
    ( (This)->lpVtbl -> get_speed(This,p) )
EXTERN_C const IID IID_IWebGeopositionError;
    typedef struct IWebGeopositionErrorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IWebGeopositionError * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IWebGeopositionError * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IWebGeopositionError * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IWebGeopositionError * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IWebGeopositionError * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IWebGeopositionError * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IWebGeopositionError * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_code )(
            __RPC__in IWebGeopositionError * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_message )(
            __RPC__in IWebGeopositionError * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IWebGeopositionErrorVtbl;
    interface IWebGeopositionError
    {
        CONST_VTBL struct IWebGeopositionErrorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_code(This,p) )
    ( (This)->lpVtbl -> get_message(This,p) )
EXTERN_C const IID IID_IWebGeoposition;
    typedef struct IWebGeopositionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IWebGeoposition * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IWebGeoposition * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IWebGeoposition * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IWebGeoposition * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IWebGeoposition * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IWebGeoposition * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IWebGeoposition * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_coords )(
            __RPC__in IWebGeoposition * This,
                                __RPC__deref_out_opt IWebGeocoordinates **p);
                            HRESULT ( STDMETHODCALLTYPE *get_timestamp )(
            __RPC__in IWebGeoposition * This,
                                __RPC__out ULONGLONG *p);
        END_INTERFACE
    } IWebGeopositionVtbl;
    interface IWebGeoposition
    {
        CONST_VTBL struct IWebGeopositionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_coords(This,p) )
    ( (This)->lpVtbl -> get_timestamp(This,p) )
EXTERN_C const IID DIID_DispWebGeolocation;
    typedef struct DispWebGeolocationVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispWebGeolocation * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispWebGeolocation * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispWebGeolocation * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispWebGeolocation * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispWebGeolocation * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispWebGeolocation * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispWebGeolocation * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispWebGeolocationVtbl;
    interface DispWebGeolocation
    {
        CONST_VTBL struct DispWebGeolocationVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_WebGeolocation;
class DECLSPEC_UUID("305107c6-98b5-11cf-bb82-00aa00bdce0b")
WebGeolocation;
EXTERN_C const IID DIID_DispWebGeocoordinates;
    typedef struct DispWebGeocoordinatesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispWebGeocoordinates * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispWebGeocoordinates * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispWebGeocoordinates * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispWebGeocoordinates * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispWebGeocoordinates * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispWebGeocoordinates * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispWebGeocoordinates * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispWebGeocoordinatesVtbl;
    interface DispWebGeocoordinates
    {
        CONST_VTBL struct DispWebGeocoordinatesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_WebGeocoordinates;
class DECLSPEC_UUID("305107c8-98b5-11cf-bb82-00aa00bdce0b")
WebGeocoordinates;
EXTERN_C const IID DIID_DispWebGeopositionError;
    typedef struct DispWebGeopositionErrorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispWebGeopositionError * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispWebGeopositionError * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispWebGeopositionError * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispWebGeopositionError * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispWebGeopositionError * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispWebGeopositionError * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispWebGeopositionError * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispWebGeopositionErrorVtbl;
    interface DispWebGeopositionError
    {
        CONST_VTBL struct DispWebGeopositionErrorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_WebGeopositionError;
class DECLSPEC_UUID("305107ca-98b5-11cf-bb82-00aa00bdce0b")
WebGeopositionError;
EXTERN_C const IID DIID_DispWebGeoposition;
    typedef struct DispWebGeopositionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispWebGeoposition * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispWebGeoposition * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispWebGeoposition * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispWebGeoposition * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispWebGeoposition * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispWebGeoposition * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispWebGeoposition * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispWebGeopositionVtbl;
    interface DispWebGeoposition
    {
        CONST_VTBL struct DispWebGeopositionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_WebGeoposition;
class DECLSPEC_UUID("305107ce-98b5-11cf-bb82-00aa00bdce0b")
WebGeoposition;
EXTERN_C const IID IID_IClientCaps;
    typedef struct IClientCapsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IClientCaps * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IClientCaps * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IClientCaps * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IClientCaps * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IClientCaps * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IClientCaps * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IClientCaps * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_javaEnabled )(
            __RPC__in IClientCaps * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_cookieEnabled )(
            __RPC__in IClientCaps * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_cpuClass )(
            __RPC__in IClientCaps * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_systemLanguage )(
            __RPC__in IClientCaps * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_userLanguage )(
            __RPC__in IClientCaps * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_platform )(
            __RPC__in IClientCaps * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_connectionSpeed )(
            __RPC__in IClientCaps * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_onLine )(
            __RPC__in IClientCaps * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_colorDepth )(
            __RPC__in IClientCaps * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_bufferDepth )(
            __RPC__in IClientCaps * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_width )(
            __RPC__in IClientCaps * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_height )(
            __RPC__in IClientCaps * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_availHeight )(
            __RPC__in IClientCaps * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_availWidth )(
            __RPC__in IClientCaps * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_connectionType )(
            __RPC__in IClientCaps * This,
                                __RPC__deref_out_opt BSTR *p);
                   HRESULT ( STDMETHODCALLTYPE *isComponentInstalled )(
            __RPC__in IClientCaps * This,
                       __RPC__in BSTR bstrName,
                       __RPC__in BSTR bstrUrl,
                                     __RPC__in BSTR bStrVer,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *getComponentVersion )(
            __RPC__in IClientCaps * This,
                       __RPC__in BSTR bstrName,
                       __RPC__in BSTR bstrUrl,
                                __RPC__deref_out_opt BSTR *pbstrVer);
                   HRESULT ( STDMETHODCALLTYPE *compareVersions )(
            __RPC__in IClientCaps * This,
                       __RPC__in BSTR bstrVer1,
                       __RPC__in BSTR bstrVer2,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *addComponentRequest )(
            __RPC__in IClientCaps * This,
                       __RPC__in BSTR bstrName,
                       __RPC__in BSTR bstrUrl,
                                     __RPC__in BSTR bStrVer);
                   HRESULT ( STDMETHODCALLTYPE *doComponentRequest )(
            __RPC__in IClientCaps * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *clearComponentRequest )(
            __RPC__in IClientCaps * This);
        END_INTERFACE
    } IClientCapsVtbl;
    interface IClientCaps
    {
        CONST_VTBL struct IClientCapsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_javaEnabled(This,p) )
    ( (This)->lpVtbl -> get_cookieEnabled(This,p) )
    ( (This)->lpVtbl -> get_cpuClass(This,p) )
    ( (This)->lpVtbl -> get_systemLanguage(This,p) )
    ( (This)->lpVtbl -> get_userLanguage(This,p) )
    ( (This)->lpVtbl -> get_platform(This,p) )
    ( (This)->lpVtbl -> get_connectionSpeed(This,p) )
    ( (This)->lpVtbl -> get_onLine(This,p) )
    ( (This)->lpVtbl -> get_colorDepth(This,p) )
    ( (This)->lpVtbl -> get_bufferDepth(This,p) )
    ( (This)->lpVtbl -> get_width(This,p) )
    ( (This)->lpVtbl -> get_height(This,p) )
    ( (This)->lpVtbl -> get_availHeight(This,p) )
    ( (This)->lpVtbl -> get_availWidth(This,p) )
    ( (This)->lpVtbl -> get_connectionType(This,p) )
    ( (This)->lpVtbl -> isComponentInstalled(This,bstrName,bstrUrl,bStrVer,p) )
    ( (This)->lpVtbl -> getComponentVersion(This,bstrName,bstrUrl,pbstrVer) )
    ( (This)->lpVtbl -> compareVersions(This,bstrVer1,bstrVer2,p) )
    ( (This)->lpVtbl -> addComponentRequest(This,bstrName,bstrUrl,bStrVer) )
    ( (This)->lpVtbl -> doComponentRequest(This,p) )
    ( (This)->lpVtbl -> clearComponentRequest(This) )
EXTERN_C const CLSID CLSID_CClientCaps;
class DECLSPEC_UUID("7E8BC44E-AEFF-11D1-89C2-00C04FB6BFC4")
CClientCaps;
EXTERN_C const IID IID_IDOMMSManipulationEvent;
    typedef struct IDOMMSManipulationEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMMSManipulationEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMMSManipulationEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMMSManipulationEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMMSManipulationEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMMSManipulationEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMMSManipulationEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMMSManipulationEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_lastState )(
            __RPC__in IDOMMSManipulationEvent * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_currentState )(
            __RPC__in IDOMMSManipulationEvent * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *initMSManipulationEvent )(
            __RPC__in IDOMMSManipulationEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       __RPC__in_opt IHTMLWindow2 *viewArg,
                       long detailArg,
                       long lastState,
                       long currentState);
        END_INTERFACE
    } IDOMMSManipulationEventVtbl;
    interface IDOMMSManipulationEvent
    {
        CONST_VTBL struct IDOMMSManipulationEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_lastState(This,p) )
    ( (This)->lpVtbl -> get_currentState(This,p) )
    ( (This)->lpVtbl -> initMSManipulationEvent(This,eventType,canBubble,cancelable,viewArg,detailArg,lastState,currentState) )
EXTERN_C const IID DIID_DispDOMMSManipulationEvent;
    typedef struct DispDOMMSManipulationEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMMSManipulationEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMMSManipulationEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMMSManipulationEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMMSManipulationEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMMSManipulationEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMMSManipulationEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMMSManipulationEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMMSManipulationEventVtbl;
    interface DispDOMMSManipulationEvent
    {
        CONST_VTBL struct DispDOMMSManipulationEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMMSManipulationEvent;
class DECLSPEC_UUID("30510817-98b5-11cf-bb82-00aa00bdce0b")
DOMMSManipulationEvent;
EXTERN_C const IID IID_IDOMCloseEvent;
    typedef struct IDOMCloseEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMCloseEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMCloseEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMCloseEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IDOMCloseEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IDOMCloseEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IDOMCloseEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IDOMCloseEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_wasClean )(
            __RPC__in IDOMCloseEvent * This,
                                __RPC__out VARIANT_BOOL *p);
                   HRESULT ( STDMETHODCALLTYPE *initCloseEvent )(
            __RPC__in IDOMCloseEvent * This,
                       __RPC__in BSTR eventType,
                       VARIANT_BOOL canBubble,
                       VARIANT_BOOL cancelable,
                       VARIANT_BOOL wasClean,
                       long code,
                       __RPC__in BSTR reason);
        END_INTERFACE
    } IDOMCloseEventVtbl;
    interface IDOMCloseEvent
    {
        CONST_VTBL struct IDOMCloseEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_wasClean(This,p) )
    ( (This)->lpVtbl -> initCloseEvent(This,eventType,canBubble,cancelable,wasClean,code,reason) )
EXTERN_C const IID DIID_DispDOMCloseEvent;
    typedef struct DispDOMCloseEventVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispDOMCloseEvent * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispDOMCloseEvent * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispDOMCloseEvent * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispDOMCloseEvent * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispDOMCloseEvent * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispDOMCloseEvent * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispDOMCloseEvent * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispDOMCloseEventVtbl;
    interface DispDOMCloseEvent
    {
        CONST_VTBL struct DispDOMCloseEventVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_DOMCloseEvent;
class DECLSPEC_UUID("30510800-98b5-11cf-bb82-00aa00bdce0b")
DOMCloseEvent;
EXTERN_C const IID DIID_DispApplicationCache;
    typedef struct DispApplicationCacheVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispApplicationCache * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispApplicationCache * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispApplicationCache * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispApplicationCache * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispApplicationCache * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispApplicationCache * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispApplicationCache * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispApplicationCacheVtbl;
    interface DispApplicationCache
    {
        CONST_VTBL struct DispApplicationCacheVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_ApplicationCache;
class DECLSPEC_UUID("30510829-98b5-11cf-bb82-00aa00bdce0b")
ApplicationCache;
EXTERN_C const IID IID_ICSSFilterSite;
    typedef struct ICSSFilterSiteVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ICSSFilterSite * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ICSSFilterSite * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ICSSFilterSite * This);
        HRESULT ( STDMETHODCALLTYPE *GetElement )(
            __RPC__in ICSSFilterSite * This,
                                __RPC__deref_out_opt IHTMLElement **Element);
        HRESULT ( STDMETHODCALLTYPE *FireOnFilterChangeEvent )(
            __RPC__in ICSSFilterSite * This);
        END_INTERFACE
    } ICSSFilterSiteVtbl;
    interface ICSSFilterSite
    {
        CONST_VTBL struct ICSSFilterSiteVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetElement(This,Element) )
    ( (This)->lpVtbl -> FireOnFilterChangeEvent(This) )
EXTERN_C const IID IID_IMarkupPointer;
    typedef struct IMarkupPointerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IMarkupPointer * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IMarkupPointer * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IMarkupPointer * This);
        HRESULT ( STDMETHODCALLTYPE *OwningDoc )(
            __RPC__in IMarkupPointer * This,
                        __RPC__deref_out_opt IHTMLDocument2 **ppDoc);
        HRESULT ( STDMETHODCALLTYPE *Gravity )(
            __RPC__in IMarkupPointer * This,
                        __RPC__out POINTER_GRAVITY *pGravity);
        HRESULT ( STDMETHODCALLTYPE *SetGravity )(
            __RPC__in IMarkupPointer * This,
                       POINTER_GRAVITY Gravity);
        HRESULT ( STDMETHODCALLTYPE *Cling )(
            __RPC__in IMarkupPointer * This,
                        __RPC__out BOOL *pfCling);
        HRESULT ( STDMETHODCALLTYPE *SetCling )(
            __RPC__in IMarkupPointer * This,
                       BOOL fCLing);
        HRESULT ( STDMETHODCALLTYPE *Unposition )(
            __RPC__in IMarkupPointer * This);
        HRESULT ( STDMETHODCALLTYPE *IsPositioned )(
            __RPC__in IMarkupPointer * This,
                        __RPC__out BOOL *pfPositioned);
        HRESULT ( STDMETHODCALLTYPE *GetContainer )(
            __RPC__in IMarkupPointer * This,
                        __RPC__deref_out_opt IMarkupContainer **ppContainer);
        HRESULT ( STDMETHODCALLTYPE *MoveAdjacentToElement )(
            __RPC__in IMarkupPointer * This,
                       __RPC__in_opt IHTMLElement *pElement,
                       ELEMENT_ADJACENCY eAdj);
        HRESULT ( STDMETHODCALLTYPE *MoveToPointer )(
            __RPC__in IMarkupPointer * This,
                       __RPC__in_opt IMarkupPointer *pPointer);
        HRESULT ( STDMETHODCALLTYPE *MoveToContainer )(
            __RPC__in IMarkupPointer * This,
                       __RPC__in_opt IMarkupContainer *pContainer,
                       BOOL fAtStart);
        HRESULT ( STDMETHODCALLTYPE *Left )(
            __RPC__in IMarkupPointer * This,
                       BOOL fMove,
                        __RPC__out MARKUP_CONTEXT_TYPE *pContext,
                        __RPC__deref_out_opt IHTMLElement **ppElement,
                            __RPC__inout long *pcch,
                                 __RPC__out_ecount_full(*pcch) OLECHAR *pchText);
        HRESULT ( STDMETHODCALLTYPE *Right )(
            __RPC__in IMarkupPointer * This,
                       BOOL fMove,
                        __RPC__out MARKUP_CONTEXT_TYPE *pContext,
                        __RPC__deref_out_opt IHTMLElement **ppElement,
                            __RPC__inout long *pcch,
                                 __RPC__out_ecount_full(*pcch) OLECHAR *pchText);
        HRESULT ( STDMETHODCALLTYPE *CurrentScope )(
            __RPC__in IMarkupPointer * This,
                        __RPC__deref_out_opt IHTMLElement **ppElemCurrent);
        HRESULT ( STDMETHODCALLTYPE *IsLeftOf )(
            __RPC__in IMarkupPointer * This,
                       __RPC__in_opt IMarkupPointer *pPointerThat,
                        __RPC__out BOOL *pfResult);
        HRESULT ( STDMETHODCALLTYPE *IsLeftOfOrEqualTo )(
            __RPC__in IMarkupPointer * This,
                       __RPC__in_opt IMarkupPointer *pPointerThat,
                        __RPC__out BOOL *pfResult);
        HRESULT ( STDMETHODCALLTYPE *IsRightOf )(
            __RPC__in IMarkupPointer * This,
                       __RPC__in_opt IMarkupPointer *pPointerThat,
                        __RPC__out BOOL *pfResult);
        HRESULT ( STDMETHODCALLTYPE *IsRightOfOrEqualTo )(
            __RPC__in IMarkupPointer * This,
                       __RPC__in_opt IMarkupPointer *pPointerThat,
                        __RPC__out BOOL *pfResult);
        HRESULT ( STDMETHODCALLTYPE *IsEqualTo )(
            __RPC__in IMarkupPointer * This,
                       __RPC__in_opt IMarkupPointer *pPointerThat,
                        __RPC__out BOOL *pfAreEqual);
        HRESULT ( STDMETHODCALLTYPE *MoveUnit )(
            __RPC__in IMarkupPointer * This,
                       MOVEUNIT_ACTION muAction);
        HRESULT ( STDMETHODCALLTYPE *FindText )(
            __RPC__in IMarkupPointer * This,
                               __RPC__in_string OLECHAR *pchFindText,
                       DWORD dwFlags,
                       __RPC__in_opt IMarkupPointer *pIEndMatch,
                       __RPC__in_opt IMarkupPointer *pIEndSearch);
        END_INTERFACE
    } IMarkupPointerVtbl;
    interface IMarkupPointer
    {
        CONST_VTBL struct IMarkupPointerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> OwningDoc(This,ppDoc) )
    ( (This)->lpVtbl -> Gravity(This,pGravity) )
    ( (This)->lpVtbl -> SetGravity(This,Gravity) )
    ( (This)->lpVtbl -> Cling(This,pfCling) )
    ( (This)->lpVtbl -> SetCling(This,fCLing) )
    ( (This)->lpVtbl -> Unposition(This) )
    ( (This)->lpVtbl -> IsPositioned(This,pfPositioned) )
    ( (This)->lpVtbl -> GetContainer(This,ppContainer) )
    ( (This)->lpVtbl -> MoveAdjacentToElement(This,pElement,eAdj) )
    ( (This)->lpVtbl -> MoveToPointer(This,pPointer) )
    ( (This)->lpVtbl -> MoveToContainer(This,pContainer,fAtStart) )
    ( (This)->lpVtbl -> Left(This,fMove,pContext,ppElement,pcch,pchText) )
    ( (This)->lpVtbl -> Right(This,fMove,pContext,ppElement,pcch,pchText) )
    ( (This)->lpVtbl -> CurrentScope(This,ppElemCurrent) )
    ( (This)->lpVtbl -> IsLeftOf(This,pPointerThat,pfResult) )
    ( (This)->lpVtbl -> IsLeftOfOrEqualTo(This,pPointerThat,pfResult) )
    ( (This)->lpVtbl -> IsRightOf(This,pPointerThat,pfResult) )
    ( (This)->lpVtbl -> IsRightOfOrEqualTo(This,pPointerThat,pfResult) )
    ( (This)->lpVtbl -> IsEqualTo(This,pPointerThat,pfAreEqual) )
    ( (This)->lpVtbl -> MoveUnit(This,muAction) )
    ( (This)->lpVtbl -> FindText(This,pchFindText,dwFlags,pIEndMatch,pIEndSearch) )
EXTERN_C const IID IID_IMarkupContainer;
    typedef struct IMarkupContainerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IMarkupContainer * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IMarkupContainer * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IMarkupContainer * This);
        HRESULT ( STDMETHODCALLTYPE *OwningDoc )(
            __RPC__in IMarkupContainer * This,
                        __RPC__deref_out_opt IHTMLDocument2 **ppDoc);
        END_INTERFACE
    } IMarkupContainerVtbl;
    interface IMarkupContainer
    {
        CONST_VTBL struct IMarkupContainerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> OwningDoc(This,ppDoc) )
EXTERN_C const IID IID_IMarkupContainer2;
    typedef struct IMarkupContainer2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IMarkupContainer2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IMarkupContainer2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IMarkupContainer2 * This);
        HRESULT ( STDMETHODCALLTYPE *OwningDoc )(
            __RPC__in IMarkupContainer2 * This,
                        __RPC__deref_out_opt IHTMLDocument2 **ppDoc);
        HRESULT ( STDMETHODCALLTYPE *CreateChangeLog )(
            __RPC__in IMarkupContainer2 * This,
                       __RPC__in_opt IHTMLChangeSink *pChangeSink,
                        __RPC__deref_out_opt IHTMLChangeLog **ppChangeLog,
                       BOOL fForward,
                       BOOL fBackward);
        HRESULT ( STDMETHODCALLTYPE *RegisterForDirtyRange )(
            __RPC__in IMarkupContainer2 * This,
                       __RPC__in_opt IHTMLChangeSink *pChangeSink,
                        __RPC__out DWORD *pdwCookie);
        HRESULT ( STDMETHODCALLTYPE *UnRegisterForDirtyRange )(
            __RPC__in IMarkupContainer2 * This,
                       DWORD dwCookie);
        HRESULT ( STDMETHODCALLTYPE *GetAndClearDirtyRange )(
            __RPC__in IMarkupContainer2 * This,
                       DWORD dwCookie,
                       __RPC__in_opt IMarkupPointer *pIPointerBegin,
                       __RPC__in_opt IMarkupPointer *pIPointerEnd);
        long ( STDMETHODCALLTYPE *GetVersionNumber )(
            __RPC__in IMarkupContainer2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetMasterElement )(
            __RPC__in IMarkupContainer2 * This,
                        __RPC__deref_out_opt IHTMLElement **ppElementMaster);
        END_INTERFACE
    } IMarkupContainer2Vtbl;
    interface IMarkupContainer2
    {
        CONST_VTBL struct IMarkupContainer2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> OwningDoc(This,ppDoc) )
    ( (This)->lpVtbl -> CreateChangeLog(This,pChangeSink,ppChangeLog,fForward,fBackward) )
    ( (This)->lpVtbl -> RegisterForDirtyRange(This,pChangeSink,pdwCookie) )
    ( (This)->lpVtbl -> UnRegisterForDirtyRange(This,dwCookie) )
    ( (This)->lpVtbl -> GetAndClearDirtyRange(This,dwCookie,pIPointerBegin,pIPointerEnd) )
    ( (This)->lpVtbl -> GetVersionNumber(This) )
    ( (This)->lpVtbl -> GetMasterElement(This,ppElementMaster) )
EXTERN_C const IID IID_IHTMLChangeLog;
    typedef struct IHTMLChangeLogVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLChangeLog * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLChangeLog * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLChangeLog * This);
        HRESULT ( STDMETHODCALLTYPE *GetNextChange )(
            __RPC__in IHTMLChangeLog * This,
                       __RPC__in BYTE *pbBuffer,
                       long nBufferSize,
                        __RPC__out long *pnRecordLength);
        END_INTERFACE
    } IHTMLChangeLogVtbl;
    interface IHTMLChangeLog
    {
        CONST_VTBL struct IHTMLChangeLogVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetNextChange(This,pbBuffer,nBufferSize,pnRecordLength) )
EXTERN_C const IID IID_IHTMLChangeSink;
    typedef struct IHTMLChangeSinkVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLChangeSink * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLChangeSink * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLChangeSink * This);
        HRESULT ( STDMETHODCALLTYPE *Notify )(
            __RPC__in IHTMLChangeSink * This);
        END_INTERFACE
    } IHTMLChangeSinkVtbl;
    interface IHTMLChangeSink
    {
        CONST_VTBL struct IHTMLChangeSinkVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Notify(This) )
EXTERN_C const IID IID_IActiveIMMApp;
    typedef struct IActiveIMMAppVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IActiveIMMApp * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IActiveIMMApp * This);
        HRESULT ( STDMETHODCALLTYPE *AssociateContext )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HWND hWnd,
                       HIMC hIME,
                        __RPC__out HIMC *phPrev);
        HRESULT ( STDMETHODCALLTYPE *ConfigureIMEA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       __RPC__in HWND hWnd,
                       DWORD dwMode,
                       __RPC__in REGISTERWORDA *pData);
        HRESULT ( STDMETHODCALLTYPE *ConfigureIMEW )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       __RPC__in HWND hWnd,
                       DWORD dwMode,
                       __RPC__in REGISTERWORDW *pData);
        HRESULT ( STDMETHODCALLTYPE *CreateContext )(
            __RPC__in IActiveIMMApp * This,
                        __RPC__out HIMC *phIMC);
        HRESULT ( STDMETHODCALLTYPE *DestroyContext )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIME);
        HRESULT ( STDMETHODCALLTYPE *EnumRegisterWordA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       __RPC__in LPSTR szReading,
                       DWORD dwStyle,
                       __RPC__in LPSTR szRegister,
                       __RPC__in LPVOID pData,
                        __RPC__deref_out_opt IEnumRegisterWordA **pEnum);
        HRESULT ( STDMETHODCALLTYPE *EnumRegisterWordW )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       __RPC__in LPWSTR szReading,
                       DWORD dwStyle,
                       __RPC__in LPWSTR szRegister,
                       __RPC__in LPVOID pData,
                        __RPC__deref_out_opt IEnumRegisterWordW **pEnum);
        HRESULT ( STDMETHODCALLTYPE *EscapeA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       HIMC hIMC,
                       UINT uEscape,
                            __RPC__inout LPVOID pData,
                        __RPC__out LRESULT *plResult);
        HRESULT ( STDMETHODCALLTYPE *EscapeW )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       HIMC hIMC,
                       UINT uEscape,
                            __RPC__inout LPVOID pData,
                        __RPC__out LRESULT *plResult);
        HRESULT ( STDMETHODCALLTYPE *GetCandidateListA )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwIndex,
                       UINT uBufLen,
                        __RPC__out CANDIDATELIST *pCandList,
                        __RPC__out UINT *puCopied);
        HRESULT ( STDMETHODCALLTYPE *GetCandidateListW )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwIndex,
                       UINT uBufLen,
                        __RPC__out CANDIDATELIST *pCandList,
                        __RPC__out UINT *puCopied);
        HRESULT ( STDMETHODCALLTYPE *GetCandidateListCountA )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                        __RPC__out DWORD *pdwListSize,
                        __RPC__out DWORD *pdwBufLen);
        HRESULT ( STDMETHODCALLTYPE *GetCandidateListCountW )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                        __RPC__out DWORD *pdwListSize,
                        __RPC__out DWORD *pdwBufLen);
        HRESULT ( STDMETHODCALLTYPE *GetCandidateWindow )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwIndex,
                        __RPC__out CANDIDATEFORM *pCandidate);
        HRESULT ( STDMETHODCALLTYPE *GetCompositionFontA )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                        __RPC__out LOGFONTA *plf);
        HRESULT ( STDMETHODCALLTYPE *GetCompositionFontW )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                        __RPC__out LOGFONTW *plf);
        HRESULT ( STDMETHODCALLTYPE *GetCompositionStringA )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwIndex,
                       DWORD dwBufLen,
                        __RPC__out LONG *plCopied,
                        __RPC__out LPVOID pBuf);
        HRESULT ( STDMETHODCALLTYPE *GetCompositionStringW )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwIndex,
                       DWORD dwBufLen,
                        __RPC__out LONG *plCopied,
                        __RPC__out LPVOID pBuf);
        HRESULT ( STDMETHODCALLTYPE *GetCompositionWindow )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                        __RPC__out COMPOSITIONFORM *pCompForm);
        HRESULT ( STDMETHODCALLTYPE *GetContext )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HWND hWnd,
                        __RPC__out HIMC *phIMC);
        HRESULT ( STDMETHODCALLTYPE *GetConversionListA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       HIMC hIMC,
                       __RPC__in LPSTR pSrc,
                       UINT uBufLen,
                       UINT uFlag,
                        __RPC__out CANDIDATELIST *pDst,
                        __RPC__out UINT *puCopied);
        HRESULT ( STDMETHODCALLTYPE *GetConversionListW )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       HIMC hIMC,
                       __RPC__in LPWSTR pSrc,
                       UINT uBufLen,
                       UINT uFlag,
                        __RPC__out CANDIDATELIST *pDst,
                        __RPC__out UINT *puCopied);
        HRESULT ( STDMETHODCALLTYPE *GetConversionStatus )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                        __RPC__out DWORD *pfdwConversion,
                        __RPC__out DWORD *pfdwSentence);
        HRESULT ( STDMETHODCALLTYPE *GetDefaultIMEWnd )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HWND hWnd,
                        __RPC__deref_out_opt HWND *phDefWnd);
        HRESULT ( STDMETHODCALLTYPE *GetDescriptionA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       UINT uBufLen,
                        __RPC__out LPSTR szDescription,
                        __RPC__out UINT *puCopied);
        HRESULT ( STDMETHODCALLTYPE *GetDescriptionW )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       UINT uBufLen,
                        __RPC__out LPWSTR szDescription,
                        __RPC__out UINT *puCopied);
        HRESULT ( STDMETHODCALLTYPE *GetGuideLineA )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwIndex,
                       DWORD dwBufLen,
                        __RPC__out LPSTR pBuf,
                        __RPC__out DWORD *pdwResult);
        HRESULT ( STDMETHODCALLTYPE *GetGuideLineW )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwIndex,
                       DWORD dwBufLen,
                        __RPC__out LPWSTR pBuf,
                        __RPC__out DWORD *pdwResult);
        HRESULT ( STDMETHODCALLTYPE *GetIMEFileNameA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       UINT uBufLen,
                        __RPC__out LPSTR szFileName,
                        __RPC__out UINT *puCopied);
        HRESULT ( STDMETHODCALLTYPE *GetIMEFileNameW )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       UINT uBufLen,
                        __RPC__out LPWSTR szFileName,
                        __RPC__out UINT *puCopied);
        HRESULT ( STDMETHODCALLTYPE *GetOpenStatus )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC);
        HRESULT ( STDMETHODCALLTYPE *GetProperty )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       DWORD fdwIndex,
                        __RPC__out DWORD *pdwProperty);
        HRESULT ( STDMETHODCALLTYPE *GetRegisterWordStyleA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       UINT nItem,
                        __RPC__out STYLEBUFA *pStyleBuf,
                        __RPC__out UINT *puCopied);
        HRESULT ( STDMETHODCALLTYPE *GetRegisterWordStyleW )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       UINT nItem,
                        __RPC__out STYLEBUFW *pStyleBuf,
                        __RPC__out UINT *puCopied);
        HRESULT ( STDMETHODCALLTYPE *GetStatusWindowPos )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                        __RPC__out POINT *pptPos);
        HRESULT ( STDMETHODCALLTYPE *GetVirtualKey )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HWND hWnd,
                        __RPC__out UINT *puVirtualKey);
        HRESULT ( STDMETHODCALLTYPE *InstallIMEA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in LPSTR szIMEFileName,
                       __RPC__in LPSTR szLayoutText,
                        __RPC__deref_out_opt HKL *phKL);
        HRESULT ( STDMETHODCALLTYPE *InstallIMEW )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in LPWSTR szIMEFileName,
                       __RPC__in LPWSTR szLayoutText,
                        __RPC__deref_out_opt HKL *phKL);
        HRESULT ( STDMETHODCALLTYPE *IsIME )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL);
        HRESULT ( STDMETHODCALLTYPE *IsUIMessageA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HWND hWndIME,
                       UINT msg,
                       WPARAM wParam,
                       LPARAM lParam);
        HRESULT ( STDMETHODCALLTYPE *IsUIMessageW )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HWND hWndIME,
                       UINT msg,
                       WPARAM wParam,
                       LPARAM lParam);
        HRESULT ( STDMETHODCALLTYPE *NotifyIME )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwAction,
                       DWORD dwIndex,
                       DWORD dwValue);
        HRESULT ( STDMETHODCALLTYPE *RegisterWordA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       __RPC__in LPSTR szReading,
                       DWORD dwStyle,
                       __RPC__in LPSTR szRegister);
        HRESULT ( STDMETHODCALLTYPE *RegisterWordW )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       __RPC__in LPWSTR szReading,
                       DWORD dwStyle,
                       __RPC__in LPWSTR szRegister);
        HRESULT ( STDMETHODCALLTYPE *ReleaseContext )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HWND hWnd,
                       HIMC hIMC);
        HRESULT ( STDMETHODCALLTYPE *SetCandidateWindow )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       __RPC__in CANDIDATEFORM *pCandidate);
        HRESULT ( STDMETHODCALLTYPE *SetCompositionFontA )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       __RPC__in LOGFONTA *plf);
        HRESULT ( STDMETHODCALLTYPE *SetCompositionFontW )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       __RPC__in LOGFONTW *plf);
        HRESULT ( STDMETHODCALLTYPE *SetCompositionStringA )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwIndex,
                       __RPC__in LPVOID pComp,
                       DWORD dwCompLen,
                       __RPC__in LPVOID pRead,
                       DWORD dwReadLen);
        HRESULT ( STDMETHODCALLTYPE *SetCompositionStringW )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwIndex,
                       __RPC__in LPVOID pComp,
                       DWORD dwCompLen,
                       __RPC__in LPVOID pRead,
                       DWORD dwReadLen);
        HRESULT ( STDMETHODCALLTYPE *SetCompositionWindow )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       __RPC__in COMPOSITIONFORM *pCompForm);
        HRESULT ( STDMETHODCALLTYPE *SetConversionStatus )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD fdwConversion,
                       DWORD fdwSentence);
        HRESULT ( STDMETHODCALLTYPE *SetOpenStatus )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       BOOL fOpen);
        HRESULT ( STDMETHODCALLTYPE *SetStatusWindowPos )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       __RPC__in POINT *pptPos);
        HRESULT ( STDMETHODCALLTYPE *SimulateHotKey )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HWND hWnd,
                       DWORD dwHotKeyID);
        HRESULT ( STDMETHODCALLTYPE *UnregisterWordA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       __RPC__in LPSTR szReading,
                       DWORD dwStyle,
                       __RPC__in LPSTR szUnregister);
        HRESULT ( STDMETHODCALLTYPE *UnregisterWordW )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                       __RPC__in LPWSTR szReading,
                       DWORD dwStyle,
                       __RPC__in LPWSTR szUnregister);
        HRESULT ( STDMETHODCALLTYPE *Activate )(
            __RPC__in IActiveIMMApp * This,
                       BOOL fRestoreLayout);
        HRESULT ( STDMETHODCALLTYPE *Deactivate )(
            __RPC__in IActiveIMMApp * This);
        HRESULT ( STDMETHODCALLTYPE *OnDefWindowProc )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HWND hWnd,
                       UINT Msg,
                       WPARAM wParam,
                       LPARAM lParam,
                        __RPC__out LRESULT *plResult);
        HRESULT ( STDMETHODCALLTYPE *FilterClientWindows )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in ATOM *aaClassList,
                       UINT uSize);
        HRESULT ( STDMETHODCALLTYPE *GetCodePageA )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                        __RPC__out UINT *uCodePage);
        HRESULT ( STDMETHODCALLTYPE *GetLangId )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HKL hKL,
                        __RPC__out LANGID *plid);
        HRESULT ( STDMETHODCALLTYPE *AssociateContextEx )(
            __RPC__in IActiveIMMApp * This,
                       __RPC__in HWND hWnd,
                       HIMC hIMC,
                       DWORD dwFlags);
        HRESULT ( STDMETHODCALLTYPE *DisableIME )(
            __RPC__in IActiveIMMApp * This,
                       DWORD idThread);
        HRESULT ( STDMETHODCALLTYPE *GetImeMenuItemsA )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwFlags,
                       DWORD dwType,
                       __RPC__in IMEMENUITEMINFOA *pImeParentMenu,
                        __RPC__out IMEMENUITEMINFOA *pImeMenu,
                       DWORD dwSize,
                        __RPC__out DWORD *pdwResult);
        HRESULT ( STDMETHODCALLTYPE *GetImeMenuItemsW )(
            __RPC__in IActiveIMMApp * This,
                       HIMC hIMC,
                       DWORD dwFlags,
                       DWORD dwType,
                       __RPC__in IMEMENUITEMINFOW *pImeParentMenu,
                        __RPC__out IMEMENUITEMINFOW *pImeMenu,
                       DWORD dwSize,
                        __RPC__out DWORD *pdwResult);
        HRESULT ( STDMETHODCALLTYPE *EnumInputContext )(
            __RPC__in IActiveIMMApp * This,
                       DWORD idThread,
                        __RPC__deref_out_opt IEnumInputContext **ppEnum);
        END_INTERFACE
    } IActiveIMMAppVtbl;
    interface IActiveIMMApp
    {
        CONST_VTBL struct IActiveIMMAppVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> AssociateContext(This,hWnd,hIME,phPrev) )
    ( (This)->lpVtbl -> ConfigureIMEA(This,hKL,hWnd,dwMode,pData) )
    ( (This)->lpVtbl -> ConfigureIMEW(This,hKL,hWnd,dwMode,pData) )
    ( (This)->lpVtbl -> CreateContext(This,phIMC) )
    ( (This)->lpVtbl -> DestroyContext(This,hIME) )
    ( (This)->lpVtbl -> EnumRegisterWordA(This,hKL,szReading,dwStyle,szRegister,pData,pEnum) )
    ( (This)->lpVtbl -> EnumRegisterWordW(This,hKL,szReading,dwStyle,szRegister,pData,pEnum) )
    ( (This)->lpVtbl -> EscapeA(This,hKL,hIMC,uEscape,pData,plResult) )
    ( (This)->lpVtbl -> EscapeW(This,hKL,hIMC,uEscape,pData,plResult) )
    ( (This)->lpVtbl -> GetCandidateListA(This,hIMC,dwIndex,uBufLen,pCandList,puCopied) )
    ( (This)->lpVtbl -> GetCandidateListW(This,hIMC,dwIndex,uBufLen,pCandList,puCopied) )
    ( (This)->lpVtbl -> GetCandidateListCountA(This,hIMC,pdwListSize,pdwBufLen) )
    ( (This)->lpVtbl -> GetCandidateListCountW(This,hIMC,pdwListSize,pdwBufLen) )
    ( (This)->lpVtbl -> GetCandidateWindow(This,hIMC,dwIndex,pCandidate) )
    ( (This)->lpVtbl -> GetCompositionFontA(This,hIMC,plf) )
    ( (This)->lpVtbl -> GetCompositionFontW(This,hIMC,plf) )
    ( (This)->lpVtbl -> GetCompositionStringA(This,hIMC,dwIndex,dwBufLen,plCopied,pBuf) )
    ( (This)->lpVtbl -> GetCompositionStringW(This,hIMC,dwIndex,dwBufLen,plCopied,pBuf) )
    ( (This)->lpVtbl -> GetCompositionWindow(This,hIMC,pCompForm) )
    ( (This)->lpVtbl -> GetContext(This,hWnd,phIMC) )
    ( (This)->lpVtbl -> GetConversionListA(This,hKL,hIMC,pSrc,uBufLen,uFlag,pDst,puCopied) )
    ( (This)->lpVtbl -> GetConversionListW(This,hKL,hIMC,pSrc,uBufLen,uFlag,pDst,puCopied) )
    ( (This)->lpVtbl -> GetConversionStatus(This,hIMC,pfdwConversion,pfdwSentence) )
    ( (This)->lpVtbl -> GetDefaultIMEWnd(This,hWnd,phDefWnd) )
    ( (This)->lpVtbl -> GetDescriptionA(This,hKL,uBufLen,szDescription,puCopied) )
    ( (This)->lpVtbl -> GetDescriptionW(This,hKL,uBufLen,szDescription,puCopied) )
    ( (This)->lpVtbl -> GetGuideLineA(This,hIMC,dwIndex,dwBufLen,pBuf,pdwResult) )
    ( (This)->lpVtbl -> GetGuideLineW(This,hIMC,dwIndex,dwBufLen,pBuf,pdwResult) )
    ( (This)->lpVtbl -> GetIMEFileNameA(This,hKL,uBufLen,szFileName,puCopied) )
    ( (This)->lpVtbl -> GetIMEFileNameW(This,hKL,uBufLen,szFileName,puCopied) )
    ( (This)->lpVtbl -> GetOpenStatus(This,hIMC) )
    ( (This)->lpVtbl -> GetProperty(This,hKL,fdwIndex,pdwProperty) )
    ( (This)->lpVtbl -> GetRegisterWordStyleA(This,hKL,nItem,pStyleBuf,puCopied) )
    ( (This)->lpVtbl -> GetRegisterWordStyleW(This,hKL,nItem,pStyleBuf,puCopied) )
    ( (This)->lpVtbl -> GetStatusWindowPos(This,hIMC,pptPos) )
    ( (This)->lpVtbl -> GetVirtualKey(This,hWnd,puVirtualKey) )
    ( (This)->lpVtbl -> InstallIMEA(This,szIMEFileName,szLayoutText,phKL) )
    ( (This)->lpVtbl -> InstallIMEW(This,szIMEFileName,szLayoutText,phKL) )
    ( (This)->lpVtbl -> IsIME(This,hKL) )
    ( (This)->lpVtbl -> IsUIMessageA(This,hWndIME,msg,wParam,lParam) )
    ( (This)->lpVtbl -> IsUIMessageW(This,hWndIME,msg,wParam,lParam) )
    ( (This)->lpVtbl -> NotifyIME(This,hIMC,dwAction,dwIndex,dwValue) )
    ( (This)->lpVtbl -> RegisterWordA(This,hKL,szReading,dwStyle,szRegister) )
    ( (This)->lpVtbl -> RegisterWordW(This,hKL,szReading,dwStyle,szRegister) )
    ( (This)->lpVtbl -> ReleaseContext(This,hWnd,hIMC) )
    ( (This)->lpVtbl -> SetCandidateWindow(This,hIMC,pCandidate) )
    ( (This)->lpVtbl -> SetCompositionFontA(This,hIMC,plf) )
    ( (This)->lpVtbl -> SetCompositionFontW(This,hIMC,plf) )
    ( (This)->lpVtbl -> SetCompositionStringA(This,hIMC,dwIndex,pComp,dwCompLen,pRead,dwReadLen) )
    ( (This)->lpVtbl -> SetCompositionStringW(This,hIMC,dwIndex,pComp,dwCompLen,pRead,dwReadLen) )
    ( (This)->lpVtbl -> SetCompositionWindow(This,hIMC,pCompForm) )
    ( (This)->lpVtbl -> SetConversionStatus(This,hIMC,fdwConversion,fdwSentence) )
    ( (This)->lpVtbl -> SetOpenStatus(This,hIMC,fOpen) )
    ( (This)->lpVtbl -> SetStatusWindowPos(This,hIMC,pptPos) )
    ( (This)->lpVtbl -> SimulateHotKey(This,hWnd,dwHotKeyID) )
    ( (This)->lpVtbl -> UnregisterWordA(This,hKL,szReading,dwStyle,szUnregister) )
    ( (This)->lpVtbl -> UnregisterWordW(This,hKL,szReading,dwStyle,szUnregister) )
    ( (This)->lpVtbl -> Activate(This,fRestoreLayout) )
    ( (This)->lpVtbl -> Deactivate(This) )
    ( (This)->lpVtbl -> OnDefWindowProc(This,hWnd,Msg,wParam,lParam,plResult) )
    ( (This)->lpVtbl -> FilterClientWindows(This,aaClassList,uSize) )
    ( (This)->lpVtbl -> GetCodePageA(This,hKL,uCodePage) )
    ( (This)->lpVtbl -> GetLangId(This,hKL,plid) )
    ( (This)->lpVtbl -> AssociateContextEx(This,hWnd,hIMC,dwFlags) )
    ( (This)->lpVtbl -> DisableIME(This,idThread) )
    ( (This)->lpVtbl -> GetImeMenuItemsA(This,hIMC,dwFlags,dwType,pImeParentMenu,pImeMenu,dwSize,pdwResult) )
    ( (This)->lpVtbl -> GetImeMenuItemsW(This,hIMC,dwFlags,dwType,pImeParentMenu,pImeMenu,dwSize,pdwResult) )
    ( (This)->lpVtbl -> EnumInputContext(This,idThread,ppEnum) )
HRESULT STDMETHODCALLTYPE IActiveIMMApp_AssociateContext_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HWND hWnd,
               HIMC hIME,
                __RPC__out HIMC *phPrev);
void __RPC_STUB IActiveIMMApp_AssociateContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_ConfigureIMEA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               __RPC__in HWND hWnd,
               DWORD dwMode,
               __RPC__in REGISTERWORDA *pData);
void __RPC_STUB IActiveIMMApp_ConfigureIMEA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_ConfigureIMEW_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               __RPC__in HWND hWnd,
               DWORD dwMode,
               __RPC__in REGISTERWORDW *pData);
void __RPC_STUB IActiveIMMApp_ConfigureIMEW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_CreateContext_Proxy(
    __RPC__in IActiveIMMApp * This,
                __RPC__out HIMC *phIMC);
void __RPC_STUB IActiveIMMApp_CreateContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_DestroyContext_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIME);
void __RPC_STUB IActiveIMMApp_DestroyContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_EnumRegisterWordA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               __RPC__in LPSTR szReading,
               DWORD dwStyle,
               __RPC__in LPSTR szRegister,
               __RPC__in LPVOID pData,
                __RPC__deref_out_opt IEnumRegisterWordA **pEnum);
void __RPC_STUB IActiveIMMApp_EnumRegisterWordA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_EnumRegisterWordW_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               __RPC__in LPWSTR szReading,
               DWORD dwStyle,
               __RPC__in LPWSTR szRegister,
               __RPC__in LPVOID pData,
                __RPC__deref_out_opt IEnumRegisterWordW **pEnum);
void __RPC_STUB IActiveIMMApp_EnumRegisterWordW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_EscapeA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               HIMC hIMC,
               UINT uEscape,
                    __RPC__inout LPVOID pData,
                __RPC__out LRESULT *plResult);
void __RPC_STUB IActiveIMMApp_EscapeA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_EscapeW_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               HIMC hIMC,
               UINT uEscape,
                    __RPC__inout LPVOID pData,
                __RPC__out LRESULT *plResult);
void __RPC_STUB IActiveIMMApp_EscapeW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetCandidateListA_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwIndex,
               UINT uBufLen,
                __RPC__out CANDIDATELIST *pCandList,
                __RPC__out UINT *puCopied);
void __RPC_STUB IActiveIMMApp_GetCandidateListA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetCandidateListW_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwIndex,
               UINT uBufLen,
                __RPC__out CANDIDATELIST *pCandList,
                __RPC__out UINT *puCopied);
void __RPC_STUB IActiveIMMApp_GetCandidateListW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetCandidateListCountA_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
                __RPC__out DWORD *pdwListSize,
                __RPC__out DWORD *pdwBufLen);
void __RPC_STUB IActiveIMMApp_GetCandidateListCountA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetCandidateListCountW_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
                __RPC__out DWORD *pdwListSize,
                __RPC__out DWORD *pdwBufLen);
void __RPC_STUB IActiveIMMApp_GetCandidateListCountW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetCandidateWindow_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwIndex,
                __RPC__out CANDIDATEFORM *pCandidate);
void __RPC_STUB IActiveIMMApp_GetCandidateWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetCompositionFontA_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
                __RPC__out LOGFONTA *plf);
void __RPC_STUB IActiveIMMApp_GetCompositionFontA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetCompositionFontW_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
                __RPC__out LOGFONTW *plf);
void __RPC_STUB IActiveIMMApp_GetCompositionFontW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetCompositionStringA_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwIndex,
               DWORD dwBufLen,
                __RPC__out LONG *plCopied,
                __RPC__out LPVOID pBuf);
void __RPC_STUB IActiveIMMApp_GetCompositionStringA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetCompositionStringW_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwIndex,
               DWORD dwBufLen,
                __RPC__out LONG *plCopied,
                __RPC__out LPVOID pBuf);
void __RPC_STUB IActiveIMMApp_GetCompositionStringW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetCompositionWindow_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
                __RPC__out COMPOSITIONFORM *pCompForm);
void __RPC_STUB IActiveIMMApp_GetCompositionWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetContext_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HWND hWnd,
                __RPC__out HIMC *phIMC);
void __RPC_STUB IActiveIMMApp_GetContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetConversionListA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               HIMC hIMC,
               __RPC__in LPSTR pSrc,
               UINT uBufLen,
               UINT uFlag,
                __RPC__out CANDIDATELIST *pDst,
                __RPC__out UINT *puCopied);
void __RPC_STUB IActiveIMMApp_GetConversionListA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetConversionListW_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               HIMC hIMC,
               __RPC__in LPWSTR pSrc,
               UINT uBufLen,
               UINT uFlag,
                __RPC__out CANDIDATELIST *pDst,
                __RPC__out UINT *puCopied);
void __RPC_STUB IActiveIMMApp_GetConversionListW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetConversionStatus_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
                __RPC__out DWORD *pfdwConversion,
                __RPC__out DWORD *pfdwSentence);
void __RPC_STUB IActiveIMMApp_GetConversionStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetDefaultIMEWnd_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HWND hWnd,
                __RPC__deref_out_opt HWND *phDefWnd);
void __RPC_STUB IActiveIMMApp_GetDefaultIMEWnd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetDescriptionA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               UINT uBufLen,
                __RPC__out LPSTR szDescription,
                __RPC__out UINT *puCopied);
void __RPC_STUB IActiveIMMApp_GetDescriptionA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetDescriptionW_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               UINT uBufLen,
                __RPC__out LPWSTR szDescription,
                __RPC__out UINT *puCopied);
void __RPC_STUB IActiveIMMApp_GetDescriptionW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetGuideLineA_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwIndex,
               DWORD dwBufLen,
                __RPC__out LPSTR pBuf,
                __RPC__out DWORD *pdwResult);
void __RPC_STUB IActiveIMMApp_GetGuideLineA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetGuideLineW_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwIndex,
               DWORD dwBufLen,
                __RPC__out LPWSTR pBuf,
                __RPC__out DWORD *pdwResult);
void __RPC_STUB IActiveIMMApp_GetGuideLineW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetIMEFileNameA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               UINT uBufLen,
                __RPC__out LPSTR szFileName,
                __RPC__out UINT *puCopied);
void __RPC_STUB IActiveIMMApp_GetIMEFileNameA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetIMEFileNameW_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               UINT uBufLen,
                __RPC__out LPWSTR szFileName,
                __RPC__out UINT *puCopied);
void __RPC_STUB IActiveIMMApp_GetIMEFileNameW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetOpenStatus_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC);
void __RPC_STUB IActiveIMMApp_GetOpenStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetProperty_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               DWORD fdwIndex,
                __RPC__out DWORD *pdwProperty);
void __RPC_STUB IActiveIMMApp_GetProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetRegisterWordStyleA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               UINT nItem,
                __RPC__out STYLEBUFA *pStyleBuf,
                __RPC__out UINT *puCopied);
void __RPC_STUB IActiveIMMApp_GetRegisterWordStyleA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetRegisterWordStyleW_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               UINT nItem,
                __RPC__out STYLEBUFW *pStyleBuf,
                __RPC__out UINT *puCopied);
void __RPC_STUB IActiveIMMApp_GetRegisterWordStyleW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetStatusWindowPos_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
                __RPC__out POINT *pptPos);
void __RPC_STUB IActiveIMMApp_GetStatusWindowPos_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetVirtualKey_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HWND hWnd,
                __RPC__out UINT *puVirtualKey);
void __RPC_STUB IActiveIMMApp_GetVirtualKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_InstallIMEA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in LPSTR szIMEFileName,
               __RPC__in LPSTR szLayoutText,
                __RPC__deref_out_opt HKL *phKL);
void __RPC_STUB IActiveIMMApp_InstallIMEA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_InstallIMEW_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in LPWSTR szIMEFileName,
               __RPC__in LPWSTR szLayoutText,
                __RPC__deref_out_opt HKL *phKL);
void __RPC_STUB IActiveIMMApp_InstallIMEW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_IsIME_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL);
void __RPC_STUB IActiveIMMApp_IsIME_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_IsUIMessageA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HWND hWndIME,
               UINT msg,
               WPARAM wParam,
               LPARAM lParam);
void __RPC_STUB IActiveIMMApp_IsUIMessageA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_IsUIMessageW_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HWND hWndIME,
               UINT msg,
               WPARAM wParam,
               LPARAM lParam);
void __RPC_STUB IActiveIMMApp_IsUIMessageW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_NotifyIME_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwAction,
               DWORD dwIndex,
               DWORD dwValue);
void __RPC_STUB IActiveIMMApp_NotifyIME_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_RegisterWordA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               __RPC__in LPSTR szReading,
               DWORD dwStyle,
               __RPC__in LPSTR szRegister);
void __RPC_STUB IActiveIMMApp_RegisterWordA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_RegisterWordW_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               __RPC__in LPWSTR szReading,
               DWORD dwStyle,
               __RPC__in LPWSTR szRegister);
void __RPC_STUB IActiveIMMApp_RegisterWordW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_ReleaseContext_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HWND hWnd,
               HIMC hIMC);
void __RPC_STUB IActiveIMMApp_ReleaseContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_SetCandidateWindow_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               __RPC__in CANDIDATEFORM *pCandidate);
void __RPC_STUB IActiveIMMApp_SetCandidateWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_SetCompositionFontA_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               __RPC__in LOGFONTA *plf);
void __RPC_STUB IActiveIMMApp_SetCompositionFontA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_SetCompositionFontW_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               __RPC__in LOGFONTW *plf);
void __RPC_STUB IActiveIMMApp_SetCompositionFontW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_SetCompositionStringA_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwIndex,
               __RPC__in LPVOID pComp,
               DWORD dwCompLen,
               __RPC__in LPVOID pRead,
               DWORD dwReadLen);
void __RPC_STUB IActiveIMMApp_SetCompositionStringA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_SetCompositionStringW_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwIndex,
               __RPC__in LPVOID pComp,
               DWORD dwCompLen,
               __RPC__in LPVOID pRead,
               DWORD dwReadLen);
void __RPC_STUB IActiveIMMApp_SetCompositionStringW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_SetCompositionWindow_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               __RPC__in COMPOSITIONFORM *pCompForm);
void __RPC_STUB IActiveIMMApp_SetCompositionWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_SetConversionStatus_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD fdwConversion,
               DWORD fdwSentence);
void __RPC_STUB IActiveIMMApp_SetConversionStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_SetOpenStatus_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               BOOL fOpen);
void __RPC_STUB IActiveIMMApp_SetOpenStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_SetStatusWindowPos_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               __RPC__in POINT *pptPos);
void __RPC_STUB IActiveIMMApp_SetStatusWindowPos_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_SimulateHotKey_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HWND hWnd,
               DWORD dwHotKeyID);
void __RPC_STUB IActiveIMMApp_SimulateHotKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_UnregisterWordA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               __RPC__in LPSTR szReading,
               DWORD dwStyle,
               __RPC__in LPSTR szUnregister);
void __RPC_STUB IActiveIMMApp_UnregisterWordA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_UnregisterWordW_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
               __RPC__in LPWSTR szReading,
               DWORD dwStyle,
               __RPC__in LPWSTR szUnregister);
void __RPC_STUB IActiveIMMApp_UnregisterWordW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_Activate_Proxy(
    __RPC__in IActiveIMMApp * This,
               BOOL fRestoreLayout);
void __RPC_STUB IActiveIMMApp_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_Deactivate_Proxy(
    __RPC__in IActiveIMMApp * This);
void __RPC_STUB IActiveIMMApp_Deactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_OnDefWindowProc_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HWND hWnd,
               UINT Msg,
               WPARAM wParam,
               LPARAM lParam,
                __RPC__out LRESULT *plResult);
void __RPC_STUB IActiveIMMApp_OnDefWindowProc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_FilterClientWindows_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in ATOM *aaClassList,
               UINT uSize);
void __RPC_STUB IActiveIMMApp_FilterClientWindows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetCodePageA_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
                __RPC__out UINT *uCodePage);
void __RPC_STUB IActiveIMMApp_GetCodePageA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetLangId_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HKL hKL,
                __RPC__out LANGID *plid);
void __RPC_STUB IActiveIMMApp_GetLangId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_AssociateContextEx_Proxy(
    __RPC__in IActiveIMMApp * This,
               __RPC__in HWND hWnd,
               HIMC hIMC,
               DWORD dwFlags);
void __RPC_STUB IActiveIMMApp_AssociateContextEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_DisableIME_Proxy(
    __RPC__in IActiveIMMApp * This,
               DWORD idThread);
void __RPC_STUB IActiveIMMApp_DisableIME_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetImeMenuItemsA_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwFlags,
               DWORD dwType,
               __RPC__in IMEMENUITEMINFOA *pImeParentMenu,
                __RPC__out IMEMENUITEMINFOA *pImeMenu,
               DWORD dwSize,
                __RPC__out DWORD *pdwResult);
void __RPC_STUB IActiveIMMApp_GetImeMenuItemsA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_GetImeMenuItemsW_Proxy(
    __RPC__in IActiveIMMApp * This,
               HIMC hIMC,
               DWORD dwFlags,
               DWORD dwType,
               __RPC__in IMEMENUITEMINFOW *pImeParentMenu,
                __RPC__out IMEMENUITEMINFOW *pImeMenu,
               DWORD dwSize,
                __RPC__out DWORD *pdwResult);
void __RPC_STUB IActiveIMMApp_GetImeMenuItemsW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveIMMApp_EnumInputContext_Proxy(
    __RPC__in IActiveIMMApp * This,
               DWORD idThread,
                __RPC__deref_out_opt IEnumInputContext **ppEnum);
void __RPC_STUB IActiveIMMApp_EnumInputContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
EXTERN_C const IID IID_ISegmentList;
    typedef struct ISegmentListVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISegmentList * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISegmentList * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISegmentList * This);
        HRESULT ( STDMETHODCALLTYPE *CreateIterator )(
            __RPC__in ISegmentList * This,
                        __RPC__deref_out_opt ISegmentListIterator **ppIIter);
        HRESULT ( STDMETHODCALLTYPE *GetType )(
            __RPC__in ISegmentList * This,
                        __RPC__out SELECTION_TYPE *peType);
        HRESULT ( STDMETHODCALLTYPE *IsEmpty )(
            __RPC__in ISegmentList * This,
                        __RPC__out BOOL *pfEmpty);
        END_INTERFACE
    } ISegmentListVtbl;
    interface ISegmentList
    {
        CONST_VTBL struct ISegmentListVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> CreateIterator(This,ppIIter) )
    ( (This)->lpVtbl -> GetType(This,peType) )
    ( (This)->lpVtbl -> IsEmpty(This,pfEmpty) )
EXTERN_C const IID IID_ISegmentListIterator;
    typedef struct ISegmentListIteratorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISegmentListIterator * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISegmentListIterator * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISegmentListIterator * This);
        HRESULT ( STDMETHODCALLTYPE *Current )(
            __RPC__in ISegmentListIterator * This,
                        __RPC__deref_out_opt ISegment **ppISegment);
        HRESULT ( STDMETHODCALLTYPE *First )(
            __RPC__in ISegmentListIterator * This);
        HRESULT ( STDMETHODCALLTYPE *IsDone )(
            __RPC__in ISegmentListIterator * This);
        HRESULT ( STDMETHODCALLTYPE *Advance )(
            __RPC__in ISegmentListIterator * This);
        END_INTERFACE
    } ISegmentListIteratorVtbl;
    interface ISegmentListIterator
    {
        CONST_VTBL struct ISegmentListIteratorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Current(This,ppISegment) )
    ( (This)->lpVtbl -> First(This) )
    ( (This)->lpVtbl -> IsDone(This) )
    ( (This)->lpVtbl -> Advance(This) )
EXTERN_C const IID IID_IHTMLCaret;
    typedef struct IHTMLCaretVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLCaret * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLCaret * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLCaret * This);
        HRESULT ( STDMETHODCALLTYPE *MoveCaretToPointer )(
            __RPC__in IHTMLCaret * This,
                       __RPC__in_opt IDisplayPointer *pDispPointer,
                       BOOL fScrollIntoView,
                       CARET_DIRECTION eDir);
        HRESULT ( STDMETHODCALLTYPE *MoveCaretToPointerEx )(
            __RPC__in IHTMLCaret * This,
                       __RPC__in_opt IDisplayPointer *pDispPointer,
                       BOOL fVisible,
                       BOOL fScrollIntoView,
                       CARET_DIRECTION eDir);
        HRESULT ( STDMETHODCALLTYPE *MoveMarkupPointerToCaret )(
            __RPC__in IHTMLCaret * This,
                       __RPC__in_opt IMarkupPointer *pIMarkupPointer);
        HRESULT ( STDMETHODCALLTYPE *MoveDisplayPointerToCaret )(
            __RPC__in IHTMLCaret * This,
                       __RPC__in_opt IDisplayPointer *pDispPointer);
        HRESULT ( STDMETHODCALLTYPE *IsVisible )(
            __RPC__in IHTMLCaret * This,
                        __RPC__out BOOL *pIsVisible);
        HRESULT ( STDMETHODCALLTYPE *Show )(
            __RPC__in IHTMLCaret * This,
                       BOOL fScrollIntoView);
        HRESULT ( STDMETHODCALLTYPE *Hide )(
            __RPC__in IHTMLCaret * This);
        HRESULT ( STDMETHODCALLTYPE *InsertText )(
            __RPC__in IHTMLCaret * This,
                       __RPC__in OLECHAR *pText,
                       LONG lLen);
        HRESULT ( STDMETHODCALLTYPE *ScrollIntoView )(
            __RPC__in IHTMLCaret * This);
        HRESULT ( STDMETHODCALLTYPE *GetLocation )(
            __RPC__in IHTMLCaret * This,
                        __RPC__out POINT *pPoint,
                       BOOL fTranslate);
        HRESULT ( STDMETHODCALLTYPE *GetCaretDirection )(
            __RPC__in IHTMLCaret * This,
                        __RPC__out CARET_DIRECTION *peDir);
        HRESULT ( STDMETHODCALLTYPE *SetCaretDirection )(
            __RPC__in IHTMLCaret * This,
                       CARET_DIRECTION eDir);
        END_INTERFACE
    } IHTMLCaretVtbl;
    interface IHTMLCaret
    {
        CONST_VTBL struct IHTMLCaretVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> MoveCaretToPointer(This,pDispPointer,fScrollIntoView,eDir) )
    ( (This)->lpVtbl -> MoveCaretToPointerEx(This,pDispPointer,fVisible,fScrollIntoView,eDir) )
    ( (This)->lpVtbl -> MoveMarkupPointerToCaret(This,pIMarkupPointer) )
    ( (This)->lpVtbl -> MoveDisplayPointerToCaret(This,pDispPointer) )
    ( (This)->lpVtbl -> IsVisible(This,pIsVisible) )
    ( (This)->lpVtbl -> Show(This,fScrollIntoView) )
    ( (This)->lpVtbl -> Hide(This) )
    ( (This)->lpVtbl -> InsertText(This,pText,lLen) )
    ( (This)->lpVtbl -> ScrollIntoView(This) )
    ( (This)->lpVtbl -> GetLocation(This,pPoint,fTranslate) )
    ( (This)->lpVtbl -> GetCaretDirection(This,peDir) )
    ( (This)->lpVtbl -> SetCaretDirection(This,eDir) )
EXTERN_C const IID IID_ISegment;
    typedef struct ISegmentVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISegment * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISegment * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISegment * This);
        HRESULT ( STDMETHODCALLTYPE *GetPointers )(
            __RPC__in ISegment * This,
                       __RPC__in_opt IMarkupPointer *pIStart,
                       __RPC__in_opt IMarkupPointer *pIEnd);
        END_INTERFACE
    } ISegmentVtbl;
    interface ISegment
    {
        CONST_VTBL struct ISegmentVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetPointers(This,pIStart,pIEnd) )
EXTERN_C const IID IID_IElementSegment;
    typedef struct IElementSegmentVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementSegment * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementSegment * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementSegment * This);
        HRESULT ( STDMETHODCALLTYPE *GetPointers )(
            __RPC__in IElementSegment * This,
                       __RPC__in_opt IMarkupPointer *pIStart,
                       __RPC__in_opt IMarkupPointer *pIEnd);
        HRESULT ( STDMETHODCALLTYPE *GetElement )(
            __RPC__in IElementSegment * This,
                        __RPC__deref_out_opt IHTMLElement **ppIElement);
        HRESULT ( STDMETHODCALLTYPE *SetPrimary )(
            __RPC__in IElementSegment * This,
                       BOOL fPrimary);
        HRESULT ( STDMETHODCALLTYPE *IsPrimary )(
            __RPC__in IElementSegment * This,
                        __RPC__out BOOL *pfPrimary);
        END_INTERFACE
    } IElementSegmentVtbl;
    interface IElementSegment
    {
        CONST_VTBL struct IElementSegmentVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetPointers(This,pIStart,pIEnd) )
    ( (This)->lpVtbl -> GetElement(This,ppIElement) )
    ( (This)->lpVtbl -> SetPrimary(This,fPrimary) )
    ( (This)->lpVtbl -> IsPrimary(This,pfPrimary) )
EXTERN_C const IID IID_IHighlightSegment;
    typedef struct IHighlightSegmentVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHighlightSegment * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHighlightSegment * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHighlightSegment * This);
        HRESULT ( STDMETHODCALLTYPE *GetPointers )(
            __RPC__in IHighlightSegment * This,
                       __RPC__in_opt IMarkupPointer *pIStart,
                       __RPC__in_opt IMarkupPointer *pIEnd);
        END_INTERFACE
    } IHighlightSegmentVtbl;
    interface IHighlightSegment
    {
        CONST_VTBL struct IHighlightSegmentVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetPointers(This,pIStart,pIEnd) )
EXTERN_C const IID IID_IHighlightRenderingServices;
    typedef struct IHighlightRenderingServicesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHighlightRenderingServices * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHighlightRenderingServices * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHighlightRenderingServices * This);
        HRESULT ( STDMETHODCALLTYPE *AddSegment )(
            __RPC__in IHighlightRenderingServices * This,
                       __RPC__in_opt IDisplayPointer *pDispPointerStart,
                       __RPC__in_opt IDisplayPointer *pDispPointerEnd,
                       __RPC__in_opt IHTMLRenderStyle *pIRenderStyle,
                        __RPC__deref_out_opt IHighlightSegment **ppISegment);
        HRESULT ( STDMETHODCALLTYPE *MoveSegmentToPointers )(
            __RPC__in IHighlightRenderingServices * This,
                       __RPC__in_opt IHighlightSegment *pISegment,
                       __RPC__in_opt IDisplayPointer *pDispPointerStart,
                       __RPC__in_opt IDisplayPointer *pDispPointerEnd);
        HRESULT ( STDMETHODCALLTYPE *RemoveSegment )(
            __RPC__in IHighlightRenderingServices * This,
                       __RPC__in_opt IHighlightSegment *pISegment);
        END_INTERFACE
    } IHighlightRenderingServicesVtbl;
    interface IHighlightRenderingServices
    {
        CONST_VTBL struct IHighlightRenderingServicesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> AddSegment(This,pDispPointerStart,pDispPointerEnd,pIRenderStyle,ppISegment) )
    ( (This)->lpVtbl -> MoveSegmentToPointers(This,pISegment,pDispPointerStart,pDispPointerEnd) )
    ( (This)->lpVtbl -> RemoveSegment(This,pISegment) )
EXTERN_C const IID IID_ILineInfo;
    typedef struct ILineInfoVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ILineInfo * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ILineInfo * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ILineInfo * This);
                            HRESULT ( STDMETHODCALLTYPE *get_x )(
            __RPC__in ILineInfo * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_baseLine )(
            __RPC__in ILineInfo * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_textDescent )(
            __RPC__in ILineInfo * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_textHeight )(
            __RPC__in ILineInfo * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_lineDirection )(
            __RPC__in ILineInfo * This,
                                __RPC__out LONG *p);
        END_INTERFACE
    } ILineInfoVtbl;
    interface ILineInfo
    {
        CONST_VTBL struct ILineInfoVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> get_x(This,p) )
    ( (This)->lpVtbl -> get_baseLine(This,p) )
    ( (This)->lpVtbl -> get_textDescent(This,p) )
    ( (This)->lpVtbl -> get_textHeight(This,p) )
    ( (This)->lpVtbl -> get_lineDirection(This,p) )
EXTERN_C const IID IID_IDisplayPointer;
    typedef struct IDisplayPointerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDisplayPointer * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDisplayPointer * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDisplayPointer * This);
        HRESULT ( STDMETHODCALLTYPE *MoveToPoint )(
            __RPC__in IDisplayPointer * This,
                       POINT ptPoint,
                       COORD_SYSTEM eCoordSystem,
                       __RPC__in_opt IHTMLElement *pElementContext,
                       DWORD dwHitTestOptions,
                        __RPC__out DWORD *pdwHitTestResults);
        HRESULT ( STDMETHODCALLTYPE *MoveUnit )(
            __RPC__in IDisplayPointer * This,
                       DISPLAY_MOVEUNIT eMoveUnit,
                       LONG lXPos);
        HRESULT ( STDMETHODCALLTYPE *PositionMarkupPointer )(
            __RPC__in IDisplayPointer * This,
                       __RPC__in_opt IMarkupPointer *pMarkupPointer);
        HRESULT ( STDMETHODCALLTYPE *MoveToPointer )(
            __RPC__in IDisplayPointer * This,
                       __RPC__in_opt IDisplayPointer *pDispPointer);
        HRESULT ( STDMETHODCALLTYPE *SetPointerGravity )(
            __RPC__in IDisplayPointer * This,
                       POINTER_GRAVITY eGravity);
        HRESULT ( STDMETHODCALLTYPE *GetPointerGravity )(
            __RPC__in IDisplayPointer * This,
                        __RPC__out POINTER_GRAVITY *peGravity);
        HRESULT ( STDMETHODCALLTYPE *SetDisplayGravity )(
            __RPC__in IDisplayPointer * This,
                       DISPLAY_GRAVITY eGravity);
        HRESULT ( STDMETHODCALLTYPE *GetDisplayGravity )(
            __RPC__in IDisplayPointer * This,
                        __RPC__out DISPLAY_GRAVITY *peGravity);
        HRESULT ( STDMETHODCALLTYPE *IsPositioned )(
            __RPC__in IDisplayPointer * This,
                        __RPC__out BOOL *pfPositioned);
        HRESULT ( STDMETHODCALLTYPE *Unposition )(
            __RPC__in IDisplayPointer * This);
        HRESULT ( STDMETHODCALLTYPE *IsEqualTo )(
            __RPC__in IDisplayPointer * This,
                       __RPC__in_opt IDisplayPointer *pDispPointer,
                        __RPC__out BOOL *pfIsEqual);
        HRESULT ( STDMETHODCALLTYPE *IsLeftOf )(
            __RPC__in IDisplayPointer * This,
                       __RPC__in_opt IDisplayPointer *pDispPointer,
                        __RPC__out BOOL *pfIsLeftOf);
        HRESULT ( STDMETHODCALLTYPE *IsRightOf )(
            __RPC__in IDisplayPointer * This,
                       __RPC__in_opt IDisplayPointer *pDispPointer,
                        __RPC__out BOOL *pfIsRightOf);
        HRESULT ( STDMETHODCALLTYPE *IsAtBOL )(
            __RPC__in IDisplayPointer * This,
                        __RPC__out BOOL *pfBOL);
        HRESULT ( STDMETHODCALLTYPE *MoveToMarkupPointer )(
            __RPC__in IDisplayPointer * This,
                       __RPC__in_opt IMarkupPointer *pPointer,
                       __RPC__in_opt IDisplayPointer *pDispLineContext);
        HRESULT ( STDMETHODCALLTYPE *ScrollIntoView )(
            __RPC__in IDisplayPointer * This);
        HRESULT ( STDMETHODCALLTYPE *GetLineInfo )(
            __RPC__in IDisplayPointer * This,
                        __RPC__deref_out_opt ILineInfo **ppLineInfo);
        HRESULT ( STDMETHODCALLTYPE *GetFlowElement )(
            __RPC__in IDisplayPointer * This,
                        __RPC__deref_out_opt IHTMLElement **ppLayoutElement);
        HRESULT ( STDMETHODCALLTYPE *QueryBreaks )(
            __RPC__in IDisplayPointer * This,
                        __RPC__out DWORD *pdwBreaks);
        END_INTERFACE
    } IDisplayPointerVtbl;
    interface IDisplayPointer
    {
        CONST_VTBL struct IDisplayPointerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> MoveToPoint(This,ptPoint,eCoordSystem,pElementContext,dwHitTestOptions,pdwHitTestResults) )
    ( (This)->lpVtbl -> MoveUnit(This,eMoveUnit,lXPos) )
    ( (This)->lpVtbl -> PositionMarkupPointer(This,pMarkupPointer) )
    ( (This)->lpVtbl -> MoveToPointer(This,pDispPointer) )
    ( (This)->lpVtbl -> SetPointerGravity(This,eGravity) )
    ( (This)->lpVtbl -> GetPointerGravity(This,peGravity) )
    ( (This)->lpVtbl -> SetDisplayGravity(This,eGravity) )
    ( (This)->lpVtbl -> GetDisplayGravity(This,peGravity) )
    ( (This)->lpVtbl -> IsPositioned(This,pfPositioned) )
    ( (This)->lpVtbl -> Unposition(This) )
    ( (This)->lpVtbl -> IsEqualTo(This,pDispPointer,pfIsEqual) )
    ( (This)->lpVtbl -> IsLeftOf(This,pDispPointer,pfIsLeftOf) )
    ( (This)->lpVtbl -> IsRightOf(This,pDispPointer,pfIsRightOf) )
    ( (This)->lpVtbl -> IsAtBOL(This,pfBOL) )
    ( (This)->lpVtbl -> MoveToMarkupPointer(This,pPointer,pDispLineContext) )
    ( (This)->lpVtbl -> ScrollIntoView(This) )
    ( (This)->lpVtbl -> GetLineInfo(This,ppLineInfo) )
    ( (This)->lpVtbl -> GetFlowElement(This,ppLayoutElement) )
    ( (This)->lpVtbl -> QueryBreaks(This,pdwBreaks) )
EXTERN_C const IID IID_IDisplayServices;
    typedef struct IDisplayServicesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDisplayServices * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDisplayServices * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDisplayServices * This);
        HRESULT ( STDMETHODCALLTYPE *CreateDisplayPointer )(
            __RPC__in IDisplayServices * This,
                        __RPC__deref_out_opt IDisplayPointer **ppDispPointer);
        HRESULT ( STDMETHODCALLTYPE *TransformRect )(
            __RPC__in IDisplayServices * This,
                            __RPC__inout RECT *pRect,
                       COORD_SYSTEM eSource,
                       COORD_SYSTEM eDestination,
                       __RPC__in_opt IHTMLElement *pIElement);
        HRESULT ( STDMETHODCALLTYPE *TransformPoint )(
            __RPC__in IDisplayServices * This,
                            __RPC__inout POINT *pPoint,
                       COORD_SYSTEM eSource,
                       COORD_SYSTEM eDestination,
                       __RPC__in_opt IHTMLElement *pIElement);
        HRESULT ( STDMETHODCALLTYPE *GetCaret )(
            __RPC__in IDisplayServices * This,
                        __RPC__deref_out_opt IHTMLCaret **ppCaret);
        HRESULT ( STDMETHODCALLTYPE *GetComputedStyle )(
            __RPC__in IDisplayServices * This,
                       __RPC__in_opt IMarkupPointer *pPointer,
                        __RPC__deref_out_opt IHTMLComputedStyle **ppComputedStyle);
        HRESULT ( STDMETHODCALLTYPE *ScrollRectIntoView )(
            __RPC__in IDisplayServices * This,
                       __RPC__in_opt IHTMLElement *pIElement,
                       RECT rect);
        HRESULT ( STDMETHODCALLTYPE *HasFlowLayout )(
            __RPC__in IDisplayServices * This,
                       __RPC__in_opt IHTMLElement *pIElement,
                        __RPC__out BOOL *pfHasFlowLayout);
        END_INTERFACE
    } IDisplayServicesVtbl;
    interface IDisplayServices
    {
        CONST_VTBL struct IDisplayServicesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> CreateDisplayPointer(This,ppDispPointer) )
    ( (This)->lpVtbl -> TransformRect(This,pRect,eSource,eDestination,pIElement) )
    ( (This)->lpVtbl -> TransformPoint(This,pPoint,eSource,eDestination,pIElement) )
    ( (This)->lpVtbl -> GetCaret(This,ppCaret) )
    ( (This)->lpVtbl -> GetComputedStyle(This,pPointer,ppComputedStyle) )
    ( (This)->lpVtbl -> ScrollRectIntoView(This,pIElement,rect) )
    ( (This)->lpVtbl -> HasFlowLayout(This,pIElement,pfHasFlowLayout) )
EXTERN_C const IID IID_IHtmlDlgSafeHelper;
    typedef struct IHtmlDlgSafeHelperVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHtmlDlgSafeHelper * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHtmlDlgSafeHelper * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHtmlDlgSafeHelper * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHtmlDlgSafeHelper * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHtmlDlgSafeHelper * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHtmlDlgSafeHelper * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHtmlDlgSafeHelper * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *choosecolordlg )(
            __RPC__in IHtmlDlgSafeHelper * This,
                                 VARIANT initColor,
                                __RPC__out VARIANT *rgbColor);
                   HRESULT ( STDMETHODCALLTYPE *getCharset )(
            __RPC__in IHtmlDlgSafeHelper * This,
                       __RPC__in BSTR fontName,
                                __RPC__out VARIANT *charset);
                            HRESULT ( STDMETHODCALLTYPE *get_Fonts )(
            __RPC__in IHtmlDlgSafeHelper * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_BlockFormats )(
            __RPC__in IHtmlDlgSafeHelper * This,
                                __RPC__deref_out_opt IDispatch **p);
        END_INTERFACE
    } IHtmlDlgSafeHelperVtbl;
    interface IHtmlDlgSafeHelper
    {
        CONST_VTBL struct IHtmlDlgSafeHelperVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> choosecolordlg(This,initColor,rgbColor) )
    ( (This)->lpVtbl -> getCharset(This,fontName,charset) )
    ( (This)->lpVtbl -> get_Fonts(This,p) )
    ( (This)->lpVtbl -> get_BlockFormats(This,p) )
EXTERN_C const IID IID_IBlockFormats;
    typedef struct IBlockFormatsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IBlockFormats * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IBlockFormats * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IBlockFormats * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IBlockFormats * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IBlockFormats * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IBlockFormats * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IBlockFormats * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                        HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            __RPC__in IBlockFormats * This,
                                __RPC__deref_out_opt IUnknown **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Count )(
            __RPC__in IBlockFormats * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *Item )(
            __RPC__in IBlockFormats * This,
                       __RPC__in VARIANT *pvarIndex,
                                __RPC__deref_out_opt BSTR *pbstrBlockFormat);
        END_INTERFACE
    } IBlockFormatsVtbl;
    interface IBlockFormats
    {
        CONST_VTBL struct IBlockFormatsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get__NewEnum(This,p) )
    ( (This)->lpVtbl -> get_Count(This,p) )
    ( (This)->lpVtbl -> Item(This,pvarIndex,pbstrBlockFormat) )
EXTERN_C const IID IID_IFontNames;
    typedef struct IFontNamesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IFontNames * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IFontNames * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IFontNames * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IFontNames * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IFontNames * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IFontNames * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IFontNames * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                        HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            __RPC__in IFontNames * This,
                                __RPC__deref_out_opt IUnknown **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Count )(
            __RPC__in IFontNames * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *Item )(
            __RPC__in IFontNames * This,
                       __RPC__in VARIANT *pvarIndex,
                                __RPC__deref_out_opt BSTR *pbstrFontName);
        END_INTERFACE
    } IFontNamesVtbl;
    interface IFontNames
    {
        CONST_VTBL struct IFontNamesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get__NewEnum(This,p) )
    ( (This)->lpVtbl -> get_Count(This,p) )
    ( (This)->lpVtbl -> Item(This,pvarIndex,pbstrFontName) )
EXTERN_C const IID IID_ICSSFilter;
    typedef struct ICSSFilterVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ICSSFilter * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ICSSFilter * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ICSSFilter * This);
        HRESULT ( STDMETHODCALLTYPE *SetSite )(
            __RPC__in ICSSFilter * This,
                       __RPC__in_opt ICSSFilterSite *pSink);
        HRESULT ( STDMETHODCALLTYPE *OnAmbientPropertyChange )(
            __RPC__in ICSSFilter * This,
                       LONG dispid);
        END_INTERFACE
    } ICSSFilterVtbl;
    interface ICSSFilter
    {
        CONST_VTBL struct ICSSFilterVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> SetSite(This,pSink) )
    ( (This)->lpVtbl -> OnAmbientPropertyChange(This,dispid) )
EXTERN_C const IID IID_ISecureUrlHost;
    typedef struct ISecureUrlHostVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISecureUrlHost * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISecureUrlHost * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISecureUrlHost * This);
        HRESULT ( STDMETHODCALLTYPE *ValidateSecureUrl )(
            __RPC__in ISecureUrlHost * This,
                        __RPC__out BOOL *pfAllow,
                       __RPC__in OLECHAR *pchUrlInQuestion,
                       DWORD dwFlags);
        END_INTERFACE
    } ISecureUrlHostVtbl;
    interface ISecureUrlHost
    {
        CONST_VTBL struct ISecureUrlHostVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> ValidateSecureUrl(This,pfAllow,pchUrlInQuestion,dwFlags) )
EXTERN_C const IID IID_IMarkupServices;
    typedef struct IMarkupServicesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IMarkupServices * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IMarkupServices * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IMarkupServices * This);
        HRESULT ( STDMETHODCALLTYPE *CreateMarkupPointer )(
            __RPC__in IMarkupServices * This,
                        __RPC__deref_out_opt IMarkupPointer **ppPointer);
        HRESULT ( STDMETHODCALLTYPE *CreateMarkupContainer )(
            __RPC__in IMarkupServices * This,
                        __RPC__deref_out_opt IMarkupContainer **ppMarkupContainer);
        HRESULT ( STDMETHODCALLTYPE *CreateElement )(
            __RPC__in IMarkupServices * This,
                       ELEMENT_TAG_ID tagID,
                       __RPC__in OLECHAR *pchAttributes,
                        __RPC__deref_out_opt IHTMLElement **ppElement);
        HRESULT ( STDMETHODCALLTYPE *CloneElement )(
            __RPC__in IMarkupServices * This,
                       __RPC__in_opt IHTMLElement *pElemCloneThis,
                        __RPC__deref_out_opt IHTMLElement **ppElementTheClone);
        HRESULT ( STDMETHODCALLTYPE *InsertElement )(
            __RPC__in IMarkupServices * This,
                       __RPC__in_opt IHTMLElement *pElementInsert,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish);
        HRESULT ( STDMETHODCALLTYPE *RemoveElement )(
            __RPC__in IMarkupServices * This,
                       __RPC__in_opt IHTMLElement *pElementRemove);
        HRESULT ( STDMETHODCALLTYPE *Remove )(
            __RPC__in IMarkupServices * This,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish);
        HRESULT ( STDMETHODCALLTYPE *Copy )(
            __RPC__in IMarkupServices * This,
                       __RPC__in_opt IMarkupPointer *pPointerSourceStart,
                       __RPC__in_opt IMarkupPointer *pPointerSourceFinish,
                       __RPC__in_opt IMarkupPointer *pPointerTarget);
        HRESULT ( STDMETHODCALLTYPE *Move )(
            __RPC__in IMarkupServices * This,
                       __RPC__in_opt IMarkupPointer *pPointerSourceStart,
                       __RPC__in_opt IMarkupPointer *pPointerSourceFinish,
                       __RPC__in_opt IMarkupPointer *pPointerTarget);
        HRESULT ( STDMETHODCALLTYPE *InsertText )(
            __RPC__in IMarkupServices * This,
                       __RPC__in OLECHAR *pchText,
                       long cch,
                       __RPC__in_opt IMarkupPointer *pPointerTarget);
        HRESULT ( STDMETHODCALLTYPE *ParseString )(
            __RPC__in IMarkupServices * This,
                       __RPC__in OLECHAR *pchHTML,
                       DWORD dwFlags,
                        __RPC__deref_out_opt IMarkupContainer **ppContainerResult,
                       __RPC__in_opt IMarkupPointer *ppPointerStart,
                       __RPC__in_opt IMarkupPointer *ppPointerFinish);
        HRESULT ( STDMETHODCALLTYPE *ParseGlobal )(
            __RPC__in IMarkupServices * This,
                       __RPC__in HGLOBAL hglobalHTML,
                       DWORD dwFlags,
                        __RPC__deref_out_opt IMarkupContainer **ppContainerResult,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish);
        HRESULT ( STDMETHODCALLTYPE *IsScopedElement )(
            __RPC__in IMarkupServices * This,
                       __RPC__in_opt IHTMLElement *pElement,
                        __RPC__out BOOL *pfScoped);
        HRESULT ( STDMETHODCALLTYPE *GetElementTagId )(
            __RPC__in IMarkupServices * This,
                       __RPC__in_opt IHTMLElement *pElement,
                        __RPC__out ELEMENT_TAG_ID *ptagId);
        HRESULT ( STDMETHODCALLTYPE *GetTagIDForName )(
            __RPC__in IMarkupServices * This,
                       __RPC__in BSTR bstrName,
                        __RPC__out ELEMENT_TAG_ID *ptagId);
        HRESULT ( STDMETHODCALLTYPE *GetNameForTagID )(
            __RPC__in IMarkupServices * This,
                       ELEMENT_TAG_ID tagId,
                        __RPC__deref_out_opt BSTR *pbstrName);
        HRESULT ( STDMETHODCALLTYPE *MovePointersToRange )(
            __RPC__in IMarkupServices * This,
                       __RPC__in_opt IHTMLTxtRange *pIRange,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish);
        HRESULT ( STDMETHODCALLTYPE *MoveRangeToPointers )(
            __RPC__in IMarkupServices * This,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish,
                       __RPC__in_opt IHTMLTxtRange *pIRange);
        HRESULT ( STDMETHODCALLTYPE *BeginUndoUnit )(
            __RPC__in IMarkupServices * This,
                       __RPC__in OLECHAR *pchTitle);
        HRESULT ( STDMETHODCALLTYPE *EndUndoUnit )(
            __RPC__in IMarkupServices * This);
        END_INTERFACE
    } IMarkupServicesVtbl;
    interface IMarkupServices
    {
        CONST_VTBL struct IMarkupServicesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> CreateMarkupPointer(This,ppPointer) )
    ( (This)->lpVtbl -> CreateMarkupContainer(This,ppMarkupContainer) )
    ( (This)->lpVtbl -> CreateElement(This,tagID,pchAttributes,ppElement) )
    ( (This)->lpVtbl -> CloneElement(This,pElemCloneThis,ppElementTheClone) )
    ( (This)->lpVtbl -> InsertElement(This,pElementInsert,pPointerStart,pPointerFinish) )
    ( (This)->lpVtbl -> RemoveElement(This,pElementRemove) )
    ( (This)->lpVtbl -> Remove(This,pPointerStart,pPointerFinish) )
    ( (This)->lpVtbl -> Copy(This,pPointerSourceStart,pPointerSourceFinish,pPointerTarget) )
    ( (This)->lpVtbl -> Move(This,pPointerSourceStart,pPointerSourceFinish,pPointerTarget) )
    ( (This)->lpVtbl -> InsertText(This,pchText,cch,pPointerTarget) )
    ( (This)->lpVtbl -> ParseString(This,pchHTML,dwFlags,ppContainerResult,ppPointerStart,ppPointerFinish) )
    ( (This)->lpVtbl -> ParseGlobal(This,hglobalHTML,dwFlags,ppContainerResult,pPointerStart,pPointerFinish) )
    ( (This)->lpVtbl -> IsScopedElement(This,pElement,pfScoped) )
    ( (This)->lpVtbl -> GetElementTagId(This,pElement,ptagId) )
    ( (This)->lpVtbl -> GetTagIDForName(This,bstrName,ptagId) )
    ( (This)->lpVtbl -> GetNameForTagID(This,tagId,pbstrName) )
    ( (This)->lpVtbl -> MovePointersToRange(This,pIRange,pPointerStart,pPointerFinish) )
    ( (This)->lpVtbl -> MoveRangeToPointers(This,pPointerStart,pPointerFinish,pIRange) )
    ( (This)->lpVtbl -> BeginUndoUnit(This,pchTitle) )
    ( (This)->lpVtbl -> EndUndoUnit(This) )
EXTERN_C const IID IID_IMarkupServices2;
    typedef struct IMarkupServices2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IMarkupServices2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IMarkupServices2 * This);
        HRESULT ( STDMETHODCALLTYPE *CreateMarkupPointer )(
            __RPC__in IMarkupServices2 * This,
                        __RPC__deref_out_opt IMarkupPointer **ppPointer);
        HRESULT ( STDMETHODCALLTYPE *CreateMarkupContainer )(
            __RPC__in IMarkupServices2 * This,
                        __RPC__deref_out_opt IMarkupContainer **ppMarkupContainer);
        HRESULT ( STDMETHODCALLTYPE *CreateElement )(
            __RPC__in IMarkupServices2 * This,
                       ELEMENT_TAG_ID tagID,
                       __RPC__in OLECHAR *pchAttributes,
                        __RPC__deref_out_opt IHTMLElement **ppElement);
        HRESULT ( STDMETHODCALLTYPE *CloneElement )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt IHTMLElement *pElemCloneThis,
                        __RPC__deref_out_opt IHTMLElement **ppElementTheClone);
        HRESULT ( STDMETHODCALLTYPE *InsertElement )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt IHTMLElement *pElementInsert,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish);
        HRESULT ( STDMETHODCALLTYPE *RemoveElement )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt IHTMLElement *pElementRemove);
        HRESULT ( STDMETHODCALLTYPE *Remove )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish);
        HRESULT ( STDMETHODCALLTYPE *Copy )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt IMarkupPointer *pPointerSourceStart,
                       __RPC__in_opt IMarkupPointer *pPointerSourceFinish,
                       __RPC__in_opt IMarkupPointer *pPointerTarget);
        HRESULT ( STDMETHODCALLTYPE *Move )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt IMarkupPointer *pPointerSourceStart,
                       __RPC__in_opt IMarkupPointer *pPointerSourceFinish,
                       __RPC__in_opt IMarkupPointer *pPointerTarget);
        HRESULT ( STDMETHODCALLTYPE *InsertText )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in OLECHAR *pchText,
                       long cch,
                       __RPC__in_opt IMarkupPointer *pPointerTarget);
        HRESULT ( STDMETHODCALLTYPE *ParseString )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in OLECHAR *pchHTML,
                       DWORD dwFlags,
                        __RPC__deref_out_opt IMarkupContainer **ppContainerResult,
                       __RPC__in_opt IMarkupPointer *ppPointerStart,
                       __RPC__in_opt IMarkupPointer *ppPointerFinish);
        HRESULT ( STDMETHODCALLTYPE *ParseGlobal )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in HGLOBAL hglobalHTML,
                       DWORD dwFlags,
                        __RPC__deref_out_opt IMarkupContainer **ppContainerResult,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish);
        HRESULT ( STDMETHODCALLTYPE *IsScopedElement )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt IHTMLElement *pElement,
                        __RPC__out BOOL *pfScoped);
        HRESULT ( STDMETHODCALLTYPE *GetElementTagId )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt IHTMLElement *pElement,
                        __RPC__out ELEMENT_TAG_ID *ptagId);
        HRESULT ( STDMETHODCALLTYPE *GetTagIDForName )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in BSTR bstrName,
                        __RPC__out ELEMENT_TAG_ID *ptagId);
        HRESULT ( STDMETHODCALLTYPE *GetNameForTagID )(
            __RPC__in IMarkupServices2 * This,
                       ELEMENT_TAG_ID tagId,
                        __RPC__deref_out_opt BSTR *pbstrName);
        HRESULT ( STDMETHODCALLTYPE *MovePointersToRange )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt IHTMLTxtRange *pIRange,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish);
        HRESULT ( STDMETHODCALLTYPE *MoveRangeToPointers )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish,
                       __RPC__in_opt IHTMLTxtRange *pIRange);
        HRESULT ( STDMETHODCALLTYPE *BeginUndoUnit )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in OLECHAR *pchTitle);
        HRESULT ( STDMETHODCALLTYPE *EndUndoUnit )(
            __RPC__in IMarkupServices2 * This);
        HRESULT ( STDMETHODCALLTYPE *ParseGlobalEx )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in HGLOBAL hglobalHTML,
                       DWORD dwFlags,
                       __RPC__in_opt IMarkupContainer *pContext,
                        __RPC__deref_out_opt IMarkupContainer **ppContainerResult,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish);
        HRESULT ( STDMETHODCALLTYPE *ValidateElements )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt IMarkupPointer *pPointerStart,
                       __RPC__in_opt IMarkupPointer *pPointerFinish,
                       __RPC__in_opt IMarkupPointer *pPointerTarget,
                            __RPC__inout_opt IMarkupPointer *pPointerStatus,
                        __RPC__deref_out_opt IHTMLElement **ppElemFailBottom,
                        __RPC__deref_out_opt IHTMLElement **ppElemFailTop);
        HRESULT ( STDMETHODCALLTYPE *SaveSegmentsToClipboard )(
            __RPC__in IMarkupServices2 * This,
                       __RPC__in_opt ISegmentList *pSegmentList,
                       DWORD dwFlags);
        END_INTERFACE
    } IMarkupServices2Vtbl;
    interface IMarkupServices2
    {
        CONST_VTBL struct IMarkupServices2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> CreateMarkupPointer(This,ppPointer) )
    ( (This)->lpVtbl -> CreateMarkupContainer(This,ppMarkupContainer) )
    ( (This)->lpVtbl -> CreateElement(This,tagID,pchAttributes,ppElement) )
    ( (This)->lpVtbl -> CloneElement(This,pElemCloneThis,ppElementTheClone) )
    ( (This)->lpVtbl -> InsertElement(This,pElementInsert,pPointerStart,pPointerFinish) )
    ( (This)->lpVtbl -> RemoveElement(This,pElementRemove) )
    ( (This)->lpVtbl -> Remove(This,pPointerStart,pPointerFinish) )
    ( (This)->lpVtbl -> Copy(This,pPointerSourceStart,pPointerSourceFinish,pPointerTarget) )
    ( (This)->lpVtbl -> Move(This,pPointerSourceStart,pPointerSourceFinish,pPointerTarget) )
    ( (This)->lpVtbl -> InsertText(This,pchText,cch,pPointerTarget) )
    ( (This)->lpVtbl -> ParseString(This,pchHTML,dwFlags,ppContainerResult,ppPointerStart,ppPointerFinish) )
    ( (This)->lpVtbl -> ParseGlobal(This,hglobalHTML,dwFlags,ppContainerResult,pPointerStart,pPointerFinish) )
    ( (This)->lpVtbl -> IsScopedElement(This,pElement,pfScoped) )
    ( (This)->lpVtbl -> GetElementTagId(This,pElement,ptagId) )
    ( (This)->lpVtbl -> GetTagIDForName(This,bstrName,ptagId) )
    ( (This)->lpVtbl -> GetNameForTagID(This,tagId,pbstrName) )
    ( (This)->lpVtbl -> MovePointersToRange(This,pIRange,pPointerStart,pPointerFinish) )
    ( (This)->lpVtbl -> MoveRangeToPointers(This,pPointerStart,pPointerFinish,pIRange) )
    ( (This)->lpVtbl -> BeginUndoUnit(This,pchTitle) )
    ( (This)->lpVtbl -> EndUndoUnit(This) )
    ( (This)->lpVtbl -> ParseGlobalEx(This,hglobalHTML,dwFlags,pContext,ppContainerResult,pPointerStart,pPointerFinish) )
    ( (This)->lpVtbl -> ValidateElements(This,pPointerStart,pPointerFinish,pPointerTarget,pPointerStatus,ppElemFailBottom,ppElemFailTop) )
    ( (This)->lpVtbl -> SaveSegmentsToClipboard(This,pSegmentList,dwFlags) )
EXTERN_C const IID IID_IHTMLChangePlayback;
    typedef struct IHTMLChangePlaybackVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLChangePlayback * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLChangePlayback * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLChangePlayback * This);
        HRESULT ( STDMETHODCALLTYPE *ExecChange )(
            __RPC__in IHTMLChangePlayback * This,
                       __RPC__in BYTE *pbRecord,
                       BOOL fForward);
        END_INTERFACE
    } IHTMLChangePlaybackVtbl;
    interface IHTMLChangePlayback
    {
        CONST_VTBL struct IHTMLChangePlaybackVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> ExecChange(This,pbRecord,fForward) )
EXTERN_C const IID IID_IMarkupPointer2;
    typedef struct IMarkupPointer2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IMarkupPointer2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IMarkupPointer2 * This);
        HRESULT ( STDMETHODCALLTYPE *OwningDoc )(
            __RPC__in IMarkupPointer2 * This,
                        __RPC__deref_out_opt IHTMLDocument2 **ppDoc);
        HRESULT ( STDMETHODCALLTYPE *Gravity )(
            __RPC__in IMarkupPointer2 * This,
                        __RPC__out POINTER_GRAVITY *pGravity);
        HRESULT ( STDMETHODCALLTYPE *SetGravity )(
            __RPC__in IMarkupPointer2 * This,
                       POINTER_GRAVITY Gravity);
        HRESULT ( STDMETHODCALLTYPE *Cling )(
            __RPC__in IMarkupPointer2 * This,
                        __RPC__out BOOL *pfCling);
        HRESULT ( STDMETHODCALLTYPE *SetCling )(
            __RPC__in IMarkupPointer2 * This,
                       BOOL fCLing);
        HRESULT ( STDMETHODCALLTYPE *Unposition )(
            __RPC__in IMarkupPointer2 * This);
        HRESULT ( STDMETHODCALLTYPE *IsPositioned )(
            __RPC__in IMarkupPointer2 * This,
                        __RPC__out BOOL *pfPositioned);
        HRESULT ( STDMETHODCALLTYPE *GetContainer )(
            __RPC__in IMarkupPointer2 * This,
                        __RPC__deref_out_opt IMarkupContainer **ppContainer);
        HRESULT ( STDMETHODCALLTYPE *MoveAdjacentToElement )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in_opt IHTMLElement *pElement,
                       ELEMENT_ADJACENCY eAdj);
        HRESULT ( STDMETHODCALLTYPE *MoveToPointer )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in_opt IMarkupPointer *pPointer);
        HRESULT ( STDMETHODCALLTYPE *MoveToContainer )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in_opt IMarkupContainer *pContainer,
                       BOOL fAtStart);
        HRESULT ( STDMETHODCALLTYPE *Left )(
            __RPC__in IMarkupPointer2 * This,
                       BOOL fMove,
                        __RPC__out MARKUP_CONTEXT_TYPE *pContext,
                        __RPC__deref_out_opt IHTMLElement **ppElement,
                            __RPC__inout long *pcch,
                                 __RPC__out_ecount_full(*pcch) OLECHAR *pchText);
        HRESULT ( STDMETHODCALLTYPE *Right )(
            __RPC__in IMarkupPointer2 * This,
                       BOOL fMove,
                        __RPC__out MARKUP_CONTEXT_TYPE *pContext,
                        __RPC__deref_out_opt IHTMLElement **ppElement,
                            __RPC__inout long *pcch,
                                 __RPC__out_ecount_full(*pcch) OLECHAR *pchText);
        HRESULT ( STDMETHODCALLTYPE *CurrentScope )(
            __RPC__in IMarkupPointer2 * This,
                        __RPC__deref_out_opt IHTMLElement **ppElemCurrent);
        HRESULT ( STDMETHODCALLTYPE *IsLeftOf )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in_opt IMarkupPointer *pPointerThat,
                        __RPC__out BOOL *pfResult);
        HRESULT ( STDMETHODCALLTYPE *IsLeftOfOrEqualTo )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in_opt IMarkupPointer *pPointerThat,
                        __RPC__out BOOL *pfResult);
        HRESULT ( STDMETHODCALLTYPE *IsRightOf )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in_opt IMarkupPointer *pPointerThat,
                        __RPC__out BOOL *pfResult);
        HRESULT ( STDMETHODCALLTYPE *IsRightOfOrEqualTo )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in_opt IMarkupPointer *pPointerThat,
                        __RPC__out BOOL *pfResult);
        HRESULT ( STDMETHODCALLTYPE *IsEqualTo )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in_opt IMarkupPointer *pPointerThat,
                        __RPC__out BOOL *pfAreEqual);
        HRESULT ( STDMETHODCALLTYPE *MoveUnit )(
            __RPC__in IMarkupPointer2 * This,
                       MOVEUNIT_ACTION muAction);
        HRESULT ( STDMETHODCALLTYPE *FindText )(
            __RPC__in IMarkupPointer2 * This,
                               __RPC__in_string OLECHAR *pchFindText,
                       DWORD dwFlags,
                       __RPC__in_opt IMarkupPointer *pIEndMatch,
                       __RPC__in_opt IMarkupPointer *pIEndSearch);
        HRESULT ( STDMETHODCALLTYPE *IsAtWordBreak )(
            __RPC__in IMarkupPointer2 * This,
                        __RPC__out BOOL *pfAtBreak);
        HRESULT ( STDMETHODCALLTYPE *GetMarkupPosition )(
            __RPC__in IMarkupPointer2 * This,
                        __RPC__out long *plMP);
        HRESULT ( STDMETHODCALLTYPE *MoveToMarkupPosition )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in_opt IMarkupContainer *pContainer,
                       long lMP);
        HRESULT ( STDMETHODCALLTYPE *MoveUnitBounded )(
            __RPC__in IMarkupPointer2 * This,
                       MOVEUNIT_ACTION muAction,
                       __RPC__in_opt IMarkupPointer *pIBoundary);
        HRESULT ( STDMETHODCALLTYPE *IsInsideURL )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in_opt IMarkupPointer *pRight,
                        __RPC__out BOOL *pfResult);
        HRESULT ( STDMETHODCALLTYPE *MoveToContent )(
            __RPC__in IMarkupPointer2 * This,
                       __RPC__in_opt IHTMLElement *pIElement,
                       BOOL fAtStart);
        END_INTERFACE
    } IMarkupPointer2Vtbl;
    interface IMarkupPointer2
    {
        CONST_VTBL struct IMarkupPointer2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> OwningDoc(This,ppDoc) )
    ( (This)->lpVtbl -> Gravity(This,pGravity) )
    ( (This)->lpVtbl -> SetGravity(This,Gravity) )
    ( (This)->lpVtbl -> Cling(This,pfCling) )
    ( (This)->lpVtbl -> SetCling(This,fCLing) )
    ( (This)->lpVtbl -> Unposition(This) )
    ( (This)->lpVtbl -> IsPositioned(This,pfPositioned) )
    ( (This)->lpVtbl -> GetContainer(This,ppContainer) )
    ( (This)->lpVtbl -> MoveAdjacentToElement(This,pElement,eAdj) )
    ( (This)->lpVtbl -> MoveToPointer(This,pPointer) )
    ( (This)->lpVtbl -> MoveToContainer(This,pContainer,fAtStart) )
    ( (This)->lpVtbl -> Left(This,fMove,pContext,ppElement,pcch,pchText) )
    ( (This)->lpVtbl -> Right(This,fMove,pContext,ppElement,pcch,pchText) )
    ( (This)->lpVtbl -> CurrentScope(This,ppElemCurrent) )
    ( (This)->lpVtbl -> IsLeftOf(This,pPointerThat,pfResult) )
    ( (This)->lpVtbl -> IsLeftOfOrEqualTo(This,pPointerThat,pfResult) )
    ( (This)->lpVtbl -> IsRightOf(This,pPointerThat,pfResult) )
    ( (This)->lpVtbl -> IsRightOfOrEqualTo(This,pPointerThat,pfResult) )
    ( (This)->lpVtbl -> IsEqualTo(This,pPointerThat,pfAreEqual) )
    ( (This)->lpVtbl -> MoveUnit(This,muAction) )
    ( (This)->lpVtbl -> FindText(This,pchFindText,dwFlags,pIEndMatch,pIEndSearch) )
    ( (This)->lpVtbl -> IsAtWordBreak(This,pfAtBreak) )
    ( (This)->lpVtbl -> GetMarkupPosition(This,plMP) )
    ( (This)->lpVtbl -> MoveToMarkupPosition(This,pContainer,lMP) )
    ( (This)->lpVtbl -> MoveUnitBounded(This,muAction,pIBoundary) )
    ( (This)->lpVtbl -> IsInsideURL(This,pRight,pfResult) )
    ( (This)->lpVtbl -> MoveToContent(This,pIElement,fAtStart) )
EXTERN_C const IID IID_IMarkupTextFrags;
    typedef struct IMarkupTextFragsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IMarkupTextFrags * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IMarkupTextFrags * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IMarkupTextFrags * This);
        HRESULT ( STDMETHODCALLTYPE *GetTextFragCount )(
            __RPC__in IMarkupTextFrags * This,
                        __RPC__out long *pcFrags);
        HRESULT ( STDMETHODCALLTYPE *GetTextFrag )(
            __RPC__in IMarkupTextFrags * This,
                       long iFrag,
                        __RPC__deref_out_opt BSTR *pbstrFrag,
                       __RPC__in_opt IMarkupPointer *pPointerFrag);
        HRESULT ( STDMETHODCALLTYPE *RemoveTextFrag )(
            __RPC__in IMarkupTextFrags * This,
                       long iFrag);
        HRESULT ( STDMETHODCALLTYPE *InsertTextFrag )(
            __RPC__in IMarkupTextFrags * This,
                       long iFrag,
                       __RPC__in BSTR bstrInsert,
                       __RPC__in_opt IMarkupPointer *pPointerInsert);
        HRESULT ( STDMETHODCALLTYPE *FindTextFragFromMarkupPointer )(
            __RPC__in IMarkupTextFrags * This,
                       __RPC__in_opt IMarkupPointer *pPointerFind,
                        __RPC__out long *piFrag,
                        __RPC__out BOOL *pfFragFound);
        END_INTERFACE
    } IMarkupTextFragsVtbl;
    interface IMarkupTextFrags
    {
        CONST_VTBL struct IMarkupTextFragsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTextFragCount(This,pcFrags) )
    ( (This)->lpVtbl -> GetTextFrag(This,iFrag,pbstrFrag,pPointerFrag) )
    ( (This)->lpVtbl -> RemoveTextFrag(This,iFrag) )
    ( (This)->lpVtbl -> InsertTextFrag(This,iFrag,bstrInsert,pPointerInsert) )
    ( (This)->lpVtbl -> FindTextFragFromMarkupPointer(This,pPointerFind,piFrag,pfFragFound) )
EXTERN_C const IID IID_IXMLGenericParse;
    typedef struct IXMLGenericParseVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IXMLGenericParse * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IXMLGenericParse * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IXMLGenericParse * This);
        HRESULT ( STDMETHODCALLTYPE *SetGenericParse )(
            __RPC__in IXMLGenericParse * This,
                       VARIANT_BOOL fDoGeneric);
        END_INTERFACE
    } IXMLGenericParseVtbl;
    interface IXMLGenericParse
    {
        CONST_VTBL struct IXMLGenericParseVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> SetGenericParse(This,fDoGeneric) )
EXTERN_C const IID IID_IHTMLEditHost;
    typedef struct IHTMLEditHostVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEditHost * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEditHost * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEditHost * This);
        HRESULT ( STDMETHODCALLTYPE *SnapRect )(
            __RPC__in IHTMLEditHost * This,
                       __RPC__in_opt IHTMLElement *pIElement,
                            __RPC__inout RECT *prcNew,
                       ELEMENT_CORNER eHandle);
        END_INTERFACE
    } IHTMLEditHostVtbl;
    interface IHTMLEditHost
    {
        CONST_VTBL struct IHTMLEditHostVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> SnapRect(This,pIElement,prcNew,eHandle) )
EXTERN_C const IID IID_IHTMLEditHost2;
    typedef struct IHTMLEditHost2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEditHost2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEditHost2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEditHost2 * This);
        HRESULT ( STDMETHODCALLTYPE *SnapRect )(
            __RPC__in IHTMLEditHost2 * This,
                       __RPC__in_opt IHTMLElement *pIElement,
                            __RPC__inout RECT *prcNew,
                       ELEMENT_CORNER eHandle);
        HRESULT ( STDMETHODCALLTYPE *PreDrag )(
            __RPC__in IHTMLEditHost2 * This);
        END_INTERFACE
    } IHTMLEditHost2Vtbl;
    interface IHTMLEditHost2
    {
        CONST_VTBL struct IHTMLEditHost2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> SnapRect(This,pIElement,prcNew,eHandle) )
    ( (This)->lpVtbl -> PreDrag(This) )
EXTERN_C const IID IID_ISequenceNumber;
    typedef struct ISequenceNumberVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISequenceNumber * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISequenceNumber * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISequenceNumber * This);
        HRESULT ( STDMETHODCALLTYPE *GetSequenceNumber )(
            __RPC__in ISequenceNumber * This,
                       long nCurrent,
                        __RPC__out long *pnNew);
        END_INTERFACE
    } ISequenceNumberVtbl;
    interface ISequenceNumber
    {
        CONST_VTBL struct ISequenceNumberVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetSequenceNumber(This,nCurrent,pnNew) )
EXTERN_C const IID IID_IIMEServices;
    typedef struct IIMEServicesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IIMEServices * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IIMEServices * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IIMEServices * This);
        HRESULT ( STDMETHODCALLTYPE *GetActiveIMM )(
            __RPC__in IIMEServices * This,
                        __RPC__deref_out_opt IActiveIMMApp **ppActiveIMM);
        END_INTERFACE
    } IIMEServicesVtbl;
    interface IIMEServices
    {
        CONST_VTBL struct IIMEServicesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetActiveIMM(This,ppActiveIMM) )
EXTERN_C const IID IID_ISelectionServicesListener;
    typedef struct ISelectionServicesListenerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISelectionServicesListener * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISelectionServicesListener * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISelectionServicesListener * This);
        HRESULT ( STDMETHODCALLTYPE *BeginSelectionUndo )(
            __RPC__in ISelectionServicesListener * This);
        HRESULT ( STDMETHODCALLTYPE *EndSelectionUndo )(
            __RPC__in ISelectionServicesListener * This);
        HRESULT ( STDMETHODCALLTYPE *OnSelectedElementExit )(
            __RPC__in ISelectionServicesListener * This,
                       __RPC__in_opt IMarkupPointer *pIElementStart,
                       __RPC__in_opt IMarkupPointer *pIElementEnd,
                       __RPC__in_opt IMarkupPointer *pIElementContentStart,
                       __RPC__in_opt IMarkupPointer *pIElementContentEnd);
        HRESULT ( STDMETHODCALLTYPE *OnChangeType )(
            __RPC__in ISelectionServicesListener * This,
                       SELECTION_TYPE eType,
                       __RPC__in_opt ISelectionServicesListener *pIListener);
        HRESULT ( STDMETHODCALLTYPE *GetTypeDetail )(
            __RPC__in ISelectionServicesListener * This,
                        __RPC__deref_out_opt BSTR *pTypeDetail);
        END_INTERFACE
    } ISelectionServicesListenerVtbl;
    interface ISelectionServicesListener
    {
        CONST_VTBL struct ISelectionServicesListenerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> BeginSelectionUndo(This) )
    ( (This)->lpVtbl -> EndSelectionUndo(This) )
    ( (This)->lpVtbl -> OnSelectedElementExit(This,pIElementStart,pIElementEnd,pIElementContentStart,pIElementContentEnd) )
    ( (This)->lpVtbl -> OnChangeType(This,eType,pIListener) )
    ( (This)->lpVtbl -> GetTypeDetail(This,pTypeDetail) )
EXTERN_C const IID IID_ISelectionServices;
    typedef struct ISelectionServicesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISelectionServices * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISelectionServices * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISelectionServices * This);
        HRESULT ( STDMETHODCALLTYPE *SetSelectionType )(
            __RPC__in ISelectionServices * This,
                       SELECTION_TYPE eType,
                       __RPC__in_opt ISelectionServicesListener *pIListener);
        HRESULT ( STDMETHODCALLTYPE *GetMarkupContainer )(
            __RPC__in ISelectionServices * This,
                        __RPC__deref_out_opt IMarkupContainer **ppIContainer);
        HRESULT ( STDMETHODCALLTYPE *AddSegment )(
            __RPC__in ISelectionServices * This,
                       __RPC__in_opt IMarkupPointer *pIStart,
                       __RPC__in_opt IMarkupPointer *pIEnd,
                        __RPC__deref_out_opt ISegment **ppISegmentAdded);
        HRESULT ( STDMETHODCALLTYPE *AddElementSegment )(
            __RPC__in ISelectionServices * This,
                       __RPC__in_opt IHTMLElement *pIElement,
                        __RPC__deref_out_opt IElementSegment **ppISegmentAdded);
        HRESULT ( STDMETHODCALLTYPE *RemoveSegment )(
            __RPC__in ISelectionServices * This,
                       __RPC__in_opt ISegment *pISegment);
        HRESULT ( STDMETHODCALLTYPE *GetSelectionServicesListener )(
            __RPC__in ISelectionServices * This,
                        __RPC__deref_out_opt ISelectionServicesListener **ppISelectionServicesListener);
        END_INTERFACE
    } ISelectionServicesVtbl;
    interface ISelectionServices
    {
        CONST_VTBL struct ISelectionServicesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> SetSelectionType(This,eType,pIListener) )
    ( (This)->lpVtbl -> GetMarkupContainer(This,ppIContainer) )
    ( (This)->lpVtbl -> AddSegment(This,pIStart,pIEnd,ppISegmentAdded) )
    ( (This)->lpVtbl -> AddElementSegment(This,pIElement,ppISegmentAdded) )
    ( (This)->lpVtbl -> RemoveSegment(This,pISegment) )
    ( (This)->lpVtbl -> GetSelectionServicesListener(This,ppISelectionServicesListener) )
EXTERN_C const IID IID_IHTMLEditDesigner;
    typedef struct IHTMLEditDesignerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEditDesigner * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEditDesigner * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEditDesigner * This);
        HRESULT ( STDMETHODCALLTYPE *PreHandleEvent )(
            __RPC__in IHTMLEditDesigner * This,
                       DISPID inEvtDispId,
                       __RPC__in_opt IHTMLEventObj *pIEventObj);
        HRESULT ( STDMETHODCALLTYPE *PostHandleEvent )(
            __RPC__in IHTMLEditDesigner * This,
                       DISPID inEvtDispId,
                       __RPC__in_opt IHTMLEventObj *pIEventObj);
        HRESULT ( STDMETHODCALLTYPE *TranslateAccelerator )(
            __RPC__in IHTMLEditDesigner * This,
                       DISPID inEvtDispId,
                       __RPC__in_opt IHTMLEventObj *pIEventObj);
        HRESULT ( STDMETHODCALLTYPE *PostEditorEventNotify )(
            __RPC__in IHTMLEditDesigner * This,
                       DISPID inEvtDispId,
                       __RPC__in_opt IHTMLEventObj *pIEventObj);
        END_INTERFACE
    } IHTMLEditDesignerVtbl;
    interface IHTMLEditDesigner
    {
        CONST_VTBL struct IHTMLEditDesignerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> PreHandleEvent(This,inEvtDispId,pIEventObj) )
    ( (This)->lpVtbl -> PostHandleEvent(This,inEvtDispId,pIEventObj) )
    ( (This)->lpVtbl -> TranslateAccelerator(This,inEvtDispId,pIEventObj) )
    ( (This)->lpVtbl -> PostEditorEventNotify(This,inEvtDispId,pIEventObj) )
EXTERN_C const IID IID_IHTMLEditServices;
    typedef struct IHTMLEditServicesVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEditServices * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEditServices * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEditServices * This);
        HRESULT ( STDMETHODCALLTYPE *AddDesigner )(
            __RPC__in IHTMLEditServices * This,
                       __RPC__in_opt IHTMLEditDesigner *pIDesigner);
        HRESULT ( STDMETHODCALLTYPE *RemoveDesigner )(
            __RPC__in IHTMLEditServices * This,
                       __RPC__in_opt IHTMLEditDesigner *pIDesigner);
        HRESULT ( STDMETHODCALLTYPE *GetSelectionServices )(
            __RPC__in IHTMLEditServices * This,
                       __RPC__in_opt IMarkupContainer *pIContainer,
                        __RPC__deref_out_opt ISelectionServices **ppSelSvc);
        HRESULT ( STDMETHODCALLTYPE *MoveToSelectionAnchor )(
            __RPC__in IHTMLEditServices * This,
                       __RPC__in_opt IMarkupPointer *pIStartAnchor);
        HRESULT ( STDMETHODCALLTYPE *MoveToSelectionEnd )(
            __RPC__in IHTMLEditServices * This,
                       __RPC__in_opt IMarkupPointer *pIEndAnchor);
        HRESULT ( STDMETHODCALLTYPE *SelectRange )(
            __RPC__in IHTMLEditServices * This,
                       __RPC__in_opt IMarkupPointer *pStart,
                       __RPC__in_opt IMarkupPointer *pEnd,
                       SELECTION_TYPE eType);
        END_INTERFACE
    } IHTMLEditServicesVtbl;
    interface IHTMLEditServices
    {
        CONST_VTBL struct IHTMLEditServicesVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> AddDesigner(This,pIDesigner) )
    ( (This)->lpVtbl -> RemoveDesigner(This,pIDesigner) )
    ( (This)->lpVtbl -> GetSelectionServices(This,pIContainer,ppSelSvc) )
    ( (This)->lpVtbl -> MoveToSelectionAnchor(This,pIStartAnchor) )
    ( (This)->lpVtbl -> MoveToSelectionEnd(This,pIEndAnchor) )
    ( (This)->lpVtbl -> SelectRange(This,pStart,pEnd,eType) )
EXTERN_C const IID IID_IHTMLEditServices2;
    typedef struct IHTMLEditServices2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLEditServices2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLEditServices2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLEditServices2 * This);
        HRESULT ( STDMETHODCALLTYPE *AddDesigner )(
            __RPC__in IHTMLEditServices2 * This,
                       __RPC__in_opt IHTMLEditDesigner *pIDesigner);
        HRESULT ( STDMETHODCALLTYPE *RemoveDesigner )(
            __RPC__in IHTMLEditServices2 * This,
                       __RPC__in_opt IHTMLEditDesigner *pIDesigner);
        HRESULT ( STDMETHODCALLTYPE *GetSelectionServices )(
            __RPC__in IHTMLEditServices2 * This,
                       __RPC__in_opt IMarkupContainer *pIContainer,
                        __RPC__deref_out_opt ISelectionServices **ppSelSvc);
        HRESULT ( STDMETHODCALLTYPE *MoveToSelectionAnchor )(
            __RPC__in IHTMLEditServices2 * This,
                       __RPC__in_opt IMarkupPointer *pIStartAnchor);
        HRESULT ( STDMETHODCALLTYPE *MoveToSelectionEnd )(
            __RPC__in IHTMLEditServices2 * This,
                       __RPC__in_opt IMarkupPointer *pIEndAnchor);
        HRESULT ( STDMETHODCALLTYPE *SelectRange )(
            __RPC__in IHTMLEditServices2 * This,
                       __RPC__in_opt IMarkupPointer *pStart,
                       __RPC__in_opt IMarkupPointer *pEnd,
                       SELECTION_TYPE eType);
        HRESULT ( STDMETHODCALLTYPE *MoveToSelectionAnchorEx )(
            __RPC__in IHTMLEditServices2 * This,
                       __RPC__in_opt IDisplayPointer *pIStartAnchor);
        HRESULT ( STDMETHODCALLTYPE *MoveToSelectionEndEx )(
            __RPC__in IHTMLEditServices2 * This,
                       __RPC__in_opt IDisplayPointer *pIEndAnchor);
        HRESULT ( STDMETHODCALLTYPE *FreezeVirtualCaretPos )(
            __RPC__in IHTMLEditServices2 * This,
                       BOOL fReCompute);
        HRESULT ( STDMETHODCALLTYPE *UnFreezeVirtualCaretPos )(
            __RPC__in IHTMLEditServices2 * This,
                       BOOL fReset);
        END_INTERFACE
    } IHTMLEditServices2Vtbl;
    interface IHTMLEditServices2
    {
        CONST_VTBL struct IHTMLEditServices2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> AddDesigner(This,pIDesigner) )
    ( (This)->lpVtbl -> RemoveDesigner(This,pIDesigner) )
    ( (This)->lpVtbl -> GetSelectionServices(This,pIContainer,ppSelSvc) )
    ( (This)->lpVtbl -> MoveToSelectionAnchor(This,pIStartAnchor) )
    ( (This)->lpVtbl -> MoveToSelectionEnd(This,pIEndAnchor) )
    ( (This)->lpVtbl -> SelectRange(This,pStart,pEnd,eType) )
    ( (This)->lpVtbl -> MoveToSelectionAnchorEx(This,pIStartAnchor) )
    ( (This)->lpVtbl -> MoveToSelectionEndEx(This,pIEndAnchor) )
    ( (This)->lpVtbl -> FreezeVirtualCaretPos(This,fReCompute) )
    ( (This)->lpVtbl -> UnFreezeVirtualCaretPos(This,fReset) )
EXTERN_C const IID IID_IHTMLComputedStyle;
    typedef struct IHTMLComputedStyleVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLComputedStyle * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLComputedStyle * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLComputedStyle * This);
                            HRESULT ( STDMETHODCALLTYPE *get_bold )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_italic )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_underline )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_overline )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_strikeOut )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_subScript )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_superScript )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_explicitFace )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fontWeight )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fontSize )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out long *p);
                            HRESULT ( STDMETHODCALLTYPE *get_fontName )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out TCHAR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_hasBgColor )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_textColor )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out DWORD *p);
                            HRESULT ( STDMETHODCALLTYPE *get_backgroundColor )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out DWORD *p);
                            HRESULT ( STDMETHODCALLTYPE *get_preFormatted )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_direction )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_blockDirection )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
                            HRESULT ( STDMETHODCALLTYPE *get_OL )(
            __RPC__in IHTMLComputedStyle * This,
                                __RPC__out VARIANT_BOOL *p);
        HRESULT ( STDMETHODCALLTYPE *IsEqual )(
            __RPC__in IHTMLComputedStyle * This,
                       __RPC__in_opt IHTMLComputedStyle *pComputedStyle,
                        __RPC__out VARIANT_BOOL *pfEqual);
        END_INTERFACE
    } IHTMLComputedStyleVtbl;
    interface IHTMLComputedStyle
    {
        CONST_VTBL struct IHTMLComputedStyleVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> get_bold(This,p) )
    ( (This)->lpVtbl -> get_italic(This,p) )
    ( (This)->lpVtbl -> get_underline(This,p) )
    ( (This)->lpVtbl -> get_overline(This,p) )
    ( (This)->lpVtbl -> get_strikeOut(This,p) )
    ( (This)->lpVtbl -> get_subScript(This,p) )
    ( (This)->lpVtbl -> get_superScript(This,p) )
    ( (This)->lpVtbl -> get_explicitFace(This,p) )
    ( (This)->lpVtbl -> get_fontWeight(This,p) )
    ( (This)->lpVtbl -> get_fontSize(This,p) )
    ( (This)->lpVtbl -> get_fontName(This,p) )
    ( (This)->lpVtbl -> get_hasBgColor(This,p) )
    ( (This)->lpVtbl -> get_textColor(This,p) )
    ( (This)->lpVtbl -> get_backgroundColor(This,p) )
    ( (This)->lpVtbl -> get_preFormatted(This,p) )
    ( (This)->lpVtbl -> get_direction(This,p) )
    ( (This)->lpVtbl -> get_blockDirection(This,p) )
    ( (This)->lpVtbl -> get_OL(This,p) )
    ( (This)->lpVtbl -> IsEqual(This,pComputedStyle,pfEqual) )
EXTERN_C const CLSID CLSID_HtmlDlgSafeHelper;
class DECLSPEC_UUID("3050f819-98b5-11cf-bb82-00aa00bdce0b")
HtmlDlgSafeHelper;
EXTERN_C const CLSID CLSID_BlockFormats;
class DECLSPEC_UUID("3050f831-98b5-11cf-bb82-00aa00bdce0b")
BlockFormats;
EXTERN_C const CLSID CLSID_FontNames;
class DECLSPEC_UUID("3050f83a-98b5-11cf-bb82-00aa00bdce0b")
FontNames;
EXTERN_C const IID IID_IDeveloperConsoleMessageReceiver;
    typedef struct IDeveloperConsoleMessageReceiverVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IDeveloperConsoleMessageReceiver * This,
                       REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IDeveloperConsoleMessageReceiver * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            IDeveloperConsoleMessageReceiver * This);
        HRESULT ( STDMETHODCALLTYPE *Write )(
            IDeveloperConsoleMessageReceiver * This,
            _In_ LPCWSTR source,
            _In_ DEV_CONSOLE_MESSAGE_LEVEL level,
            _In_ int messageId,
            _In_ LPCWSTR messageText);
        HRESULT ( STDMETHODCALLTYPE *WriteWithUrl )(
            IDeveloperConsoleMessageReceiver * This,
            _In_ LPCWSTR source,
            _In_ DEV_CONSOLE_MESSAGE_LEVEL level,
            _In_ int messageId,
            _In_ LPCWSTR messageText,
            _In_ LPCWSTR fileUrl);
        HRESULT ( STDMETHODCALLTYPE *WriteWithUrlAndLine )(
            IDeveloperConsoleMessageReceiver * This,
            _In_ LPCWSTR source,
            _In_ DEV_CONSOLE_MESSAGE_LEVEL level,
            _In_ int messageId,
            _In_ LPCWSTR messageText,
            _In_ LPCWSTR fileUrl,
            _In_ ULONG line);
        HRESULT ( STDMETHODCALLTYPE *WriteWithUrlLineAndColumn )(
            IDeveloperConsoleMessageReceiver * This,
            _In_ LPCWSTR source,
            _In_ DEV_CONSOLE_MESSAGE_LEVEL level,
            _In_ int messageId,
            _In_ LPCWSTR messageText,
            _In_ LPCWSTR fileUrl,
            _In_ ULONG line,
            _In_ ULONG column);
        END_INTERFACE
    } IDeveloperConsoleMessageReceiverVtbl;
    interface IDeveloperConsoleMessageReceiver
    {
        CONST_VTBL struct IDeveloperConsoleMessageReceiverVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Write(This,source,level,messageId,messageText) )
    ( (This)->lpVtbl -> WriteWithUrl(This,source,level,messageId,messageText,fileUrl) )
    ( (This)->lpVtbl -> WriteWithUrlAndLine(This,source,level,messageId,messageText,fileUrl,line) )
    ( (This)->lpVtbl -> WriteWithUrlLineAndColumn(This,source,level,messageId,messageText,fileUrl,line,column) )
EXTERN_C const IID IID_IScriptEventHandler;
    typedef struct IScriptEventHandlerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IScriptEventHandler * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IScriptEventHandler * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IScriptEventHandler * This);
        HRESULT ( STDMETHODCALLTYPE *FunctionName )(
            __RPC__in IScriptEventHandler * This,
                                __RPC__deref_out_opt BSTR *pbstrFunctionName);
        HRESULT ( STDMETHODCALLTYPE *DebugDocumentContext )(
            __RPC__in IScriptEventHandler * This,
                                __RPC__deref_out_opt IUnknown **ppDebugDocumentContext);
        HRESULT ( STDMETHODCALLTYPE *EventHandlerDispatch )(
            __RPC__in IScriptEventHandler * This,
                                __RPC__deref_out_opt IDispatch **ppDispHandler);
        HRESULT ( STDMETHODCALLTYPE *UsesCapture )(
            __RPC__in IScriptEventHandler * This,
                                __RPC__out BOOL *pfUsesCapture);
        HRESULT ( STDMETHODCALLTYPE *Cookie )(
            __RPC__in IScriptEventHandler * This,
                                __RPC__out ULONGLONG *pullCookie);
        END_INTERFACE
    } IScriptEventHandlerVtbl;
    interface IScriptEventHandler
    {
        CONST_VTBL struct IScriptEventHandlerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> FunctionName(This,pbstrFunctionName) )
    ( (This)->lpVtbl -> DebugDocumentContext(This,ppDebugDocumentContext) )
    ( (This)->lpVtbl -> EventHandlerDispatch(This,ppDispHandler) )
    ( (This)->lpVtbl -> UsesCapture(This,pfUsesCapture) )
    ( (This)->lpVtbl -> Cookie(This,pullCookie) )
EXTERN_C const IID IID_IDebugCallbackNotificationHandler;
    typedef struct IDebugCallbackNotificationHandlerVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IDebugCallbackNotificationHandler * This,
                       REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IDebugCallbackNotificationHandler * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            IDebugCallbackNotificationHandler * This);
        HRESULT ( STDMETHODCALLTYPE *RequestedCallbackTypes )(
            IDebugCallbackNotificationHandler * This,
            _Out_ DWORD *pCallbackMask);
        HRESULT ( STDMETHODCALLTYPE *BeforeDispatchEvent )(
            IDebugCallbackNotificationHandler * This,
            _In_ IUnknown *pEvent);
        HRESULT ( STDMETHODCALLTYPE *DispatchEventComplete )(
            IDebugCallbackNotificationHandler * This,
            _In_ IUnknown *pEvent,
                       DWORD propagationStatus);
        HRESULT ( STDMETHODCALLTYPE *BeforeInvokeDomCallback )(
            IDebugCallbackNotificationHandler * This,
            _In_ IUnknown *pEvent,
            _In_ IScriptEventHandler *pCallback,
                       DOM_EVENT_PHASE eStage,
                       DWORD propagationStatus);
        HRESULT ( STDMETHODCALLTYPE *InvokeDomCallbackComplete )(
            IDebugCallbackNotificationHandler * This,
            _In_ IUnknown *pEvent,
            _In_ IScriptEventHandler *pCallback,
                       DOM_EVENT_PHASE eStage,
                       DWORD propagationStatus);
        HRESULT ( STDMETHODCALLTYPE *BeforeInvokeCallback )(
            IDebugCallbackNotificationHandler * This,
                       SCRIPT_TIMER_TYPE eCallbackType,
                       DWORD callbackCookie,
            _In_ IDispatch *pDispHandler,
            _In_ ULONGLONG ullHandlerCookie,
            _In_opt_ BSTR functionName,
            _In_ UINT32 line,
            _In_ UINT32 column,
            _In_ UINT32 cchLength,
            _In_opt_ IUnknown *pDebugDocumentContext);
        HRESULT ( STDMETHODCALLTYPE *InvokeCallbackComplete )(
            IDebugCallbackNotificationHandler * This,
                       SCRIPT_TIMER_TYPE eCallbackType,
                       DWORD callbackCookie,
            _In_ IDispatch *pDispHandler,
            _In_ ULONGLONG ullHandlerCookie,
            _In_opt_ BSTR functionName,
            _In_ UINT32 line,
            _In_ UINT32 column,
            _In_ UINT32 cchLength,
            _In_opt_ IUnknown *pDebugDocumentContext);
        END_INTERFACE
    } IDebugCallbackNotificationHandlerVtbl;
    interface IDebugCallbackNotificationHandler
    {
        CONST_VTBL struct IDebugCallbackNotificationHandlerVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> RequestedCallbackTypes(This,pCallbackMask) )
    ( (This)->lpVtbl -> BeforeDispatchEvent(This,pEvent) )
    ( (This)->lpVtbl -> DispatchEventComplete(This,pEvent,propagationStatus) )
    ( (This)->lpVtbl -> BeforeInvokeDomCallback(This,pEvent,pCallback,eStage,propagationStatus) )
    ( (This)->lpVtbl -> InvokeDomCallbackComplete(This,pEvent,pCallback,eStage,propagationStatus) )
    ( (This)->lpVtbl -> BeforeInvokeCallback(This,eCallbackType,callbackCookie,pDispHandler,ullHandlerCookie,functionName,line,column,cchLength,pDebugDocumentContext) )
    ( (This)->lpVtbl -> InvokeCallbackComplete(This,eCallbackType,callbackCookie,pDispHandler,ullHandlerCookie,functionName,line,column,cchLength,pDebugDocumentContext) )
EXTERN_C const IID IID_IScriptEventHandlerSourceInfo;
    typedef struct IScriptEventHandlerSourceInfoVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IScriptEventHandlerSourceInfo * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IScriptEventHandlerSourceInfo * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IScriptEventHandlerSourceInfo * This);
        HRESULT ( STDMETHODCALLTYPE *GetSourceInfo )(
            __RPC__in IScriptEventHandlerSourceInfo * This,
                        __RPC__deref_out_opt BSTR *pbstrFunctionName,
                        __RPC__out UINT32 *line,
                        __RPC__out UINT32 *column,
                        __RPC__out UINT32 *cchLength);
        END_INTERFACE
    } IScriptEventHandlerSourceInfoVtbl;
    interface IScriptEventHandlerSourceInfo
    {
        CONST_VTBL struct IScriptEventHandlerSourceInfoVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetSourceInfo(This,pbstrFunctionName,line,column,cchLength) )
EXTERN_C const IID IID_IDOMEventRegistrationCallback;
    typedef struct IDOMEventRegistrationCallbackVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IDOMEventRegistrationCallback * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IDOMEventRegistrationCallback * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IDOMEventRegistrationCallback * This);
        HRESULT ( STDMETHODCALLTYPE *OnDOMEventListenerAdded )(
            __RPC__in IDOMEventRegistrationCallback * This,
                       __RPC__in LPCWSTR pszEventType,
                       __RPC__in_opt IScriptEventHandler *pHandler);
        HRESULT ( STDMETHODCALLTYPE *OnDOMEventListenerRemoved )(
            __RPC__in IDOMEventRegistrationCallback * This,
                       ULONGLONG ullCookie);
        END_INTERFACE
    } IDOMEventRegistrationCallbackVtbl;
    interface IDOMEventRegistrationCallback
    {
        CONST_VTBL struct IDOMEventRegistrationCallbackVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> OnDOMEventListenerAdded(This,pszEventType,pHandler) )
    ( (This)->lpVtbl -> OnDOMEventListenerRemoved(This,ullCookie) )
EXTERN_C const IID IID_IEventTarget2;
    typedef struct IEventTarget2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IEventTarget2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IEventTarget2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IEventTarget2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetRegisteredEventTypes )(
            __RPC__in IEventTarget2 * This,
                                __RPC__deref_out_opt SAFEARRAY **ppEventTypeArray);
        HRESULT ( STDMETHODCALLTYPE *GetListenersForType )(
            __RPC__in IEventTarget2 * This,
                       __RPC__in LPCWSTR pszEventType,
                                __RPC__deref_out_opt SAFEARRAY **ppEventHandlerArray);
        HRESULT ( STDMETHODCALLTYPE *RegisterForDOMEventListeners )(
            __RPC__in IEventTarget2 * This,
                       __RPC__in_opt IDOMEventRegistrationCallback *pCallback);
        HRESULT ( STDMETHODCALLTYPE *UnregisterForDOMEventListeners )(
            __RPC__in IEventTarget2 * This,
                       __RPC__in_opt IDOMEventRegistrationCallback *pCallback);
        END_INTERFACE
    } IEventTarget2Vtbl;
    interface IEventTarget2
    {
        CONST_VTBL struct IEventTarget2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetRegisteredEventTypes(This,ppEventTypeArray) )
    ( (This)->lpVtbl -> GetListenersForType(This,pszEventType,ppEventHandlerArray) )
    ( (This)->lpVtbl -> RegisterForDOMEventListeners(This,pCallback) )
    ( (This)->lpVtbl -> UnregisterForDOMEventListeners(This,pCallback) )
EXTERN_C const IID DIID_HTMLNamespaceEvents;
    typedef struct HTMLNamespaceEventsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in HTMLNamespaceEvents * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in HTMLNamespaceEvents * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in HTMLNamespaceEvents * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in HTMLNamespaceEvents * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in HTMLNamespaceEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in HTMLNamespaceEvents * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            HTMLNamespaceEvents * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } HTMLNamespaceEventsVtbl;
    interface HTMLNamespaceEvents
    {
        CONST_VTBL struct HTMLNamespaceEventsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const IID IID_IHTMLNamespace;
    typedef struct IHTMLNamespaceVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLNamespace * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLNamespace * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLNamespace * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLNamespace * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLNamespace * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLNamespace * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLNamespace * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                      HRESULT ( STDMETHODCALLTYPE *get_name )(
            __RPC__in IHTMLNamespace * This,
                                __RPC__deref_out_opt BSTR *p);
                                      HRESULT ( STDMETHODCALLTYPE *get_urn )(
            __RPC__in IHTMLNamespace * This,
                                __RPC__deref_out_opt BSTR *p);
                                      HRESULT ( STDMETHODCALLTYPE *get_tagNames )(
            __RPC__in IHTMLNamespace * This,
                                __RPC__deref_out_opt IDispatch **p);
                                      HRESULT ( STDMETHODCALLTYPE *get_readyState )(
            __RPC__in IHTMLNamespace * This,
                                __RPC__out VARIANT *p);
                                                   HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )(
            __RPC__in IHTMLNamespace * This,
                       VARIANT v);
                                                   HRESULT ( STDMETHODCALLTYPE *get_onreadystatechange )(
            __RPC__in IHTMLNamespace * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *doImport )(
            __RPC__in IHTMLNamespace * This,
                       __RPC__in BSTR bstrImplementationUrl);
                   HRESULT ( STDMETHODCALLTYPE *attachEvent )(
            __RPC__in IHTMLNamespace * This,
                       __RPC__in BSTR event,
                       __RPC__in_opt IDispatch *pDisp,
                                __RPC__out VARIANT_BOOL *pfResult);
                   HRESULT ( STDMETHODCALLTYPE *detachEvent )(
            __RPC__in IHTMLNamespace * This,
                       __RPC__in BSTR event,
                       __RPC__in_opt IDispatch *pDisp);
        END_INTERFACE
    } IHTMLNamespaceVtbl;
    interface IHTMLNamespace
    {
        CONST_VTBL struct IHTMLNamespaceVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_name(This,p) )
    ( (This)->lpVtbl -> get_urn(This,p) )
    ( (This)->lpVtbl -> get_tagNames(This,p) )
    ( (This)->lpVtbl -> get_readyState(This,p) )
    ( (This)->lpVtbl -> put_onreadystatechange(This,v) )
    ( (This)->lpVtbl -> get_onreadystatechange(This,p) )
    ( (This)->lpVtbl -> doImport(This,bstrImplementationUrl) )
    ( (This)->lpVtbl -> attachEvent(This,event,pDisp,pfResult) )
    ( (This)->lpVtbl -> detachEvent(This,event,pDisp) )
EXTERN_C const IID IID_IHTMLNamespaceCollection;
    typedef struct IHTMLNamespaceCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLNamespaceCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLNamespaceCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLNamespaceCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLNamespaceCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLNamespaceCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLNamespaceCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLNamespaceCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLNamespaceCollection * This,
                                __RPC__out long *p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLNamespaceCollection * This,
                       VARIANT index,
                                __RPC__deref_out_opt IDispatch **ppNamespace);
                   HRESULT ( STDMETHODCALLTYPE *add )(
            __RPC__in IHTMLNamespaceCollection * This,
                       __RPC__in BSTR bstrNamespace,
                       __RPC__in BSTR bstrUrn,
                                 VARIANT implementationUrl,
                                __RPC__deref_out_opt IDispatch **ppNamespace);
        END_INTERFACE
    } IHTMLNamespaceCollectionVtbl;
    interface IHTMLNamespaceCollection
    {
        CONST_VTBL struct IHTMLNamespaceCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> item(This,index,ppNamespace) )
    ( (This)->lpVtbl -> add(This,bstrNamespace,bstrUrn,implementationUrl,ppNamespace) )
EXTERN_C const IID DIID_DispHTMLNamespace;
    typedef struct DispHTMLNamespaceVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLNamespace * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLNamespace * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLNamespace * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLNamespace * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLNamespace * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLNamespace * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLNamespace * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLNamespaceVtbl;
    interface DispHTMLNamespace
    {
        CONST_VTBL struct DispHTMLNamespaceVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLNamespace;
class DECLSPEC_UUID("3050f6bc-98b5-11cf-bb82-00aa00bdce0b")
HTMLNamespace;
EXTERN_C const IID DIID_DispHTMLNamespaceCollection;
    typedef struct DispHTMLNamespaceCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLNamespaceCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLNamespaceCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLNamespaceCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLNamespaceCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLNamespaceCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLNamespaceCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLNamespaceCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLNamespaceCollectionVtbl;
    interface DispHTMLNamespaceCollection
    {
        CONST_VTBL struct DispHTMLNamespaceCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLNamespaceCollection;
class DECLSPEC_UUID("3050f6b9-98b5-11cf-bb82-00aa00bdce0b")
HTMLNamespaceCollection;
EXTERN_C const IID IID_IHTMLPainter;
    typedef struct IHTMLPainterVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPainter * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPainter * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPainter * This);
        HRESULT ( STDMETHODCALLTYPE *Draw )(
            __RPC__in IHTMLPainter * This,
                       RECT rcBounds,
                       RECT rcUpdate,
                       LONG lDrawFlags,
                       __RPC__in HDC hdc,
                       __RPC__in LPVOID pvDrawObject);
        HRESULT ( STDMETHODCALLTYPE *OnResize )(
            __RPC__in IHTMLPainter * This,
                       SIZE size);
        HRESULT ( STDMETHODCALLTYPE *GetPainterInfo )(
            __RPC__in IHTMLPainter * This,
                        __RPC__out HTML_PAINTER_INFO *pInfo);
        HRESULT ( STDMETHODCALLTYPE *HitTestPoint )(
            __RPC__in IHTMLPainter * This,
                       POINT pt,
                        __RPC__out BOOL *pbHit,
                        __RPC__out LONG *plPartID);
        END_INTERFACE
    } IHTMLPainterVtbl;
    interface IHTMLPainter
    {
        CONST_VTBL struct IHTMLPainterVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Draw(This,rcBounds,rcUpdate,lDrawFlags,hdc,pvDrawObject) )
    ( (This)->lpVtbl -> OnResize(This,size) )
    ( (This)->lpVtbl -> GetPainterInfo(This,pInfo) )
    ( (This)->lpVtbl -> HitTestPoint(This,pt,pbHit,plPartID) )
EXTERN_C const IID IID_IHTMLPaintSite;
    typedef struct IHTMLPaintSiteVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPaintSite * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPaintSite * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPaintSite * This);
        HRESULT ( STDMETHODCALLTYPE *InvalidatePainterInfo )(
            __RPC__in IHTMLPaintSite * This);
        HRESULT ( STDMETHODCALLTYPE *InvalidateRect )(
            __RPC__in IHTMLPaintSite * This,
                       __RPC__in RECT *prcInvalid);
        HRESULT ( STDMETHODCALLTYPE *InvalidateRegion )(
            __RPC__in IHTMLPaintSite * This,
                       __RPC__in HRGN rgnInvalid);
        HRESULT ( STDMETHODCALLTYPE *GetDrawInfo )(
            __RPC__in IHTMLPaintSite * This,
                       LONG lFlags,
                        __RPC__out HTML_PAINT_DRAW_INFO *pDrawInfo);
        HRESULT ( STDMETHODCALLTYPE *TransformGlobalToLocal )(
            __RPC__in IHTMLPaintSite * This,
                       POINT ptGlobal,
                        __RPC__out POINT *pptLocal);
        HRESULT ( STDMETHODCALLTYPE *TransformLocalToGlobal )(
            __RPC__in IHTMLPaintSite * This,
                       POINT ptLocal,
                        __RPC__out POINT *pptGlobal);
        HRESULT ( STDMETHODCALLTYPE *GetHitTestCookie )(
            __RPC__in IHTMLPaintSite * This,
                        __RPC__out LONG *plCookie);
        END_INTERFACE
    } IHTMLPaintSiteVtbl;
    interface IHTMLPaintSite
    {
        CONST_VTBL struct IHTMLPaintSiteVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> InvalidatePainterInfo(This) )
    ( (This)->lpVtbl -> InvalidateRect(This,prcInvalid) )
    ( (This)->lpVtbl -> InvalidateRegion(This,rgnInvalid) )
    ( (This)->lpVtbl -> GetDrawInfo(This,lFlags,pDrawInfo) )
    ( (This)->lpVtbl -> TransformGlobalToLocal(This,ptGlobal,pptLocal) )
    ( (This)->lpVtbl -> TransformLocalToGlobal(This,ptLocal,pptGlobal) )
    ( (This)->lpVtbl -> GetHitTestCookie(This,plCookie) )
EXTERN_C const IID IID_IHTMLPainterEventInfo;
    typedef struct IHTMLPainterEventInfoVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPainterEventInfo * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPainterEventInfo * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPainterEventInfo * This);
        HRESULT ( STDMETHODCALLTYPE *GetEventInfoFlags )(
            __RPC__in IHTMLPainterEventInfo * This,
                        __RPC__out long *plEventInfoFlags);
        HRESULT ( STDMETHODCALLTYPE *GetEventTarget )(
            __RPC__in IHTMLPainterEventInfo * This,
                       __RPC__deref_in_opt IHTMLElement **ppElement);
        HRESULT ( STDMETHODCALLTYPE *SetCursor )(
            __RPC__in IHTMLPainterEventInfo * This,
                       LONG lPartID);
        HRESULT ( STDMETHODCALLTYPE *StringFromPartID )(
            __RPC__in IHTMLPainterEventInfo * This,
                       LONG lPartID,
                        __RPC__deref_out_opt BSTR *pbstrPart);
        END_INTERFACE
    } IHTMLPainterEventInfoVtbl;
    interface IHTMLPainterEventInfo
    {
        CONST_VTBL struct IHTMLPainterEventInfoVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetEventInfoFlags(This,plEventInfoFlags) )
    ( (This)->lpVtbl -> GetEventTarget(This,ppElement) )
    ( (This)->lpVtbl -> SetCursor(This,lPartID) )
    ( (This)->lpVtbl -> StringFromPartID(This,lPartID,pbstrPart) )
EXTERN_C const IID IID_IHTMLPainterOverlay;
    typedef struct IHTMLPainterOverlayVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPainterOverlay * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPainterOverlay * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPainterOverlay * This);
        HRESULT ( STDMETHODCALLTYPE *OnMove )(
            __RPC__in IHTMLPainterOverlay * This,
                       RECT rcDevice);
        END_INTERFACE
    } IHTMLPainterOverlayVtbl;
    interface IHTMLPainterOverlay
    {
        CONST_VTBL struct IHTMLPainterOverlayVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> OnMove(This,rcDevice) )
EXTERN_C const IID IID_IHTMLIPrintCollection;
    typedef struct IHTMLIPrintCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLIPrintCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLIPrintCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLIPrintCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLIPrintCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLIPrintCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLIPrintCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLIPrintCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *get_length )(
            __RPC__in IHTMLIPrintCollection * This,
                                __RPC__out long *p);
                                                HRESULT ( STDMETHODCALLTYPE *get__newEnum )(
            __RPC__in IHTMLIPrintCollection * This,
                                __RPC__deref_out_opt IUnknown **p);
                   HRESULT ( STDMETHODCALLTYPE *item )(
            __RPC__in IHTMLIPrintCollection * This,
                       long index,
                                __RPC__deref_out_opt IUnknown **ppIPrint);
        END_INTERFACE
    } IHTMLIPrintCollectionVtbl;
    interface IHTMLIPrintCollection
    {
        CONST_VTBL struct IHTMLIPrintCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_length(This,p) )
    ( (This)->lpVtbl -> get__newEnum(This,p) )
    ( (This)->lpVtbl -> item(This,index,ppIPrint) )
EXTERN_C const IID IID_IEnumPrivacyRecords;
    typedef struct IEnumPrivacyRecordsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IEnumPrivacyRecords * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IEnumPrivacyRecords * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IEnumPrivacyRecords * This);
        HRESULT ( STDMETHODCALLTYPE *Reset )(
            __RPC__in IEnumPrivacyRecords * This);
        HRESULT ( STDMETHODCALLTYPE *GetSize )(
            __RPC__in IEnumPrivacyRecords * This,
                        __RPC__out ULONG *pSize);
        HRESULT ( STDMETHODCALLTYPE *GetPrivacyImpacted )(
            __RPC__in IEnumPrivacyRecords * This,
                        __RPC__out BOOL *pState);
        HRESULT ( STDMETHODCALLTYPE *Next )(
            __RPC__in IEnumPrivacyRecords * This,
                        __RPC__deref_out_opt BSTR *pbstrUrl,
                        __RPC__deref_out_opt BSTR *pbstrPolicyRef,
                        __RPC__out LONG *pdwReserved,
                        __RPC__out DWORD *pdwPrivacyFlags);
        END_INTERFACE
    } IEnumPrivacyRecordsVtbl;
    interface IEnumPrivacyRecords
    {
        CONST_VTBL struct IEnumPrivacyRecordsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Reset(This) )
    ( (This)->lpVtbl -> GetSize(This,pSize) )
    ( (This)->lpVtbl -> GetPrivacyImpacted(This,pState) )
    ( (This)->lpVtbl -> Next(This,pbstrUrl,pbstrPolicyRef,pdwReserved,pdwPrivacyFlags) )
EXTERN_C const IID IID_IWPCBlockedUrls;
    typedef struct IWPCBlockedUrlsVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IWPCBlockedUrls * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IWPCBlockedUrls * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IWPCBlockedUrls * This);
        HRESULT ( STDMETHODCALLTYPE *GetCount )(
            __RPC__in IWPCBlockedUrls * This,
                        __RPC__out DWORD *pdwCount);
        HRESULT ( STDMETHODCALLTYPE *GetUrl )(
            __RPC__in IWPCBlockedUrls * This,
                       DWORD dwIdx,
                        __RPC__deref_out_opt BSTR *pbstrUrl);
        END_INTERFACE
    } IWPCBlockedUrlsVtbl;
    interface IWPCBlockedUrls
    {
        CONST_VTBL struct IWPCBlockedUrlsVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetCount(This,pdwCount) )
    ( (This)->lpVtbl -> GetUrl(This,dwIdx,pbstrUrl) )
EXTERN_C const IID IID_IHTMLDOMConstructorCollection;
    typedef struct IHTMLDOMConstructorCollectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDOMConstructorCollection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDOMConstructorCollection * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDOMConstructorCollection * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_Attr )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_BehaviorUrnsCollection )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_BookmarkCollection )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_CompatibleInfo )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_CompatibleInfoCollection )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_ControlRangeCollection )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_CSSCurrentStyleDeclaration )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_CSSRuleList )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_CSSRuleStyleDeclaration )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_CSSStyleDeclaration )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_CSSStyleRule )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_CSSStyleSheet )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_DataTransfer )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_DOMImplementation )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Element )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Event )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_History )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTCElementBehaviorDefaults )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLAnchorElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLAreaElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLAreasCollection )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLBaseElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLBaseFontElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLBGSoundElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLBlockElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLBodyElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLBRElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLButtonElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLCollection )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLCommentElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLDDElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLDivElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLDocument )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLDListElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLDTElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLEmbedElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLFieldSetElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLFontElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLFormElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLFrameElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLFrameSetElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLGenericElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLHeadElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLHeadingElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLHRElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLHtmlElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLIFrameElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLImageElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLInputElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLIsIndexElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLLabelElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLLegendElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLLIElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLLinkElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLMapElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLMarqueeElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLMetaElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLModelessDialog )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLNamespaceInfo )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLNamespaceInfoCollection )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLNextIdElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLNoShowElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLObjectElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLOListElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLOptionElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLParagraphElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLParamElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLPhraseElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLPluginsCollection )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLPopup )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLScriptElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLSelectElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLSpanElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLStyleElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLTableCaptionElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLTableCellElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLTableColElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLTableElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLTableRowElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLTableSectionElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLTextAreaElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLTextElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLTitleElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLUListElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_HTMLUnknownElement )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Image )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Location )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_NamedNodeMap )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Navigator )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_NodeList )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Option )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Screen )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Selection )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_StaticNodeList )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Storage )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_StyleSheetList )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_StyleSheetPage )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_StyleSheetPageList )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Text )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_TextRange )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_TextRangeCollection )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_TextRectangle )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_TextRectangleList )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_Window )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_XDomainRequest )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
                            HRESULT ( STDMETHODCALLTYPE *get_XMLHttpRequest )(
            __RPC__in IHTMLDOMConstructorCollection * This,
                                __RPC__deref_out_opt IDispatch **p);
        END_INTERFACE
    } IHTMLDOMConstructorCollectionVtbl;
    interface IHTMLDOMConstructorCollection
    {
        CONST_VTBL struct IHTMLDOMConstructorCollectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_Attr(This,p) )
    ( (This)->lpVtbl -> get_BehaviorUrnsCollection(This,p) )
    ( (This)->lpVtbl -> get_BookmarkCollection(This,p) )
    ( (This)->lpVtbl -> get_CompatibleInfo(This,p) )
    ( (This)->lpVtbl -> get_CompatibleInfoCollection(This,p) )
    ( (This)->lpVtbl -> get_ControlRangeCollection(This,p) )
    ( (This)->lpVtbl -> get_CSSCurrentStyleDeclaration(This,p) )
    ( (This)->lpVtbl -> get_CSSRuleList(This,p) )
    ( (This)->lpVtbl -> get_CSSRuleStyleDeclaration(This,p) )
    ( (This)->lpVtbl -> get_CSSStyleDeclaration(This,p) )
    ( (This)->lpVtbl -> get_CSSStyleRule(This,p) )
    ( (This)->lpVtbl -> get_CSSStyleSheet(This,p) )
    ( (This)->lpVtbl -> get_DataTransfer(This,p) )
    ( (This)->lpVtbl -> get_DOMImplementation(This,p) )
    ( (This)->lpVtbl -> get_Element(This,p) )
    ( (This)->lpVtbl -> get_Event(This,p) )
    ( (This)->lpVtbl -> get_History(This,p) )
    ( (This)->lpVtbl -> get_HTCElementBehaviorDefaults(This,p) )
    ( (This)->lpVtbl -> get_HTMLAnchorElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLAreaElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLAreasCollection(This,p) )
    ( (This)->lpVtbl -> get_HTMLBaseElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLBaseFontElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLBGSoundElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLBlockElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLBodyElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLBRElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLButtonElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLCollection(This,p) )
    ( (This)->lpVtbl -> get_HTMLCommentElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLDDElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLDivElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLDocument(This,p) )
    ( (This)->lpVtbl -> get_HTMLDListElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLDTElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLEmbedElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLFieldSetElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLFontElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLFormElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLFrameElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLFrameSetElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLGenericElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLHeadElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLHeadingElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLHRElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLHtmlElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLIFrameElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLImageElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLInputElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLIsIndexElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLLabelElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLLegendElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLLIElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLLinkElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLMapElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLMarqueeElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLMetaElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLModelessDialog(This,p) )
    ( (This)->lpVtbl -> get_HTMLNamespaceInfo(This,p) )
    ( (This)->lpVtbl -> get_HTMLNamespaceInfoCollection(This,p) )
    ( (This)->lpVtbl -> get_HTMLNextIdElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLNoShowElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLObjectElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLOListElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLOptionElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLParagraphElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLParamElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLPhraseElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLPluginsCollection(This,p) )
    ( (This)->lpVtbl -> get_HTMLPopup(This,p) )
    ( (This)->lpVtbl -> get_HTMLScriptElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLSelectElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLSpanElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLStyleElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLTableCaptionElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLTableCellElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLTableColElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLTableElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLTableRowElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLTableSectionElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLTextAreaElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLTextElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLTitleElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLUListElement(This,p) )
    ( (This)->lpVtbl -> get_HTMLUnknownElement(This,p) )
    ( (This)->lpVtbl -> get_Image(This,p) )
    ( (This)->lpVtbl -> get_Location(This,p) )
    ( (This)->lpVtbl -> get_NamedNodeMap(This,p) )
    ( (This)->lpVtbl -> get_Navigator(This,p) )
    ( (This)->lpVtbl -> get_NodeList(This,p) )
    ( (This)->lpVtbl -> get_Option(This,p) )
    ( (This)->lpVtbl -> get_Screen(This,p) )
    ( (This)->lpVtbl -> get_Selection(This,p) )
    ( (This)->lpVtbl -> get_StaticNodeList(This,p) )
    ( (This)->lpVtbl -> get_Storage(This,p) )
    ( (This)->lpVtbl -> get_StyleSheetList(This,p) )
    ( (This)->lpVtbl -> get_StyleSheetPage(This,p) )
    ( (This)->lpVtbl -> get_StyleSheetPageList(This,p) )
    ( (This)->lpVtbl -> get_Text(This,p) )
    ( (This)->lpVtbl -> get_TextRange(This,p) )
    ( (This)->lpVtbl -> get_TextRangeCollection(This,p) )
    ( (This)->lpVtbl -> get_TextRectangle(This,p) )
    ( (This)->lpVtbl -> get_TextRectangleList(This,p) )
    ( (This)->lpVtbl -> get_Window(This,p) )
    ( (This)->lpVtbl -> get_XDomainRequest(This,p) )
    ( (This)->lpVtbl -> get_XMLHttpRequest(This,p) )
EXTERN_C const IID IID_IHTMLDialog;
    typedef struct IHTMLDialogVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDialog * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDialog * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDialog * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDialog * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDialog * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDialog * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDialog * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                      HRESULT ( STDMETHODCALLTYPE *put_dialogTop )(
            __RPC__in IHTMLDialog * This,
                       VARIANT v);
                                      HRESULT ( STDMETHODCALLTYPE *get_dialogTop )(
            __RPC__in IHTMLDialog * This,
                                __RPC__out VARIANT *p);
                                      HRESULT ( STDMETHODCALLTYPE *put_dialogLeft )(
            __RPC__in IHTMLDialog * This,
                       VARIANT v);
                                      HRESULT ( STDMETHODCALLTYPE *get_dialogLeft )(
            __RPC__in IHTMLDialog * This,
                                __RPC__out VARIANT *p);
                                      HRESULT ( STDMETHODCALLTYPE *put_dialogWidth )(
            __RPC__in IHTMLDialog * This,
                       VARIANT v);
                                      HRESULT ( STDMETHODCALLTYPE *get_dialogWidth )(
            __RPC__in IHTMLDialog * This,
                                __RPC__out VARIANT *p);
                                      HRESULT ( STDMETHODCALLTYPE *put_dialogHeight )(
            __RPC__in IHTMLDialog * This,
                       VARIANT v);
                                      HRESULT ( STDMETHODCALLTYPE *get_dialogHeight )(
            __RPC__in IHTMLDialog * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_dialogArguments )(
            __RPC__in IHTMLDialog * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_menuArguments )(
            __RPC__in IHTMLDialog * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *put_returnValue )(
            __RPC__in IHTMLDialog * This,
                       VARIANT v);
                            HRESULT ( STDMETHODCALLTYPE *get_returnValue )(
            __RPC__in IHTMLDialog * This,
                                __RPC__out VARIANT *p);
                   HRESULT ( STDMETHODCALLTYPE *close )(
            __RPC__in IHTMLDialog * This);
                   HRESULT ( STDMETHODCALLTYPE *toString )(
            __RPC__in IHTMLDialog * This,
                                __RPC__deref_out_opt BSTR *String);
        END_INTERFACE
    } IHTMLDialogVtbl;
    interface IHTMLDialog
    {
        CONST_VTBL struct IHTMLDialogVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_dialogTop(This,v) )
    ( (This)->lpVtbl -> get_dialogTop(This,p) )
    ( (This)->lpVtbl -> put_dialogLeft(This,v) )
    ( (This)->lpVtbl -> get_dialogLeft(This,p) )
    ( (This)->lpVtbl -> put_dialogWidth(This,v) )
    ( (This)->lpVtbl -> get_dialogWidth(This,p) )
    ( (This)->lpVtbl -> put_dialogHeight(This,v) )
    ( (This)->lpVtbl -> get_dialogHeight(This,p) )
    ( (This)->lpVtbl -> get_dialogArguments(This,p) )
    ( (This)->lpVtbl -> get_menuArguments(This,p) )
    ( (This)->lpVtbl -> put_returnValue(This,v) )
    ( (This)->lpVtbl -> get_returnValue(This,p) )
    ( (This)->lpVtbl -> close(This) )
    ( (This)->lpVtbl -> toString(This,String) )
EXTERN_C const IID IID_IHTMLDialog2;
    typedef struct IHTMLDialog2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDialog2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDialog2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDialog2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDialog2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDialog2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDialog2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDialog2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *put_status )(
            __RPC__in IHTMLDialog2 * This,
                       __RPC__in BSTR v);
                                    HRESULT ( STDMETHODCALLTYPE *get_status )(
            __RPC__in IHTMLDialog2 * This,
                                __RPC__deref_out_opt BSTR *p);
                                    HRESULT ( STDMETHODCALLTYPE *put_resizable )(
            __RPC__in IHTMLDialog2 * This,
                       __RPC__in BSTR v);
                                    HRESULT ( STDMETHODCALLTYPE *get_resizable )(
            __RPC__in IHTMLDialog2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLDialog2Vtbl;
    interface IHTMLDialog2
    {
        CONST_VTBL struct IHTMLDialog2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_status(This,v) )
    ( (This)->lpVtbl -> get_status(This,p) )
    ( (This)->lpVtbl -> put_resizable(This,v) )
    ( (This)->lpVtbl -> get_resizable(This,p) )
EXTERN_C const IID IID_IHTMLDialog3;
    typedef struct IHTMLDialog3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLDialog3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLDialog3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLDialog3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLDialog3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLDialog3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLDialog3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLDialog3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                                    HRESULT ( STDMETHODCALLTYPE *put_unadorned )(
            __RPC__in IHTMLDialog3 * This,
                       __RPC__in BSTR v);
                                    HRESULT ( STDMETHODCALLTYPE *get_unadorned )(
            __RPC__in IHTMLDialog3 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_dialogHide )(
            __RPC__in IHTMLDialog3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_dialogHide )(
            __RPC__in IHTMLDialog3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLDialog3Vtbl;
    interface IHTMLDialog3
    {
        CONST_VTBL struct IHTMLDialog3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_unadorned(This,v) )
    ( (This)->lpVtbl -> get_unadorned(This,p) )
    ( (This)->lpVtbl -> put_dialogHide(This,v) )
    ( (This)->lpVtbl -> get_dialogHide(This,p) )
EXTERN_C const IID IID_IHTMLModelessInit;
    typedef struct IHTMLModelessInitVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLModelessInit * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLModelessInit * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLModelessInit * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLModelessInit * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLModelessInit * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLModelessInit * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLModelessInit * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *get_parameters )(
            __RPC__in IHTMLModelessInit * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_optionString )(
            __RPC__in IHTMLModelessInit * This,
                                __RPC__out VARIANT *p);
                            HRESULT ( STDMETHODCALLTYPE *get_moniker )(
            __RPC__in IHTMLModelessInit * This,
                                __RPC__deref_out_opt IUnknown **p);
                            HRESULT ( STDMETHODCALLTYPE *get_document )(
            __RPC__in IHTMLModelessInit * This,
                                __RPC__deref_out_opt IUnknown **p);
        END_INTERFACE
    } IHTMLModelessInitVtbl;
    interface IHTMLModelessInit
    {
        CONST_VTBL struct IHTMLModelessInitVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> get_parameters(This,p) )
    ( (This)->lpVtbl -> get_optionString(This,p) )
    ( (This)->lpVtbl -> get_moniker(This,p) )
    ( (This)->lpVtbl -> get_document(This,p) )
EXTERN_C const CLSID CLSID_ThreadDialogProcParam;
class DECLSPEC_UUID("3050f5eb-98b5-11cf-bb82-00aa00bdce0b")
ThreadDialogProcParam;
EXTERN_C const CLSID CLSID_HTMLDialog;
class DECLSPEC_UUID("3050f28a-98b5-11cf-bb82-00aa00bdce0b")
HTMLDialog;
EXTERN_C const IID IID_IHTMLPopup;
    typedef struct IHTMLPopupVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLPopup * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLPopup * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLPopup * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLPopup * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLPopup * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLPopup * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLPopup * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                   HRESULT ( STDMETHODCALLTYPE *show )(
            __RPC__in IHTMLPopup * This,
                       long x,
                       long y,
                       long w,
                       long h,
                       __RPC__in VARIANT *pElement);
                   HRESULT ( STDMETHODCALLTYPE *hide )(
            __RPC__in IHTMLPopup * This);
                            HRESULT ( STDMETHODCALLTYPE *get_document )(
            __RPC__in IHTMLPopup * This,
                                __RPC__deref_out_opt IHTMLDocument **p);
                            HRESULT ( STDMETHODCALLTYPE *get_isOpen )(
            __RPC__in IHTMLPopup * This,
                                __RPC__out VARIANT_BOOL *p);
        END_INTERFACE
    } IHTMLPopupVtbl;
    interface IHTMLPopup
    {
        CONST_VTBL struct IHTMLPopupVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> show(This,x,y,w,h,pElement) )
    ( (This)->lpVtbl -> hide(This) )
    ( (This)->lpVtbl -> get_document(This,p) )
    ( (This)->lpVtbl -> get_isOpen(This,p) )
EXTERN_C const IID DIID_DispHTMLPopup;
    typedef struct DispHTMLPopupVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLPopup * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLPopup * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLPopup * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLPopup * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLPopup * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLPopup * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLPopup * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLPopupVtbl;
    interface DispHTMLPopup
    {
        CONST_VTBL struct DispHTMLPopupVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLPopup;
class DECLSPEC_UUID("3050f667-98b5-11cf-bb82-00aa00bdce0b")
HTMLPopup;
EXTERN_C const IID IID_IHTMLAppBehavior;
    typedef struct IHTMLAppBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAppBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAppBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAppBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAppBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAppBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_applicationName )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_applicationName )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_version )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_version )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_icon )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_icon )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_singleInstance )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_singleInstance )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_minimizeButton )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_minimizeButton )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_maximizeButton )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_maximizeButton )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_border )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_border )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_borderStyle )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_borderStyle )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_sysMenu )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_sysMenu )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_caption )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_caption )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_windowState )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_windowState )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_showInTaskBar )(
            __RPC__in IHTMLAppBehavior * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_showInTaskBar )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *get_commandLine )(
            __RPC__in IHTMLAppBehavior * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLAppBehaviorVtbl;
    interface IHTMLAppBehavior
    {
        CONST_VTBL struct IHTMLAppBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_applicationName(This,v) )
    ( (This)->lpVtbl -> get_applicationName(This,p) )
    ( (This)->lpVtbl -> put_version(This,v) )
    ( (This)->lpVtbl -> get_version(This,p) )
    ( (This)->lpVtbl -> put_icon(This,v) )
    ( (This)->lpVtbl -> get_icon(This,p) )
    ( (This)->lpVtbl -> put_singleInstance(This,v) )
    ( (This)->lpVtbl -> get_singleInstance(This,p) )
    ( (This)->lpVtbl -> put_minimizeButton(This,v) )
    ( (This)->lpVtbl -> get_minimizeButton(This,p) )
    ( (This)->lpVtbl -> put_maximizeButton(This,v) )
    ( (This)->lpVtbl -> get_maximizeButton(This,p) )
    ( (This)->lpVtbl -> put_border(This,v) )
    ( (This)->lpVtbl -> get_border(This,p) )
    ( (This)->lpVtbl -> put_borderStyle(This,v) )
    ( (This)->lpVtbl -> get_borderStyle(This,p) )
    ( (This)->lpVtbl -> put_sysMenu(This,v) )
    ( (This)->lpVtbl -> get_sysMenu(This,p) )
    ( (This)->lpVtbl -> put_caption(This,v) )
    ( (This)->lpVtbl -> get_caption(This,p) )
    ( (This)->lpVtbl -> put_windowState(This,v) )
    ( (This)->lpVtbl -> get_windowState(This,p) )
    ( (This)->lpVtbl -> put_showInTaskBar(This,v) )
    ( (This)->lpVtbl -> get_showInTaskBar(This,p) )
    ( (This)->lpVtbl -> get_commandLine(This,p) )
EXTERN_C const IID IID_IHTMLAppBehavior2;
    typedef struct IHTMLAppBehavior2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAppBehavior2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAppBehavior2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAppBehavior2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAppBehavior2 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAppBehavior2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAppBehavior2 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAppBehavior2 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_contextMenu )(
            __RPC__in IHTMLAppBehavior2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_contextMenu )(
            __RPC__in IHTMLAppBehavior2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_innerBorder )(
            __RPC__in IHTMLAppBehavior2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_innerBorder )(
            __RPC__in IHTMLAppBehavior2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_scroll )(
            __RPC__in IHTMLAppBehavior2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_scroll )(
            __RPC__in IHTMLAppBehavior2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_scrollFlat )(
            __RPC__in IHTMLAppBehavior2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_scrollFlat )(
            __RPC__in IHTMLAppBehavior2 * This,
                                __RPC__deref_out_opt BSTR *p);
                            HRESULT ( STDMETHODCALLTYPE *put_selection )(
            __RPC__in IHTMLAppBehavior2 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_selection )(
            __RPC__in IHTMLAppBehavior2 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLAppBehavior2Vtbl;
    interface IHTMLAppBehavior2
    {
        CONST_VTBL struct IHTMLAppBehavior2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_contextMenu(This,v) )
    ( (This)->lpVtbl -> get_contextMenu(This,p) )
    ( (This)->lpVtbl -> put_innerBorder(This,v) )
    ( (This)->lpVtbl -> get_innerBorder(This,p) )
    ( (This)->lpVtbl -> put_scroll(This,v) )
    ( (This)->lpVtbl -> get_scroll(This,p) )
    ( (This)->lpVtbl -> put_scrollFlat(This,v) )
    ( (This)->lpVtbl -> get_scrollFlat(This,p) )
    ( (This)->lpVtbl -> put_selection(This,v) )
    ( (This)->lpVtbl -> get_selection(This,p) )
EXTERN_C const IID IID_IHTMLAppBehavior3;
    typedef struct IHTMLAppBehavior3Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHTMLAppBehavior3 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHTMLAppBehavior3 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHTMLAppBehavior3 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in IHTMLAppBehavior3 * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in IHTMLAppBehavior3 * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in IHTMLAppBehavior3 * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IHTMLAppBehavior3 * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
                            HRESULT ( STDMETHODCALLTYPE *put_navigable )(
            __RPC__in IHTMLAppBehavior3 * This,
                       __RPC__in BSTR v);
                            HRESULT ( STDMETHODCALLTYPE *get_navigable )(
            __RPC__in IHTMLAppBehavior3 * This,
                                __RPC__deref_out_opt BSTR *p);
        END_INTERFACE
    } IHTMLAppBehavior3Vtbl;
    interface IHTMLAppBehavior3
    {
        CONST_VTBL struct IHTMLAppBehavior3Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
    ( (This)->lpVtbl -> put_navigable(This,v) )
    ( (This)->lpVtbl -> get_navigable(This,p) )
EXTERN_C const IID DIID_DispHTMLAppBehavior;
    typedef struct DispHTMLAppBehaviorVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispHTMLAppBehavior * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispHTMLAppBehavior * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispHTMLAppBehavior * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispHTMLAppBehavior * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispHTMLAppBehavior * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispHTMLAppBehavior * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispHTMLAppBehavior * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispHTMLAppBehaviorVtbl;
    interface DispHTMLAppBehavior
    {
        CONST_VTBL struct DispHTMLAppBehaviorVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLAppBehavior;
class DECLSPEC_UUID("3050f5cb-98b5-11cf-bb82-00aa00bdce0b")
HTMLAppBehavior;
EXTERN_C const CLSID CLSID_OldHTMLDocument;
class DECLSPEC_UUID("D48A6EC9-6A4A-11CF-94A7-444553540000")
OldHTMLDocument;
EXTERN_C const CLSID CLSID_OldHTMLFormElement;
class DECLSPEC_UUID("0D04D285-6BEC-11CF-8B97-00AA00476DA6")
OldHTMLFormElement;
EXTERN_C const IID DIID_DispIHTMLInputButtonElement;
    typedef struct DispIHTMLInputButtonElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispIHTMLInputButtonElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispIHTMLInputButtonElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispIHTMLInputButtonElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispIHTMLInputButtonElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispIHTMLInputButtonElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispIHTMLInputButtonElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispIHTMLInputButtonElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispIHTMLInputButtonElementVtbl;
    interface DispIHTMLInputButtonElement
    {
        CONST_VTBL struct DispIHTMLInputButtonElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLInputButtonElement;
class DECLSPEC_UUID("3050f2b4-98b5-11cf-bb82-00aa00bdce0b")
HTMLInputButtonElement;
EXTERN_C const IID DIID_DispIHTMLInputTextElement;
    typedef struct DispIHTMLInputTextElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispIHTMLInputTextElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispIHTMLInputTextElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispIHTMLInputTextElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispIHTMLInputTextElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispIHTMLInputTextElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispIHTMLInputTextElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispIHTMLInputTextElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispIHTMLInputTextElementVtbl;
    interface DispIHTMLInputTextElement
    {
        CONST_VTBL struct DispIHTMLInputTextElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLInputTextElement;
class DECLSPEC_UUID("3050f2ab-98b5-11cf-bb82-00aa00bdce0b")
HTMLInputTextElement;
EXTERN_C const IID DIID_DispIHTMLInputFileElement;
    typedef struct DispIHTMLInputFileElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispIHTMLInputFileElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispIHTMLInputFileElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispIHTMLInputFileElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispIHTMLInputFileElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispIHTMLInputFileElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispIHTMLInputFileElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispIHTMLInputFileElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispIHTMLInputFileElementVtbl;
    interface DispIHTMLInputFileElement
    {
        CONST_VTBL struct DispIHTMLInputFileElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLInputFileElement;
class DECLSPEC_UUID("3050f2ae-98b5-11cf-bb82-00aa00bdce0b")
HTMLInputFileElement;
EXTERN_C const IID DIID_DispIHTMLOptionButtonElement;
    typedef struct DispIHTMLOptionButtonElementVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispIHTMLOptionButtonElement * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispIHTMLOptionButtonElement * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispIHTMLOptionButtonElement * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispIHTMLOptionButtonElement * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispIHTMLOptionButtonElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispIHTMLOptionButtonElement * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispIHTMLOptionButtonElement * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispIHTMLOptionButtonElementVtbl;
    interface DispIHTMLOptionButtonElement
    {
        CONST_VTBL struct DispIHTMLOptionButtonElementVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLOptionButtonElement;
class DECLSPEC_UUID("3050f2be-98b5-11cf-bb82-00aa00bdce0b")
HTMLOptionButtonElement;
EXTERN_C const IID DIID_DispIHTMLInputImage;
    typedef struct DispIHTMLInputImageVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in DispIHTMLInputImage * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in DispIHTMLInputImage * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in DispIHTMLInputImage * This);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            __RPC__in DispIHTMLInputImage * This,
                        __RPC__out UINT *pctinfo);
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            __RPC__in DispIHTMLInputImage * This,
                       UINT iTInfo,
                       LCID lcid,
                        __RPC__deref_out_opt ITypeInfo **ppTInfo);
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            __RPC__in DispIHTMLInputImage * This,
                       __RPC__in REFIID riid,
                                __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
                              __RPC__in_range(0,16384) UINT cNames,
                       LCID lcid,
                                 __RPC__out_ecount_full(cNames) DISPID *rgDispId);
                      HRESULT ( STDMETHODCALLTYPE *Invoke )(
            DispIHTMLInputImage * This,
            _In_ DISPID dispIdMember,
            _In_ REFIID riid,
            _In_ LCID lcid,
            _In_ WORD wFlags,
            _In_ DISPPARAMS *pDispParams,
            _Out_opt_ VARIANT *pVarResult,
            _Out_opt_ EXCEPINFO *pExcepInfo,
            _Out_opt_ UINT *puArgErr);
        END_INTERFACE
    } DispIHTMLInputImageVtbl;
    interface DispIHTMLInputImage
    {
        CONST_VTBL struct DispIHTMLInputImageVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) )
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) )
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) )
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) )
EXTERN_C const CLSID CLSID_HTMLInputImage;
class DECLSPEC_UUID("3050f2c4-98b5-11cf-bb82-00aa00bdce0b")
HTMLInputImage;
EXTERN_C const IID IID_IElementNamespace;
    typedef struct IElementNamespaceVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementNamespace * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementNamespace * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementNamespace * This);
        HRESULT ( STDMETHODCALLTYPE *AddTag )(
            __RPC__in IElementNamespace * This,
                       __RPC__in BSTR bstrTagName,
                       LONG lFlags);
        END_INTERFACE
    } IElementNamespaceVtbl;
    interface IElementNamespace
    {
        CONST_VTBL struct IElementNamespaceVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> AddTag(This,bstrTagName,lFlags) )
EXTERN_C const IID IID_IElementNamespaceTable;
    typedef struct IElementNamespaceTableVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementNamespaceTable * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementNamespaceTable * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementNamespaceTable * This);
        HRESULT ( STDMETHODCALLTYPE *AddNamespace )(
            __RPC__in IElementNamespaceTable * This,
                       __RPC__in BSTR bstrNamespace,
                       __RPC__in BSTR bstrUrn,
                       LONG lFlags,
                       __RPC__in VARIANT *pvarFactory);
        END_INTERFACE
    } IElementNamespaceTableVtbl;
    interface IElementNamespaceTable
    {
        CONST_VTBL struct IElementNamespaceTableVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> AddNamespace(This,bstrNamespace,bstrUrn,lFlags,pvarFactory) )
EXTERN_C const IID IID_IElementNamespaceFactory;
    typedef struct IElementNamespaceFactoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementNamespaceFactory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementNamespaceFactory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementNamespaceFactory * This);
        HRESULT ( STDMETHODCALLTYPE *Create )(
            __RPC__in IElementNamespaceFactory * This,
                       __RPC__in_opt IElementNamespace *pNamespace);
        END_INTERFACE
    } IElementNamespaceFactoryVtbl;
    interface IElementNamespaceFactory
    {
        CONST_VTBL struct IElementNamespaceFactoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Create(This,pNamespace) )
EXTERN_C const IID IID_IElementNamespaceFactory2;
    typedef struct IElementNamespaceFactory2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementNamespaceFactory2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementNamespaceFactory2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementNamespaceFactory2 * This);
        HRESULT ( STDMETHODCALLTYPE *Create )(
            __RPC__in IElementNamespaceFactory2 * This,
                       __RPC__in_opt IElementNamespace *pNamespace);
        HRESULT ( STDMETHODCALLTYPE *CreateWithImplementation )(
            __RPC__in IElementNamespaceFactory2 * This,
                       __RPC__in_opt IElementNamespace *pNamespace,
                       __RPC__in BSTR bstrImplementation);
        END_INTERFACE
    } IElementNamespaceFactory2Vtbl;
    interface IElementNamespaceFactory2
    {
        CONST_VTBL struct IElementNamespaceFactory2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Create(This,pNamespace) )
    ( (This)->lpVtbl -> CreateWithImplementation(This,pNamespace,bstrImplementation) )
EXTERN_C const IID IID_IElementNamespaceFactoryCallback;
    typedef struct IElementNamespaceFactoryCallbackVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementNamespaceFactoryCallback * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementNamespaceFactoryCallback * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementNamespaceFactoryCallback * This);
        HRESULT ( STDMETHODCALLTYPE *Resolve )(
            __RPC__in IElementNamespaceFactoryCallback * This,
                       __RPC__in BSTR bstrNamespace,
                       __RPC__in BSTR bstrTagName,
                       __RPC__in BSTR bstrAttrs,
                       __RPC__in_opt IElementNamespace *pNamespace);
        END_INTERFACE
    } IElementNamespaceFactoryCallbackVtbl;
    interface IElementNamespaceFactoryCallback
    {
        CONST_VTBL struct IElementNamespaceFactoryCallbackVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Resolve(This,bstrNamespace,bstrTagName,bstrAttrs,pNamespace) )
EXTERN_C const IID IID_IElementBehaviorSiteOM2;
    typedef struct IElementBehaviorSiteOM2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorSiteOM2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorSiteOM2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorSiteOM2 * This);
        HRESULT ( STDMETHODCALLTYPE *RegisterEvent )(
            __RPC__in IElementBehaviorSiteOM2 * This,
                       __RPC__in LPOLESTR pchEvent,
                       LONG lFlags,
                                __RPC__out LONG *plCookie);
        HRESULT ( STDMETHODCALLTYPE *GetEventCookie )(
            __RPC__in IElementBehaviorSiteOM2 * This,
                       __RPC__in LPOLESTR pchEvent,
                                __RPC__out LONG *plCookie);
        HRESULT ( STDMETHODCALLTYPE *FireEvent )(
            __RPC__in IElementBehaviorSiteOM2 * This,
                       LONG lCookie,
                       __RPC__in_opt IHTMLEventObj *pEventObject);
        HRESULT ( STDMETHODCALLTYPE *CreateEventObject )(
            __RPC__in IElementBehaviorSiteOM2 * This,
                                __RPC__deref_out_opt IHTMLEventObj **ppEventObject);
        HRESULT ( STDMETHODCALLTYPE *RegisterName )(
            __RPC__in IElementBehaviorSiteOM2 * This,
                       __RPC__in LPOLESTR pchName);
        HRESULT ( STDMETHODCALLTYPE *RegisterUrn )(
            __RPC__in IElementBehaviorSiteOM2 * This,
                       __RPC__in LPOLESTR pchUrn);
        HRESULT ( STDMETHODCALLTYPE *GetDefaults )(
            __RPC__in IElementBehaviorSiteOM2 * This,
                                __RPC__deref_out_opt IHTMLElementDefaults **ppDefaults);
        END_INTERFACE
    } IElementBehaviorSiteOM2Vtbl;
    interface IElementBehaviorSiteOM2
    {
        CONST_VTBL struct IElementBehaviorSiteOM2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> RegisterEvent(This,pchEvent,lFlags,plCookie) )
    ( (This)->lpVtbl -> GetEventCookie(This,pchEvent,plCookie) )
    ( (This)->lpVtbl -> FireEvent(This,lCookie,pEventObject) )
    ( (This)->lpVtbl -> CreateEventObject(This,ppEventObject) )
    ( (This)->lpVtbl -> RegisterName(This,pchName) )
    ( (This)->lpVtbl -> RegisterUrn(This,pchUrn) )
    ( (This)->lpVtbl -> GetDefaults(This,ppDefaults) )
EXTERN_C const IID IID_IElementBehaviorCategory;
    typedef struct IElementBehaviorCategoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorCategory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorCategory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorCategory * This);
        HRESULT ( STDMETHODCALLTYPE *GetCategory )(
            __RPC__in IElementBehaviorCategory * This,
                                __RPC__deref_out_opt LPOLESTR *ppchCategory);
        END_INTERFACE
    } IElementBehaviorCategoryVtbl;
    interface IElementBehaviorCategory
    {
        CONST_VTBL struct IElementBehaviorCategoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetCategory(This,ppchCategory) )
EXTERN_C const IID IID_IElementBehaviorSiteCategory;
    typedef struct IElementBehaviorSiteCategoryVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorSiteCategory * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorSiteCategory * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorSiteCategory * This);
        HRESULT ( STDMETHODCALLTYPE *GetRelatedBehaviors )(
            __RPC__in IElementBehaviorSiteCategory * This,
                       LONG lDirection,
                       __RPC__in LPOLESTR pchCategory,
                                __RPC__deref_out_opt IEnumUnknown **ppEnumerator);
        END_INTERFACE
    } IElementBehaviorSiteCategoryVtbl;
    interface IElementBehaviorSiteCategory
    {
        CONST_VTBL struct IElementBehaviorSiteCategoryVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetRelatedBehaviors(This,lDirection,pchCategory,ppEnumerator) )
EXTERN_C const IID IID_IElementBehaviorSubmit;
    typedef struct IElementBehaviorSubmitVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorSubmit * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorSubmit * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorSubmit * This);
        HRESULT ( STDMETHODCALLTYPE *GetSubmitInfo )(
            __RPC__in IElementBehaviorSubmit * This,
                       __RPC__in_opt IHTMLSubmitData *pSubmitData);
        HRESULT ( STDMETHODCALLTYPE *Reset )(
            __RPC__in IElementBehaviorSubmit * This);
        END_INTERFACE
    } IElementBehaviorSubmitVtbl;
    interface IElementBehaviorSubmit
    {
        CONST_VTBL struct IElementBehaviorSubmitVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetSubmitInfo(This,pSubmitData) )
    ( (This)->lpVtbl -> Reset(This) )
EXTERN_C const IID IID_IElementBehaviorFocus;
    typedef struct IElementBehaviorFocusVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorFocus * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorFocus * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorFocus * This);
        HRESULT ( STDMETHODCALLTYPE *GetFocusRect )(
            __RPC__in IElementBehaviorFocus * This,
                       __RPC__in RECT *pRect);
        END_INTERFACE
    } IElementBehaviorFocusVtbl;
    interface IElementBehaviorFocus
    {
        CONST_VTBL struct IElementBehaviorFocusVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetFocusRect(This,pRect) )
EXTERN_C const IID IID_IElementBehaviorLayout;
    typedef struct IElementBehaviorLayoutVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorLayout * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorLayout * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorLayout * This);
        HRESULT ( STDMETHODCALLTYPE *GetSize )(
            __RPC__in IElementBehaviorLayout * This,
                       LONG dwFlags,
                       SIZE sizeContent,
                            __RPC__inout POINT *pptTranslateBy,
                            __RPC__inout POINT *pptTopLeft,
                            __RPC__inout SIZE *psizeProposed);
        HRESULT ( STDMETHODCALLTYPE *GetLayoutInfo )(
            __RPC__in IElementBehaviorLayout * This,
                                __RPC__out LONG *plLayoutInfo);
        HRESULT ( STDMETHODCALLTYPE *GetPosition )(
            __RPC__in IElementBehaviorLayout * This,
                       LONG lFlags,
                            __RPC__inout POINT *pptTopLeft);
        HRESULT ( STDMETHODCALLTYPE *MapSize )(
            __RPC__in IElementBehaviorLayout * This,
                       __RPC__in SIZE *psizeIn,
                        __RPC__out RECT *prcOut);
        END_INTERFACE
    } IElementBehaviorLayoutVtbl;
    interface IElementBehaviorLayout
    {
        CONST_VTBL struct IElementBehaviorLayoutVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetSize(This,dwFlags,sizeContent,pptTranslateBy,pptTopLeft,psizeProposed) )
    ( (This)->lpVtbl -> GetLayoutInfo(This,plLayoutInfo) )
    ( (This)->lpVtbl -> GetPosition(This,lFlags,pptTopLeft) )
    ( (This)->lpVtbl -> MapSize(This,psizeIn,prcOut) )
EXTERN_C const IID IID_IElementBehaviorLayout2;
    typedef struct IElementBehaviorLayout2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorLayout2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorLayout2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorLayout2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetTextDescent )(
            __RPC__in IElementBehaviorLayout2 * This,
                        __RPC__out LONG *plDescent);
        END_INTERFACE
    } IElementBehaviorLayout2Vtbl;
    interface IElementBehaviorLayout2
    {
        CONST_VTBL struct IElementBehaviorLayout2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetTextDescent(This,plDescent) )
EXTERN_C const IID IID_IElementBehaviorSiteLayout;
    typedef struct IElementBehaviorSiteLayoutVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorSiteLayout * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorSiteLayout * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorSiteLayout * This);
        HRESULT ( STDMETHODCALLTYPE *InvalidateLayoutInfo )(
            __RPC__in IElementBehaviorSiteLayout * This);
        HRESULT ( STDMETHODCALLTYPE *InvalidateSize )(
            __RPC__in IElementBehaviorSiteLayout * This);
        HRESULT ( STDMETHODCALLTYPE *GetMediaResolution )(
            __RPC__in IElementBehaviorSiteLayout * This,
                                __RPC__out SIZE *psizeResolution);
        END_INTERFACE
    } IElementBehaviorSiteLayoutVtbl;
    interface IElementBehaviorSiteLayout
    {
        CONST_VTBL struct IElementBehaviorSiteLayoutVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> InvalidateLayoutInfo(This) )
    ( (This)->lpVtbl -> InvalidateSize(This) )
    ( (This)->lpVtbl -> GetMediaResolution(This,psizeResolution) )
EXTERN_C const IID IID_IElementBehaviorSiteLayout2;
    typedef struct IElementBehaviorSiteLayout2Vtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IElementBehaviorSiteLayout2 * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IElementBehaviorSiteLayout2 * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IElementBehaviorSiteLayout2 * This);
        HRESULT ( STDMETHODCALLTYPE *GetFontInfo )(
            __RPC__in IElementBehaviorSiteLayout2 * This,
                        __RPC__out LOGFONTW *plf);
        END_INTERFACE
    } IElementBehaviorSiteLayout2Vtbl;
    interface IElementBehaviorSiteLayout2
    {
        CONST_VTBL struct IElementBehaviorSiteLayout2Vtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetFontInfo(This,plf) )
EXTERN_C const IID IID_IHostBehaviorInit;
    typedef struct IHostBehaviorInitVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IHostBehaviorInit * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IHostBehaviorInit * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IHostBehaviorInit * This);
        HRESULT ( STDMETHODCALLTYPE *PopulateNamespaceTable )(
            __RPC__in IHostBehaviorInit * This);
        END_INTERFACE
    } IHostBehaviorInitVtbl;
    interface IHostBehaviorInit
    {
        CONST_VTBL struct IHostBehaviorInitVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> PopulateNamespaceTable(This) )
EXTERN_C const IID IID_ISurfacePresenter;
    typedef struct ISurfacePresenterVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ISurfacePresenter * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ISurfacePresenter * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ISurfacePresenter * This);
        HRESULT ( STDMETHODCALLTYPE *Present )(
            __RPC__in ISurfacePresenter * This,
                       UINT uBuffer,
                       __RPC__in RECT *pDirty);
        HRESULT ( STDMETHODCALLTYPE *GetBuffer )(
            __RPC__in ISurfacePresenter * This,
                       UINT backBufferIndex,
                       __RPC__in REFIID riid,
                                        __RPC__deref_out_opt void **ppBuffer);
        HRESULT ( STDMETHODCALLTYPE *IsCurrent )(
            __RPC__in ISurfacePresenter * This,
                                __RPC__out BOOL *pIsCurrent);
        END_INTERFACE
    } ISurfacePresenterVtbl;
    interface ISurfacePresenter
    {
        CONST_VTBL struct ISurfacePresenterVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> Present(This,uBuffer,pDirty) )
    ( (This)->lpVtbl -> GetBuffer(This,backBufferIndex,riid,ppBuffer) )
    ( (This)->lpVtbl -> IsCurrent(This,pIsCurrent) )
EXTERN_C const IID IID_IViewObjectPresentSite;
    typedef struct IViewObjectPresentSiteVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IViewObjectPresentSite * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IViewObjectPresentSite * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IViewObjectPresentSite * This);
        HRESULT ( STDMETHODCALLTYPE *CreateSurfacePresenter )(
            __RPC__in IViewObjectPresentSite * This,
                       __RPC__in_opt IUnknown *pDevice,
                       UINT width,
                       UINT height,
                       UINT backBufferCount,
                       DXGI_FORMAT format,
                       VIEW_OBJECT_ALPHA_MODE mode,
                                __RPC__deref_out_opt ISurfacePresenter **ppQueue);
        HRESULT ( STDMETHODCALLTYPE *IsHardwareComposition )(
            __RPC__in IViewObjectPresentSite * This,
                                __RPC__out BOOL *pIsHardwareComposition);
        HRESULT ( STDMETHODCALLTYPE *SetCompositionMode )(
            __RPC__in IViewObjectPresentSite * This,
                       VIEW_OBJECT_COMPOSITION_MODE mode);
        END_INTERFACE
    } IViewObjectPresentSiteVtbl;
    interface IViewObjectPresentSite
    {
        CONST_VTBL struct IViewObjectPresentSiteVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> CreateSurfacePresenter(This,pDevice,width,height,backBufferCount,format,mode,ppQueue) )
    ( (This)->lpVtbl -> IsHardwareComposition(This,pIsHardwareComposition) )
    ( (This)->lpVtbl -> SetCompositionMode(This,mode) )
EXTERN_C const IID IID_ICanvasPixelArrayData;
    typedef struct ICanvasPixelArrayDataVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ICanvasPixelArrayData * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ICanvasPixelArrayData * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ICanvasPixelArrayData * This);
        HRESULT ( STDMETHODCALLTYPE *GetBufferPointer )(
            __RPC__in ICanvasPixelArrayData * This,
                        __RPC__deref_out_opt BYTE **ppBuffer,
                        __RPC__out ULONG *pBufferLength);
        END_INTERFACE
    } ICanvasPixelArrayDataVtbl;
    interface ICanvasPixelArrayData
    {
        CONST_VTBL struct ICanvasPixelArrayDataVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetBufferPointer(This,ppBuffer,pBufferLength) )
EXTERN_C const IID IID_IViewObjectPrint;
    typedef struct IViewObjectPrintVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IViewObjectPrint * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IViewObjectPrint * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IViewObjectPrint * This);
        HRESULT ( STDMETHODCALLTYPE *GetPrintBitmap )(
            __RPC__in IViewObjectPrint * This,
                                __RPC__deref_out_opt IUnknown **ppPrintBitmap);
        END_INTERFACE
    } IViewObjectPrintVtbl;
    interface IViewObjectPrint
    {
        CONST_VTBL struct IViewObjectPrintVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> GetPrintBitmap(This,ppPrintBitmap) )
EXTERN_C const IID IID_IViewObjectPresentNotifySite;
    typedef struct IViewObjectPresentNotifySiteVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IViewObjectPresentNotifySite * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IViewObjectPresentNotifySite * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IViewObjectPresentNotifySite * This);
        HRESULT ( STDMETHODCALLTYPE *CreateSurfacePresenter )(
            __RPC__in IViewObjectPresentNotifySite * This,
                       __RPC__in_opt IUnknown *pDevice,
                       UINT width,
                       UINT height,
                       UINT backBufferCount,
                       DXGI_FORMAT format,
                       VIEW_OBJECT_ALPHA_MODE mode,
                                __RPC__deref_out_opt ISurfacePresenter **ppQueue);
        HRESULT ( STDMETHODCALLTYPE *IsHardwareComposition )(
            __RPC__in IViewObjectPresentNotifySite * This,
                                __RPC__out BOOL *pIsHardwareComposition);
        HRESULT ( STDMETHODCALLTYPE *SetCompositionMode )(
            __RPC__in IViewObjectPresentNotifySite * This,
                       VIEW_OBJECT_COMPOSITION_MODE mode);
        HRESULT ( STDMETHODCALLTYPE *RequestFrame )(
            __RPC__in IViewObjectPresentNotifySite * This);
        END_INTERFACE
    } IViewObjectPresentNotifySiteVtbl;
    interface IViewObjectPresentNotifySite
    {
        CONST_VTBL struct IViewObjectPresentNotifySiteVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> CreateSurfacePresenter(This,pDevice,width,height,backBufferCount,format,mode,ppQueue) )
    ( (This)->lpVtbl -> IsHardwareComposition(This,pIsHardwareComposition) )
    ( (This)->lpVtbl -> SetCompositionMode(This,mode) )
    ( (This)->lpVtbl -> RequestFrame(This) )
EXTERN_C const IID IID_IViewObjectPresentNotify;
    typedef struct IViewObjectPresentNotifyVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IViewObjectPresentNotify * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IViewObjectPresentNotify * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IViewObjectPresentNotify * This);
        HRESULT ( STDMETHODCALLTYPE *OnPreRender )(
            __RPC__in IViewObjectPresentNotify * This);
        END_INTERFACE
    } IViewObjectPresentNotifyVtbl;
    interface IViewObjectPresentNotify
    {
        CONST_VTBL struct IViewObjectPresentNotifyVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> OnPreRender(This) )
EXTERN_C const IID IID_ITrackingProtection;
    typedef struct ITrackingProtectionVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in ITrackingProtection * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in ITrackingProtection * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in ITrackingProtection * This);
        HRESULT ( STDMETHODCALLTYPE *EvaluateUrl )(
            __RPC__in ITrackingProtection * This,
                       __RPC__in BSTR bstrUrl,
                        __RPC__out BOOL *pfAllowed);
        HRESULT ( STDMETHODCALLTYPE *GetEnabled )(
            __RPC__in ITrackingProtection * This,
                        __RPC__out BOOL *pfEnabled);
        END_INTERFACE
    } ITrackingProtectionVtbl;
    interface ITrackingProtection
    {
        CONST_VTBL struct ITrackingProtectionVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> EvaluateUrl(This,bstrUrl,pfAllowed) )
    ( (This)->lpVtbl -> GetEnabled(This,pfEnabled) )
EXTERN_C const IID IID_IBFCacheable;
    typedef struct IBFCacheableVtbl
    {
        BEGIN_INTERFACE
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IBFCacheable * This,
                       __RPC__in REFIID riid,
            _COM_Outptr_ void **ppvObject);
        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IBFCacheable * This);
        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IBFCacheable * This);
        HRESULT ( STDMETHODCALLTYPE *EnterBFCache )(
            __RPC__in IBFCacheable * This);
        HRESULT ( STDMETHODCALLTYPE *ExitBFCache )(
            __RPC__in IBFCacheable * This);
        END_INTERFACE
    } IBFCacheableVtbl;
    interface IBFCacheable
    {
        CONST_VTBL struct IBFCacheableVtbl *lpVtbl;
    };
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )
    ( (This)->lpVtbl -> AddRef(This) )
    ( (This)->lpVtbl -> Release(This) )
    ( (This)->lpVtbl -> EnterBFCache(This) )
    ( (This)->lpVtbl -> ExitBFCache(This) )
#endif
extern RPC_IF_HANDLE __MIDL_itf_mshtml_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mshtml_0000_0004_v0_0_s_ifspec;
unsigned long __RPC_USER VARIANT_UserSize( __RPC__in unsigned long *, unsigned long , __RPC__in VARIANT * );
unsigned char * __RPC_USER VARIANT_UserMarshal( __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * );
unsigned char * __RPC_USER VARIANT_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * );
void __RPC_USER VARIANT_UserFree( __RPC__in unsigned long *, __RPC__in VARIANT * );
unsigned long __RPC_USER VARIANT_UserSize64( __RPC__in unsigned long *, unsigned long , __RPC__in VARIANT * );
unsigned char * __RPC_USER VARIANT_UserMarshal64( __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * );
unsigned char * __RPC_USER VARIANT_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * );
void __RPC_USER VARIANT_UserFree64( __RPC__in unsigned long *, __RPC__in VARIANT * );
}
