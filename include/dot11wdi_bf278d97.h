       
#include <winapifamily.h>
#pragma region Desktop Family
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#include <packon.h>
extern "C" {
#include <packoff.h>
typedef struct _WDI_MAC_ADDRESS
{
    UINT8 Address[6];
} WDI_MAC_ADDRESS, *PWDI_MAC_ADDRESS;
typedef const struct _WDI_MAC_ADDRESS * PCWDI_MAC_ADDRESS;
typedef UINT16 WDI_PORT_ID;
typedef struct _WDI_MESSAGE_HEADER
{
    WDI_PORT_ID PortId;
    UINT16 Reserved;
    NDIS_STATUS Status;
    UINT32 TransactionId;
    UINT32 IhvSpecificId;
} WDI_MESSAGE_HEADER, *PWDI_MESSAGE_HEADER;
typedef enum _WDI_OPERATION_MODE
{
    WDI_OPERATION_MODE_STA = 0x01,
    WDI_OPERATION_MODE_P2P_DEVICE = 0x08,
    WDI_OPERATION_MODE_P2P_CLIENT = 0x10,
    WDI_OPERATION_MODE_P2P_GO = 0x20,
}WDI_OPERATION_MODE;
typedef struct _WDI_P2P_SERVICE_NAME_HASH
{
    UINT8 Hash[6];
} WDI_P2P_SERVICE_NAME_HASH, *PWDI_P2P_SERVICE_NAME_HASH;
typedef const struct _WDI_P2P_SERVICE_NAME_HASH * PCWDI_P2P_SERVICE_NAME_HASH;
typedef UINT16 WDI_FRAME_ID;
typedef UINT16 WDI_PEER_ID;
typedef UINT8 WDI_EXTENDED_TID;
typedef enum _WDI_TXRX_PEER_QOS_CAPS
{
    WDI_TXRX_PeerCfgQosNone = 0,
    WDI_TXRX_PeerCfgQosCapable = 1,
    WDI_TXRX_PeerCfgUapsdTids = 2,
} WDI_TXRX_PEER_QOS_CAPS;
typedef struct _WDI_TXRX_PEER_CFG
{
    WDI_TXRX_PEER_QOS_CAPS PeerQoSConfig;
} WDI_TXRX_PEER_CFG, *PWDI_TXRX_PEER_CFG;
typedef enum _WDI_INTERCONNECT_TYPE
{
    WDI_INTERCONNECT_MEMORY_MAPPED = 0,
    WDI_INTERCONNECT_MESSAGE_BASED = 1,
    WDI_INTERCONNECT_UNKNOWN = 0xFF
} WDI_INTERCONNECT_TYPE;
typedef enum _WDI_FRAME_PAYLOAD_TYPE
{
    WDI_FRAME_MSDU = 0,
    WDI_FRAME_MSDU_FRAGMENT = 1,
} WDI_FRAME_PAYLOAD_TYPE;
typedef union _WDI_TXRX_MPDU_PN
{
    UINT32 Pn24;
    UINT64 Pn48;
    UINT64 Pn128[2];
} WDI_TXRX_MPDU_PN;
typedef enum _WDI_RX_THROTTLE_LEVEL
{
    WDI_RxThrottleLevelNone = 0x0,
    WDI_RxThrottleLevelMedium = 0x1,
    WDI_RxThrottleLevelAggressive = 0x2,
    WDI_RxThrottleLevelMax = 0xF,
} WDI_RX_THROTTLE_LEVEL;
typedef enum _WDI_TX_FRAME_STATUS
{
    WDI_TxFrameStatus_Ok = 0,
    WDI_TxFrameStatus_Discard,
    WDI_TxFrameStatus_NoAck,
    WDI_TxFrameStatus_TransferCancelled,
    WDI_TxFrameStatus_SendCancelled,
    WDI_TxFrameStatus_SendPostponed,
    WDI_TxFrameStatus_TransferFailed = 128,
} WDI_TX_FRAME_STATUS;
typedef struct _WDI_TX_COMPLETE_DATA
{
    UINT16 SeqCtl;
    UINT8 PnLength;
    UINT8 RetryCount;
    UINT16 wPad;
    WDI_TXRX_MPDU_PN MpduPN;
    UINT64 ReplayIHVReserved0;
    UINT64 ReplayIHVReserved1;
} WDI_TX_COMPLETE_DATA, *PWDI_TX_COMPLETE_DATA;
typedef enum _WDI_EXEMPTION_ACTION_TYPE
{
    WDI_EXEMPT_NO_EXEMPTION = 0,
    WDI_EXEMPT_ALWAYS = 1,
    WDI_EXEMPT_ON_KEY_MAPPING_KEY_UNAVAILABLE = 2,
} WDI_EXEMPTION_ACTION_TYPE;
typedef enum _WDI_TX_PAUSE_REASON
{
    WDI_TX_PAUSE_REASON_NULL = 0x00000000,
    WDI_TX_PAUSE_REASON_CREDIT = 0x00000001,
    WDI_TX_PAUSE_REASON_PEER_CREATE = 0x00000002,
    WDI_TX_PAUSE_REASON_PS = 0x00000004,
    WDI_TX_PAUSE_REASON_IHV_START = 0x01000000,
    WDI_TX_PAUSE_REASON_IHV_END = 0x80000000
} WDI_TX_PAUSE_REASON;
typedef enum _WDI_RX_INDICATION_LEVEL
{
    WDI_RX_INDICATION_DISPATCH_GENERAL = 0,
    WDI_RX_INDICATION_DISPATCH_FIRST_OF_DPC = 1,
    WDI_RX_INDICATION_FROM_RX_RESUME_FRAMES = 2,
    WDI_RX_INDICATION_PASSIVE = 3,
    WDI_RX_INDICATION_FLAG_RESOURCES = 0x80000000,
    WDI_RX_INDICATION_DISPATCH_GENERAL_WITH_LOW_RESOURCES = WDI_RX_INDICATION_FLAG_RESOURCES | WDI_RX_INDICATION_DISPATCH_GENERAL,
    WDI_RX_INDICATION_DISPATCH_FIRST_OF_DPC_WITH_LOW_RESSOURCES = WDI_RX_INDICATION_FLAG_RESOURCES | WDI_RX_INDICATION_DISPATCH_FIRST_OF_DPC,
    WDI_RX_INDICATION_FROM_RX_RESUME_FRAMES_WITH_LOW_RESOURCES = WDI_RX_INDICATION_FLAG_RESOURCES | WDI_RX_INDICATION_FROM_RX_RESUME_FRAMES,
    WDI_RX_INDICATION_PASSIVE_WITH_LOW_RESOURCES = WDI_RX_INDICATION_FLAG_RESOURCES | WDI_RX_INDICATION_PASSIVE,
} WDI_RX_INDICATION_LEVEL;
typedef struct _WDI_TXRX_TARGET_CAPABILITIES
{
    WDI_INTERCONNECT_TYPE InterconnectType;
    struct
    {
        BOOLEAN TargetPriorityQueueing;
        UINT16 MaxScatterGatherElementsPerFrame;
        BOOLEAN ExplicitSendCompleteFlagRequired;
        UINT8 bPad;
        UINT16 MinEffectiveSize;
        UINT16 FrameSizeGranularity;
    }TransmitCapabilities;
    struct
    {
        BOOLEAN RxTxForwarding;
        UINT32 MaxThroughput;
    }ReceiveCapabilities;
} WDI_TXRX_CAPABILITIES, *PWDI_TXRX_CAPABILITIES;
typedef struct _WDI_TXRX_PARAMETERS
{
    WDI_TXRX_CAPABILITIES TxRxCapabilities;
} WDI_TXRX_PARAMETERS, *PWDI_TXRX_PARAMETERS;
typedef struct _WDI_TXRX_TARGET_CONFIGURATION
{
    WDI_TXRX_PARAMETERS TxRxParams;
    UINT8 MaxNumPorts;
    UINT8 MaxNumPeers;
} WDI_TXRX_TARGET_CONFIGURATION, *PWDI_TXRX_TARGET_CONFIGURATION;
typedef struct _TAL_TXRX_PARAMETERS
{
    UINT16 MaxOutstandingTransfers;
} TAL_TXRX_PARAMETERS, *PTAL_TXRX_PARAMETERS;
typedef struct _WDI_TX_METADATA
{
    WDI_PORT_ID PortID;
    WDI_PEER_ID PeerID;
    WDI_EXTENDED_TID ExTID;
    BOOLEAN IsUnicast;
    BOOLEAN bAllowLegacyRates;
    UINT16 Ethertype;
    BOOLEAN bTxCompleteRequired;
    UINT8 PnLength;
    UINT16 TxCost;
    WDI_EXEMPTION_ACTION_TYPE ExemptionAction;
    WDI_TXRX_MPDU_PN MpduPn;
    UINT64 ReplayIHVReserved0;
    UINT64 ReplayIHVReserved1;
    UINT16 SeqCtl;
    UINT16 wPad;
} WDI_TX_METADATA, *PWDI_TX_METADATA;
typedef struct _WDI_RX_METADATA
{
    WDI_FRAME_PAYLOAD_TYPE PayloadType;
} WDI_RX_METADATA, *PWDI_RX_METADATA;
typedef struct _WDI_FRAME_METADATA
{
    LIST_ENTRY Linkage;
    PNET_BUFFER_LIST pNBL;
    WDI_FRAME_ID FrameID;
    UINT16 wPad;
    UINT32 dPad;
    union {
        WDI_TX_METADATA txMetaData;
        WDI_RX_METADATA rxMetaData;
    } u;
} WDI_FRAME_METADATA, *PWDI_FRAME_METADATA;
typedef NDIS_HANDLE TAL_TXRX_HANDLE, *PTAL_TXRX_HANDLE;
#include <packon.h>
typedef
void
(MINIPORT_WDI_TX_ABORT)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _Out_ NDIS_STATUS * pWifiStatus
);
typedef MINIPORT_WDI_TX_ABORT (*MINIPORT_WDI_TX_ABORT_HANDLER);
typedef
void
(MINIPORT_WDI_TX_TARGET_DESC_INIT)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ PNET_BUFFER_LIST pNBL,
    _Out_ NDIS_STATUS * pWifiStatus
    );
typedef MINIPORT_WDI_TX_TARGET_DESC_INIT (*MINIPORT_WDI_TX_TARGET_DESC_INIT_HANDLER);
typedef
void
(MINIPORT_WDI_TX_TARGET_DESC_DEINIT)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ PNET_BUFFER_LIST pNBL
    );
typedef MINIPORT_WDI_TX_TARGET_DESC_DEINIT (*MINIPORT_WDI_TX_TARGET_DESC_DEINIT_HANDLER);
typedef
void
(MINIPORT_WDI_TX_DATA_SEND) (
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _In_ WDI_EXTENDED_TID ExTid,
    _In_ UINT16 NumQueueFrames,
    _In_ UINT32 NumActiveFrames,
    _In_ BOOLEAN bRobustnessFlag
    );
typedef MINIPORT_WDI_TX_DATA_SEND (*MINIPORT_WDI_TX_DATA_SEND_HANDLER);
typedef
void
(MINIPORT_WDI_TX_TAL_SEND)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _In_ WDI_EXTENDED_TID ExTid,
    _In_ UINT16 NumQueueFrames,
    _In_ UINT32 NumActiveFrames,
    _In_ BOOLEAN bRobustnessFlag
    );
typedef MINIPORT_WDI_TX_TAL_SEND (*MINIPORT_WDI_TX_TAL_SEND_HANDLER);
typedef
void
(MINIPORT_WDI_TX_TAL_SEND_COMPLETE)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ PNET_BUFFER_LIST pNBL,
    _In_ WDI_TX_FRAME_STATUS TxFrameStatus
    );
typedef MINIPORT_WDI_TX_TAL_SEND_COMPLETE (*MINIPORT_WDI_TX_TAL_SEND_COMPLETE_HANDLER);
typedef
void
(MINIPORT_WDI_TX_TAL_QUEUE_IN_ORDER)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PEER_ID PeerId,
    _In_ UINT32 ExTidBitmask
    );
typedef MINIPORT_WDI_TX_TAL_QUEUE_IN_ORDER (*MINIPORT_WDI_TX_TAL_QUEUE_IN_ORDER_HANDLER);
typedef
void
(MINIPORT_WDI_TX_SUSPECT_FRAME_LIST_ABORT)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ UINT64 SuspectFrameContext,
    _In_ UINT16 NumSuspectFrames,
    _In_reads_(NumSuspectFrames) PNET_BUFFER_LIST* SuspectFrameList
    );
typedef MINIPORT_WDI_TX_SUSPECT_FRAME_LIST_ABORT (*MINIPORT_WDI_TX_SUSPECT_FRAME_LIST_ABORT_HANDLER);
typedef
PWDI_FRAME_METADATA
(NDIS_WDI_ALLOCATE_WDI_FRAME_METADATA)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle
    );
typedef NDIS_WDI_ALLOCATE_WDI_FRAME_METADATA (*NDIS_WDI_ALLOCATE_WDI_FRAME_METADATA_HANDLER);
typedef
void
(NDIS_WDI_FREE_WDI_FRAME_METADATA)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ PWDI_FRAME_METADATA pWiFiFrameMetaData);
typedef NDIS_WDI_FREE_WDI_FRAME_METADATA (*NDIS_WDI_FREE_WDI_FRAME_METADATA_HANDLER);
typedef
void
(NDIS_WDI_TX_DEQUEUE_IND)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ UINT32 Quantum,
    _In_ UINT8 MaxNumFrames,
    _In_ UINT16 Credit,
    _Out_ PNET_BUFFER_LIST *ppNBL
    );
typedef NDIS_WDI_TX_DEQUEUE_IND (*NDIS_WDI_TX_DEQUEUE_IND_HANDLER);
typedef
void
(NDIS_WDI_TX_TRANSFER_COMPLETE_IND)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ WDI_TX_FRAME_STATUS WifiTxFrameStatus,
    _In_ PNET_BUFFER_LIST pNBL
    );
typedef NDIS_WDI_TX_TRANSFER_COMPLETE_IND (*NDIS_WDI_TX_TRANSFER_COMPLETE_IND_HANDLER);
typedef
void
(NDIS_WDI_TX_SEND_COMPLETE_IND)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ WDI_TX_FRAME_STATUS WifiTxFrameStatus,
    _In_ UINT16 NumCompletedSends,
    _In_reads_(NumCompletedSends) WDI_FRAME_ID* WifiTxFrameIdList,
    _In_reads_opt_(NumCompletedSends) WDI_TX_COMPLETE_DATA* WifiTxCompleteList
    );
typedef NDIS_WDI_TX_SEND_COMPLETE_IND (*NDIS_WDI_TX_SEND_COMPLETE_IND_HANDLER);
typedef
void
(NDIS_WDI_TX_QUERY_RA_TID_STATE)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _In_ WDI_EXTENDED_TID ExTid,
    _Out_ NDIS_STATUS * pWifiStatus,
    _Out_ PUINT16 pQueueLength
    );
typedef NDIS_WDI_TX_QUERY_RA_TID_STATE (*NDIS_WDI_TX_QUERY_RA_TID_STATE_HANDLER);
typedef
void
(NDIS_WDI_TX_QUERY_SUSPECT_FRAME_COMPLETE_STATUS)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ UINT64 SuspectFrameContext,
    _In_ PNET_BUFFER_LIST pNBL,
    _Out_ BOOLEAN* pIsTransferCompleteNeeded,
    _Out_ BOOLEAN* pIsSendCompleteNeeded,
    _Out_ NDIS_STATUS * pWifiStatus
    );
typedef NDIS_WDI_TX_QUERY_SUSPECT_FRAME_COMPLETE_STATUS (*NDIS_WDI_TX_QUERY_SUSPECT_FRAME_COMPLETE_STATUS_HANDLER);
typedef
void
(MINIPORT_WDI_TX_PEER_BACKLOG)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _In_ BOOLEAN bBacklogged
    );
typedef MINIPORT_WDI_TX_PEER_BACKLOG (*MINIPORT_WDI_TX_PEER_BACKLOG_HANDLER);
typedef
void
(NDIS_WDI_TX_SEND_PAUSE_IND)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _In_ UINT32 ExTidBitmask,
    _In_ WDI_TX_PAUSE_REASON TxPauseReason
    );
typedef NDIS_WDI_TX_SEND_PAUSE_IND (*NDIS_WDI_TX_SEND_PAUSE_IND_HANDLER);
typedef
void
(NDIS_WDI_TX_SEND_RESTART_IND)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _In_ UINT32 ExTidBitmask,
    _In_ WDI_TX_PAUSE_REASON TxRestartReason
    );
typedef NDIS_WDI_TX_SEND_RESTART_IND (*NDIS_WDI_TX_SEND_RESTART_IND_HANDLER);
typedef
void
(NDIS_WDI_TX_RELEASE_FRAMES_IND)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _In_ UINT32 ExTidBitmask,
    _In_ UINT8 MaxNumFrames,
    _In_ UINT16 Credit,
    _Out_ PNET_BUFFER_LIST *ppNBL
    );
typedef NDIS_WDI_TX_RELEASE_FRAMES_IND (*NDIS_WDI_TX_RELEASE_FRAMES_IND_HANDLER);
typedef
void
(NDIS_WDI_TX_INJECT_FRAME_IND)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _In_ WDI_EXTENDED_TID ExTid,
    _In_ PNET_BUFFER_LIST pNBL,
    _In_ BOOLEAN bIsUnicast,
    _In_ BOOLEAN bUseLegacyRates,
    _In_ UINT16 Ethertype,
    _In_ WDI_EXEMPTION_ACTION_TYPE ExemptionAction
    );
typedef NDIS_WDI_TX_INJECT_FRAME_IND (*NDIS_WDI_TX_INJECT_FRAME_IND_HANDLER);
typedef
void
(NDIS_WDI_TX_ABORT_CONFIRM)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle
    );
typedef NDIS_WDI_TX_ABORT_CONFIRM (*NDIS_WDI_TX_ABORT_CONFIRM_HANDLER);
typedef
void
(MINIPORT_WDI_RX_STOP)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId,
    _Out_ NDIS_STATUS * pWifiStatus
    );
typedef MINIPORT_WDI_RX_STOP (*MINIPORT_WDI_RX_STOP_HANDLER);
typedef
void
(MINIPORT_WDI_RX_FLUSH)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId
    );
typedef MINIPORT_WDI_RX_FLUSH (*MINIPORT_WDI_RX_FLUSH_HANDLER);
typedef
void
(MINIPORT_WDI_RX_RESTART)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId
    );
typedef MINIPORT_WDI_RX_RESTART (*MINIPORT_WDI_RX_RESTART_HANDLER);
typedef
void
(MINIPORT_WDI_RX_GET_MPDUS)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PEER_ID PeerId,
    _In_ WDI_EXTENDED_TID ExTid,
    _Out_ PNET_BUFFER_LIST *ppNBL
    );
typedef MINIPORT_WDI_RX_GET_MPDUS (*MINIPORT_WDI_RX_GET_MPDUS_HANDLER);
typedef
void
(MINIPORT_WDI_RX_RETURN_FRAMES)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ PNET_BUFFER_LIST pNBL
    );
typedef MINIPORT_WDI_RX_RETURN_FRAMES (*MINIPORT_WDI_RX_RETURN_FRAMES_HANDLER);
typedef
void
(MINIPORT_WDI_RX_RESUME)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext
    );
typedef MINIPORT_WDI_RX_RESUME (*MINIPORT_WDI_RX_RESUME_HANDLER);
typedef
void
(NDIS_WDI_RX_INORDER_DATA_IND)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ WDI_RX_INDICATION_LEVEL IndicationLevel,
    _In_ WDI_PEER_ID PeerId,
    _In_ WDI_EXTENDED_TID ExTid,
    _In_ PNDIS_RECEIVE_THROTTLE_PARAMETERS pRxThrottleParams,
    _Out_ NDIS_STATUS * pWifiStatus
    );
typedef NDIS_WDI_RX_INORDER_DATA_IND (*NDIS_WDI_RX_INORDER_DATA_IND_HANDLER);
typedef
void
(MINIPORT_WDI_RX_THROTTLE)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_RX_THROTTLE_LEVEL RxThrottleLevel
    );
typedef MINIPORT_WDI_RX_THROTTLE (*MINIPORT_WDI_RX_THROTTLE_HANDLER);
typedef
void
(MINIPORT_WDI_RX_PPDU_RSSI)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ PNET_BUFFER_LIST pNBL,
    _Out_ UINT8 *pRssi
    );
typedef MINIPORT_WDI_RX_PPDU_RSSI (*MINIPORT_WDI_RX_PPDU_RSSI_HANDLER);
typedef
void
(NDIS_WDI_RX_STOP_CONFIRM)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle
    );
typedef NDIS_WDI_RX_STOP_CONFIRM (*NDIS_WDI_RX_STOP_CONFIRM_HANDLER);
typedef
void
(NDIS_WDI_RX_FLUSH_CONFIRM)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle
    );
typedef NDIS_WDI_RX_FLUSH_CONFIRM (*NDIS_WDI_RX_FLUSH_CONFIRM_HANDLER);
typedef
NDIS_STATUS
(MINIPORT_WDI_TAL_TXRX_START)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ PWDI_TXRX_TARGET_CONFIGURATION pWifiTxRxConfiguration,
    _Out_ PTAL_TXRX_PARAMETERS pTalTxRxParameters
    );
typedef MINIPORT_WDI_TAL_TXRX_START (*MINIPORT_WDI_TAL_TXRX_START_HANDLER);
typedef
void
(MINIPORT_WDI_TAL_TXRX_STOP)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext
    );
typedef MINIPORT_WDI_TAL_TXRX_STOP (*MINIPORT_WDI_TAL_TXRX_STOP_HANDLER);
typedef
void
(MINIPORT_WDI_TAL_TXRX_ADD_PORT)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_OPERATION_MODE OpMode
    );
typedef MINIPORT_WDI_TAL_TXRX_ADD_PORT (*MINIPORT_WDI_TAL_TXRX_ADD_PORT_HANDLER);
typedef
void
(MINIPORT_WDI_TAL_TXRX_DELETE_PORT)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId
    );
typedef MINIPORT_WDI_TAL_TXRX_DELETE_PORT (*MINIPORT_WDI_TAL_TXRX_DELETE_PORT_HANDLER);
typedef
void
(MINIPORT_WDI_TAL_TXRX_SET_PORT_OPMODE)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_OPERATION_MODE Opmode
    );
typedef MINIPORT_WDI_TAL_TXRX_SET_PORT_OPMODE (*MINIPORT_WDI_TAL_TXRX_SET_PORT_OPMODE_HANDLER);
typedef
void
(MINIPORT_WDI_TAL_TXRX_RESET_PORT)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId
    );
typedef MINIPORT_WDI_TAL_TXRX_RESET_PORT (*MINIPORT_WDI_TAL_TXRX_RESET_PORT_HANDLER);
typedef
void
(MINIPORT_WDI_TAL_TXRX_PEER_CONFIG)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _In_ PWDI_TXRX_PEER_CFG pPeerCfg
    );
typedef MINIPORT_WDI_TAL_TXRX_PEER_CONFIG (*MINIPORT_WDI_TAL_TXRX_PEER_CONFIG_HANDLER);
typedef
void
(MINIPORT_WDI_TAL_TXRX_PEER_DELETE_CONFIRM)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId
    );
typedef MINIPORT_WDI_TAL_TXRX_PEER_DELETE_CONFIRM (*MINIPORT_WDI_TAL_TXRX_PEER_DELETE_CONFIRM_HANDLER);
typedef
void
(NDIS_WDI_PEER_CREATE_IND)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _In_ WDI_MAC_ADDRESS PeerAddr
    );
typedef NDIS_WDI_PEER_CREATE_IND (*NDIS_WDI_PEER_CREATE_IND_HANDLER);
typedef
void
(NDIS_WDI_PEER_DELETE_IND)(
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ WDI_PORT_ID PortId,
    _In_ WDI_PEER_ID PeerId,
    _Out_ NDIS_STATUS * pWifiStatus
    );
typedef NDIS_WDI_PEER_DELETE_IND (*NDIS_WDI_PEER_DELETE_IND_HANDLER);
typedef struct _NDIS_WDI_DATA_API
{
    NDIS_OBJECT_HEADER Header;
    NDIS_WDI_TX_DEQUEUE_IND_HANDLER TxDequeueIndication;
    NDIS_WDI_TX_TRANSFER_COMPLETE_IND_HANDLER TxTransferCompleteIndication;
    NDIS_WDI_TX_SEND_COMPLETE_IND_HANDLER TxSendCompleteIndication;
    NDIS_WDI_TX_QUERY_RA_TID_STATE_HANDLER TxQueryRATIDState;
    NDIS_WDI_TX_SEND_PAUSE_IND_HANDLER TxSendPauseIndication;
    NDIS_WDI_TX_SEND_RESTART_IND_HANDLER TxSendRestartIndication;
    NDIS_WDI_TX_RELEASE_FRAMES_IND_HANDLER TxReleaseFrameIndication;
    NDIS_WDI_TX_INJECT_FRAME_IND_HANDLER TxInjectFrameIndication;
    NDIS_WDI_TX_ABORT_CONFIRM_HANDLER TxAbortConfirm;
    NDIS_WDI_RX_INORDER_DATA_IND_HANDLER RxInorderDataIndication;
    NDIS_WDI_RX_STOP_CONFIRM_HANDLER RxStopConfirm;
    NDIS_WDI_RX_FLUSH_CONFIRM_HANDLER RxFlushConfirm;
    NDIS_WDI_PEER_CREATE_IND_HANDLER PeerCreateIndication;
    NDIS_WDI_PEER_DELETE_IND_HANDLER PeerDeleteIndication;
    NDIS_WDI_ALLOCATE_WDI_FRAME_METADATA_HANDLER AllocateWiFiFrameMetaData;
    NDIS_WDI_FREE_WDI_FRAME_METADATA_HANDLER FreeWiFiFrameMetaData;
    NDIS_WDI_TX_QUERY_SUSPECT_FRAME_COMPLETE_STATUS_HANDLER TxQuerySuspectFrameCompleteStatus;
} NDIS_WDI_DATA_API, *PNDIS_WDI_DATA_API;
    RTL_SIZEOF_THROUGH_FIELD(NDIS_WDI_DATA_API, FreeWiFiFrameMetaData)
    RTL_SIZEOF_THROUGH_FIELD(NDIS_WDI_DATA_API, TxQuerySuspectFrameCompleteStatus)
typedef struct _NDIS_MINIPORT_WDI_DATA_HANDLERS
{
    NDIS_OBJECT_HEADER Header;
    MINIPORT_WDI_TX_ABORT_HANDLER TxAbortHandler;
    MINIPORT_WDI_TX_TARGET_DESC_INIT_HANDLER TxTargetDescInitHandler;
    MINIPORT_WDI_TX_TARGET_DESC_DEINIT_HANDLER TxTargetDescDeInitHandler;
    MINIPORT_WDI_TX_DATA_SEND_HANDLER TxDataSendHandler;
    MINIPORT_WDI_TX_TAL_SEND_HANDLER TxTalSendHandler;
    MINIPORT_WDI_TX_TAL_SEND_COMPLETE_HANDLER TxTalSendCompleteHandler;
    MINIPORT_WDI_TX_TAL_QUEUE_IN_ORDER_HANDLER TxTalQueueInOrderHandler;
    MINIPORT_WDI_TX_PEER_BACKLOG_HANDLER TxPeerBacklogHandler;
    MINIPORT_WDI_RX_STOP_HANDLER RxStopHandler;
    MINIPORT_WDI_RX_FLUSH_HANDLER RxFlushHandler;
    MINIPORT_WDI_RX_RESTART_HANDLER RxRestartHandler;
    MINIPORT_WDI_RX_GET_MPDUS_HANDLER RxGetMpdusHandler;
    MINIPORT_WDI_RX_RETURN_FRAMES_HANDLER RxReturnFramesHandler;
    MINIPORT_WDI_RX_RESUME_HANDLER RxResumeHandler;
    MINIPORT_WDI_RX_THROTTLE_HANDLER RxThrottleHandler;
    MINIPORT_WDI_RX_PPDU_RSSI_HANDLER RxPpduRssiHandler;
    MINIPORT_WDI_TAL_TXRX_START_HANDLER TalTxRxStartHandler;
    MINIPORT_WDI_TAL_TXRX_STOP_HANDLER TalTxRxStopHandler;
    MINIPORT_WDI_TAL_TXRX_ADD_PORT_HANDLER TalTxRxAddPortHandler;
    MINIPORT_WDI_TAL_TXRX_DELETE_PORT_HANDLER TalTxRxDeletePortHandler;
    MINIPORT_WDI_TAL_TXRX_SET_PORT_OPMODE_HANDLER TalTxRxSetPortOpModeHandler;
    MINIPORT_WDI_TAL_TXRX_RESET_PORT_HANDLER TalTxRxResetPortHandler;
    MINIPORT_WDI_TAL_TXRX_PEER_CONFIG_HANDLER TalTxRxPeerConfigHandler;
    MINIPORT_WDI_TAL_TXRX_PEER_DELETE_CONFIRM_HANDLER TalTxRxPeerDeleteConfirmHandler;
    MINIPORT_WDI_TX_SUSPECT_FRAME_LIST_ABORT_HANDLER TxSuspectFrameAbortHandler;
} NDIS_MINIPORT_WDI_DATA_HANDLERS, *PNDIS_MINIPORT_WDI_DATA_HANDLERS;
RTL_SIZEOF_THROUGH_FIELD(NDIS_MINIPORT_WDI_DATA_HANDLERS, TalTxRxPeerDeleteConfirmHandler)
RTL_SIZEOF_THROUGH_FIELD(NDIS_MINIPORT_WDI_DATA_HANDLERS, TxSuspectFrameAbortHandler)
typedef
NDIS_STATUS
(MINIPORT_WDI_TAL_TXRX_INITIALIZE)(
    _In_ NDIS_HANDLE MiniportAdapterContext,
    _In_ NDIS_HANDLE NdisMiniportDataPathHandle,
    _In_ PNDIS_WDI_DATA_API NdisWdiDataPathApi,
    _Out_ PTAL_TXRX_HANDLE pMiniportTalTxRxContext,
    _Inout_ PNDIS_MINIPORT_WDI_DATA_HANDLERS pMiniportDataHandlers,
    _Out_ UINT32* pMiniportWdiFrameMetadataExtraSpace
    );
typedef MINIPORT_WDI_TAL_TXRX_INITIALIZE (*MINIPORT_WDI_TAL_TXRX_INITIALIZE_HANDLER);
typedef
VOID
(MINIPORT_WDI_TAL_TXRX_DEINITIALIZE)(
    _In_ TAL_TXRX_HANDLE MiniportTalTxRxContext
    );
typedef MINIPORT_WDI_TAL_TXRX_DEINITIALIZE (*MINIPORT_WDI_TAL_TXRX_DEINITIALIZE_HANDLER);
typedef
void
(NDIS_WDI_OPEN_ADAPTER_COMPLETE)(
    _In_ NDIS_HANDLE MiniportAdapterHandle,
    _In_ NDIS_STATUS CompletionStatus
    );
typedef NDIS_WDI_OPEN_ADAPTER_COMPLETE (*NDIS_WDI_OPEN_ADAPTER_COMPLETE_HANDLER);
typedef
void
(NDIS_WDI_CLOSE_ADAPTER_COMPLETE)(
    _In_ NDIS_HANDLE MiniportAdapterHandle,
    _In_ NDIS_STATUS CompletionStatus
    );
typedef NDIS_WDI_CLOSE_ADAPTER_COMPLETE (*NDIS_WDI_CLOSE_ADAPTER_COMPLETE_HANDLER);
typedef
void
(NDIS_WDI_IDLE_NOTIFICATION_CONFIRM)(
    _In_ NDIS_HANDLE MiniportAdapterHandle,
    _In_ NDIS_DEVICE_POWER_STATE DeviceIdlePowerState);
typedef NDIS_WDI_IDLE_NOTIFICATION_CONFIRM (*NDIS_WDI_IDLE_NOTIFICATION_CONFIRM_HANDLER);
typedef
void
(NDIS_WDI_IDLE_NOTIFICATION_COMPLETE)(
    _In_ NDIS_HANDLE MiniportAdapterHandle);
typedef NDIS_WDI_IDLE_NOTIFICATION_COMPLETE (*NDIS_WDI_IDLE_NOTIFICATION_COMPLETE_HANDLER);
typedef struct _NDIS_WDI_INIT_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ULONG WdiVersion;
    NDIS_WDI_OPEN_ADAPTER_COMPLETE_HANDLER OpenAdapterCompleteHandler;
    NDIS_WDI_CLOSE_ADAPTER_COMPLETE_HANDLER CloseAdapterCompleteHandler;
    NDIS_WDI_IDLE_NOTIFICATION_CONFIRM_HANDLER UeIdleNotificationConfirm;
    NDIS_WDI_IDLE_NOTIFICATION_COMPLETE_HANDLER UeIdleNotificationComplete;
} NDIS_WDI_INIT_PARAMETERS, *PNDIS_WDI_INIT_PARAMETERS;
    RTL_SIZEOF_THROUGH_FIELD(NDIS_WDI_INIT_PARAMETERS, UeIdleNotificationComplete)
typedef
NDIS_STATUS
(MINIPORT_WDI_ALLOCATE_ADAPTER)(
    _In_ NDIS_HANDLE NdisMiniportHandle,
    _In_ NDIS_HANDLE MiniportDriverContext,
    _In_ PNDIS_MINIPORT_INIT_PARAMETERS MiniportInitParameters,
    _In_ PNDIS_WDI_INIT_PARAMETERS NdisWdiInitParameters,
    _Inout_ PNDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES RegistrationAttributes
    );
typedef MINIPORT_WDI_ALLOCATE_ADAPTER (*MINIPORT_WDI_ALLOCATE_ADAPTER_HANDLER);
typedef
NDIS_STATUS
(MINIPORT_WDI_OPEN_ADAPTER)(
    _In_ NDIS_HANDLE MiniportAdapterContext,
    _In_ PNDIS_MINIPORT_INIT_PARAMETERS MiniportInitParameters
    );
typedef MINIPORT_WDI_OPEN_ADAPTER (*MINIPORT_WDI_OPEN_ADAPTER_HANDLER);
typedef
NDIS_STATUS
(MINIPORT_WDI_START_ADAPTER_OPERATION)(
    _In_ NDIS_HANDLE MiniportAdapterContext
    );
typedef MINIPORT_WDI_START_ADAPTER_OPERATION (*MINIPORT_WDI_START_OPERATION_HANDLER);
typedef
void
(MINIPORT_WDI_STOP_ADAPTER_OPERATION)(
    _In_ NDIS_HANDLE MiniportAdapterContext
    );
typedef MINIPORT_WDI_STOP_ADAPTER_OPERATION (*MINIPORT_WDI_STOP_OPERATION_HANDLER);
typedef
NDIS_STATUS
(MINIPORT_WDI_CLOSE_ADAPTER)(
    _In_ NDIS_HANDLE MiniportAdapterContext
    );
typedef MINIPORT_WDI_CLOSE_ADAPTER (*MINIPORT_WDI_CLOSE_ADAPTER_HANDLER);
typedef
VOID
(MINIPORT_WDI_FREE_ADAPTER)(
    _In_ NDIS_HANDLE MiniportAdapterContext
    );
typedef MINIPORT_WDI_FREE_ADAPTER (*MINIPORT_WDI_FREE_ADAPTER_HANDLER);
typedef
NDIS_STATUS
(MINIPORT_WDI_POST_ADAPTER_PAUSE)(
    _In_ NDIS_HANDLE MiniportAdapterContext,
    _In_ PNDIS_MINIPORT_PAUSE_PARAMETERS PauseParameters
    );
typedef MINIPORT_WDI_POST_ADAPTER_PAUSE (*MINIPORT_WDI_POST_PAUSE_HANDLER);
typedef
NDIS_STATUS
(MINIPORT_WDI_POST_ADAPTER_RESTART)(
    _In_ NDIS_HANDLE MiniportAdapterContext,
    _In_ PNDIS_MINIPORT_RESTART_PARAMETERS RestartParameters
    );
typedef MINIPORT_WDI_POST_ADAPTER_RESTART (*MINIPORT_WDI_POST_RESTART_HANDLER);
typedef enum {
    DiagnoseLevelNone =0,
    DiagnoseLevelHardwareRegisters =1,
    DiagnoseLevelFirmwareImageDump =2,
    DiagnoseLevelDriverStateDump =3
} eDiagnoseLevel;
typedef
NDIS_STATUS
(MINIPORT_WDI_ADAPTER_HANG_DIAGNOSE)(
    _In_ NDIS_HANDLE MiniportDriverContext,
    _In_ eDiagnoseLevel DiagnoseLevel,
    _In_ UINT32 BufferSize,
    _Out_writes_bytes_to_( BufferSize, *pOutputSize )
          UINT8 * FirmwareBlob,
    _Out_ UINT32* pOutputSize
    );
typedef MINIPORT_WDI_ADAPTER_HANG_DIAGNOSE (*MINIPORT_WDI_HANG_DIAGNOSE_HANDLER);
typedef
NDIS_STATUS
(MINIPORT_WDI_IDLE_NOTIFICATION)(
    _In_ NDIS_HANDLE MiniportAdapterContext,
    _In_ BOOLEAN ForceIdle );
typedef MINIPORT_WDI_IDLE_NOTIFICATION (*MINIPORT_WDI_IDLE_NOTIFICATION_HANDLER);
typedef
VOID
(MINIPORT_WDI_CANCEL_IDLE_NOTIFICATION)(
    _In_ NDIS_HANDLE MiniportAdapterContext );
typedef MINIPORT_WDI_CANCEL_IDLE_NOTIFICATION (*MINIPORT_WDI_CANCEL_IDLE_NOTIFICATION_HANDLER);
typedef struct _NDIS_MINIPORT_DRIVER_WDI_CHARACTERISTICS
{
    NDIS_OBJECT_HEADER Header;
    ULONG WdiVersion;
    MINIPORT_WDI_ALLOCATE_ADAPTER_HANDLER AllocateAdapterHandler;
    MINIPORT_WDI_FREE_ADAPTER_HANDLER FreeAdapterHandler;
    MINIPORT_WDI_OPEN_ADAPTER_HANDLER OpenAdapterHandler;
    MINIPORT_WDI_CLOSE_ADAPTER_HANDLER CloseAdapterHandler;
    MINIPORT_WDI_START_OPERATION_HANDLER StartOperationHandler;
    MINIPORT_WDI_STOP_OPERATION_HANDLER StopOperationHandler;
    MINIPORT_WDI_POST_PAUSE_HANDLER PostPauseHandler;
    MINIPORT_WDI_POST_RESTART_HANDLER PostRestartHandler;
    MINIPORT_WDI_HANG_DIAGNOSE_HANDLER HangDiagnoseHandler;
    MINIPORT_WDI_TAL_TXRX_INITIALIZE_HANDLER TalTxRxInitializeHandler;
    MINIPORT_WDI_TAL_TXRX_DEINITIALIZE_HANDLER TalTxRxDeinitializeHandler;
    MINIPORT_WDI_IDLE_NOTIFICATION_HANDLER LeIdleNotificationHandler;
    MINIPORT_WDI_CANCEL_IDLE_NOTIFICATION_HANDLER LeCancelIdleNotificationHandler;
} NDIS_MINIPORT_DRIVER_WDI_CHARACTERISTICS, *PNDIS_MINIPORT_DRIVER_WDI_CHARACTERISTICS;
RTL_SIZEOF_THROUGH_FIELD(NDIS_MINIPORT_DRIVER_WDI_CHARACTERISTICS, LeCancelIdleNotificationHandler)
_IRQL_requires_(PASSIVE_LEVEL)
NDIS_EXPORT
NDIS_STATUS
NdisMRegisterWdiMiniportDriver(
    _In_ DRIVER_OBJECT *DriverObject,
    _In_ PCUNICODE_STRING RegistryPath,
    _In_opt_ NDIS_MINIPORT_DRIVER_CONTEXT NdisDriverContext,
    _In_ NDIS_MINIPORT_DRIVER_CHARACTERISTICS *MiniportDriverCharacteristics,
    _In_ NDIS_MINIPORT_DRIVER_WDI_CHARACTERISTICS *MiniportWdiCharacteristics,
    _Out_ NDIS_MINIPORT_DRIVER_HANDLE *NdisMiniportDriverHandle
    );
_IRQL_requires_(PASSIVE_LEVEL)
NDIS_EXPORT
VOID
NdisMDeregisterWdiMiniportDriver(
    _In_ NDIS_MINIPORT_DRIVER_HANDLE NdisMiniportDriverHandle
    );
    ((WDI_OID_PREFIX) | ((_messageId)))
    ((WDI_INDICATION_PREFIX) | ((_messageId)))
    WDI_DEFINE_OID(WDI_TASK_OPEN)
    WDI_DEFINE_OID(WDI_TASK_CLOSE)
    WDI_DEFINE_OID(WDI_TASK_SCAN)
    WDI_DEFINE_OID(WDI_TASK_P2P_DISCOVER)
    WDI_DEFINE_OID(WDI_TASK_CONNECT)
    WDI_DEFINE_OID(WDI_TASK_DOT11_RESET)
    WDI_DEFINE_OID(WDI_TASK_DISCONNECT)
    WDI_DEFINE_OID(WDI_TASK_P2P_SEND_REQUEST_ACTION_FRAME)
    WDI_DEFINE_OID(WDI_TASK_P2P_SEND_RESPONSE_ACTION_FRAME)
    WDI_DEFINE_OID(WDI_TASK_SET_RADIO_STATE)
    WDI_DEFINE_OID(WDI_TASK_CREATE_PORT)
    WDI_DEFINE_OID(WDI_TASK_DELETE_PORT)
    WDI_DEFINE_OID(WDI_TASK_START_AP)
    WDI_DEFINE_OID(WDI_TASK_STOP_AP)
    WDI_DEFINE_OID(WDI_TASK_SEND_AP_ASSOCIATION_RESPONSE)
    WDI_DEFINE_OID(WDI_SET_POWER_STATE)
    WDI_DEFINE_OID(WDI_SET_OPERATION_MODE)
    WDI_DEFINE_OID(WDI_SET_P2P_ADDITIONAL_IE)
    WDI_DEFINE_OID(WDI_SET_P2P_LISTEN_STATE)
    WDI_DEFINE_OID(WDI_SET_PRIVACY_EXEMPTION_LIST)
    WDI_DEFINE_OID(WDI_SET_ADD_CIPHER_KEYS)
    WDI_DEFINE_OID(WDI_SET_DELETE_CIPHER_KEYS)
    WDI_DEFINE_OID(WDI_SET_DEFAULT_KEY_ID)
    WDI_DEFINE_OID(WDI_SET_CONNECTION_QUALITY)
    WDI_DEFINE_OID(WDI_GET_STATISTICS)
    WDI_DEFINE_OID(WDI_SET_RECEIVE_PACKET_FILTER)
    WDI_DEFINE_OID(WDI_GET_ADAPTER_CAPABILITIES)
    WDI_DEFINE_OID(WDI_SET_NETWORK_LIST_OFFLOAD)
    WDI_DEFINE_OID(WDI_SET_RECEIVE_COALESCING)
    WDI_DEFINE_OID(WDI_GET_BSS_ENTRY_LIST)
    WDI_DEFINE_OID(WDI_SET_AUTO_POWER_SAVE)
    WDI_DEFINE_OID(WDI_GET_AUTO_POWER_SAVE)
    WDI_DEFINE_OID(WDI_SET_ADD_WOL_PATTERN)
    WDI_DEFINE_OID(WDI_SET_REMOVE_WOL_PATTERN)
    WDI_DEFINE_OID(WDI_SET_MULTICAST_LIST)
    WDI_DEFINE_OID(WDI_SET_ADD_PM_PROTOCOL_OFFLOAD)
    WDI_DEFINE_OID(WDI_SET_REMOVE_PM_PROTOCOL_OFFLOAD)
    WDI_DEFINE_OID(WDI_SET_ADAPTER_CONFIGURATION)
    WDI_DEFINE_OID(WDI_GET_RECEIVE_COALESCING_MATCH_COUNT)
    WDI_DEFINE_OID(WDI_SET_CLEAR_RECEIVE_COALESCING)
    WDI_DEFINE_OID(WDI_GET_PM_PROTOCOL_OFFLOAD)
    WDI_DEFINE_OID(WDI_SET_ADVERTISEMENT_INFORMATION)
    WDI_DEFINE_OID(WDI_TASK_CHANGE_OPERATION_MODE)
    WDI_DEFINE_OID(WDI_TASK_DELETE_PEER_STATE)
    WDI_DEFINE_OID(WDI_IHV_REQUEST)
    WDI_DEFINE_OID(WDI_TASK_ROAM)
    WDI_DEFINE_OID(WDI_SET_FLUSH_BSS_ENTRY)
    WDI_DEFINE_OID(WDI_SET_ASSOCIATION_PARAMETERS)
    WDI_DEFINE_OID(WDI_GET_NEXT_ACTION_FRAME_DIALOG_TOKEN)
    WDI_DEFINE_OID(WDI_TASK_SEND_REQUEST_ACTION_FRAME)
    WDI_DEFINE_OID(WDI_TASK_SEND_RESPONSE_ACTION_FRAME)
    WDI_DEFINE_OID(WDI_SET_TCP_OFFLOAD_PARAMETERS)
    WDI_DEFINE_OID(WDI_TCP_RSC_STATISTICS)
    WDI_DEFINE_OID(WDI_SET_P2P_WPS_ENABLED)
    WDI_DEFINE_OID(WDI_SET_P2P_START_BACKGROUND_DISCOVERY)
    WDI_DEFINE_OID(WDI_SET_P2P_STOP_BACKGROUND_DISCOVERY)
    WDI_DEFINE_OID(WDI_TASK_IHV)
    WDI_DEFINE_OID(WDI_SET_ENCAPSULATION_OFFLOAD)
    WDI_DEFINE_OID(WDI_SET_END_DWELL_TIME)
    WDI_DEFINE_OID(WDI_SET_FAST_BSS_TRANSITION_PARAMETERS)
    WDI_DEFINE_OID(WDI_SET_NEIGHBOR_REPORT_ENTRIES)
    WDI_DEFINE_OID(WDI_GET_SUPPORTED_DEVICE_SERVICES)
    WDI_DEFINE_OID(WDI_DEVICE_SERVICE_COMMAND)
    WDI_DEFINE_OID(WDI_SET_SAE_AUTH_PARAMS)
    WDI_DEFINE_OID(WDI_TASK_REQUEST_FTM)
    WDI_DEFINE_INDICATION(WDI_INDICATION_DISCONNECT_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_SET_RADIO_STATE_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_DISASSOCIATION)
    WDI_DEFINE_INDICATION(WDI_INDICATION_ROAMING_NEEDED)
    WDI_DEFINE_INDICATION(WDI_INDICATION_LINK_STATE_CHANGE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_P2P_ACTION_FRAME_RECEIVED)
    WDI_DEFINE_INDICATION(WDI_INDICATION_AP_ASSOCIATION_REQUEST_RECEIVED)
    WDI_DEFINE_INDICATION(WDI_INDICATION_NLO_DISCOVERY)
    WDI_DEFINE_INDICATION(WDI_INDICATION_WAKE_REASON)
    WDI_DEFINE_INDICATION(WDI_INDICATION_PMKID_CANDIDATE_LIST_UPDATE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_TKIP_MIC_FAILURE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_ACTION_FRAME_RECEIVED)
    WDI_DEFINE_INDICATION(WDI_INDICATION_SEND_REQUEST_ACTION_FRAME_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_SEND_RESPONSE_ACTION_FRAME_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_SCAN_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_P2P_DISCOVERY_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_BSS_ENTRY_LIST)
    WDI_DEFINE_INDICATION(WDI_INDICATION_DOT11_RESET_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_CONNECT_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_P2P_SEND_REQUEST_ACTION_FRAME_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_P2P_SEND_RESPONSE_ACTION_FRAME_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_RADIO_STATUS)
    WDI_DEFINE_INDICATION(WDI_INDICATION_CREATE_PORT_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_DELETE_PORT_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_START_AP_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_STOP_AP_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_STOP_AP)
    WDI_DEFINE_INDICATION(WDI_INDICATION_CAN_SUSTAIN_AP)
    WDI_DEFINE_INDICATION(WDI_INDICATION_SEND_AP_ASSOCIATION_RESPONSE_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_ASSOCIATION_RESULT)
    WDI_DEFINE_INDICATION(WDI_INDICATION_P2P_GROUP_OPERATING_CHANNEL)
    WDI_DEFINE_INDICATION(WDI_INDICATION_CHANGE_OPERATION_MODE_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_IHV_EVENT)
    WDI_DEFINE_INDICATION(WDI_INDICATION_OPEN_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_CLOSE_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_ROAM_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_ASSOCIATION_PARAMETERS_REQUEST)
    WDI_DEFINE_INDICATION(WDI_INDICATION_TASK_OFFLOAD_CURRENT_CONFIG)
    WDI_DEFINE_INDICATION(WDI_TCP_RSC_STATISTICS)
    WDI_DEFINE_INDICATION(WDI_INDICATION_P2P_OPERATING_CHANNEL_ATTRIBUTES)
    WDI_DEFINE_INDICATION(WDI_INDICATION_IHV_TASK_REQUEST)
    WDI_DEFINE_INDICATION(WDI_INDICATION_IHV_TASK_COMPLETE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_FIRMWARE_STALLED)
    WDI_DEFINE_INDICATION(WDI_INDICATION_FT_ASSOC_PARAMS_NEEDED)
    WDI_DEFINE_INDICATION(WDI_INDICATION_ADAPTER_STATE)
    WDI_DEFINE_INDICATION(WDI_INDICATION_CIPHER_KEY_UPDATED)
    WDI_DEFINE_INDICATION(WDI_INDICATION_DEVICE_SERVICE_EVENT)
    WDI_DEFINE_INDICATION(WDI_INDICATION_SAE_AUTH_PARAMS_NEEDED)
    WDI_DEFINE_INDICATION(WDI_INDICATION_REQUEST_FTM_COMPLETE)
    WDI_DEFINE_OID(WDI_ABORT_TASK)
NDIS_STATUS
Wdi_NdisMRegisterWdiMiniportDriver(
    _In_ PDRIVER_OBJECT DriverObject,
    _In_ PUNICODE_STRING RegistryPath,
    _In_opt_ NDIS_HANDLE MiniportDriverContext,
    _In_ PNDIS_MINIPORT_DRIVER_CHARACTERISTICS MiniportDriverCharacteristics,
    _In_ PNDIS_MINIPORT_DRIVER_WDI_CHARACTERISTICS MiniportWdiCharacteristics,
    _Out_ PNDIS_HANDLE NdisMiniportDriverHandle
    );
VOID
Wdi_NdisMDeregisterWdiMiniportDriver(
    _In_ NDIS_HANDLE NdisMiniportDriverHandle
    );
VOID
Wdi_NdisMOidRequestComplete(
    _In_ NDIS_HANDLE MiniportAdapterHandle,
    _In_ PNDIS_OID_REQUEST Request,
    _In_ NDIS_STATUS Status
    );
EXPORT
VOID
Wdi_NdisMIndicateStatusEx(
    _In_ NDIS_HANDLE MiniportAdapterHandle,
    _In_ PNDIS_STATUS_INDICATION StatusIndication
    );
}
#include <packoff.h>
#endif
#pragma endregion
